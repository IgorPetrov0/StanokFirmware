
stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f38  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009048  08009048  00019048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a4  080091a4  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  080091a4  080091a4  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091a4  080091a4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091a8  080091a8  000191a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  080091ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000354  08009500  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08009500  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001abcf  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e3e  00000000  00000000  0003af4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  0003ed90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  000400c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018efa  00000000  00000000  00041228  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001238c  00000000  00000000  0005a122  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000781dc  00000000  00000000  0006c4ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e468a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000541c  00000000  00000000  000e4708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	08009030 	.word	0x08009030

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	08009030 	.word	0x08009030

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <parseCodeString>:
 */

#include "GParser.h"


void parseCodeString(char *array, char len){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	switch(array[2]){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b47      	cmp	r3, #71	; 0x47
 8001160:	d002      	beq.n	8001168 <parseCodeString+0x1c>
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d00a      	beq.n	800117c <parseCodeString+0x30>
			parseMCode(array+3,len-3);//-3 - это символ G в начале и CRC в конце
			break;
		}
		default:{

			break;
 8001166:	e013      	b.n	8001190 <parseCodeString+0x44>
			parseGCode(array+3,len-3);//-3 - это символ G в начале и CRC в конце
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1cda      	adds	r2, r3, #3
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3b03      	subs	r3, #3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 f80f 	bl	8001198 <parseGCode>
			break;
 800117a:	e009      	b.n	8001190 <parseCodeString+0x44>
			parseMCode(array+3,len-3);//-3 - это символ G в начале и CRC в конце
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1cda      	adds	r2, r3, #3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3b03      	subs	r3, #3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 f9eb 	bl	8001564 <parseMCode>
			break;
 800118e:	bf00      	nop
		}
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <parseGCode>:
//////////////////////////////////////////////////////////////////////
void parseGCode(char *array, char len){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	//в массиве строка в коде ASCII. первые 2 байта команда G, далее аргументы через пробелы

	struct driversComand comand;
	comand.GCode=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
	comand.posX=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	comand.posY=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	comand.posZ=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	comand.F=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	comand.R=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	comand.valid=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	comand.I=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	comand.J=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	char ok=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	float result=0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int pos=-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38

	//читаем номер команды
	int tmp=(int)(array[0]);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 80011e0:	f007 fd6e 	bl	8008cc0 <__locale_ctype_ptr>
 80011e4:	4602      	mov	r2, r0
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 81b0 	beq.w	8001558 <parseGCode+0x3c0>
		comand.GCode=(char)(stringToInt(array,2,&ok)/100);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	461a      	mov	r2, r3
 80011fe:	2102      	movs	r1, #2
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9dd 	bl	80015c0 <stringToInt>
 8001206:	4603      	mov	r3, r0
 8001208:	4a89      	ldr	r2, [pc, #548]	; (8001430 <parseGCode+0x298>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1152      	asrs	r2, r2, #5
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	743b      	strb	r3, [r7, #16]
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}

	//читаем координату Х
	pos = findInString(array,'X',len);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	2158      	movs	r1, #88	; 0x58
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 facd 	bl	80017be <findInString>
 8001224:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d027      	beq.n	800127e <parseGCode+0xe6>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	3301      	adds	r3, #1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001238:	b2db      	uxtb	r3, r3
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f107 020f 	add.w	r2, r7, #15
 8001244:	4619      	mov	r1, r3
 8001246:	f000 f9bb 	bl	80015c0 <stringToInt>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd1d 	bl	8000c8c <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <parseGCode+0xe6>
			comand.posX = result/10;
 800125c:	4975      	ldr	r1, [pc, #468]	; (8001434 <parseGCode+0x29c>)
 800125e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001260:	f7ff fe1c 	bl	8000e9c <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff2a 	bl	80010c0 <__aeabi_f2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	617b      	str	r3, [r7, #20]
			comand.valid |= (1<<0);
 8001270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Y
	pos = findInString(array,'Y',len);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	461a      	mov	r2, r3
 8001282:	2159      	movs	r1, #89	; 0x59
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa9a 	bl	80017be <findInString>
 800128a:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d027      	beq.n	80012e4 <parseGCode+0x14c>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	3301      	adds	r3, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d0      	adds	r0, r2, r3
 800129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 020f 	add.w	r2, r7, #15
 80012aa:	4619      	mov	r1, r3
 80012ac:	f000 f988 	bl	80015c0 <stringToInt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcea 	bl	8000c8c <__aeabi_i2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <parseGCode+0x14c>
			comand.posY = result/10;
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <parseGCode+0x29c>)
 80012c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c6:	f7ff fde9 	bl	8000e9c <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef7 	bl	80010c0 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
			comand.valid |= (1<<1);
 80012d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Z
	pos = findInString(array,'Z',len);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	215a      	movs	r1, #90	; 0x5a
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa67 	bl	80017be <findInString>
 80012f0:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d027      	beq.n	800134a <parseGCode+0x1b2>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80012fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fc:	3301      	adds	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	18d0      	adds	r0, r2, r3
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	b2db      	uxtb	r3, r3
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f107 020f 	add.w	r2, r7, #15
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f955 	bl	80015c0 <stringToInt>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb7 	bl	8000c8c <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <parseGCode+0x1b2>
			comand.posZ = result/10;
 8001328:	4942      	ldr	r1, [pc, #264]	; (8001434 <parseGCode+0x29c>)
 800132a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800132c:	f7ff fdb6 	bl	8000e9c <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec4 	bl	80010c0 <__aeabi_f2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	61fb      	str	r3, [r7, #28]
			comand.valid |= (1<<2);
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем F
	pos = findInString(array,'F',len);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fa34 	bl	80017be <findInString>
 8001356:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d022      	beq.n	80013a6 <parseGCode+0x20e>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	3301      	adds	r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d0      	adds	r0, r2, r3
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b2db      	uxtb	r3, r3
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f107 020f 	add.w	r2, r7, #15
 8001376:	4619      	mov	r1, r3
 8001378:	f000 f922 	bl	80015c0 <stringToInt>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc84 	bl	8000c8c <__aeabi_i2f>
 8001384:	4603      	mov	r3, r0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <parseGCode+0x20e>
			comand.F = result;
 800138e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001390:	f7ff fe96 	bl	80010c0 <__aeabi_f2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	623b      	str	r3, [r7, #32]
			comand.valid |= (1<<3);
 8001398:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем R
	pos = findInString(array,'R',len);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa06 	bl	80017be <findInString>
 80013b2:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d03d      	beq.n	8001438 <parseGCode+0x2a0>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	3301      	adds	r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d0      	adds	r0, r2, r3
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f107 020f 	add.w	r2, r7, #15
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f8f4 	bl	80015c0 <stringToInt>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc56 	bl	8000c8c <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a9 	beq.w	800153e <parseGCode+0x3a6>
			if(result < 0){//радиус не может быть отрицательным
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f2:	f7ff fe3d 	bl	8001070 <__aeabi_fcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <parseGCode+0x272>
				result = 0 - result;
 80013fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	f7ff fb8d 	bl	8000b20 <__aeabi_fsub>
 8001406:	4603      	mov	r3, r0
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			comand.R = result/10;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <parseGCode+0x29c>)
 800140c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800140e:	f7ff fd45 	bl	8000e9c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe53 	bl	80010c0 <__aeabi_f2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
			comand.valid |= (1<<4);
 800141e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800142c:	e087      	b.n	800153e <parseGCode+0x3a6>
 800142e:	bf00      	nop
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	41200000 	.word	0x41200000
		}
	}
	else{
		//читаем I
		pos = findInString(array,'I',len);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	2149      	movs	r1, #73	; 0x49
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9bd 	bl	80017be <findInString>
 8001444:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 8001446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d027      	beq.n	800149e <parseGCode+0x306>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 800144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001450:	3301      	adds	r3, #1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	18d0      	adds	r0, r2, r3
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	b2db      	uxtb	r3, r3
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f107 020f 	add.w	r2, r7, #15
 8001464:	4619      	mov	r1, r3
 8001466:	f000 f8ab 	bl	80015c0 <stringToInt>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc0d 	bl	8000c8c <__aeabi_i2f>
 8001472:	4603      	mov	r3, r0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <parseGCode+0x306>
				comand.I = result/10;
 800147c:	4938      	ldr	r1, [pc, #224]	; (8001560 <parseGCode+0x3c8>)
 800147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001480:	f7ff fd0c 	bl	8000e9c <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe1a 	bl	80010c0 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
				comand.valid |= (1<<5);
 8001490:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}

		//читаем J
		pos = findInString(array,'J',len);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	214a      	movs	r1, #74	; 0x4a
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f98a 	bl	80017be <findInString>
 80014aa:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d027      	beq.n	8001504 <parseGCode+0x36c>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	18d0      	adds	r0, r2, r3
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f107 020f 	add.w	r2, r7, #15
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 f878 	bl	80015c0 <stringToInt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fbda 	bl	8000c8c <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <parseGCode+0x36c>
				comand.J = result/10;
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <parseGCode+0x3c8>)
 80014e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014e6:	f7ff fcd9 	bl	8000e9c <__aeabi_fdiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_f2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				comand.valid |= (1<<6);
 80014f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}
		comand.R=abs(sqrt(comand.I*comand.I + comand.J*comand.J));
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	fb02 f203 	mul.w	r2, r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff6c 	bl	80003f4 <__aeabi_i2d>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	f007 fc82 	bl	8008e2c <sqrt>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	4618      	mov	r0, r3
 800152e:	4621      	mov	r1, r4
 8001530:	f7ff fa7a 	bl	8000a28 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	executeGComand(comand);
 800153e:	466d      	mov	r5, sp
 8001540:	f107 0420 	add.w	r4, r7, #32
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	f000 f995 	bl	8001880 <executeGComand>
 8001556:	e000      	b.n	800155a <parseGCode+0x3c2>
		return;
 8001558:	bf00      	nop
}
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	41200000 	.word	0x41200000

08001564 <parseMCode>:
////////////////////////////////////////////////////////////////////////
void parseMCode(char *array, char len){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	struct MComand comand;
	char ok=0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

	//читаем номер команды
	int tmp=(int)(array[0]);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	617b      	str	r3, [r7, #20]
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 800157a:	f007 fba1 	bl	8008cc0 <__locale_ctype_ptr>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <parseMCode+0x52>
		comand.MCode=(char)(stringToInt(array,2,&ok)/100);
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	461a      	mov	r2, r3
 8001596:	2102      	movs	r1, #2
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f811 	bl	80015c0 <stringToInt>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <parseMCode+0x58>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1152      	asrs	r2, r2, #5
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	743b      	strb	r3, [r7, #16]
		executeMComand(comand);
 80015b0:	7c38      	ldrb	r0, [r7, #16]
 80015b2:	f000 fbab 	bl	8001d0c <executeMComand>
	}
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}
}
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	51eb851f 	.word	0x51eb851f

080015c0 <stringToInt>:
//////////////////////////////////////////////////////////////////////////
int stringToInt(char *string, char len, char *ok){
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08d      	sub	sp, #52	; 0x34
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	460b      	mov	r3, r1
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	72fb      	strb	r3, [r7, #11]
	int endPos=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pointPos=len;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
	int result=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	char minus=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 80015e0:	e042      	b.n	8001668 <stringToInt+0xa8>
		if(isByteDigit(string[endPos]) == 0){
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8d4 	bl	8001798 <isByteDigit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d135      	bne.n	8001662 <stringToInt+0xa2>
			if(string[endPos] == 46){//проверяем на десятичную точку (46 - ASCII код точки)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d10b      	bne.n	800161a <stringToInt+0x5a>
				if(pointPos == len){//если раньше точка не встречалась
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <stringToInt+0x50>
					pointPos=endPos;//то запоминаем позицию
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	e028      	b.n	8001662 <stringToInt+0xa2>
				}
				else{//если на точку уже натыкались, то в строке ошибка
					*ok=0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
					return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e0b1      	b.n	800177e <stringToInt+0x1be>
				}
			}
			else if(string[endPos] == 45){//если минус (45 - ASCII код минуса)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b2d      	cmp	r3, #45	; 0x2d
 8001624:	d10c      	bne.n	8001640 <stringToInt+0x80>
				if(minus != 0){//если минус уже встречался, то в строке ошибка
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <stringToInt+0x78>
					*ok=0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
					return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e0a2      	b.n	800177e <stringToInt+0x1be>
				}
				minus=1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800163e:	e010      	b.n	8001662 <stringToInt+0xa2>
			}
			else if(string[endPos] == 32){//если пробел (32 - ASCII код пробела)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b20      	cmp	r3, #32
 800164a:	d012      	beq.n	8001672 <stringToInt+0xb2>
				break;//то прерываемся
			}
			else if(string[endPos] == 10){//если конец строки (10 - ASCII код конца строки)
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d00e      	beq.n	8001676 <stringToInt+0xb6>
				break;//то прерываемся
			}
			else{//если символ не цифра и не точка, то в строке ошибка
				*ok=0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e08d      	b.n	800177e <stringToInt+0x1be>
	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	3301      	adds	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d1b8      	bne.n	80015e2 <stringToInt+0x22>
 8001670:	e002      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001672:	bf00      	nop
 8001674:	e000      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001676:	bf00      	nop
			}
		}
	}
	if(pointPos==len){//точка в строке так и не встретилась,
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	429a      	cmp	r2, r3
 800167e:	d101      	bne.n	8001684 <stringToInt+0xc4>
		pointPos=endPos;//то её позиция в конце числа
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(endPos!=0){
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d069      	beq.n	800175e <stringToInt+0x19e>
		float multiplier=100;
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <stringToInt+0x1d0>)
 800168c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e025      	b.n	80016e0 <stringToInt+0x120>
			result += (string[n-1]-48)*multiplier;
 8001694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001696:	f7ff faf9 	bl	8000c8c <__aeabi_i2f>
 800169a:	4604      	mov	r4, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faef 	bl	8000c8c <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb3e 	bl	8000d34 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa31 	bl	8000b24 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcfb 	bl	80010c0 <__aeabi_f2iz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=10;
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <stringToInt+0x1d4>)
 80016d0:	69f8      	ldr	r0, [r7, #28]
 80016d2:	f7ff fb2f 	bl	8000d34 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3b01      	subs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d1d4      	bne.n	8001694 <stringToInt+0xd4>
		}

		multiplier=10;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <stringToInt+0x1d4>)
 80016ec:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e02e      	b.n	8001754 <stringToInt+0x194>
			result += (string[n]-48)*multiplier;
 80016f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016f8:	f7ff fac8 	bl	8000c8c <__aeabi_i2f>
 80016fc:	4604      	mov	r4, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b30      	subs	r3, #48	; 0x30
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fabf 	bl	8000c8c <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb0e 	bl	8000d34 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa01 	bl	8000b24 <__addsf3>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fccb 	bl	80010c0 <__aeabi_f2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=0.1;
 800172e:	69f8      	ldr	r0, [r7, #28]
 8001730:	f7fe fe72 	bl	8000418 <__aeabi_f2d>
 8001734:	a314      	add	r3, pc, #80	; (adr r3, 8001788 <stringToInt+0x1c8>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe fec5 	bl	80004c8 <__aeabi_dmul>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	dbcc      	blt.n	80016f6 <stringToInt+0x136>
 800175c:	e004      	b.n	8001768 <stringToInt+0x1a8>
		}
	}
	else{
		*ok=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e00a      	b.n	800177e <stringToInt+0x1be>
	}
	if(minus != 0){
 8001768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <stringToInt+0x1b6>
		result = 0 - result;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	425b      	negs	r3, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*ok=1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	return result;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800177e:	4618      	mov	r0, r3
 8001780:	3734      	adds	r7, #52	; 0x34
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	9999999a 	.word	0x9999999a
 800178c:	3fb99999 	.word	0x3fb99999
 8001790:	42c80000 	.word	0x42c80000
 8001794:	41200000 	.word	0x41200000

08001798 <isByteDigit>:
//////////////////////////////////////////////////////////////////////////////////
char isByteDigit(char byte){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	if((byte >=48) && (byte<=57)){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b2f      	cmp	r3, #47	; 0x2f
 80017a6:	d904      	bls.n	80017b2 <isByteDigit+0x1a>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b39      	cmp	r3, #57	; 0x39
 80017ac:	d801      	bhi.n	80017b2 <isByteDigit+0x1a>
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <isByteDigit+0x1c>
	}
	return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <findInString>:
////////////////////////////////////////////////////////////////////////////////////
int findInString(char *string, char symbol, char len){
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	for(int n=0; n!=len; n++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e00b      	b.n	80017ec <findInString+0x2e>
		if(string[n] == symbol){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <findInString+0x28>
			return n;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e008      	b.n	80017f8 <findInString+0x3a>
	for(int n=0; n!=len; n++){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1ef      	bne.n	80017d4 <findInString+0x16>
		}
	}
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <initDrives>:


#include "drive.h"


void initDrives(){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	positionX=0;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <initDrives+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
	positionY=0;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <initDrives+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	positionZ=0;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <initDrives+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	stepsCounterX=0;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <initDrives+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	stepsCounterY=0;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <initDrives+0x60>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	stepsCounterZ=0;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <initDrives+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	timerDivider=0;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <initDrives+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

	zeroPointX=0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <initDrives+0x6c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
	zeroPointY=0;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <initDrives+0x70>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

	lastF=0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <initDrives+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

	relCoordinates=0;//по умолчанию координаты абсолютные
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <initDrives+0x78>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200005a8 	.word	0x200005a8
 8001858:	200005c8 	.word	0x200005c8
 800185c:	200005a4 	.word	0x200005a4
 8001860:	200005a0 	.word	0x200005a0
 8001864:	200005c0 	.word	0x200005c0
 8001868:	200005b4 	.word	0x200005b4
 800186c:	200005b8 	.word	0x200005b8
 8001870:	200005b0 	.word	0x200005b0
 8001874:	200005f4 	.word	0x200005f4
 8001878:	200005bc 	.word	0x200005bc
 800187c:	200005cc 	.word	0x200005cc

08001880 <executeGComand>:
//////////////////////////////////////////////////////////////////////////////////////
void executeGComand(struct driversComand comand){
 8001880:	b084      	sub	sp, #16
 8001882:	b5b0      	push	{r4, r5, r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	f107 0420 	add.w	r4, r7, #32
 800188c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	currentComand = comand;
 8001890:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <executeGComand+0x254>)
 8001892:	461c      	mov	r4, r3
 8001894:	f107 0520 	add.w	r5, r7, #32
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	6023      	str	r3, [r4, #0]

	if(currentComand.valid & (1<<3)){//если подача валидна,
 80018a4:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <executeGComand+0x254>)
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <executeGComand+0x3a>
		lastF = currentComand.F;//то запоминаем её. В следующей команде подачи может не быть
 80018b2:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <executeGComand+0x254>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4a88      	ldr	r2, [pc, #544]	; (8001ad8 <executeGComand+0x258>)
 80018b8:	6013      	str	r3, [r2, #0]
	}

	//если координаты абсолютные заполняем невалидные параметры текущими значениями
	if(relCoordinates == 0){
 80018ba:	4b88      	ldr	r3, [pc, #544]	; (8001adc <executeGComand+0x25c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d146      	bne.n	8001950 <executeGComand+0xd0>
		if(!(currentComand.valid & (1<<0))){
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <executeGComand+0x254>)
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <executeGComand+0x58>
			currentComand.posX = positionX;
 80018d0:	4b83      	ldr	r3, [pc, #524]	; (8001ae0 <executeGComand+0x260>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <executeGComand+0x254>)
 80018d6:	6053      	str	r3, [r2, #4]
		}
		if(!(currentComand.valid & (1<<1))){
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <executeGComand+0x254>)
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <executeGComand+0x6e>
			currentComand.posY = positionY;
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <executeGComand+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <executeGComand+0x254>)
 80018ec:	6093      	str	r3, [r2, #8]
		}
		if(!(currentComand.valid & (1<<2))){
 80018ee:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <executeGComand+0x254>)
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <executeGComand+0x84>
			currentComand.posZ = positionZ;
 80018fc:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <executeGComand+0x268>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <executeGComand+0x254>)
 8001902:	60d3      	str	r3, [r2, #12]
		}
		if(currentComand.valid & (1<<5)){//если I валидна, то преобразуем ее в абсолютные координаты
 8001904:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <executeGComand+0x254>)
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <executeGComand+0xa2>
			currentComand.I = positionX + currentComand.I;
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <executeGComand+0x254>)
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <executeGComand+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a6d      	ldr	r2, [pc, #436]	; (8001ad4 <executeGComand+0x254>)
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	e003      	b.n	800192a <executeGComand+0xaa>
		}
		else{
			currentComand.I = positionX;//иначе просто присваиваем позицию Х
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <executeGComand+0x260>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <executeGComand+0x254>)
 8001928:	6193      	str	r3, [r2, #24]
		}
		if(currentComand.valid & (1<<6)){//если J валидна, то преобразуем ее в абсолютные координаты
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <executeGComand+0x254>)
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <executeGComand+0xc8>
			currentComand.J = positionY + currentComand.J;
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <executeGComand+0x254>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <executeGComand+0x264>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a64      	ldr	r2, [pc, #400]	; (8001ad4 <executeGComand+0x254>)
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	e003      	b.n	8001950 <executeGComand+0xd0>
		}
		else{
			currentComand.J = positionY;//иначе просто присваиваем позицию Y
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <executeGComand+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a61      	ldr	r2, [pc, #388]	; (8001ad4 <executeGComand+0x254>)
 800194e:	61d3      	str	r3, [r2, #28]
		}
	}

	//одно прерывание таймера = 0.000 025 С
	float F=(float)lastF/100;
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <executeGComand+0x258>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f999 	bl	8000c8c <__aeabi_i2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4963      	ldr	r1, [pc, #396]	; (8001aec <executeGComand+0x26c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa9c 	bl	8000e9c <__aeabi_fdiv>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
	float periodPerStep=1/(1/F/200);
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800196e:	f7ff fa95 	bl	8000e9c <__aeabi_fdiv>
 8001972:	4603      	mov	r3, r0
 8001974:	495e      	ldr	r1, [pc, #376]	; (8001af0 <executeGComand+0x270>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa90 	bl	8000e9c <__aeabi_fdiv>
 800197c:	4603      	mov	r3, r0
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001984:	f7ff fa8a 	bl	8000e9c <__aeabi_fdiv>
 8001988:	4603      	mov	r3, r0
 800198a:	60bb      	str	r3, [r7, #8]
	timerDivider=40000/periodPerStep;
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4859      	ldr	r0, [pc, #356]	; (8001af4 <executeGComand+0x274>)
 8001990:	f7ff fa84 	bl	8000e9c <__aeabi_fdiv>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbb8 	bl	800110c <__aeabi_f2uiz>
 800199c:	4602      	mov	r2, r0
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <executeGComand+0x278>)
 80019a0:	601a      	str	r2, [r3, #0]

	switch(currentComand.GCode){
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <executeGComand+0x254>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	f000 80e5 	beq.w	8001b76 <executeGComand+0x2f6>
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	dc07      	bgt.n	80019c0 <executeGComand+0x140>
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d047      	beq.n	8001a44 <executeGComand+0x1c4>
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f300 80ad 	bgt.w	8001b14 <executeGComand+0x294>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <executeGComand+0x160>
			relCoordinates = 1;
			comandExecuted();
			break;
		}
	}
}
 80019be:	e126      	b.n	8001c0e <executeGComand+0x38e>
	switch(currentComand.GCode){
 80019c0:	2b5a      	cmp	r3, #90	; 0x5a
 80019c2:	f000 8118 	beq.w	8001bf6 <executeGComand+0x376>
 80019c6:	2b5a      	cmp	r3, #90	; 0x5a
 80019c8:	dc03      	bgt.n	80019d2 <executeGComand+0x152>
 80019ca:	2b1c      	cmp	r3, #28
 80019cc:	f000 8104 	beq.w	8001bd8 <executeGComand+0x358>
}
 80019d0:	e11d      	b.n	8001c0e <executeGComand+0x38e>
	switch(currentComand.GCode){
 80019d2:	2b5b      	cmp	r3, #91	; 0x5b
 80019d4:	f000 8115 	beq.w	8001c02 <executeGComand+0x382>
 80019d8:	2b5c      	cmp	r3, #92	; 0x5c
 80019da:	f000 8100 	beq.w	8001bde <executeGComand+0x35e>
}
 80019de:	e116      	b.n	8001c0e <executeGComand+0x38e>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <executeGComand+0x25c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <executeGComand+0x192>
				currentComand.posX = currentComand.posX + positionX;
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <executeGComand+0x254>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <executeGComand+0x260>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <executeGComand+0x254>)
 80019f4:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <executeGComand+0x254>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <executeGComand+0x264>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <executeGComand+0x254>)
 8001a02:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <executeGComand+0x254>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <executeGComand+0x268>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <executeGComand+0x254>)
 8001a10:	60d3      	str	r3, [r2, #12]
			stepsCounterX = currentComand.posX - positionX;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <executeGComand+0x254>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <executeGComand+0x260>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a37      	ldr	r2, [pc, #220]	; (8001afc <executeGComand+0x27c>)
 8001a1e:	6013      	str	r3, [r2, #0]
			stepsCounterY = currentComand.posY - positionY;
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <executeGComand+0x254>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <executeGComand+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <executeGComand+0x280>)
 8001a2c:	6013      	str	r3, [r2, #0]
			stepsCounterZ = currentComand.posZ - positionZ;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <executeGComand+0x254>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <executeGComand+0x268>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <executeGComand+0x284>)
 8001a3a:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001a3c:	4832      	ldr	r0, [pc, #200]	; (8001b08 <executeGComand+0x288>)
 8001a3e:	f003 fc33 	bl	80052a8 <HAL_TIM_Base_Start_IT>
			break;
 8001a42:	e0e4      	b.n	8001c0e <executeGComand+0x38e>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <executeGComand+0x25c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d014      	beq.n	8001a76 <executeGComand+0x1f6>
				currentComand.posX = currentComand.posX + positionX;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <executeGComand+0x254>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <executeGComand+0x260>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <executeGComand+0x254>)
 8001a58:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <executeGComand+0x254>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <executeGComand+0x264>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <executeGComand+0x254>)
 8001a66:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <executeGComand+0x254>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <executeGComand+0x268>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <executeGComand+0x254>)
 8001a74:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<2)){//если Z валидна,
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <executeGComand+0x254>)
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <executeGComand+0x220>
				int difZ=positionZ-currentComand.posZ;//то задаем для нее количество шагов
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <executeGComand+0x268>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <executeGComand+0x254>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	607b      	str	r3, [r7, #4]
				stepsCounterZ=difZ*10;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <executeGComand+0x284>)
 8001a9e:	601a      	str	r2, [r3, #0]
			if((currentComand.valid & (1<<0)) || (currentComand.valid & (1<<1))){//если х или у валидны
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <executeGComand+0x254>)
 8001aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d106      	bne.n	8001abc <executeGComand+0x23c>
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <executeGComand+0x254>)
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <executeGComand+0x24c>
					zeroPointX = positionX;
 8001abc:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <executeGComand+0x260>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <executeGComand+0x28c>)
 8001ac2:	6013      	str	r3, [r2, #0]
					zeroPointY = positionY;
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <executeGComand+0x264>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <executeGComand+0x290>)
 8001aca:	6013      	str	r3, [r2, #0]
			calcInterpolation();//считаем интерполяцию
 8001acc:	f000 f8b4 	bl	8001c38 <calcInterpolation>
			break;
 8001ad0:	e09d      	b.n	8001c0e <executeGComand+0x38e>
 8001ad2:	bf00      	nop
 8001ad4:	200005d0 	.word	0x200005d0
 8001ad8:	200005bc 	.word	0x200005bc
 8001adc:	200005cc 	.word	0x200005cc
 8001ae0:	200005a8 	.word	0x200005a8
 8001ae4:	200005c8 	.word	0x200005c8
 8001ae8:	200005a4 	.word	0x200005a4
 8001aec:	42c80000 	.word	0x42c80000
 8001af0:	43480000 	.word	0x43480000
 8001af4:	471c4000 	.word	0x471c4000
 8001af8:	200005b8 	.word	0x200005b8
 8001afc:	200005a0 	.word	0x200005a0
 8001b00:	200005c0 	.word	0x200005c0
 8001b04:	200005b4 	.word	0x200005b4
 8001b08:	200006fc 	.word	0x200006fc
 8001b0c:	200005b0 	.word	0x200005b0
 8001b10:	200005f4 	.word	0x200005f4
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b14:	4b41      	ldr	r3, [pc, #260]	; (8001c1c <executeGComand+0x39c>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <executeGComand+0x2c6>
				currentComand.posX = currentComand.posX + positionX;
 8001b1c:	4b40      	ldr	r3, [pc, #256]	; (8001c20 <executeGComand+0x3a0>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <executeGComand+0x3a4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a3e      	ldr	r2, [pc, #248]	; (8001c20 <executeGComand+0x3a0>)
 8001b28:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b2a:	4b3d      	ldr	r3, [pc, #244]	; (8001c20 <executeGComand+0x3a0>)
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <executeGComand+0x3a8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a3a      	ldr	r2, [pc, #232]	; (8001c20 <executeGComand+0x3a0>)
 8001b36:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <executeGComand+0x3a0>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b3b      	ldr	r3, [pc, #236]	; (8001c2c <executeGComand+0x3ac>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a37      	ldr	r2, [pc, #220]	; (8001c20 <executeGComand+0x3a0>)
 8001b44:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001b46:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <executeGComand+0x3a0>)
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <executeGComand+0x2f0>
				vPosX = positionX - currentComand.I;
 8001b54:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <executeGComand+0x3a4>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b31      	ldr	r3, [pc, #196]	; (8001c20 <executeGComand+0x3a0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <executeGComand+0x3b0>)
 8001b60:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <executeGComand+0x3a8>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b2e      	ldr	r3, [pc, #184]	; (8001c20 <executeGComand+0x3a0>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4a31      	ldr	r2, [pc, #196]	; (8001c34 <executeGComand+0x3b4>)
 8001b6e:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001b70:	f000 f862 	bl	8001c38 <calcInterpolation>
			break;
 8001b74:	e04b      	b.n	8001c0e <executeGComand+0x38e>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b76:	4b29      	ldr	r3, [pc, #164]	; (8001c1c <executeGComand+0x39c>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d014      	beq.n	8001ba8 <executeGComand+0x328>
				currentComand.posX = currentComand.posX + positionX;
 8001b7e:	4b28      	ldr	r3, [pc, #160]	; (8001c20 <executeGComand+0x3a0>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4b28      	ldr	r3, [pc, #160]	; (8001c24 <executeGComand+0x3a4>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a25      	ldr	r2, [pc, #148]	; (8001c20 <executeGComand+0x3a0>)
 8001b8a:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b8c:	4b24      	ldr	r3, [pc, #144]	; (8001c20 <executeGComand+0x3a0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <executeGComand+0x3a8>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a22      	ldr	r2, [pc, #136]	; (8001c20 <executeGComand+0x3a0>)
 8001b98:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	; (8001c20 <executeGComand+0x3a0>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b23      	ldr	r3, [pc, #140]	; (8001c2c <executeGComand+0x3ac>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a1e      	ldr	r2, [pc, #120]	; (8001c20 <executeGComand+0x3a0>)
 8001ba6:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <executeGComand+0x3a0>)
 8001baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <executeGComand+0x352>
				vPosX = positionX - currentComand.I;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <executeGComand+0x3a4>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <executeGComand+0x3a0>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <executeGComand+0x3b0>)
 8001bc2:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001bc4:	4b18      	ldr	r3, [pc, #96]	; (8001c28 <executeGComand+0x3a8>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <executeGComand+0x3a0>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a19      	ldr	r2, [pc, #100]	; (8001c34 <executeGComand+0x3b4>)
 8001bd0:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001bd2:	f000 f831 	bl	8001c38 <calcInterpolation>
			break;
 8001bd6:	e01a      	b.n	8001c0e <executeGComand+0x38e>
			calcInterpolation();
 8001bd8:	f000 f82e 	bl	8001c38 <calcInterpolation>
			break;
 8001bdc:	e017      	b.n	8001c0e <executeGComand+0x38e>
			positionX=0;
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <executeGComand+0x3a4>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
			positionY=0;
 8001be4:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <executeGComand+0x3a8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
			positionZ=0;
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <executeGComand+0x3ac>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
			comandExecuted();
 8001bf0:	f000 fc02 	bl	80023f8 <comandExecuted>
			break;
 8001bf4:	e00b      	b.n	8001c0e <executeGComand+0x38e>
			relCoordinates = 0;
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <executeGComand+0x39c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001bfc:	f000 fbfc 	bl	80023f8 <comandExecuted>
			break;
 8001c00:	e005      	b.n	8001c0e <executeGComand+0x38e>
			relCoordinates = 1;
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <executeGComand+0x39c>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001c08:	f000 fbf6 	bl	80023f8 <comandExecuted>
			break;
 8001c0c:	bf00      	nop
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c18:	b004      	add	sp, #16
 8001c1a:	4770      	bx	lr
 8001c1c:	200005cc 	.word	0x200005cc
 8001c20:	200005d0 	.word	0x200005d0
 8001c24:	200005a8 	.word	0x200005a8
 8001c28:	200005c8 	.word	0x200005c8
 8001c2c:	200005a4 	.word	0x200005a4
 8001c30:	200005ac 	.word	0x200005ac
 8001c34:	200005c4 	.word	0x200005c4

08001c38 <calcInterpolation>:
////////////////////////////////////////////////////////////////////////////////////////
void calcInterpolation(){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0

	switch(currentComand.GCode){
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <calcInterpolation+0xc8>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b1c      	cmp	r3, #28
 8001c42:	d858      	bhi.n	8001cf6 <calcInterpolation+0xbe>
 8001c44:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <calcInterpolation+0x14>)
 8001c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4a:	bf00      	nop
 8001c4c:	08001cc1 	.word	0x08001cc1
 8001c50:	08001cdf 	.word	0x08001cdf
 8001c54:	08001ce5 	.word	0x08001ce5
 8001c58:	08001ceb 	.word	0x08001ceb
 8001c5c:	08001cf7 	.word	0x08001cf7
 8001c60:	08001cf7 	.word	0x08001cf7
 8001c64:	08001cf7 	.word	0x08001cf7
 8001c68:	08001cf7 	.word	0x08001cf7
 8001c6c:	08001cf7 	.word	0x08001cf7
 8001c70:	08001cf7 	.word	0x08001cf7
 8001c74:	08001cf7 	.word	0x08001cf7
 8001c78:	08001cf7 	.word	0x08001cf7
 8001c7c:	08001cf7 	.word	0x08001cf7
 8001c80:	08001cf7 	.word	0x08001cf7
 8001c84:	08001cf7 	.word	0x08001cf7
 8001c88:	08001cf7 	.word	0x08001cf7
 8001c8c:	08001cf7 	.word	0x08001cf7
 8001c90:	08001cf7 	.word	0x08001cf7
 8001c94:	08001cf7 	.word	0x08001cf7
 8001c98:	08001cf7 	.word	0x08001cf7
 8001c9c:	08001cf7 	.word	0x08001cf7
 8001ca0:	08001cf7 	.word	0x08001cf7
 8001ca4:	08001cf7 	.word	0x08001cf7
 8001ca8:	08001cf7 	.word	0x08001cf7
 8001cac:	08001cf7 	.word	0x08001cf7
 8001cb0:	08001cf7 	.word	0x08001cf7
 8001cb4:	08001cf7 	.word	0x08001cf7
 8001cb8:	08001cf7 	.word	0x08001cf7
 8001cbc:	08001cf1 	.word	0x08001cf1
		case(0):{
			if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <calcInterpolation+0xc8>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <calcInterpolation+0xcc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d116      	bne.n	8001cfa <calcInterpolation+0xc2>
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <calcInterpolation+0xc8>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <calcInterpolation+0xd0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d110      	bne.n	8001cfa <calcInterpolation+0xc2>
				comandExecuted();
 8001cd8:	f000 fb8e 	bl	80023f8 <comandExecuted>
				return;
 8001cdc:	e00e      	b.n	8001cfc <calcInterpolation+0xc4>
			}
			break;
		}
		case(1):{//линейное перемещение
			lineInterpolacion();
 8001cde:	f000 f86d 	bl	8001dbc <lineInterpolacion>
			break;
 8001ce2:	e00b      	b.n	8001cfc <calcInterpolation+0xc4>
		}
		case(2):{//круговая интерполяция по часовой стрелке
			cwCicleInterpolation();
 8001ce4:	f000 f940 	bl	8001f68 <cwCicleInterpolation>
			break;
 8001ce8:	e008      	b.n	8001cfc <calcInterpolation+0xc4>
		}
		case(3):{//круговая интерполяция против часосвой стрелки
			ccwCicleInterpolation();
 8001cea:	f000 fa35 	bl	8002158 <ccwCicleInterpolation>
			break;
 8001cee:	e005      	b.n	8001cfc <calcInterpolation+0xc4>
		}
		case(28):{//перемещение до сработки концевиков
			moveToZero();
 8001cf0:	f000 fb2a 	bl	8002348 <moveToZero>
			break;
 8001cf4:	e002      	b.n	8001cfc <calcInterpolation+0xc4>
		}
		default:{
			return;//todo потом сделать обработку ошибки
 8001cf6:	bf00      	nop
 8001cf8:	e000      	b.n	8001cfc <calcInterpolation+0xc4>
			break;
 8001cfa:	bf00      	nop
		}
	}
}
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	200005d0 	.word	0x200005d0
 8001d04:	200005a8 	.word	0x200005a8
 8001d08:	200005c8 	.word	0x200005c8

08001d0c <executeMComand>:
////////////////////////////////////////////////////////////////////////////////////
void executeMComand(struct MComand comand){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	7138      	strb	r0, [r7, #4]
	switch(comand.MCode){
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	2b12      	cmp	r3, #18
 8001d18:	d000      	beq.n	8001d1c <executeMComand+0x10>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
			comandExecuted();
			break;
		}
	}
}
 8001d1a:	e046      	b.n	8001daa <executeMComand+0x9e>
			HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d22:	4824      	ldr	r0, [pc, #144]	; (8001db4 <executeMComand+0xa8>)
 8001d24:	f001 fe83 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d2e:	4821      	ldr	r0, [pc, #132]	; (8001db4 <executeMComand+0xa8>)
 8001d30:	f001 fe7d 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8001d34:	2200      	movs	r2, #0
 8001d36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3a:	481e      	ldr	r0, [pc, #120]	; (8001db4 <executeMComand+0xa8>)
 8001d3c:	f001 fe77 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8001d40:	2200      	movs	r2, #0
 8001d42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d46:	481b      	ldr	r0, [pc, #108]	; (8001db4 <executeMComand+0xa8>)
 8001d48:	f001 fe71 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	4818      	ldr	r0, [pc, #96]	; (8001db4 <executeMComand+0xa8>)
 8001d52:	f001 fe6c 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5c:	4816      	ldr	r0, [pc, #88]	; (8001db8 <executeMComand+0xac>)
 8001d5e:	f001 fe66 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2110      	movs	r1, #16
 8001d66:	4813      	ldr	r0, [pc, #76]	; (8001db4 <executeMComand+0xa8>)
 8001d68:	f001 fe61 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2108      	movs	r1, #8
 8001d70:	4810      	ldr	r0, [pc, #64]	; (8001db4 <executeMComand+0xa8>)
 8001d72:	f001 fe5c 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8001d76:	2200      	movs	r2, #0
 8001d78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d7c:	480e      	ldr	r0, [pc, #56]	; (8001db8 <executeMComand+0xac>)
 8001d7e:	f001 fe56 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d88:	480b      	ldr	r0, [pc, #44]	; (8001db8 <executeMComand+0xac>)
 8001d8a:	f001 fe50 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	4808      	ldr	r0, [pc, #32]	; (8001db4 <executeMComand+0xa8>)
 8001d94:	f001 fe4b 	bl	8003a2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	4806      	ldr	r0, [pc, #24]	; (8001db8 <executeMComand+0xac>)
 8001da0:	f001 fe45 	bl	8003a2e <HAL_GPIO_WritePin>
			comandExecuted();
 8001da4:	f000 fb28 	bl	80023f8 <comandExecuted>
			break;
 8001da8:	bf00      	nop
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40010800 	.word	0x40010800

08001dbc <lineInterpolacion>:
////////////////////////////////////////////////////////////////////////////////////
void lineInterpolacion(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) &&
 8001dc2:	4b60      	ldr	r3, [pc, #384]	; (8001f44 <lineInterpolacion+0x188>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b60      	ldr	r3, [pc, #384]	; (8001f48 <lineInterpolacion+0x18c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d10e      	bne.n	8001dec <lineInterpolacion+0x30>
			(positionY == currentComand.posY) &&
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <lineInterpolacion+0x188>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b5e      	ldr	r3, [pc, #376]	; (8001f4c <lineInterpolacion+0x190>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
	if((positionX == currentComand.posX) &&
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d108      	bne.n	8001dec <lineInterpolacion+0x30>
			(positionZ == currentComand.posZ)){//если пришли в заданную позицию, то ничего не делаем
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <lineInterpolacion+0x188>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <lineInterpolacion+0x194>)
 8001de0:	681b      	ldr	r3, [r3, #0]
			(positionY == currentComand.posY) &&
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d102      	bne.n	8001dec <lineInterpolacion+0x30>
		comandExecuted();
 8001de6:	f000 fb07 	bl	80023f8 <comandExecuted>
		return;
 8001dea:	e0a7      	b.n	8001f3c <lineInterpolacion+0x180>
	}

	int offsetX = zeroPointX - positionX;
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <lineInterpolacion+0x198>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b55      	ldr	r3, [pc, #340]	; (8001f48 <lineInterpolacion+0x18c>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001df8:	4b57      	ldr	r3, [pc, #348]	; (8001f58 <lineInterpolacion+0x19c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <lineInterpolacion+0x190>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	613b      	str	r3, [r7, #16]
	int vectorX = currentComand.posX - positionX;
 8001e04:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <lineInterpolacion+0x188>)
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <lineInterpolacion+0x18c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	60fb      	str	r3, [r7, #12]
	int vectorY = currentComand.posY - positionY;
 8001e10:	4b4c      	ldr	r3, [pc, #304]	; (8001f44 <lineInterpolacion+0x188>)
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <lineInterpolacion+0x190>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	60bb      	str	r3, [r7, #8]

	int F = (abs(offsetY) * abs(vectorX) - (abs(offsetX) * abs(vectorY)));//оценочная функция
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	bfb8      	it	lt
 8001e22:	425b      	neglt	r3, r3
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	2a00      	cmp	r2, #0
 8001e28:	bfb8      	it	lt
 8001e2a:	4252      	neglt	r2, r2
 8001e2c:	fb02 f203 	mul.w	r2, r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bfb8      	it	lt
 8001e36:	425b      	neglt	r3, r3
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	2900      	cmp	r1, #0
 8001e3c:	bfb8      	it	lt
 8001e3e:	4249      	neglt	r1, r1
 8001e40:	fb01 f303 	mul.w	r3, r1, r3
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	607b      	str	r3, [r7, #4]
	if(F == 0){
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d124      	bne.n	8001e98 <lineInterpolacion+0xdc>
		if(vectorX > 0){
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	dd03      	ble.n	8001e5c <lineInterpolacion+0xa0>
			stepsCounterX = 1;
 8001e54:	4b41      	ldr	r3, [pc, #260]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001e56:	2201      	movs	r2, #1
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	e00a      	b.n	8001e72 <lineInterpolacion+0xb6>
		}
		else if(vectorX < 0){
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da04      	bge.n	8001e6c <lineInterpolacion+0xb0>
			stepsCounterX = -1;
 8001e62:	4b3e      	ldr	r3, [pc, #248]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e002      	b.n	8001e72 <lineInterpolacion+0xb6>
		}
		else{
			stepsCounterX = 0;
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
		}
		if(vectorY > 0){
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dd03      	ble.n	8001e80 <lineInterpolacion+0xc4>
			stepsCounterY = 1;
 8001e78:	4b39      	ldr	r3, [pc, #228]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e05a      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else if(vectorY < 0){
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da04      	bge.n	8001e90 <lineInterpolacion+0xd4>
			stepsCounterY = -1;
 8001e86:	4b36      	ldr	r3, [pc, #216]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e052      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else{
			stepsCounterY = 0;
 8001e90:	4b33      	ldr	r3, [pc, #204]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e04e      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
	}
	else if(F > 0){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	dd24      	ble.n	8001ee8 <lineInterpolacion+0x12c>
		if(vectorX > 0){
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd03      	ble.n	8001eac <lineInterpolacion+0xf0>
			stepsCounterX = 1;
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e044      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else if(vectorX < 0){
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da04      	bge.n	8001ebc <lineInterpolacion+0x100>
			stepsCounterX = -1;
 8001eb2:	4b2a      	ldr	r3, [pc, #168]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e03c      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else{
			stepsCounterX = 0;
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
			if(vectorY > 0){
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	dd03      	ble.n	8001ed0 <lineInterpolacion+0x114>
				stepsCounterY = 1;
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e032      	b.n	8001f36 <lineInterpolacion+0x17a>
			}
			else if(vectorY < 0){
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	da04      	bge.n	8001ee0 <lineInterpolacion+0x124>
				stepsCounterY = -1;
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	e02a      	b.n	8001f36 <lineInterpolacion+0x17a>
			}
			else{
				stepsCounterY = 0;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	e026      	b.n	8001f36 <lineInterpolacion+0x17a>
			}
		}
	}
	else if(F < 0){
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	da23      	bge.n	8001f36 <lineInterpolacion+0x17a>
		if(vectorY > 0){
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	dd03      	ble.n	8001efc <lineInterpolacion+0x140>
			stepsCounterY = 1;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e01c      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else if(vectorY < 0){
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	da04      	bge.n	8001f0c <lineInterpolacion+0x150>
			stepsCounterY = -1;
 8001f02:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e014      	b.n	8001f36 <lineInterpolacion+0x17a>
		}
		else{
			stepsCounterY = 0;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <lineInterpolacion+0x1a4>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
			if(vectorX > 0){
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	dd03      	ble.n	8001f20 <lineInterpolacion+0x164>
				stepsCounterX = 1;
 8001f18:	4b10      	ldr	r3, [pc, #64]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	e00a      	b.n	8001f36 <lineInterpolacion+0x17a>
			}
			else if(vectorX < 0){
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da04      	bge.n	8001f30 <lineInterpolacion+0x174>
				stepsCounterX = -1;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	e002      	b.n	8001f36 <lineInterpolacion+0x17a>
			}
			else{
				stepsCounterX = 0;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <lineInterpolacion+0x1a0>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
			}
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 8001f36:	480b      	ldr	r0, [pc, #44]	; (8001f64 <lineInterpolacion+0x1a8>)
 8001f38:	f003 f9b6 	bl	80052a8 <HAL_TIM_Base_Start_IT>
}
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200005d0 	.word	0x200005d0
 8001f48:	200005a8 	.word	0x200005a8
 8001f4c:	200005c8 	.word	0x200005c8
 8001f50:	200005a4 	.word	0x200005a4
 8001f54:	200005b0 	.word	0x200005b0
 8001f58:	200005f4 	.word	0x200005f4
 8001f5c:	200005a0 	.word	0x200005a0
 8001f60:	200005c0 	.word	0x200005c0
 8001f64:	200006fc 	.word	0x200006fc

08001f68 <cwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void cwCicleInterpolation(){
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001f6e:	4b72      	ldr	r3, [pc, #456]	; (8002138 <cwCicleInterpolation+0x1d0>)
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <cwCicleInterpolation+0x1d4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d108      	bne.n	8001f8c <cwCicleInterpolation+0x24>
 8001f7a:	4b6f      	ldr	r3, [pc, #444]	; (8002138 <cwCicleInterpolation+0x1d0>)
 8001f7c:	689a      	ldr	r2, [r3, #8]
 8001f7e:	4b70      	ldr	r3, [pc, #448]	; (8002140 <cwCicleInterpolation+0x1d8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d102      	bne.n	8001f8c <cwCicleInterpolation+0x24>
		comandExecuted();
 8001f86:	f000 fa37 	bl	80023f8 <comandExecuted>
		return;
 8001f8a:	e0d2      	b.n	8002132 <cwCicleInterpolation+0x1ca>
	}

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001f8c:	4b6d      	ldr	r3, [pc, #436]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a6c      	ldr	r2, [pc, #432]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fb02 f203 	mul.w	r2, r2, r3
 8001f98:	4b6b      	ldr	r3, [pc, #428]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	496a      	ldr	r1, [pc, #424]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8001f9e:	6809      	ldr	r1, [r1, #0]
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	441a      	add	r2, r3
 8001fa6:	4b64      	ldr	r3, [pc, #400]	; (8002138 <cwCicleInterpolation+0x1d0>)
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	4963      	ldr	r1, [pc, #396]	; (8002138 <cwCicleInterpolation+0x1d0>)
 8001fac:	6949      	ldr	r1, [r1, #20]
 8001fae:	fb01 f303 	mul.w	r3, r1, r3
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	607b      	str	r3, [r7, #4]
																		//контролируется на этапе парсинга
	if(F >= 0){//если на окружности или за ней
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db53      	blt.n	8002064 <cwCicleInterpolation+0xfc>

		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001fbc:	4b61      	ldr	r3, [pc, #388]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	dd08      	ble.n	8001fd6 <cwCicleInterpolation+0x6e>
 8001fc4:	4b60      	ldr	r3, [pc, #384]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	dd04      	ble.n	8001fd6 <cwCicleInterpolation+0x6e>
			stepsCounterY = -1;
 8001fcc:	4b5f      	ldr	r3, [pc, #380]	; (800214c <cwCicleInterpolation+0x1e4>)
 8001fce:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e09c      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	dd08      	ble.n	8001ff0 <cwCicleInterpolation+0x88>
 8001fde:	4b5a      	ldr	r3, [pc, #360]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da04      	bge.n	8001ff0 <cwCicleInterpolation+0x88>
			stepsCounterX = -1;
 8001fe6:	4b5a      	ldr	r3, [pc, #360]	; (8002150 <cwCicleInterpolation+0x1e8>)
 8001fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e08f      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001ff0:	4b54      	ldr	r3, [pc, #336]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	da07      	bge.n	8002008 <cwCicleInterpolation+0xa0>
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	da03      	bge.n	8002008 <cwCicleInterpolation+0xa0>
			stepsCounterY = 1;
 8002000:	4b52      	ldr	r3, [pc, #328]	; (800214c <cwCicleInterpolation+0x1e4>)
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	e083      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8002008:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <cwCicleInterpolation+0x1dc>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	da07      	bge.n	8002020 <cwCicleInterpolation+0xb8>
 8002010:	4b4d      	ldr	r3, [pc, #308]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	dd03      	ble.n	8002020 <cwCicleInterpolation+0xb8>
			stepsCounterX = 1;
 8002018:	4b4d      	ldr	r3, [pc, #308]	; (8002150 <cwCicleInterpolation+0x1e8>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	e077      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else{
			if(vPosY > 0){
 8002020:	4b49      	ldr	r3, [pc, #292]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	dd04      	ble.n	8002032 <cwCicleInterpolation+0xca>
				stepsCounterY = -1;
 8002028:	4b48      	ldr	r3, [pc, #288]	; (800214c <cwCicleInterpolation+0x1e4>)
 800202a:	f04f 32ff 	mov.w	r2, #4294967295
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e06e      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosY < 0){
 8002032:	4b45      	ldr	r3, [pc, #276]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	da03      	bge.n	8002042 <cwCicleInterpolation+0xda>
				stepsCounterY = 1;
 800203a:	4b44      	ldr	r3, [pc, #272]	; (800214c <cwCicleInterpolation+0x1e4>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e066      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX > 0){
 8002042:	4b40      	ldr	r3, [pc, #256]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	dd04      	ble.n	8002054 <cwCicleInterpolation+0xec>
				stepsCounterX = -1;
 800204a:	4b41      	ldr	r3, [pc, #260]	; (8002150 <cwCicleInterpolation+0x1e8>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e05d      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX < 0){
 8002054:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	da59      	bge.n	8002110 <cwCicleInterpolation+0x1a8>
				stepsCounterX = 1;
 800205c:	4b3c      	ldr	r3, [pc, #240]	; (8002150 <cwCicleInterpolation+0x1e8>)
 800205e:	2201      	movs	r2, #1
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e055      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
		}
	}
	else if(F < 0){//если внутри окружности
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	da52      	bge.n	8002110 <cwCicleInterpolation+0x1a8>
		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800206a:	4b36      	ldr	r3, [pc, #216]	; (8002144 <cwCicleInterpolation+0x1dc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b00      	cmp	r3, #0
 8002070:	dd07      	ble.n	8002082 <cwCicleInterpolation+0x11a>
 8002072:	4b35      	ldr	r3, [pc, #212]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	dd03      	ble.n	8002082 <cwCicleInterpolation+0x11a>
			stepsCounterX = 1;
 800207a:	4b35      	ldr	r3, [pc, #212]	; (8002150 <cwCicleInterpolation+0x1e8>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	e046      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002082:	4b30      	ldr	r3, [pc, #192]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	dd08      	ble.n	800209c <cwCicleInterpolation+0x134>
 800208a:	4b2f      	ldr	r3, [pc, #188]	; (8002148 <cwCicleInterpolation+0x1e0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	da04      	bge.n	800209c <cwCicleInterpolation+0x134>
			stepsCounterY = -1;
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <cwCicleInterpolation+0x1e4>)
 8002094:	f04f 32ff 	mov.w	r2, #4294967295
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	e039      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800209c:	4b29      	ldr	r3, [pc, #164]	; (8002144 <cwCicleInterpolation+0x1dc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	da08      	bge.n	80020b6 <cwCicleInterpolation+0x14e>
 80020a4:	4b28      	ldr	r3, [pc, #160]	; (8002148 <cwCicleInterpolation+0x1e0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da04      	bge.n	80020b6 <cwCicleInterpolation+0x14e>
			stepsCounterX = -1;
 80020ac:	4b28      	ldr	r3, [pc, #160]	; (8002150 <cwCicleInterpolation+0x1e8>)
 80020ae:	f04f 32ff 	mov.w	r2, #4294967295
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e02c      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80020b6:	4b23      	ldr	r3, [pc, #140]	; (8002144 <cwCicleInterpolation+0x1dc>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	da07      	bge.n	80020ce <cwCicleInterpolation+0x166>
 80020be:	4b22      	ldr	r3, [pc, #136]	; (8002148 <cwCicleInterpolation+0x1e0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dd03      	ble.n	80020ce <cwCicleInterpolation+0x166>
			stepsCounterY = 1;
 80020c6:	4b21      	ldr	r3, [pc, #132]	; (800214c <cwCicleInterpolation+0x1e4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e020      	b.n	8002110 <cwCicleInterpolation+0x1a8>
		}
		else{
			if(vPosY > 0){
 80020ce:	4b1e      	ldr	r3, [pc, #120]	; (8002148 <cwCicleInterpolation+0x1e0>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	dd03      	ble.n	80020de <cwCicleInterpolation+0x176>
				stepsCounterX = 1;
 80020d6:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <cwCicleInterpolation+0x1e8>)
 80020d8:	2201      	movs	r2, #1
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	e018      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosY < 0){
 80020de:	4b1a      	ldr	r3, [pc, #104]	; (8002148 <cwCicleInterpolation+0x1e0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da04      	bge.n	80020f0 <cwCicleInterpolation+0x188>
				stepsCounterX = -1;
 80020e6:	4b1a      	ldr	r3, [pc, #104]	; (8002150 <cwCicleInterpolation+0x1e8>)
 80020e8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e00f      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX > 0){
 80020f0:	4b14      	ldr	r3, [pc, #80]	; (8002144 <cwCicleInterpolation+0x1dc>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	dd04      	ble.n	8002102 <cwCicleInterpolation+0x19a>
				stepsCounterY = -1;
 80020f8:	4b14      	ldr	r3, [pc, #80]	; (800214c <cwCicleInterpolation+0x1e4>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e006      	b.n	8002110 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX < 0){
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b00      	cmp	r3, #0
 8002108:	da02      	bge.n	8002110 <cwCicleInterpolation+0x1a8>
				stepsCounterY = 1;
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <cwCicleInterpolation+0x1e4>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]
			}
		}
	}

	vPosX+=stepsCounterX;
 8002110:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <cwCicleInterpolation+0x1dc>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <cwCicleInterpolation+0x1e8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4413      	add	r3, r2
 800211a:	4a0a      	ldr	r2, [pc, #40]	; (8002144 <cwCicleInterpolation+0x1dc>)
 800211c:	6013      	str	r3, [r2, #0]
	vPosY+=stepsCounterY;
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <cwCicleInterpolation+0x1e0>)
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <cwCicleInterpolation+0x1e4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <cwCicleInterpolation+0x1e0>)
 800212a:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <cwCicleInterpolation+0x1ec>)
 800212e:	f003 f8bb 	bl	80052a8 <HAL_TIM_Base_Start_IT>
}
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	200005d0 	.word	0x200005d0
 800213c:	200005a8 	.word	0x200005a8
 8002140:	200005c8 	.word	0x200005c8
 8002144:	200005ac 	.word	0x200005ac
 8002148:	200005c4 	.word	0x200005c4
 800214c:	200005c0 	.word	0x200005c0
 8002150:	200005a0 	.word	0x200005a0
 8002154:	200006fc 	.word	0x200006fc

08002158 <ccwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void ccwCicleInterpolation(){
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <ccwCicleInterpolation+0x1d0>)
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <ccwCicleInterpolation+0x1d4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	429a      	cmp	r2, r3
 8002168:	d108      	bne.n	800217c <ccwCicleInterpolation+0x24>
 800216a:	4b6f      	ldr	r3, [pc, #444]	; (8002328 <ccwCicleInterpolation+0x1d0>)
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <ccwCicleInterpolation+0x1d8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d102      	bne.n	800217c <ccwCicleInterpolation+0x24>
		comandExecuted();
 8002176:	f000 f93f 	bl	80023f8 <comandExecuted>
		return;
 800217a:	e0d2      	b.n	8002322 <ccwCicleInterpolation+0x1ca>
	}

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 800217c:	4b6d      	ldr	r3, [pc, #436]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6c      	ldr	r2, [pc, #432]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 8002182:	6812      	ldr	r2, [r2, #0]
 8002184:	fb02 f203 	mul.w	r2, r2, r3
 8002188:	4b6b      	ldr	r3, [pc, #428]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	496a      	ldr	r1, [pc, #424]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 800218e:	6809      	ldr	r1, [r1, #0]
 8002190:	fb01 f303 	mul.w	r3, r1, r3
 8002194:	441a      	add	r2, r3
 8002196:	4b64      	ldr	r3, [pc, #400]	; (8002328 <ccwCicleInterpolation+0x1d0>)
 8002198:	695b      	ldr	r3, [r3, #20]
 800219a:	4963      	ldr	r1, [pc, #396]	; (8002328 <ccwCicleInterpolation+0x1d0>)
 800219c:	6949      	ldr	r1, [r1, #20]
 800219e:	fb01 f303 	mul.w	r3, r1, r3
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	607b      	str	r3, [r7, #4]
																			//контролируется на этапе парсинга
		if(F >= 0){//если на окружности или за ней
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db53      	blt.n	8002254 <ccwCicleInterpolation+0xfc>

			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 80021ac:	4b61      	ldr	r3, [pc, #388]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	dd08      	ble.n	80021c6 <ccwCicleInterpolation+0x6e>
 80021b4:	4b60      	ldr	r3, [pc, #384]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd04      	ble.n	80021c6 <ccwCicleInterpolation+0x6e>
				stepsCounterX = -1;
 80021bc:	4b5f      	ldr	r3, [pc, #380]	; (800233c <ccwCicleInterpolation+0x1e4>)
 80021be:	f04f 32ff 	mov.w	r2, #4294967295
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e09c      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 80021c6:	4b5b      	ldr	r3, [pc, #364]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	dd07      	ble.n	80021de <ccwCicleInterpolation+0x86>
 80021ce:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da03      	bge.n	80021de <ccwCicleInterpolation+0x86>
				stepsCounterY = 1;
 80021d6:	4b5a      	ldr	r3, [pc, #360]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 80021d8:	2201      	movs	r2, #1
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	e090      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 80021de:	4b55      	ldr	r3, [pc, #340]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	da07      	bge.n	80021f6 <ccwCicleInterpolation+0x9e>
 80021e6:	4b54      	ldr	r3, [pc, #336]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da03      	bge.n	80021f6 <ccwCicleInterpolation+0x9e>
				stepsCounterX = 1;
 80021ee:	4b53      	ldr	r3, [pc, #332]	; (800233c <ccwCicleInterpolation+0x1e4>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	e084      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	da08      	bge.n	8002210 <ccwCicleInterpolation+0xb8>
 80021fe:	4b4e      	ldr	r3, [pc, #312]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	dd04      	ble.n	8002210 <ccwCicleInterpolation+0xb8>
				stepsCounterY = -1;
 8002206:	4b4e      	ldr	r3, [pc, #312]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	e077      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else{
				if(vPosY > 0){
 8002210:	4b49      	ldr	r3, [pc, #292]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	dd04      	ble.n	8002222 <ccwCicleInterpolation+0xca>
					stepsCounterY = -1;
 8002218:	4b49      	ldr	r3, [pc, #292]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e06e      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosY < 0){
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	da03      	bge.n	8002232 <ccwCicleInterpolation+0xda>
					stepsCounterY = 1;
 800222a:	4b45      	ldr	r3, [pc, #276]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e066      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX > 0){
 8002232:	4b40      	ldr	r3, [pc, #256]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	dd04      	ble.n	8002244 <ccwCicleInterpolation+0xec>
					stepsCounterX = -1;
 800223a:	4b40      	ldr	r3, [pc, #256]	; (800233c <ccwCicleInterpolation+0x1e4>)
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e05d      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX < 0){
 8002244:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2b00      	cmp	r3, #0
 800224a:	da59      	bge.n	8002300 <ccwCicleInterpolation+0x1a8>
					stepsCounterX = 1;
 800224c:	4b3b      	ldr	r3, [pc, #236]	; (800233c <ccwCicleInterpolation+0x1e4>)
 800224e:	2201      	movs	r2, #1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e055      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
			}
		}
		else if(F < 0){//если внутри окружности
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	da52      	bge.n	8002300 <ccwCicleInterpolation+0x1a8>
			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800225a:	4b36      	ldr	r3, [pc, #216]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	dd07      	ble.n	8002272 <ccwCicleInterpolation+0x11a>
 8002262:	4b35      	ldr	r3, [pc, #212]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dd03      	ble.n	8002272 <ccwCicleInterpolation+0x11a>
				stepsCounterY = 1;
 800226a:	4b35      	ldr	r3, [pc, #212]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	e046      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002272:	4b30      	ldr	r3, [pc, #192]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	dd07      	ble.n	800228a <ccwCicleInterpolation+0x132>
 800227a:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b00      	cmp	r3, #0
 8002280:	da03      	bge.n	800228a <ccwCicleInterpolation+0x132>
				stepsCounterX = 1;
 8002282:	4b2e      	ldr	r3, [pc, #184]	; (800233c <ccwCicleInterpolation+0x1e4>)
 8002284:	2201      	movs	r2, #1
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	e03a      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800228a:	4b2a      	ldr	r3, [pc, #168]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b00      	cmp	r3, #0
 8002290:	da08      	bge.n	80022a4 <ccwCicleInterpolation+0x14c>
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da04      	bge.n	80022a4 <ccwCicleInterpolation+0x14c>
				stepsCounterY = -1;
 800229a:	4b29      	ldr	r3, [pc, #164]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	e02d      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80022a4:	4b23      	ldr	r3, [pc, #140]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	da08      	bge.n	80022be <ccwCicleInterpolation+0x166>
 80022ac:	4b22      	ldr	r3, [pc, #136]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	dd04      	ble.n	80022be <ccwCicleInterpolation+0x166>
				stepsCounterX = -1;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <ccwCicleInterpolation+0x1e4>)
 80022b6:	f04f 32ff 	mov.w	r2, #4294967295
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e020      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
			}
			else{
				if(vPosY > 0){
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	dd04      	ble.n	80022d0 <ccwCicleInterpolation+0x178>
					stepsCounterX = -1;
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <ccwCicleInterpolation+0x1e4>)
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e017      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosY < 0){
 80022d0:	4b19      	ldr	r3, [pc, #100]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	da03      	bge.n	80022e0 <ccwCicleInterpolation+0x188>
					stepsCounterX = 1;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <ccwCicleInterpolation+0x1e4>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e00f      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX > 0){
 80022e0:	4b14      	ldr	r3, [pc, #80]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	dd03      	ble.n	80022f0 <ccwCicleInterpolation+0x198>
					stepsCounterY = 1;
 80022e8:	4b15      	ldr	r3, [pc, #84]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e007      	b.n	8002300 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX < 0){
 80022f0:	4b10      	ldr	r3, [pc, #64]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da03      	bge.n	8002300 <ccwCicleInterpolation+0x1a8>
					stepsCounterY = -1;
 80022f8:	4b11      	ldr	r3, [pc, #68]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 80022fa:	f04f 32ff 	mov.w	r2, #4294967295
 80022fe:	601a      	str	r2, [r3, #0]
				}
			}
		}

		vPosX+=stepsCounterX;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b0d      	ldr	r3, [pc, #52]	; (800233c <ccwCicleInterpolation+0x1e4>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4413      	add	r3, r2
 800230a:	4a0a      	ldr	r2, [pc, #40]	; (8002334 <ccwCicleInterpolation+0x1dc>)
 800230c:	6013      	str	r3, [r2, #0]
		vPosY+=stepsCounterY;
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <ccwCicleInterpolation+0x1e8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a07      	ldr	r2, [pc, #28]	; (8002338 <ccwCicleInterpolation+0x1e0>)
 800231a:	6013      	str	r3, [r2, #0]

		HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 800231c:	4809      	ldr	r0, [pc, #36]	; (8002344 <ccwCicleInterpolation+0x1ec>)
 800231e:	f002 ffc3 	bl	80052a8 <HAL_TIM_Base_Start_IT>
}
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200005d0 	.word	0x200005d0
 800232c:	200005a8 	.word	0x200005a8
 8002330:	200005c8 	.word	0x200005c8
 8002334:	200005ac 	.word	0x200005ac
 8002338:	200005c4 	.word	0x200005c4
 800233c:	200005a0 	.word	0x200005a0
 8002340:	200005c0 	.word	0x200005c0
 8002344:	200006fc 	.word	0x200006fc

08002348 <moveToZero>:
////////////////////////////////////////////////////////////////////////////////////////////
void moveToZero(){
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET) &&
 800234c:	2101      	movs	r1, #1
 800234e:	4822      	ldr	r0, [pc, #136]	; (80023d8 <moveToZero+0x90>)
 8002350:	f001 fb56 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002354:	4603      	mov	r3, r0
 8002356:	2b01      	cmp	r3, #1
 8002358:	d119      	bne.n	800238e <moveToZero+0x46>
			(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET) &&
 800235a:	2102      	movs	r1, #2
 800235c:	481e      	ldr	r0, [pc, #120]	; (80023d8 <moveToZero+0x90>)
 800235e:	f001 fb4f 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
	if((HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET) &&
 8002364:	2b01      	cmp	r3, #1
 8002366:	d112      	bne.n	800238e <moveToZero+0x46>
			(HAL_GPIO_ReadPin(swZ) == GPIO_PIN_SET)){
 8002368:	2104      	movs	r1, #4
 800236a:	481b      	ldr	r0, [pc, #108]	; (80023d8 <moveToZero+0x90>)
 800236c:	f001 fb48 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002370:	4603      	mov	r3, r0
			(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET) &&
 8002372:	2b01      	cmp	r3, #1
 8002374:	d10b      	bne.n	800238e <moveToZero+0x46>
		positionX = 0;
 8002376:	4b19      	ldr	r3, [pc, #100]	; (80023dc <moveToZero+0x94>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
		positionY = 0;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <moveToZero+0x98>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
		positionZ = 0;
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <moveToZero+0x9c>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
		comandExecuted();
 8002388:	f000 f836 	bl	80023f8 <comandExecuted>
		return;
 800238c:	e023      	b.n	80023d6 <moveToZero+0x8e>
	}

	if(HAL_GPIO_ReadPin(swX) != GPIO_PIN_SET){
 800238e:	2101      	movs	r1, #1
 8002390:	4811      	ldr	r0, [pc, #68]	; (80023d8 <moveToZero+0x90>)
 8002392:	f001 fb35 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002396:	4603      	mov	r3, r0
 8002398:	2b01      	cmp	r3, #1
 800239a:	d003      	beq.n	80023a4 <moveToZero+0x5c>
		stepsCounterX = -1;
 800239c:	4b12      	ldr	r3, [pc, #72]	; (80023e8 <moveToZero+0xa0>)
 800239e:	f04f 32ff 	mov.w	r2, #4294967295
 80023a2:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(swY) != GPIO_PIN_SET){
 80023a4:	2102      	movs	r1, #2
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <moveToZero+0x90>)
 80023a8:	f001 fb2a 	bl	8003a00 <HAL_GPIO_ReadPin>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d003      	beq.n	80023ba <moveToZero+0x72>
		stepsCounterY = -1;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <moveToZero+0xa4>)
 80023b4:	f04f 32ff 	mov.w	r2, #4294967295
 80023b8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(swZ) != GPIO_PIN_SET){
 80023ba:	2104      	movs	r1, #4
 80023bc:	4806      	ldr	r0, [pc, #24]	; (80023d8 <moveToZero+0x90>)
 80023be:	f001 fb1f 	bl	8003a00 <HAL_GPIO_ReadPin>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d003      	beq.n	80023d0 <moveToZero+0x88>
		stepsCounterZ = -1;
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <moveToZero+0xa8>)
 80023ca:	f04f 32ff 	mov.w	r2, #4294967295
 80023ce:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 80023d0:	4808      	ldr	r0, [pc, #32]	; (80023f4 <moveToZero+0xac>)
 80023d2:	f002 ff69 	bl	80052a8 <HAL_TIM_Base_Start_IT>
}
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40010800 	.word	0x40010800
 80023dc:	200005a8 	.word	0x200005a8
 80023e0:	200005c8 	.word	0x200005c8
 80023e4:	200005a4 	.word	0x200005a4
 80023e8:	200005a0 	.word	0x200005a0
 80023ec:	200005c0 	.word	0x200005c0
 80023f0:	200005b4 	.word	0x200005b4
 80023f4:	200006fc 	.word	0x200006fc

080023f8 <comandExecuted>:
/////////////////////////////////////////////////////////////////////////////////////
void comandExecuted(){
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	vPosX = 0;
 80023fc:	4b07      	ldr	r3, [pc, #28]	; (800241c <comandExecuted+0x24>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
	vPosY = 0;
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <comandExecuted+0x28>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
	counter = 0;
 8002408:	4b06      	ldr	r3, [pc, #24]	; (8002424 <comandExecuted+0x2c>)
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
	resetCurrentCommand();
 800240e:	f000 f80b 	bl	8002428 <resetCurrentCommand>
	sendFree();
 8002412:	f000 ffe0 	bl	80033d6 <sendFree>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	200005ac 	.word	0x200005ac
 8002420:	200005c4 	.word	0x200005c4
 8002424:	2000069c 	.word	0x2000069c

08002428 <resetCurrentCommand>:
//////////////////////////////////////////////////////////////////////////////////////
void resetCurrentCommand(){
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
	currentComand.F = 0;
 800242c:	4b0f      	ldr	r3, [pc, #60]	; (800246c <resetCurrentCommand+0x44>)
 800242e:	2200      	movs	r2, #0
 8002430:	611a      	str	r2, [r3, #16]
	currentComand.GCode = 0;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <resetCurrentCommand+0x44>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
	currentComand.I = 0;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <resetCurrentCommand+0x44>)
 800243a:	2200      	movs	r2, #0
 800243c:	619a      	str	r2, [r3, #24]
	currentComand.J = 0;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <resetCurrentCommand+0x44>)
 8002440:	2200      	movs	r2, #0
 8002442:	61da      	str	r2, [r3, #28]
	currentComand.R = 0;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <resetCurrentCommand+0x44>)
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
	currentComand.posX = 0;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <resetCurrentCommand+0x44>)
 800244c:	2200      	movs	r2, #0
 800244e:	605a      	str	r2, [r3, #4]
	currentComand.posY = 0;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <resetCurrentCommand+0x44>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
	currentComand.posZ = 0;
 8002456:	4b05      	ldr	r3, [pc, #20]	; (800246c <resetCurrentCommand+0x44>)
 8002458:	2200      	movs	r2, #0
 800245a:	60da      	str	r2, [r3, #12]
	currentComand.valid = 0;
 800245c:	4b03      	ldr	r3, [pc, #12]	; (800246c <resetCurrentCommand+0x44>)
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	bc80      	pop	{r7}
 800246a:	4770      	bx	lr
 800246c:	200005d0 	.word	0x200005d0

08002470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002474:	f000 ffde 	bl	8003434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002478:	f000 f81c 	bl	80024b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247c:	f000 f9a4 	bl	80027c8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002480:	f000 f888 	bl	8002594 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002484:	f000 f8bc 	bl	8002600 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002488:	f000 f906 	bl	8002698 <MX_TIM3_Init>
  MX_TIM4_Init();
 800248c:	f000 f950 	bl	8002730 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002490:	f005 ff3e 	bl	8008310 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8002494:	f000 f86a 	bl	800256c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  initDrives();
 8002498:	f7ff f9b4 	bl	8001804 <initDrives>
  usbInit();
 800249c:	f000 fe48 	bl	8003130 <usbInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(incomingMessageFlag==1){
 80024a0:	4b03      	ldr	r3, [pc, #12]	; (80024b0 <main+0x40>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d1fb      	bne.n	80024a0 <main+0x30>
	  	readMessage();
 80024a8:	f000 fe58 	bl	800315c <readMessage>
	if(incomingMessageFlag==1){
 80024ac:	e7f8      	b.n	80024a0 <main+0x30>
 80024ae:	bf00      	nop
 80024b0:	20000375 	.word	0x20000375

080024b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b094      	sub	sp, #80	; 0x50
 80024b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024be:	2228      	movs	r2, #40	; 0x28
 80024c0:	2100      	movs	r1, #0
 80024c2:	4618      	mov	r0, r3
 80024c4:	f006 fc2f 	bl	8008d26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024c8:	f107 0314 	add.w	r3, r7, #20
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	605a      	str	r2, [r3, #4]
 80024d2:	609a      	str	r2, [r3, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024ee:	2300      	movs	r3, #0
 80024f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024f2:	2301      	movs	r3, #1
 80024f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024f6:	2302      	movs	r3, #2
 80024f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002500:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002504:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002506:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800250a:	4618      	mov	r0, r3
 800250c:	f002 f9a0 	bl	8004850 <HAL_RCC_OscConfig>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002516:	f000 f9f5 	bl	8002904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800251a:	230f      	movs	r3, #15
 800251c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251e:	2302      	movs	r3, #2
 8002520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002526:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800252a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800252c:	2300      	movs	r3, #0
 800252e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f002 fc0a 	bl	8004d50 <HAL_RCC_ClockConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002542:	f000 f9df 	bl	8002904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002546:	2310      	movs	r3, #16
 8002548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800254a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800254e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002550:	1d3b      	adds	r3, r7, #4
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fd66 	bl	8005024 <HAL_RCCEx_PeriphCLKConfig>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800255e:	f000 f9d1 	bl	8002904 <Error_Handler>
  }
}
 8002562:	bf00      	nop
 8002564:	3750      	adds	r7, #80	; 0x50
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
	...

0800256c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002570:	4b06      	ldr	r3, [pc, #24]	; (800258c <MX_CRC_Init+0x20>)
 8002572:	4a07      	ldr	r2, [pc, #28]	; (8002590 <MX_CRC_Init+0x24>)
 8002574:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002576:	4805      	ldr	r0, [pc, #20]	; (800258c <MX_CRC_Init+0x20>)
 8002578:	f001 f8cb 	bl	8003712 <HAL_CRC_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002582:	f000 f9bf 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000638 	.word	0x20000638
 8002590:	40023000 	.word	0x40023000

08002594 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <MX_SPI1_Init+0x64>)
 800259a:	4a18      	ldr	r2, [pc, #96]	; (80025fc <MX_SPI1_Init+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800259e:	4b16      	ldr	r3, [pc, #88]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025a6:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025ac:	4b12      	ldr	r3, [pc, #72]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025b8:	4b0f      	ldr	r3, [pc, #60]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025c6:	2208      	movs	r2, #8
 80025c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025de:	220a      	movs	r2, #10
 80025e0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025e2:	4805      	ldr	r0, [pc, #20]	; (80025f8 <MX_SPI1_Init+0x64>)
 80025e4:	f002 fdd4 	bl	8005190 <HAL_SPI_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80025ee:	f000 f989 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200006a4 	.word	0x200006a4
 80025fc:	40013000 	.word	0x40013000

08002600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002606:	f107 0308 	add.w	r3, r7, #8
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002614:	463b      	mov	r3, r7
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800261c:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <MX_TIM2_Init+0x94>)
 800261e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002622:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <MX_TIM2_Init+0x94>)
 8002626:	2277      	movs	r2, #119	; 0x77
 8002628:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_TIM2_Init+0x94>)
 800262c:	2200      	movs	r2, #0
 800262e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_TIM2_Init+0x94>)
 8002632:	2209      	movs	r2, #9
 8002634:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_TIM2_Init+0x94>)
 8002638:	2200      	movs	r2, #0
 800263a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_TIM2_Init+0x94>)
 800263e:	2280      	movs	r2, #128	; 0x80
 8002640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002642:	4814      	ldr	r0, [pc, #80]	; (8002694 <MX_TIM2_Init+0x94>)
 8002644:	f002 fe05 	bl	8005252 <HAL_TIM_Base_Init>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800264e:	f000 f959 	bl	8002904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002656:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002658:	f107 0308 	add.w	r3, r7, #8
 800265c:	4619      	mov	r1, r3
 800265e:	480d      	ldr	r0, [pc, #52]	; (8002694 <MX_TIM2_Init+0x94>)
 8002660:	f002 ff77 	bl	8005552 <HAL_TIM_ConfigClockSource>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800266a:	f000 f94b 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800266e:	2300      	movs	r3, #0
 8002670:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002676:	463b      	mov	r3, r7
 8002678:	4619      	mov	r1, r3
 800267a:	4806      	ldr	r0, [pc, #24]	; (8002694 <MX_TIM2_Init+0x94>)
 800267c:	f003 f93c 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002686:	f000 f93d 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	200006fc 	.word	0x200006fc

08002698 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800269e:	f107 0308 	add.w	r3, r7, #8
 80026a2:	2200      	movs	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ac:	463b      	mov	r3, r7
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]
 80026b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <MX_TIM3_Init+0x90>)
 80026b6:	4a1d      	ldr	r2, [pc, #116]	; (800272c <MX_TIM3_Init+0x94>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <MX_TIM3_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <MX_TIM3_Init+0x90>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <MX_TIM3_Init+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <MX_TIM3_Init+0x90>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026d2:	4b15      	ldr	r3, [pc, #84]	; (8002728 <MX_TIM3_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026d8:	4813      	ldr	r0, [pc, #76]	; (8002728 <MX_TIM3_Init+0x90>)
 80026da:	f002 fdba 	bl	8005252 <HAL_TIM_Base_Init>
 80026de:	4603      	mov	r3, r0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d001      	beq.n	80026e8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80026e4:	f000 f90e 	bl	8002904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ee:	f107 0308 	add.w	r3, r7, #8
 80026f2:	4619      	mov	r1, r3
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <MX_TIM3_Init+0x90>)
 80026f6:	f002 ff2c 	bl	8005552 <HAL_TIM_ConfigClockSource>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002700:	f000 f900 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002704:	2300      	movs	r3, #0
 8002706:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800270c:	463b      	mov	r3, r7
 800270e:	4619      	mov	r1, r3
 8002710:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_TIM3_Init+0x90>)
 8002712:	f003 f8f1 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800271c:	f000 f8f2 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002720:	bf00      	nop
 8002722:	3718      	adds	r7, #24
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000644 	.word	0x20000644
 800272c:	40000400 	.word	0x40000400

08002730 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002736:	f107 0308 	add.w	r3, r7, #8
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002744:	463b      	mov	r3, r7
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <MX_TIM4_Init+0x90>)
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <MX_TIM4_Init+0x94>)
 8002750:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002752:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <MX_TIM4_Init+0x90>)
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002758:	4b19      	ldr	r3, [pc, #100]	; (80027c0 <MX_TIM4_Init+0x90>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800275e:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_TIM4_Init+0x90>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002764:	4b16      	ldr	r3, [pc, #88]	; (80027c0 <MX_TIM4_Init+0x90>)
 8002766:	2200      	movs	r2, #0
 8002768:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_TIM4_Init+0x90>)
 800276c:	2200      	movs	r2, #0
 800276e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002770:	4813      	ldr	r0, [pc, #76]	; (80027c0 <MX_TIM4_Init+0x90>)
 8002772:	f002 fd6e 	bl	8005252 <HAL_TIM_Base_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800277c:	f000 f8c2 	bl	8002904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002780:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002784:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4619      	mov	r1, r3
 800278c:	480c      	ldr	r0, [pc, #48]	; (80027c0 <MX_TIM4_Init+0x90>)
 800278e:	f002 fee0 	bl	8005552 <HAL_TIM_ConfigClockSource>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002798:	f000 f8b4 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279c:	2300      	movs	r3, #0
 800279e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80027a4:	463b      	mov	r3, r7
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_TIM4_Init+0x90>)
 80027aa:	f003 f8a5 	bl	80058f8 <HAL_TIMEx_MasterConfigSynchronization>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80027b4:	f000 f8a6 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027b8:	bf00      	nop
 80027ba:	3718      	adds	r7, #24
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	200005f8 	.word	0x200005f8
 80027c4:	40000800 	.word	0x40000800

080027c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b088      	sub	sp, #32
 80027cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ce:	f107 0310 	add.w	r3, r7, #16
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027dc:	4b45      	ldr	r3, [pc, #276]	; (80028f4 <MX_GPIO_Init+0x12c>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	4a44      	ldr	r2, [pc, #272]	; (80028f4 <MX_GPIO_Init+0x12c>)
 80027e2:	f043 0310 	orr.w	r3, r3, #16
 80027e6:	6193      	str	r3, [r2, #24]
 80027e8:	4b42      	ldr	r3, [pc, #264]	; (80028f4 <MX_GPIO_Init+0x12c>)
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027f4:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <MX_GPIO_Init+0x12c>)
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	4a3e      	ldr	r2, [pc, #248]	; (80028f4 <MX_GPIO_Init+0x12c>)
 80027fa:	f043 0320 	orr.w	r3, r3, #32
 80027fe:	6193      	str	r3, [r2, #24]
 8002800:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <MX_GPIO_Init+0x12c>)
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	4b39      	ldr	r3, [pc, #228]	; (80028f4 <MX_GPIO_Init+0x12c>)
 800280e:	699b      	ldr	r3, [r3, #24]
 8002810:	4a38      	ldr	r2, [pc, #224]	; (80028f4 <MX_GPIO_Init+0x12c>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	6193      	str	r3, [r2, #24]
 8002818:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <MX_GPIO_Init+0x12c>)
 800281a:	699b      	ldr	r3, [r3, #24]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002824:	4b33      	ldr	r3, [pc, #204]	; (80028f4 <MX_GPIO_Init+0x12c>)
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	4a32      	ldr	r2, [pc, #200]	; (80028f4 <MX_GPIO_Init+0x12c>)
 800282a:	f043 0308 	orr.w	r3, r3, #8
 800282e:	6193      	str	r3, [r2, #24]
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <MX_GPIO_Init+0x12c>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	603b      	str	r3, [r7, #0]
 800283a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800283c:	2201      	movs	r2, #1
 800283e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002842:	482d      	ldr	r0, [pc, #180]	; (80028f8 <MX_GPIO_Init+0x130>)
 8002844:	f001 f8f3 	bl	8003a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 8002848:	2200      	movs	r2, #0
 800284a:	f24f 01d8 	movw	r1, #61656	; 0xf0d8
 800284e:	482b      	ldr	r0, [pc, #172]	; (80028fc <MX_GPIO_Init+0x134>)
 8002850:	f001 f8ed 	bl	8003a2e <HAL_GPIO_WritePin>
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin, GPIO_PIN_RESET);
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800285a:	4829      	ldr	r0, [pc, #164]	; (8002900 <MX_GPIO_Init+0x138>)
 800285c:	f001 f8e7 	bl	8003a2e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002860:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002866:	2301      	movs	r3, #1
 8002868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2302      	movs	r3, #2
 8002870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002872:	f107 0310 	add.w	r3, r7, #16
 8002876:	4619      	mov	r1, r3
 8002878:	481f      	ldr	r0, [pc, #124]	; (80028f8 <MX_GPIO_Init+0x130>)
 800287a:	f000 ff67 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800287e:	2307      	movs	r3, #7
 8002880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	4619      	mov	r1, r3
 8002890:	481b      	ldr	r0, [pc, #108]	; (8002900 <MX_GPIO_Init+0x138>)
 8002892:	f000 ff5b 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : X_A_Pin X_B_Pin X_C_Pin X_D_Pin 
                           Z_C_Pin Z_D_Pin Y_D_Pin Z_A_Pin */
  GPIO_InitStruct.Pin = X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 8002896:	f24f 03d8 	movw	r3, #61656	; 0xf0d8
 800289a:	613b      	str	r3, [r7, #16]
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800289c:	2301      	movs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a4:	2302      	movs	r3, #2
 80028a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	4619      	mov	r1, r3
 80028ae:	4813      	ldr	r0, [pc, #76]	; (80028fc <MX_GPIO_Init+0x134>)
 80028b0:	f000 ff4c 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_A_Pin Y_B_Pin Y_C_Pin Z_B_Pin */
  GPIO_InitStruct.Pin = Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin;
 80028b4:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80028b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028ba:	2301      	movs	r3, #1
 80028bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2302      	movs	r3, #2
 80028c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	4619      	mov	r1, r3
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <MX_GPIO_Init+0x138>)
 80028ce:	f000 ff3d 	bl	800374c <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 80028d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028dc:	2300      	movs	r3, #0
 80028de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80028e0:	f107 0310 	add.w	r3, r7, #16
 80028e4:	4619      	mov	r1, r3
 80028e6:	4805      	ldr	r0, [pc, #20]	; (80028fc <MX_GPIO_Init+0x134>)
 80028e8:	f000 ff30 	bl	800374c <HAL_GPIO_Init>

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40011000 	.word	0x40011000
 80028fc:	40010c00 	.word	0x40010c00
 8002900:	40010800 	.word	0x40010800

08002904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr

08002910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002916:	4b15      	ldr	r3, [pc, #84]	; (800296c <HAL_MspInit+0x5c>)
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	4a14      	ldr	r2, [pc, #80]	; (800296c <HAL_MspInit+0x5c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6193      	str	r3, [r2, #24]
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_MspInit+0x5c>)
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <HAL_MspInit+0x5c>)
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <HAL_MspInit+0x5c>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002938:	61d3      	str	r3, [r2, #28]
 800293a:	4b0c      	ldr	r3, [pc, #48]	; (800296c <HAL_MspInit+0x5c>)
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002946:	4b0a      	ldr	r3, [pc, #40]	; (8002970 <HAL_MspInit+0x60>)
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	4a04      	ldr	r2, [pc, #16]	; (8002970 <HAL_MspInit+0x60>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002962:	bf00      	nop
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	40021000 	.word	0x40021000
 8002970:	40010000 	.word	0x40010000

08002974 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_CRC_MspInit+0x34>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d10b      	bne.n	800299e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_CRC_MspInit+0x38>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_CRC_MspInit+0x38>)
 800298c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002990:	6153      	str	r3, [r2, #20]
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_CRC_MspInit+0x38>)
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	40023000 	.word	0x40023000
 80029ac:	40021000 	.word	0x40021000

080029b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b088      	sub	sp, #32
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0310 	add.w	r3, r7, #16
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_SPI_MspInit+0x88>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d12f      	bne.n	8002a30 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029d0:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	4a19      	ldr	r2, [pc, #100]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029da:	6193      	str	r3, [r2, #24]
 80029dc:	4b17      	ldr	r3, [pc, #92]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e8:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_SPI_MspInit+0x8c>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002a00:	2350      	movs	r3, #80	; 0x50
 8002a02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a0c:	f107 0310 	add.w	r3, r7, #16
 8002a10:	4619      	mov	r1, r3
 8002a12:	480b      	ldr	r0, [pc, #44]	; (8002a40 <HAL_SPI_MspInit+0x90>)
 8002a14:	f000 fe9a 	bl	800374c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a18:	23a0      	movs	r3, #160	; 0xa0
 8002a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4805      	ldr	r0, [pc, #20]	; (8002a40 <HAL_SPI_MspInit+0x90>)
 8002a2c:	f000 fe8e 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a30:	bf00      	nop
 8002a32:	3720      	adds	r7, #32
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40021000 	.word	0x40021000
 8002a40:	40010800 	.word	0x40010800

08002a44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d114      	bne.n	8002a80 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a56:	4b26      	ldr	r3, [pc, #152]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a58:	69db      	ldr	r3, [r3, #28]
 8002a5a:	4a25      	ldr	r2, [pc, #148]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	61d3      	str	r3, [r2, #28]
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2100      	movs	r1, #0
 8002a72:	201c      	movs	r0, #28
 8002a74:	f000 fe17 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a78:	201c      	movs	r0, #28
 8002a7a:	f000 fe30 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a7e:	e032      	b.n	8002ae6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_TIM_Base_MspInit+0xb0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d114      	bne.n	8002ab4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a8a:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	61d3      	str	r3, [r2, #28]
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	201d      	movs	r0, #29
 8002aa8:	f000 fdfd 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002aac:	201d      	movs	r0, #29
 8002aae:	f000 fe16 	bl	80036de <HAL_NVIC_EnableIRQ>
}
 8002ab2:	e018      	b.n	8002ae6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_TIM_Base_MspInit+0xb4>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002abe:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002ac4:	f043 0304 	orr.w	r3, r3, #4
 8002ac8:	61d3      	str	r3, [r2, #28]
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_TIM_Base_MspInit+0xac>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	2100      	movs	r1, #0
 8002ada:	201e      	movs	r0, #30
 8002adc:	f000 fde3 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ae0:	201e      	movs	r0, #30
 8002ae2:	f000 fdfc 	bl	80036de <HAL_NVIC_EnableIRQ>
}
 8002ae6:	bf00      	nop
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	40000400 	.word	0x40000400
 8002af8:	40000800 	.word	0x40000800

08002afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b0c:	e7fe      	b.n	8002b0c <HardFault_Handler+0x4>

08002b0e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b12:	e7fe      	b.n	8002b12 <MemManage_Handler+0x4>

08002b14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b18:	e7fe      	b.n	8002b18 <BusFault_Handler+0x4>

08002b1a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b1e:	e7fe      	b.n	8002b1e <UsageFault_Handler+0x4>

08002b20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b24:	bf00      	nop
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b48:	f000 fcba 	bl	80034c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b4c:	bf00      	nop
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b56:	f001 f8a1 	bl	8003c9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	200013d4 	.word	0x200013d4

08002b64 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <TIM2_IRQHandler+0x10>)
 8002b6a:	f002 fbea 	bl	8005342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	200006fc 	.word	0x200006fc

08002b78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <TIM3_IRQHandler+0x10>)
 8002b7e:	f002 fbe0 	bl	8005342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000644 	.word	0x20000644

08002b8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM4_IRQHandler+0x10>)
 8002b92:	f002 fbd6 	bl	8005342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200005f8 	.word	0x200005f8

08002ba0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <_sbrk+0x50>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x16>
		heap_end = &end;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <_sbrk+0x50>)
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <_sbrk+0x54>)
 8002bb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <_sbrk+0x50>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <_sbrk+0x50>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	466a      	mov	r2, sp
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d907      	bls.n	8002bda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bca:	f006 f84f 	bl	8008c6c <__errno>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e006      	b.n	8002be8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_sbrk+0x50>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <_sbrk+0x50>)
 8002be4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000370 	.word	0x20000370
 8002bf4:	20001648 	.word	0x20001648

08002bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <SystemInit+0x5c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <SystemInit+0x5c>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <SystemInit+0x5c>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4911      	ldr	r1, [pc, #68]	; (8002c54 <SystemInit+0x5c>)
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <SystemInit+0x60>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <SystemInit+0x5c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <SystemInit+0x5c>)
 8002c1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <SystemInit+0x5c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SystemInit+0x5c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <SystemInit+0x5c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <SystemInit+0x5c>)
 8002c36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SystemInit+0x5c>)
 8002c3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SystemInit+0x64>)
 8002c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c4a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	f8ff0000 	.word	0xf8ff0000
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Игорь
 */
#include "timers.h"

////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2){
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c70:	d126      	bne.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x60>

		counter++;
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	3301      	adds	r3, #1
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c7a:	6013      	str	r3, [r2, #0]
		if(counter>=timerDivider){
 8002c7c:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d31a      	bcc.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x60>

			if((stepsCounterX==0) && (stepsCounterY==0) && (stepsCounterZ==0)){
 8002c8a:	4b11      	ldr	r3, [pc, #68]	; (8002cd0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10d      	bne.n	8002cae <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002c9a:	4b0f      	ldr	r3, [pc, #60]	; (8002cd8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d105      	bne.n	8002cae <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002ca2:	480e      	ldr	r0, [pc, #56]	; (8002cdc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ca4:	f002 fb23 	bl	80052ee <HAL_TIM_Base_Stop_IT>
				calcInterpolation();//пересчитываем следующий шаг интерполяции
 8002ca8:	f7fe ffc6 	bl	8001c38 <calcInterpolation>
				return;
 8002cac:	e008      	b.n	8002cc0 <HAL_TIM_PeriodElapsedCallback+0x60>
			}

			moveDirX();
 8002cae:	f000 f817 	bl	8002ce0 <moveDirX>
			moveDirY();
 8002cb2:	f000 f8d1 	bl	8002e58 <moveDirY>
			moveDirZ();
 8002cb6:	f000 f981 	bl	8002fbc <moveDirZ>
			counter=0;
 8002cba:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	2000069c 	.word	0x2000069c
 8002ccc:	200005b8 	.word	0x200005b8
 8002cd0:	200005a0 	.word	0x200005a0
 8002cd4:	200005c0 	.word	0x200005c0
 8002cd8:	200005b4 	.word	0x200005b4
 8002cdc:	200006fc 	.word	0x200006fc

08002ce0 <moveDirX>:
/////////////////////////////////////////////////////////////////////////////
void moveDirX(){
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	static char stepX=1;

	if(stepsCounterX!=0){
 8002ce4:	4b58      	ldr	r3, [pc, #352]	; (8002e48 <moveDirX+0x168>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 80ab 	beq.w	8002e44 <moveDirX+0x164>
		if(stepsCounterX>0){
 8002cee:	4b56      	ldr	r3, [pc, #344]	; (8002e48 <moveDirX+0x168>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	dd17      	ble.n	8002d26 <moveDirX+0x46>
			stepX--;
 8002cf6:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <moveDirX+0x16c>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <moveDirX+0x16c>)
 8002d00:	701a      	strb	r2, [r3, #0]
			if(stepX == 0)stepX = 4;
 8002d02:	4b52      	ldr	r3, [pc, #328]	; (8002e4c <moveDirX+0x16c>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <moveDirX+0x30>
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <moveDirX+0x16c>)
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	701a      	strb	r2, [r3, #0]
			positionX+=1;
 8002d10:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <moveDirX+0x170>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <moveDirX+0x170>)
 8002d18:	6013      	str	r3, [r2, #0]
			stepsCounterX--;
 8002d1a:	4b4b      	ldr	r3, [pc, #300]	; (8002e48 <moveDirX+0x168>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	4a49      	ldr	r2, [pc, #292]	; (8002e48 <moveDirX+0x168>)
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e01a      	b.n	8002d5c <moveDirX+0x7c>
		}
		else if(stepsCounterX<0){
 8002d26:	4b48      	ldr	r3, [pc, #288]	; (8002e48 <moveDirX+0x168>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	da16      	bge.n	8002d5c <moveDirX+0x7c>
			stepX++;
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <moveDirX+0x16c>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	3301      	adds	r3, #1
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b45      	ldr	r3, [pc, #276]	; (8002e4c <moveDirX+0x16c>)
 8002d38:	701a      	strb	r2, [r3, #0]
			if(stepX== 5)stepX = 1;
 8002d3a:	4b44      	ldr	r3, [pc, #272]	; (8002e4c <moveDirX+0x16c>)
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b05      	cmp	r3, #5
 8002d40:	d102      	bne.n	8002d48 <moveDirX+0x68>
 8002d42:	4b42      	ldr	r3, [pc, #264]	; (8002e4c <moveDirX+0x16c>)
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
			positionX-=1;
 8002d48:	4b41      	ldr	r3, [pc, #260]	; (8002e50 <moveDirX+0x170>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	4a40      	ldr	r2, [pc, #256]	; (8002e50 <moveDirX+0x170>)
 8002d50:	6013      	str	r3, [r2, #0]
			stepsCounterX++;
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <moveDirX+0x168>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	4a3b      	ldr	r2, [pc, #236]	; (8002e48 <moveDirX+0x168>)
 8002d5a:	6013      	str	r3, [r2, #0]
		}
		switch(stepX){
 8002d5c:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <moveDirX+0x16c>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d86e      	bhi.n	8002e44 <moveDirX+0x164>
 8002d66:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <moveDirX+0x8c>)
 8002d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002daf 	.word	0x08002daf
 8002d74:	08002de1 	.word	0x08002de1
 8002d78:	08002e13 	.word	0x08002e13
			case(1):{
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d82:	4834      	ldr	r0, [pc, #208]	; (8002e54 <moveDirX+0x174>)
 8002d84:	f000 fe53 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d8e:	4831      	ldr	r0, [pc, #196]	; (8002e54 <moveDirX+0x174>)
 8002d90:	f000 fe4d 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002d94:	2200      	movs	r2, #0
 8002d96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d9a:	482e      	ldr	r0, [pc, #184]	; (8002e54 <moveDirX+0x174>)
 8002d9c:	f000 fe47 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_A,GPIO_PIN_SET);
 8002da0:	2201      	movs	r2, #1
 8002da2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da6:	482b      	ldr	r0, [pc, #172]	; (8002e54 <moveDirX+0x174>)
 8002da8:	f000 fe41 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002dac:	e04a      	b.n	8002e44 <moveDirX+0x164>
			}
			case(2):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002db4:	4827      	ldr	r0, [pc, #156]	; (8002e54 <moveDirX+0x174>)
 8002db6:	f000 fe3a 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dc0:	4824      	ldr	r0, [pc, #144]	; (8002e54 <moveDirX+0x174>)
 8002dc2:	f000 fe34 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dcc:	4821      	ldr	r0, [pc, #132]	; (8002e54 <moveDirX+0x174>)
 8002dce:	f000 fe2e 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_SET);
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dd8:	481e      	ldr	r0, [pc, #120]	; (8002e54 <moveDirX+0x174>)
 8002dda:	f000 fe28 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002dde:	e031      	b.n	8002e44 <moveDirX+0x164>
			}
			case(3):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002de6:	481b      	ldr	r0, [pc, #108]	; (8002e54 <moveDirX+0x174>)
 8002de8:	f000 fe21 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002dec:	2200      	movs	r2, #0
 8002dee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002df2:	4818      	ldr	r0, [pc, #96]	; (8002e54 <moveDirX+0x174>)
 8002df4:	f000 fe1b 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dfe:	4815      	ldr	r0, [pc, #84]	; (8002e54 <moveDirX+0x174>)
 8002e00:	f000 fe15 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_SET);
 8002e04:	2201      	movs	r2, #1
 8002e06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e0a:	4812      	ldr	r0, [pc, #72]	; (8002e54 <moveDirX+0x174>)
 8002e0c:	f000 fe0f 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002e10:	e018      	b.n	8002e44 <moveDirX+0x164>
			}
			case(4):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002e12:	2200      	movs	r2, #0
 8002e14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e18:	480e      	ldr	r0, [pc, #56]	; (8002e54 <moveDirX+0x174>)
 8002e1a:	f000 fe08 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e24:	480b      	ldr	r0, [pc, #44]	; (8002e54 <moveDirX+0x174>)
 8002e26:	f000 fe02 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e30:	4808      	ldr	r0, [pc, #32]	; (8002e54 <moveDirX+0x174>)
 8002e32:	f000 fdfc 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_SET);
 8002e36:	2201      	movs	r2, #1
 8002e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <moveDirX+0x174>)
 8002e3e:	f000 fdf6 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002e42:	bf00      	nop
			}
		}
	}
}
 8002e44:	bf00      	nop
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200005a0 	.word	0x200005a0
 8002e4c:	20000004 	.word	0x20000004
 8002e50:	200005a8 	.word	0x200005a8
 8002e54:	40010c00 	.word	0x40010c00

08002e58 <moveDirY>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirY(){
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
	static char stepY=1;

	if(stepsCounterY!=0){
 8002e5c:	4b52      	ldr	r3, [pc, #328]	; (8002fa8 <moveDirY+0x150>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 809f 	beq.w	8002fa4 <moveDirY+0x14c>
		if(stepsCounterY>0){
 8002e66:	4b50      	ldr	r3, [pc, #320]	; (8002fa8 <moveDirY+0x150>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	dd17      	ble.n	8002e9e <moveDirY+0x46>
			stepY++;
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <moveDirY+0x154>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	3301      	adds	r3, #1
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4b4d      	ldr	r3, [pc, #308]	; (8002fac <moveDirY+0x154>)
 8002e78:	701a      	strb	r2, [r3, #0]
			if(stepY == 5)stepY = 1;
 8002e7a:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <moveDirY+0x154>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d102      	bne.n	8002e88 <moveDirY+0x30>
 8002e82:	4b4a      	ldr	r3, [pc, #296]	; (8002fac <moveDirY+0x154>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
			positionY+=1;
 8002e88:	4b49      	ldr	r3, [pc, #292]	; (8002fb0 <moveDirY+0x158>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	4a48      	ldr	r2, [pc, #288]	; (8002fb0 <moveDirY+0x158>)
 8002e90:	6013      	str	r3, [r2, #0]
			stepsCounterY--;
 8002e92:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <moveDirY+0x150>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a43      	ldr	r2, [pc, #268]	; (8002fa8 <moveDirY+0x150>)
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	e01a      	b.n	8002ed4 <moveDirY+0x7c>
		}
		else if(stepsCounterY<0){
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <moveDirY+0x150>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da16      	bge.n	8002ed4 <moveDirY+0x7c>
			stepY--;
 8002ea6:	4b41      	ldr	r3, [pc, #260]	; (8002fac <moveDirY+0x154>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	4b3f      	ldr	r3, [pc, #252]	; (8002fac <moveDirY+0x154>)
 8002eb0:	701a      	strb	r2, [r3, #0]
			if(stepY == 0)stepY = 4;
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <moveDirY+0x154>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d102      	bne.n	8002ec0 <moveDirY+0x68>
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <moveDirY+0x154>)
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	701a      	strb	r2, [r3, #0]
			positionY-=1;
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <moveDirY+0x158>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	4a3a      	ldr	r2, [pc, #232]	; (8002fb0 <moveDirY+0x158>)
 8002ec8:	6013      	str	r3, [r2, #0]
			stepsCounterY++;
 8002eca:	4b37      	ldr	r3, [pc, #220]	; (8002fa8 <moveDirY+0x150>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	4a35      	ldr	r2, [pc, #212]	; (8002fa8 <moveDirY+0x150>)
 8002ed2:	6013      	str	r3, [r2, #0]
		}
		switch(stepY){
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <moveDirY+0x154>)
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d862      	bhi.n	8002fa4 <moveDirY+0x14c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <moveDirY+0x8c>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002f21 	.word	0x08002f21
 8002eec:	08002f4d 	.word	0x08002f4d
 8002ef0:	08002f79 	.word	0x08002f79
			case(1):{
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002efa:	482e      	ldr	r0, [pc, #184]	; (8002fb4 <moveDirY+0x15c>)
 8002efc:	f000 fd97 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002f00:	2200      	movs	r2, #0
 8002f02:	2108      	movs	r1, #8
 8002f04:	482c      	ldr	r0, [pc, #176]	; (8002fb8 <moveDirY+0x160>)
 8002f06:	f000 fd92 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_SET);
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	2110      	movs	r1, #16
 8002f0e:	482a      	ldr	r0, [pc, #168]	; (8002fb8 <moveDirY+0x160>)
 8002f10:	f000 fd8d 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2140      	movs	r1, #64	; 0x40
 8002f18:	4827      	ldr	r0, [pc, #156]	; (8002fb8 <moveDirY+0x160>)
 8002f1a:	f000 fd88 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002f1e:	e041      	b.n	8002fa4 <moveDirY+0x14c>
			}
			case(2):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	2140      	movs	r1, #64	; 0x40
 8002f24:	4824      	ldr	r0, [pc, #144]	; (8002fb8 <moveDirY+0x160>)
 8002f26:	f000 fd82 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_SET);
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	2108      	movs	r1, #8
 8002f2e:	4822      	ldr	r0, [pc, #136]	; (8002fb8 <moveDirY+0x160>)
 8002f30:	f000 fd7d 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2110      	movs	r1, #16
 8002f38:	481f      	ldr	r0, [pc, #124]	; (8002fb8 <moveDirY+0x160>)
 8002f3a:	f000 fd78 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f44:	481b      	ldr	r0, [pc, #108]	; (8002fb4 <moveDirY+0x15c>)
 8002f46:	f000 fd72 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002f4a:	e02b      	b.n	8002fa4 <moveDirY+0x14c>
			}
			case(3):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2140      	movs	r1, #64	; 0x40
 8002f50:	4819      	ldr	r0, [pc, #100]	; (8002fb8 <moveDirY+0x160>)
 8002f52:	f000 fd6c 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_SET);
 8002f56:	2201      	movs	r2, #1
 8002f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f5c:	4815      	ldr	r0, [pc, #84]	; (8002fb4 <moveDirY+0x15c>)
 8002f5e:	f000 fd66 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f62:	2200      	movs	r2, #0
 8002f64:	2110      	movs	r1, #16
 8002f66:	4814      	ldr	r0, [pc, #80]	; (8002fb8 <moveDirY+0x160>)
 8002f68:	f000 fd61 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	2108      	movs	r1, #8
 8002f70:	4811      	ldr	r0, [pc, #68]	; (8002fb8 <moveDirY+0x160>)
 8002f72:	f000 fd5c 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002f76:	e015      	b.n	8002fa4 <moveDirY+0x14c>
			}
			case(4):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_SET);
 8002f78:	2201      	movs	r2, #1
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	480e      	ldr	r0, [pc, #56]	; (8002fb8 <moveDirY+0x160>)
 8002f7e:	f000 fd56 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002f82:	2200      	movs	r2, #0
 8002f84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f88:	480a      	ldr	r0, [pc, #40]	; (8002fb4 <moveDirY+0x15c>)
 8002f8a:	f000 fd50 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002f8e:	2200      	movs	r2, #0
 8002f90:	2108      	movs	r1, #8
 8002f92:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <moveDirY+0x160>)
 8002f94:	f000 fd4b 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	2110      	movs	r1, #16
 8002f9c:	4806      	ldr	r0, [pc, #24]	; (8002fb8 <moveDirY+0x160>)
 8002f9e:	f000 fd46 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8002fa2:	bf00      	nop
			}
		}
	}
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	200005c0 	.word	0x200005c0
 8002fac:	20000005 	.word	0x20000005
 8002fb0:	200005c8 	.word	0x200005c8
 8002fb4:	40010800 	.word	0x40010800
 8002fb8:	40010c00 	.word	0x40010c00

08002fbc <moveDirZ>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirZ(){
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
	static char stepZ=1;

	if(stepsCounterZ!=0){
 8002fc0:	4b56      	ldr	r3, [pc, #344]	; (800311c <moveDirZ+0x160>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a7 	beq.w	8003118 <moveDirZ+0x15c>
			if(stepsCounterZ>0){
 8002fca:	4b54      	ldr	r3, [pc, #336]	; (800311c <moveDirZ+0x160>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	dd17      	ble.n	8003002 <moveDirZ+0x46>
				stepZ--;
 8002fd2:	4b53      	ldr	r3, [pc, #332]	; (8003120 <moveDirZ+0x164>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	4b51      	ldr	r3, [pc, #324]	; (8003120 <moveDirZ+0x164>)
 8002fdc:	701a      	strb	r2, [r3, #0]
				if(stepZ == 0)stepZ = 4;
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <moveDirZ+0x164>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <moveDirZ+0x30>
 8002fe6:	4b4e      	ldr	r3, [pc, #312]	; (8003120 <moveDirZ+0x164>)
 8002fe8:	2204      	movs	r2, #4
 8002fea:	701a      	strb	r2, [r3, #0]
				positionZ+=1;
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <moveDirZ+0x168>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	4a4c      	ldr	r2, [pc, #304]	; (8003124 <moveDirZ+0x168>)
 8002ff4:	6013      	str	r3, [r2, #0]
				stepsCounterZ--;
 8002ff6:	4b49      	ldr	r3, [pc, #292]	; (800311c <moveDirZ+0x160>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	3b01      	subs	r3, #1
 8002ffc:	4a47      	ldr	r2, [pc, #284]	; (800311c <moveDirZ+0x160>)
 8002ffe:	6013      	str	r3, [r2, #0]
 8003000:	e01a      	b.n	8003038 <moveDirZ+0x7c>
			}
			else if(stepsCounterZ<0){
 8003002:	4b46      	ldr	r3, [pc, #280]	; (800311c <moveDirZ+0x160>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b00      	cmp	r3, #0
 8003008:	da16      	bge.n	8003038 <moveDirZ+0x7c>
				stepZ++;
 800300a:	4b45      	ldr	r3, [pc, #276]	; (8003120 <moveDirZ+0x164>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b43      	ldr	r3, [pc, #268]	; (8003120 <moveDirZ+0x164>)
 8003014:	701a      	strb	r2, [r3, #0]
				if(stepZ == 5)stepZ = 1;
 8003016:	4b42      	ldr	r3, [pc, #264]	; (8003120 <moveDirZ+0x164>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d102      	bne.n	8003024 <moveDirZ+0x68>
 800301e:	4b40      	ldr	r3, [pc, #256]	; (8003120 <moveDirZ+0x164>)
 8003020:	2201      	movs	r2, #1
 8003022:	701a      	strb	r2, [r3, #0]
				positionZ-=1;
 8003024:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <moveDirZ+0x168>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3b01      	subs	r3, #1
 800302a:	4a3e      	ldr	r2, [pc, #248]	; (8003124 <moveDirZ+0x168>)
 800302c:	6013      	str	r3, [r2, #0]
				stepsCounterZ++;
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <moveDirZ+0x160>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	4a39      	ldr	r2, [pc, #228]	; (800311c <moveDirZ+0x160>)
 8003036:	6013      	str	r3, [r2, #0]
			}
		switch(stepZ){
 8003038:	4b39      	ldr	r3, [pc, #228]	; (8003120 <moveDirZ+0x164>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3b01      	subs	r3, #1
 800303e:	2b03      	cmp	r3, #3
 8003040:	d86a      	bhi.n	8003118 <moveDirZ+0x15c>
 8003042:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <moveDirZ+0x8c>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	08003059 	.word	0x08003059
 800304c:	08003089 	.word	0x08003089
 8003050:	080030b9 	.word	0x080030b9
 8003054:	080030e9 	.word	0x080030e9
			case(1):{
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8003058:	2200      	movs	r2, #0
 800305a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800305e:	4832      	ldr	r0, [pc, #200]	; (8003128 <moveDirZ+0x16c>)
 8003060:	f000 fce5 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8003064:	2200      	movs	r2, #0
 8003066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800306a:	482f      	ldr	r0, [pc, #188]	; (8003128 <moveDirZ+0x16c>)
 800306c:	f000 fcdf 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8003070:	2200      	movs	r2, #0
 8003072:	2180      	movs	r1, #128	; 0x80
 8003074:	482d      	ldr	r0, [pc, #180]	; (800312c <moveDirZ+0x170>)
 8003076:	f000 fcda 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_SET);
 800307a:	2201      	movs	r2, #1
 800307c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003080:	4829      	ldr	r0, [pc, #164]	; (8003128 <moveDirZ+0x16c>)
 8003082:	f000 fcd4 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8003086:	e047      	b.n	8003118 <moveDirZ+0x15c>
			}
			case(2):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8003088:	2200      	movs	r2, #0
 800308a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800308e:	4826      	ldr	r0, [pc, #152]	; (8003128 <moveDirZ+0x16c>)
 8003090:	f000 fccd 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800309a:	4823      	ldr	r0, [pc, #140]	; (8003128 <moveDirZ+0x16c>)
 800309c:	f000 fcc7 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	4821      	ldr	r0, [pc, #132]	; (800312c <moveDirZ+0x170>)
 80030a6:	f000 fcc2 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_SET);
 80030aa:	2201      	movs	r2, #1
 80030ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030b0:	481d      	ldr	r0, [pc, #116]	; (8003128 <moveDirZ+0x16c>)
 80030b2:	f000 fcbc 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 80030b6:	e02f      	b.n	8003118 <moveDirZ+0x15c>
			}
			case(3):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030be:	481a      	ldr	r0, [pc, #104]	; (8003128 <moveDirZ+0x16c>)
 80030c0:	f000 fcb5 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ca:	4817      	ldr	r0, [pc, #92]	; (8003128 <moveDirZ+0x16c>)
 80030cc:	f000 fcaf 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	; 0x80
 80030d4:	4815      	ldr	r0, [pc, #84]	; (800312c <moveDirZ+0x170>)
 80030d6:	f000 fcaa 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_SET);
 80030da:	2201      	movs	r2, #1
 80030dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030e0:	4811      	ldr	r0, [pc, #68]	; (8003128 <moveDirZ+0x16c>)
 80030e2:	f000 fca4 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 80030e6:	e017      	b.n	8003118 <moveDirZ+0x15c>
			}
			case(4):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ee:	480e      	ldr	r0, [pc, #56]	; (8003128 <moveDirZ+0x16c>)
 80030f0:	f000 fc9d 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030fa:	480b      	ldr	r0, [pc, #44]	; (8003128 <moveDirZ+0x16c>)
 80030fc:	f000 fc97 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8003100:	2200      	movs	r2, #0
 8003102:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003106:	4808      	ldr	r0, [pc, #32]	; (8003128 <moveDirZ+0x16c>)
 8003108:	f000 fc91 	bl	8003a2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_SET);
 800310c:	2201      	movs	r2, #1
 800310e:	2180      	movs	r1, #128	; 0x80
 8003110:	4806      	ldr	r0, [pc, #24]	; (800312c <moveDirZ+0x170>)
 8003112:	f000 fc8c 	bl	8003a2e <HAL_GPIO_WritePin>
				break;
 8003116:	bf00      	nop
			}
		}
	}
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	200005b4 	.word	0x200005b4
 8003120:	20000006 	.word	0x20000006
 8003124:	200005a4 	.word	0x200005a4
 8003128:	40010800 	.word	0x40010800
 800312c:	40010c00 	.word	0x40010c00

08003130 <usbInit>:
 */


#include "usb.h"

void usbInit(){
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
	if(rxBuffer==NULL){
 8003134:	4b07      	ldr	r3, [pc, #28]	; (8003154 <usbInit+0x24>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d106      	bne.n	800314a <usbInit+0x1a>
		rxBuffer=malloc(50);
 800313c:	2032      	movs	r0, #50	; 0x32
 800313e:	f005 fdcd 	bl	8008cdc <malloc>
 8003142:	4603      	mov	r3, r0
 8003144:	461a      	mov	r2, r3
 8003146:	4b03      	ldr	r3, [pc, #12]	; (8003154 <usbInit+0x24>)
 8003148:	601a      	str	r2, [r3, #0]
	}
	sizeOfMessage=0;
 800314a:	4b03      	ldr	r3, [pc, #12]	; (8003158 <usbInit+0x28>)
 800314c:	2200      	movs	r2, #0
 800314e:	701a      	strb	r2, [r3, #0]
}
 8003150:	bf00      	nop
 8003152:	bd80      	pop	{r7, pc}
 8003154:	200006a0 	.word	0x200006a0
 8003158:	20000698 	.word	0x20000698

0800315c <readMessage>:
///////////////////////////////////////////////////////////////
void readMessage(){
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0

	incomingMessageFlag=0;
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <readMessage+0x88>)
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
	unsigned short crc=0;
 8003168:	2300      	movs	r3, #0
 800316a:	80bb      	strh	r3, [r7, #4]
	unsigned short crc2=0;
 800316c:	2300      	movs	r3, #0
 800316e:	80fb      	strh	r3, [r7, #6]
	memcpy(&crc,&rxBuffer[sizeOfMessage-2],2);
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <readMessage+0x8c>)
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <readMessage+0x90>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	3b02      	subs	r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	80bb      	strh	r3, [r7, #4]
	crc2=Crc16(rxBuffer,sizeOfMessage-2);
 8003182:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <readMessage+0x8c>)
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b19      	ldr	r3, [pc, #100]	; (80031ec <readMessage+0x90>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b02      	subs	r3, #2
 800318e:	b29b      	uxth	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	4610      	mov	r0, r2
 8003194:	f000 f82c 	bl	80031f0 <Crc16>
 8003198:	4603      	mov	r3, r0
 800319a:	80fb      	strh	r3, [r7, #6]
	if(crc==crc2){
 800319c:	88bb      	ldrh	r3, [r7, #4]
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d11a      	bne.n	80031da <readMessage+0x7e>
		switch(rxBuffer[1]){
 80031a4:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <readMessage+0x8c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3301      	adds	r3, #1
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d002      	beq.n	80031b6 <readMessage+0x5a>
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d006      	beq.n	80031c2 <readMessage+0x66>
				break;
			}
		}
	}

}
 80031b4:	e011      	b.n	80031da <readMessage+0x7e>
				sendAcknolege(MESSAGE_STATUS,NULL,0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2100      	movs	r1, #0
 80031ba:	2000      	movs	r0, #0
 80031bc:	f000 f8a2 	bl	8003304 <sendAcknolege>
				break;
 80031c0:	e00b      	b.n	80031da <readMessage+0x7e>
				parseCodeString(rxBuffer+2,sizeOfMessage-4);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <readMessage+0x8c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c9a      	adds	r2, r3, #2
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <readMessage+0x90>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	3b04      	subs	r3, #4
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	4610      	mov	r0, r2
 80031d4:	f7fd ffba 	bl	800114c <parseCodeString>
				break;
 80031d8:	bf00      	nop
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000375 	.word	0x20000375
 80031e8:	200006a0 	.word	0x200006a0
 80031ec:	20000698 	.word	0x20000698

080031f0 <Crc16>:
////////////////////////////////////////////////////////////////
unsigned short Crc16(char *pcBlock, unsigned short len){
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80031fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003200:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--){
 8003202:	e025      	b.n	8003250 <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b21a      	sxth	r2, r3
 8003210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003214:	4053      	eors	r3, r2
 8003216:	b21b      	sxth	r3, r3
 8003218:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 800321a:	2300      	movs	r3, #0
 800321c:	737b      	strb	r3, [r7, #13]
 800321e:	e014      	b.n	800324a <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8003220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da09      	bge.n	800323c <Crc16+0x4c>
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	b21b      	sxth	r3, r3
 800322e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b21b      	sxth	r3, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	e002      	b.n	8003242 <Crc16+0x52>
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8003244:	7b7b      	ldrb	r3, [r7, #13]
 8003246:	3301      	adds	r3, #1
 8003248:	737b      	strb	r3, [r7, #13]
 800324a:	7b7b      	ldrb	r3, [r7, #13]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d9e7      	bls.n	8003220 <Crc16+0x30>
    while (len--){
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	807a      	strh	r2, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d4      	bne.n	8003204 <Crc16+0x14>
        }
    }
    return crc;
 800325a:	89fb      	ldrh	r3, [r7, #14]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
	...

08003268 <status>:
////////////////////////////////////////////////////////////////////////
void status(char *array){
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	//отправляем позицию X. Разбираем int на char
	memcpy(array,&positionX,sizeof(int));
 8003270:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <status+0x8c>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	601a      	str	r2, [r3, #0]
	//отправляем позицию Y. Разбираем int на char
	memcpy(array+sizeof(int),&positionY,sizeof(int));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	4a1e      	ldr	r2, [pc, #120]	; (80032f8 <status+0x90>)
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	601a      	str	r2, [r3, #0]
	//отправляем позицию X. Разбираем int на char
	memcpy(array+sizeof(int)*2,&positionZ,sizeof(int));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3308      	adds	r3, #8
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <status+0x94>)
 8003288:	6812      	ldr	r2, [r2, #0]
 800328a:	601a      	str	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET){
 800328c:	2101      	movs	r1, #1
 800328e:	481c      	ldr	r0, [pc, #112]	; (8003300 <status+0x98>)
 8003290:	f000 fbb6 	bl	8003a00 <HAL_GPIO_ReadPin>
 8003294:	4603      	mov	r3, r0
 8003296:	2b01      	cmp	r3, #1
 8003298:	d104      	bne.n	80032a4 <status+0x3c>
		array[sizeof(int)*3]=1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	330c      	adds	r3, #12
 800329e:	2201      	movs	r2, #1
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	e003      	b.n	80032ac <status+0x44>
	}
	else{
		array[sizeof(int)*3]=0;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	330c      	adds	r3, #12
 80032a8:	2200      	movs	r2, #0
 80032aa:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET){
 80032ac:	2102      	movs	r1, #2
 80032ae:	4814      	ldr	r0, [pc, #80]	; (8003300 <status+0x98>)
 80032b0:	f000 fba6 	bl	8003a00 <HAL_GPIO_ReadPin>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d104      	bne.n	80032c4 <status+0x5c>
		array[sizeof(int)*3+1]=1;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	330d      	adds	r3, #13
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e003      	b.n	80032cc <status+0x64>
	}
	else{
		array[sizeof(int)*3+1]=0;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	330d      	adds	r3, #13
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
	}

	if(HAL_GPIO_ReadPin(swZ) == GPIO_PIN_SET){
 80032cc:	2104      	movs	r1, #4
 80032ce:	480c      	ldr	r0, [pc, #48]	; (8003300 <status+0x98>)
 80032d0:	f000 fb96 	bl	8003a00 <HAL_GPIO_ReadPin>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d104      	bne.n	80032e4 <status+0x7c>
		array[sizeof(int)*3+2]=1;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	330e      	adds	r3, #14
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
	}
	else{
		array[sizeof(int)*3+2]=0;
	}
}
 80032e2:	e003      	b.n	80032ec <status+0x84>
		array[sizeof(int)*3+2]=0;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	330e      	adds	r3, #14
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}
 80032f4:	200005a8 	.word	0x200005a8
 80032f8:	200005c8 	.word	0x200005c8
 80032fc:	200005a4 	.word	0x200005a4
 8003300:	40010800 	.word	0x40010800

08003304 <sendAcknolege>:
/////////////////////////////////////////////////////////////////////////
void sendAcknolege(enum messageType mess, char *array, char arrSize){
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
 8003310:	4613      	mov	r3, r2
 8003312:	71bb      	strb	r3, [r7, #6]
 8003314:	466b      	mov	r3, sp
 8003316:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+3+2;//размер,тип,CRC,размер статуса
 8003318:	2313      	movs	r3, #19
 800331a:	75fb      	strb	r3, [r7, #23]
	if(array != NULL){
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <sendAcknolege+0x26>
		size += arrSize;//размер массива, если он есть
 8003322:	7dfa      	ldrb	r2, [r7, #23]
 8003324:	79bb      	ldrb	r3, [r7, #6]
 8003326:	4413      	add	r3, r2
 8003328:	75fb      	strb	r3, [r7, #23]
	}
	char dataToSend[size];
 800332a:	7df8      	ldrb	r0, [r7, #23]
 800332c:	4603      	mov	r3, r0
 800332e:	3b01      	subs	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	b2c1      	uxtb	r1, r0
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	f04f 0400 	mov.w	r4, #0
 8003340:	00d4      	lsls	r4, r2, #3
 8003342:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003346:	00cb      	lsls	r3, r1, #3
 8003348:	b2c1      	uxtb	r1, r0
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	00d4      	lsls	r4, r2, #3
 8003358:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800335c:	00cb      	lsls	r3, r1, #3
 800335e:	4603      	mov	r3, r0
 8003360:	3307      	adds	r3, #7
 8003362:	08db      	lsrs	r3, r3, #3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	ebad 0d03 	sub.w	sp, sp, r3
 800336a:	466b      	mov	r3, sp
 800336c:	3300      	adds	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

	dataToSend[0]=size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	7dfa      	ldrb	r2, [r7, #23]
 8003374:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=mess;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	79fa      	ldrb	r2, [r7, #7]
 800337a:	705a      	strb	r2, [r3, #1]

	if(array != NULL){
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <sendAcknolege+0x8c>
		memcpy(array,dataToSend+2,arrSize);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3302      	adds	r3, #2
 8003386:	79ba      	ldrb	r2, [r7, #6]
 8003388:	4619      	mov	r1, r3
 800338a:	6838      	ldr	r0, [r7, #0]
 800338c:	f005 fcc0 	bl	8008d10 <memcpy>
	}
	status(dataToSend+2+arrSize);//статус в каждом ответном сообщении
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	79bb      	ldrb	r3, [r7, #6]
 8003394:	3302      	adds	r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff65 	bl	8003268 <status>
	unsigned short crc = Crc16(dataToSend,size-2);
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	7dfb      	ldrb	r3, [r7, #23]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b02      	subs	r3, #2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	4610      	mov	r0, r2
 80033ac:	f7ff ff20 	bl	80031f0 <Crc16>
 80033b0:	4603      	mov	r3, r0
 80033b2:	817b      	strh	r3, [r7, #10]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
 80033b8:	3b02      	subs	r3, #2
 80033ba:	4413      	add	r3, r2
 80033bc:	897a      	ldrh	r2, [r7, #10]
 80033be:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	7dfa      	ldrb	r2, [r7, #23]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f005 f87e 	bl	80084c8 <CDC_Transmit_FS>
 80033cc:	46ad      	mov	sp, r5
}
 80033ce:	bf00      	nop
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bdb0      	pop	{r4, r5, r7, pc}

080033d6 <sendFree>:
/////////////////////////////////////////////////////////////////////////
void sendFree(){
 80033d6:	b580      	push	{r7, lr}
 80033d8:	af00      	add	r7, sp, #0
	sendAcknolege(MESSAGE_COMPLETE,NULL,0);
 80033da:	2200      	movs	r2, #0
 80033dc:	2100      	movs	r1, #0
 80033de:	2002      	movs	r0, #2
 80033e0:	f7ff ff90 	bl	8003304 <sendAcknolege>
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80033e8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80033ea:	e003      	b.n	80033f4 <LoopCopyDataInit>

080033ec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80033ee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80033f0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80033f2:	3104      	adds	r1, #4

080033f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80033f4:	480a      	ldr	r0, [pc, #40]	; (8003420 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80033f8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80033fa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80033fc:	d3f6      	bcc.n	80033ec <CopyDataInit>
  ldr r2, =_sbss
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003400:	e002      	b.n	8003408 <LoopFillZerobss>

08003402 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003402:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003404:	f842 3b04 	str.w	r3, [r2], #4

08003408 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003408:	4b08      	ldr	r3, [pc, #32]	; (800342c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800340a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800340c:	d3f9      	bcc.n	8003402 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800340e:	f7ff fbf3 	bl	8002bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003412:	f005 fc31 	bl	8008c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003416:	f7ff f82b 	bl	8002470 <main>
  bx lr
 800341a:	4770      	bx	lr
  ldr r3, =_sidata
 800341c:	080091ac 	.word	0x080091ac
  ldr r0, =_sdata
 8003420:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003424:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 8003428:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 800342c:	20001644 	.word	0x20001644

08003430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003430:	e7fe      	b.n	8003430 <ADC1_2_IRQHandler>
	...

08003434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <HAL_Init+0x28>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a07      	ldr	r2, [pc, #28]	; (800345c <HAL_Init+0x28>)
 800343e:	f043 0310 	orr.w	r3, r3, #16
 8003442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003444:	2003      	movs	r0, #3
 8003446:	f000 f923 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800344a:	2000      	movs	r0, #0
 800344c:	f000 f808 	bl	8003460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003450:	f7ff fa5e 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	40022000 	.word	0x40022000

08003460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003468:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <HAL_InitTick+0x54>)
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_InitTick+0x58>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	4619      	mov	r1, r3
 8003472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003476:	fbb3 f3f1 	udiv	r3, r3, r1
 800347a:	fbb2 f3f3 	udiv	r3, r2, r3
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f93b 	bl	80036fa <HAL_SYSTICK_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00e      	b.n	80034ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0f      	cmp	r3, #15
 8003492:	d80a      	bhi.n	80034aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003494:	2200      	movs	r2, #0
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	f04f 30ff 	mov.w	r0, #4294967295
 800349c:	f000 f903 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034a0:	4a06      	ldr	r2, [pc, #24]	; (80034bc <HAL_InitTick+0x5c>)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
 80034a8:	e000      	b.n	80034ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000000 	.word	0x20000000
 80034b8:	2000000c 	.word	0x2000000c
 80034bc:	20000008 	.word	0x20000008

080034c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c4:	4b05      	ldr	r3, [pc, #20]	; (80034dc <HAL_IncTick+0x1c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <HAL_IncTick+0x20>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	4a03      	ldr	r2, [pc, #12]	; (80034e0 <HAL_IncTick+0x20>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bc80      	pop	{r7}
 80034da:	4770      	bx	lr
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	2000073c 	.word	0x2000073c

080034e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return uwTick;
 80034e8:	4b02      	ldr	r3, [pc, #8]	; (80034f4 <HAL_GetTick+0x10>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bc80      	pop	{r7}
 80034f2:	4770      	bx	lr
 80034f4:	2000073c 	.word	0x2000073c

080034f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f003 0307 	and.w	r3, r3, #7
 8003506:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003508:	4b0c      	ldr	r3, [pc, #48]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003514:	4013      	ands	r3, r2
 8003516:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003520:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003528:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <__NVIC_SetPriorityGrouping+0x44>)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	60d3      	str	r3, [r2, #12]
}
 8003530:	bf00      	nop
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <__NVIC_GetPriorityGrouping+0x18>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	0a1b      	lsrs	r3, r3, #8
 800354a:	f003 0307 	and.w	r3, r3, #7
}
 800354e:	4618      	mov	r0, r3
 8003550:	46bd      	mov	sp, r7
 8003552:	bc80      	pop	{r7}
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356a:	2b00      	cmp	r3, #0
 800356c:	db0b      	blt.n	8003586 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	f003 021f 	and.w	r2, r3, #31
 8003574:	4906      	ldr	r1, [pc, #24]	; (8003590 <__NVIC_EnableIRQ+0x34>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	2001      	movs	r0, #1
 800357e:	fa00 f202 	lsl.w	r2, r0, r2
 8003582:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	e000e100 	.word	0xe000e100

08003594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	6039      	str	r1, [r7, #0]
 800359e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	db0a      	blt.n	80035be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	490c      	ldr	r1, [pc, #48]	; (80035e0 <__NVIC_SetPriority+0x4c>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	0112      	lsls	r2, r2, #4
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	440b      	add	r3, r1
 80035b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035bc:	e00a      	b.n	80035d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	4908      	ldr	r1, [pc, #32]	; (80035e4 <__NVIC_SetPriority+0x50>)
 80035c4:	79fb      	ldrb	r3, [r7, #7]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	3b04      	subs	r3, #4
 80035cc:	0112      	lsls	r2, r2, #4
 80035ce:	b2d2      	uxtb	r2, r2
 80035d0:	440b      	add	r3, r1
 80035d2:	761a      	strb	r2, [r3, #24]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	bc80      	pop	{r7}
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	e000e100 	.word	0xe000e100
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b089      	sub	sp, #36	; 0x24
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	f1c3 0307 	rsb	r3, r3, #7
 8003602:	2b04      	cmp	r3, #4
 8003604:	bf28      	it	cs
 8003606:	2304      	movcs	r3, #4
 8003608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	3304      	adds	r3, #4
 800360e:	2b06      	cmp	r3, #6
 8003610:	d902      	bls.n	8003618 <NVIC_EncodePriority+0x30>
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3b03      	subs	r3, #3
 8003616:	e000      	b.n	800361a <NVIC_EncodePriority+0x32>
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800361c:	f04f 32ff 	mov.w	r2, #4294967295
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	fa02 f303 	lsl.w	r3, r2, r3
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	401a      	ands	r2, r3
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003630:	f04f 31ff 	mov.w	r1, #4294967295
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	43d9      	mvns	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003640:	4313      	orrs	r3, r2
         );
}
 8003642:	4618      	mov	r0, r3
 8003644:	3724      	adds	r7, #36	; 0x24
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	f7ff ff90 	bl	8003594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff2d 	bl	80034f8 <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff42 	bl	8003540 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff90 	bl	80035e8 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5f 	bl	8003594 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff35 	bl	800355c <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa2 	bl	800364c <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e00e      	b.n	8003742 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	795b      	ldrb	r3, [r3, #5]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d105      	bne.n	800373a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff f91d 	bl	8002974 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b08b      	sub	sp, #44	; 0x2c
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800375a:	2300      	movs	r3, #0
 800375c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800375e:	e127      	b.n	80039b0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003760:	2201      	movs	r2, #1
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69fa      	ldr	r2, [r7, #28]
 8003770:	4013      	ands	r3, r2
 8003772:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	429a      	cmp	r2, r3
 800377a:	f040 8116 	bne.w	80039aa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b12      	cmp	r3, #18
 8003784:	d034      	beq.n	80037f0 <HAL_GPIO_Init+0xa4>
 8003786:	2b12      	cmp	r3, #18
 8003788:	d80d      	bhi.n	80037a6 <HAL_GPIO_Init+0x5a>
 800378a:	2b02      	cmp	r3, #2
 800378c:	d02b      	beq.n	80037e6 <HAL_GPIO_Init+0x9a>
 800378e:	2b02      	cmp	r3, #2
 8003790:	d804      	bhi.n	800379c <HAL_GPIO_Init+0x50>
 8003792:	2b00      	cmp	r3, #0
 8003794:	d031      	beq.n	80037fa <HAL_GPIO_Init+0xae>
 8003796:	2b01      	cmp	r3, #1
 8003798:	d01c      	beq.n	80037d4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800379a:	e048      	b.n	800382e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800379c:	2b03      	cmp	r3, #3
 800379e:	d043      	beq.n	8003828 <HAL_GPIO_Init+0xdc>
 80037a0:	2b11      	cmp	r3, #17
 80037a2:	d01b      	beq.n	80037dc <HAL_GPIO_Init+0x90>
          break;
 80037a4:	e043      	b.n	800382e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80037a6:	4a89      	ldr	r2, [pc, #548]	; (80039cc <HAL_GPIO_Init+0x280>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d026      	beq.n	80037fa <HAL_GPIO_Init+0xae>
 80037ac:	4a87      	ldr	r2, [pc, #540]	; (80039cc <HAL_GPIO_Init+0x280>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d806      	bhi.n	80037c0 <HAL_GPIO_Init+0x74>
 80037b2:	4a87      	ldr	r2, [pc, #540]	; (80039d0 <HAL_GPIO_Init+0x284>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d020      	beq.n	80037fa <HAL_GPIO_Init+0xae>
 80037b8:	4a86      	ldr	r2, [pc, #536]	; (80039d4 <HAL_GPIO_Init+0x288>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d01d      	beq.n	80037fa <HAL_GPIO_Init+0xae>
          break;
 80037be:	e036      	b.n	800382e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80037c0:	4a85      	ldr	r2, [pc, #532]	; (80039d8 <HAL_GPIO_Init+0x28c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d019      	beq.n	80037fa <HAL_GPIO_Init+0xae>
 80037c6:	4a85      	ldr	r2, [pc, #532]	; (80039dc <HAL_GPIO_Init+0x290>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d016      	beq.n	80037fa <HAL_GPIO_Init+0xae>
 80037cc:	4a84      	ldr	r2, [pc, #528]	; (80039e0 <HAL_GPIO_Init+0x294>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d013      	beq.n	80037fa <HAL_GPIO_Init+0xae>
          break;
 80037d2:	e02c      	b.n	800382e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	623b      	str	r3, [r7, #32]
          break;
 80037da:	e028      	b.n	800382e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	3304      	adds	r3, #4
 80037e2:	623b      	str	r3, [r7, #32]
          break;
 80037e4:	e023      	b.n	800382e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	3308      	adds	r3, #8
 80037ec:	623b      	str	r3, [r7, #32]
          break;
 80037ee:	e01e      	b.n	800382e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	330c      	adds	r3, #12
 80037f6:	623b      	str	r3, [r7, #32]
          break;
 80037f8:	e019      	b.n	800382e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d102      	bne.n	8003808 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003802:	2304      	movs	r3, #4
 8003804:	623b      	str	r3, [r7, #32]
          break;
 8003806:	e012      	b.n	800382e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d105      	bne.n	800381c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003810:	2308      	movs	r3, #8
 8003812:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	611a      	str	r2, [r3, #16]
          break;
 800381a:	e008      	b.n	800382e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800381c:	2308      	movs	r3, #8
 800381e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	615a      	str	r2, [r3, #20]
          break;
 8003826:	e002      	b.n	800382e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003828:	2300      	movs	r3, #0
 800382a:	623b      	str	r3, [r7, #32]
          break;
 800382c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	2bff      	cmp	r3, #255	; 0xff
 8003832:	d801      	bhi.n	8003838 <HAL_GPIO_Init+0xec>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	e001      	b.n	800383c <HAL_GPIO_Init+0xf0>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3304      	adds	r3, #4
 800383c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2bff      	cmp	r3, #255	; 0xff
 8003842:	d802      	bhi.n	800384a <HAL_GPIO_Init+0xfe>
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	e002      	b.n	8003850 <HAL_GPIO_Init+0x104>
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	3b08      	subs	r3, #8
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	210f      	movs	r1, #15
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	401a      	ands	r2, r3
 8003862:	6a39      	ldr	r1, [r7, #32]
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	fa01 f303 	lsl.w	r3, r1, r3
 800386a:	431a      	orrs	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 8096 	beq.w	80039aa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800387e:	4b59      	ldr	r3, [pc, #356]	; (80039e4 <HAL_GPIO_Init+0x298>)
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_GPIO_Init+0x298>)
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	6193      	str	r3, [r2, #24]
 800388a:	4b56      	ldr	r3, [pc, #344]	; (80039e4 <HAL_GPIO_Init+0x298>)
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003896:	4a54      	ldr	r2, [pc, #336]	; (80039e8 <HAL_GPIO_Init+0x29c>)
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	089b      	lsrs	r3, r3, #2
 800389c:	3302      	adds	r3, #2
 800389e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038a2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	f003 0303 	and.w	r3, r3, #3
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	220f      	movs	r2, #15
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4b      	ldr	r2, [pc, #300]	; (80039ec <HAL_GPIO_Init+0x2a0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d013      	beq.n	80038ea <HAL_GPIO_Init+0x19e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4a      	ldr	r2, [pc, #296]	; (80039f0 <HAL_GPIO_Init+0x2a4>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00d      	beq.n	80038e6 <HAL_GPIO_Init+0x19a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a49      	ldr	r2, [pc, #292]	; (80039f4 <HAL_GPIO_Init+0x2a8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <HAL_GPIO_Init+0x196>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a48      	ldr	r2, [pc, #288]	; (80039f8 <HAL_GPIO_Init+0x2ac>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d101      	bne.n	80038de <HAL_GPIO_Init+0x192>
 80038da:	2303      	movs	r3, #3
 80038dc:	e006      	b.n	80038ec <HAL_GPIO_Init+0x1a0>
 80038de:	2304      	movs	r3, #4
 80038e0:	e004      	b.n	80038ec <HAL_GPIO_Init+0x1a0>
 80038e2:	2302      	movs	r3, #2
 80038e4:	e002      	b.n	80038ec <HAL_GPIO_Init+0x1a0>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <HAL_GPIO_Init+0x1a0>
 80038ea:	2300      	movs	r3, #0
 80038ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ee:	f002 0203 	and.w	r2, r2, #3
 80038f2:	0092      	lsls	r2, r2, #2
 80038f4:	4093      	lsls	r3, r2
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80038fc:	493a      	ldr	r1, [pc, #232]	; (80039e8 <HAL_GPIO_Init+0x29c>)
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	089b      	lsrs	r3, r3, #2
 8003902:	3302      	adds	r3, #2
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d006      	beq.n	8003924 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003916:	4b39      	ldr	r3, [pc, #228]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	4313      	orrs	r3, r2
 8003920:	600b      	str	r3, [r1, #0]
 8003922:	e006      	b.n	8003932 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003924:	4b35      	ldr	r3, [pc, #212]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	69bb      	ldr	r3, [r7, #24]
 800392a:	43db      	mvns	r3, r3
 800392c:	4933      	ldr	r1, [pc, #204]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800392e:	4013      	ands	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d006      	beq.n	800394c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	492e      	ldr	r1, [pc, #184]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
 800394a:	e006      	b.n	800395a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800394c:	4b2b      	ldr	r3, [pc, #172]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	43db      	mvns	r3, r3
 8003954:	4929      	ldr	r1, [pc, #164]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003956:	4013      	ands	r3, r2
 8003958:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d006      	beq.n	8003974 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	4924      	ldr	r1, [pc, #144]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
 8003972:	e006      	b.n	8003982 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003974:	4b21      	ldr	r3, [pc, #132]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003976:	689a      	ldr	r2, [r3, #8]
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	43db      	mvns	r3, r3
 800397c:	491f      	ldr	r1, [pc, #124]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800397e:	4013      	ands	r3, r2
 8003980:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d006      	beq.n	800399c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003990:	68da      	ldr	r2, [r3, #12]
 8003992:	491a      	ldr	r1, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	60cb      	str	r3, [r1, #12]
 800399a:	e006      	b.n	80039aa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800399c:	4b17      	ldr	r3, [pc, #92]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	4915      	ldr	r1, [pc, #84]	; (80039fc <HAL_GPIO_Init+0x2b0>)
 80039a6:	4013      	ands	r3, r2
 80039a8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80039aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ac:	3301      	adds	r3, #1
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f47f aed0 	bne.w	8003760 <HAL_GPIO_Init+0x14>
  }
}
 80039c0:	bf00      	nop
 80039c2:	372c      	adds	r7, #44	; 0x2c
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	10210000 	.word	0x10210000
 80039d0:	10110000 	.word	0x10110000
 80039d4:	10120000 	.word	0x10120000
 80039d8:	10310000 	.word	0x10310000
 80039dc:	10320000 	.word	0x10320000
 80039e0:	10220000 	.word	0x10220000
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40010800 	.word	0x40010800
 80039f0:	40010c00 	.word	0x40010c00
 80039f4:	40011000 	.word	0x40011000
 80039f8:	40011400 	.word	0x40011400
 80039fc:	40010400 	.word	0x40010400

08003a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bc80      	pop	{r7}
 8003a2c:	4770      	bx	lr

08003a2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b083      	sub	sp, #12
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
 8003a36:	460b      	mov	r3, r1
 8003a38:	807b      	strh	r3, [r7, #2]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a3e:	787b      	ldrb	r3, [r7, #1]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003a4a:	e003      	b.n	8003a54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	041a      	lsls	r2, r3, #16
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	611a      	str	r2, [r3, #16]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr

08003a5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
 8003a66:	460b      	mov	r3, r1
 8003a68:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	887b      	ldrh	r3, [r7, #2]
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	611a      	str	r2, [r3, #16]
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr

08003a8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003a8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a90:	b08b      	sub	sp, #44	; 0x2c
 8003a92:	af06      	add	r7, sp, #24
 8003a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d101      	bne.n	8003aa0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0d3      	b.n	8003c48 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d106      	bne.n	8003aba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f004 fe3b 	bl	8008730 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2203      	movs	r2, #3
 8003abe:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 ff93 	bl	80059f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	687e      	ldr	r6, [r7, #4]
 8003ad4:	466d      	mov	r5, sp
 8003ad6:	f106 0410 	add.w	r4, r6, #16
 8003ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ade:	6823      	ldr	r3, [r4, #0]
 8003ae0:	602b      	str	r3, [r5, #0]
 8003ae2:	1d33      	adds	r3, r6, #4
 8003ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae6:	6838      	ldr	r0, [r7, #0]
 8003ae8:	f001 ff5c 	bl	80059a4 <USB_CoreInit>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2202      	movs	r2, #2
 8003af6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e0a4      	b.n	8003c48 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2100      	movs	r1, #0
 8003b04:	4618      	mov	r0, r3
 8003b06:	f001 ff90 	bl	8005a2a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	73fb      	strb	r3, [r7, #15]
 8003b0e:	e035      	b.n	8003b7c <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b10:	7bfb      	ldrb	r3, [r7, #15]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	015b      	lsls	r3, r3, #5
 8003b16:	4413      	add	r3, r2
 8003b18:	3329      	adds	r3, #41	; 0x29
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	015b      	lsls	r3, r3, #5
 8003b24:	4413      	add	r3, r2
 8003b26:	3328      	adds	r3, #40	; 0x28
 8003b28:	7bfa      	ldrb	r2, [r7, #15]
 8003b2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
 8003b2e:	7bfa      	ldrb	r2, [r7, #15]
 8003b30:	b291      	uxth	r1, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	015b      	lsls	r3, r3, #5
 8003b36:	4413      	add	r3, r2
 8003b38:	3336      	adds	r3, #54	; 0x36
 8003b3a:	460a      	mov	r2, r1
 8003b3c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	015b      	lsls	r3, r3, #5
 8003b44:	4413      	add	r3, r2
 8003b46:	332b      	adds	r3, #43	; 0x2b
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	015b      	lsls	r3, r3, #5
 8003b52:	4413      	add	r3, r2
 8003b54:	3338      	adds	r3, #56	; 0x38
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b5a:	7bfb      	ldrb	r3, [r7, #15]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	015b      	lsls	r3, r3, #5
 8003b60:	4413      	add	r3, r2
 8003b62:	333c      	adds	r3, #60	; 0x3c
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	3302      	adds	r3, #2
 8003b6e:	015b      	lsls	r3, r3, #5
 8003b70:	4413      	add	r3, r2
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3c4      	bcc.n	8003b10 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	73fb      	strb	r3, [r7, #15]
 8003b8a:	e031      	b.n	8003bf0 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b8c:	7bfb      	ldrb	r3, [r7, #15]
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	015b      	lsls	r3, r3, #5
 8003b92:	4413      	add	r3, r2
 8003b94:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003b98:	2200      	movs	r2, #0
 8003b9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bac:	7bfb      	ldrb	r3, [r7, #15]
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	015b      	lsls	r3, r3, #5
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003bb8:	2200      	movs	r2, #0
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	015b      	lsls	r3, r3, #5
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003bc8:	2200      	movs	r2, #0
 8003bca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	015b      	lsls	r3, r3, #5
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003bdc:	7bfb      	ldrb	r3, [r7, #15]
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	330a      	adds	r3, #10
 8003be2:	015b      	lsls	r3, r3, #5
 8003be4:	4413      	add	r3, r2
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bea:	7bfb      	ldrb	r3, [r7, #15]
 8003bec:	3301      	adds	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
 8003bf0:	7bfa      	ldrb	r2, [r7, #15]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d3c8      	bcc.n	8003b8c <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	687e      	ldr	r6, [r7, #4]
 8003c02:	466d      	mov	r5, sp
 8003c04:	f106 0410 	add.w	r4, r6, #16
 8003c08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0c:	6823      	ldr	r3, [r4, #0]
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	1d33      	adds	r3, r6, #4
 8003c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c14:	6838      	ldr	r0, [r7, #0]
 8003c16:	f001 ff14 	bl	8005a42 <USB_DevInit>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d005      	beq.n	8003c2c <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e00d      	b.n	8003c48 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f002 ff52 	bl	8006aea <USB_DevDisconnect>

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3714      	adds	r7, #20
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c50 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d101      	bne.n	8003c66 <HAL_PCD_Start+0x16>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e016      	b.n	8003c94 <HAL_PCD_Start+0x44>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003c6e:	2101      	movs	r1, #1
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f004 ffc4 	bl	8008bfe <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f002 ff2b 	bl	8006ad6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fe9d 	bl	80059c4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3708      	adds	r7, #8
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f002 ff28 	bl	8006afe <USB_ReadInterrupts>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cb8:	d102      	bne.n	8003cc0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 faf2 	bl	80042a4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 ff1a 	bl	8006afe <USB_ReadInterrupts>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d112      	bne.n	8003cfc <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce8:	b292      	uxth	r2, r2
 8003cea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f004 fd93 	bl	800881a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f8de 	bl	8003eb8 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f002 fefc 	bl	8006afe <USB_ReadInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d10:	d10b      	bne.n	8003d2a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d24:	b292      	uxth	r2, r2
 8003d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 fee5 	bl	8006afe <USB_ReadInterrupts>
 8003d34:	4603      	mov	r3, r0
 8003d36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	d10b      	bne.n	8003d58 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d48:	b29a      	uxth	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d52:	b292      	uxth	r2, r2
 8003d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f002 fece 	bl	8006afe <USB_ReadInterrupts>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d6c:	d126      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0204 	bic.w	r2, r2, #4
 8003d80:	b292      	uxth	r2, r2
 8003d82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f022 0208 	bic.w	r2, r2, #8
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f004 fd74 	bl	800888c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003db6:	b292      	uxth	r2, r2
 8003db8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f002 fe9c 	bl	8006afe <USB_ReadInterrupts>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd0:	d13d      	bne.n	8003e4e <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0208 	orr.w	r2, r2, #8
 8003de4:	b292      	uxth	r2, r2
 8003de6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dfc:	b292      	uxth	r2, r2
 8003dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e0a:	b29a      	uxth	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f042 0204 	orr.w	r2, r2, #4
 8003e14:	b292      	uxth	r2, r2
 8003e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f002 fe6d 	bl	8006afe <USB_ReadInterrupts>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2e:	d10b      	bne.n	8003e48 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e42:	b292      	uxth	r2, r2
 8003e44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f004 fd05 	bl	8008858 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f002 fe53 	bl	8006afe <USB_ReadInterrupts>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e62:	d10e      	bne.n	8003e82 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e6c:	b29a      	uxth	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003e76:	b292      	uxth	r2, r2
 8003e78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f004 fcbe 	bl	80087fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f002 fe39 	bl	8006afe <USB_ReadInterrupts>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d10b      	bne.n	8003eb0 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_SetAddress+0x1a>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e013      	b.n	8003efa <HAL_PCD_SetAddress+0x42>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	78fa      	ldrb	r2, [r7, #3]
 8003ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fde0 	bl	8006ab0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	4608      	mov	r0, r1
 8003f0c:	4611      	mov	r1, r2
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	70fb      	strb	r3, [r7, #3]
 8003f14:	460b      	mov	r3, r1
 8003f16:	803b      	strh	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	da0b      	bge.n	8003f40 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	015b      	lsls	r3, r3, #5
 8003f30:	3328      	adds	r3, #40	; 0x28
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	705a      	strb	r2, [r3, #1]
 8003f3e:	e00b      	b.n	8003f58 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f40:	78fb      	ldrb	r3, [r7, #3]
 8003f42:	f003 0307 	and.w	r3, r3, #7
 8003f46:	015b      	lsls	r3, r3, #5
 8003f48:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	4413      	add	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003f64:	883a      	ldrh	r2, [r7, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	78ba      	ldrb	r2, [r7, #2]
 8003f6e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	785b      	ldrb	r3, [r3, #1]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d004      	beq.n	8003f82 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f82:	78bb      	ldrb	r3, [r7, #2]
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d102      	bne.n	8003f8e <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_PCD_EP_Open+0x9a>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e00e      	b.n	8003fba <HAL_PCD_EP_Open+0xb8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68f9      	ldr	r1, [r7, #12]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f001 fd6e 	bl	8005a8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da0b      	bge.n	8003fee <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	015b      	lsls	r3, r3, #5
 8003fde:	3328      	adds	r3, #40	; 0x28
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	705a      	strb	r2, [r3, #1]
 8003fec:	e00b      	b.n	8004006 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	015b      	lsls	r3, r3, #5
 8003ff6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004006:	78fb      	ldrb	r3, [r7, #3]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	b2da      	uxtb	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004018:	2b01      	cmp	r3, #1
 800401a:	d101      	bne.n	8004020 <HAL_PCD_EP_Close+0x5e>
 800401c:	2302      	movs	r3, #2
 800401e:	e00e      	b.n	800403e <HAL_PCD_EP_Close+0x7c>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	4618      	mov	r0, r3
 8004030:	f002 f81a 	bl	8006068 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b086      	sub	sp, #24
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
 8004052:	460b      	mov	r3, r1
 8004054:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004056:	7afb      	ldrb	r3, [r7, #11]
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	015b      	lsls	r3, r3, #5
 800405e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4413      	add	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	2200      	movs	r2, #0
 8004078:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	f003 0307 	and.w	r3, r3, #7
 8004086:	b2da      	uxtb	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800408c:	7afb      	ldrb	r3, [r7, #11]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b00      	cmp	r3, #0
 8004094:	d106      	bne.n	80040a4 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6979      	ldr	r1, [r7, #20]
 800409c:	4618      	mov	r0, r3
 800409e:	f002 f979 	bl	8006394 <USB_EPStartXfer>
 80040a2:	e005      	b.n	80040b0 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6979      	ldr	r1, [r7, #20]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 f972 	bl	8006394 <USB_EPStartXfer>
  }

  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3718      	adds	r7, #24
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ba:	b480      	push	{r7}
 80040bc:	b083      	sub	sp, #12
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040c6:	78fb      	ldrb	r3, [r7, #3]
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	330a      	adds	r3, #10
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	681b      	ldr	r3, [r3, #0]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	bc80      	pop	{r7}
 80040e0:	4770      	bx	lr

080040e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b086      	sub	sp, #24
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	60f8      	str	r0, [r7, #12]
 80040ea:	607a      	str	r2, [r7, #4]
 80040ec:	603b      	str	r3, [r7, #0]
 80040ee:	460b      	mov	r3, r1
 80040f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040f2:	7afb      	ldrb	r3, [r7, #11]
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	015b      	lsls	r3, r3, #5
 80040fa:	3328      	adds	r3, #40	; 0x28
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4413      	add	r3, r2
 8004100:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2201      	movs	r2, #1
 8004118:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411a:	7afb      	ldrb	r3, [r7, #11]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	b2da      	uxtb	r2, r3
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004126:	7afb      	ldrb	r3, [r7, #11]
 8004128:	f003 0307 	and.w	r3, r3, #7
 800412c:	2b00      	cmp	r3, #0
 800412e:	d106      	bne.n	800413e <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 f92c 	bl	8006394 <USB_EPStartXfer>
 800413c:	e005      	b.n	800414a <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	4618      	mov	r0, r3
 8004146:	f002 f925 	bl	8006394 <USB_EPStartXfer>
  }

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004160:	78fb      	ldrb	r3, [r7, #3]
 8004162:	f003 0207 	and.w	r2, r3, #7
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	429a      	cmp	r2, r3
 800416c:	d901      	bls.n	8004172 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e046      	b.n	8004200 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004172:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004176:	2b00      	cmp	r3, #0
 8004178:	da0b      	bge.n	8004192 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	015b      	lsls	r3, r3, #5
 8004182:	3328      	adds	r3, #40	; 0x28
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	4413      	add	r3, r2
 8004188:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	705a      	strb	r2, [r3, #1]
 8004190:	e009      	b.n	80041a6 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004192:	78fb      	ldrb	r3, [r7, #3]
 8004194:	015b      	lsls	r3, r3, #5
 8004196:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2201      	movs	r2, #1
 80041aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d101      	bne.n	80041c6 <HAL_PCD_EP_SetStall+0x72>
 80041c2:	2302      	movs	r3, #2
 80041c4:	e01c      	b.n	8004200 <HAL_PCD_EP_SetStall+0xac>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68f9      	ldr	r1, [r7, #12]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f002 fb95 	bl	8006904 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041da:	78fb      	ldrb	r3, [r7, #3]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d108      	bne.n	80041f6 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80041ee:	4619      	mov	r1, r3
 80041f0:	4610      	mov	r0, r2
 80041f2:	f002 fc93 	bl	8006b1c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3710      	adds	r7, #16
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d901      	bls.n	8004226 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e03a      	b.n	800429c <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800422a:	2b00      	cmp	r3, #0
 800422c:	da0b      	bge.n	8004246 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	3328      	adds	r3, #40	; 0x28
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	4413      	add	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2201      	movs	r2, #1
 8004242:	705a      	strb	r2, [r3, #1]
 8004244:	e00b      	b.n	800425e <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	015b      	lsls	r3, r3, #5
 800424e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004276:	2b01      	cmp	r3, #1
 8004278:	d101      	bne.n	800427e <HAL_PCD_EP_ClrStall+0x76>
 800427a:	2302      	movs	r3, #2
 800427c:	e00e      	b.n	800429c <HAL_PCD_EP_ClrStall+0x94>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68f9      	ldr	r1, [r7, #12]
 800428c:	4618      	mov	r0, r3
 800428e:	f002 fb7b 	bl	8006988 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80042a4:	b590      	push	{r4, r7, lr}
 80042a6:	b089      	sub	sp, #36	; 0x24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80042ac:	e282      	b.n	80047b4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042b6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80042b8:	8afb      	ldrh	r3, [r7, #22]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 030f 	and.w	r3, r3, #15
 80042c0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80042c2:	7d7b      	ldrb	r3, [r7, #21]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f040 8142 	bne.w	800454e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80042ca:	8afb      	ldrh	r3, [r7, #22]
 80042cc:	f003 0310 	and.w	r3, r3, #16
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d151      	bne.n	8004378 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	b29b      	uxth	r3, r3
 80042dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80042e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042e4:	b29c      	uxth	r4, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80042ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3328      	adds	r3, #40	; 0x28
 80042fa:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004304:	b29b      	uxth	r3, r3
 8004306:	461a      	mov	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4413      	add	r3, r2
 8004310:	3302      	adds	r3, #2
 8004312:	005b      	lsls	r3, r3, #1
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	6812      	ldr	r2, [r2, #0]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	695a      	ldr	r2, [r3, #20]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	441a      	add	r2, r3
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004336:	2100      	movs	r1, #0
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f004 fa49 	bl	80087d0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8234 	beq.w	80047b4 <PCD_EP_ISR_Handler+0x510>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f040 822f 	bne.w	80047b4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004362:	b2da      	uxtb	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	b292      	uxth	r2, r2
 800436a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004376:	e21d      	b.n	80047b4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800437e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	881b      	ldrh	r3, [r3, #0]
 8004386:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004388:	8a7b      	ldrh	r3, [r7, #18]
 800438a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800438e:	2b00      	cmp	r3, #0
 8004390:	d033      	beq.n	80043fa <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800439a:	b29b      	uxth	r3, r3
 800439c:	461a      	mov	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4413      	add	r3, r2
 80043a6:	3306      	adds	r3, #6
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b4:	881b      	ldrh	r3, [r3, #0]
 80043b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	f002 fbf2 	bl	8006bba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	b29a      	uxth	r2, r3
 80043de:	f640 738f 	movw	r3, #3983	; 0xf8f
 80043e2:	4013      	ands	r3, r2
 80043e4:	b29c      	uxth	r4, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80043ee:	b292      	uxth	r2, r2
 80043f0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f004 f9c2 	bl	800877c <HAL_PCD_SetupStageCallback>
 80043f8:	e1dc      	b.n	80047b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80043fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f280 81d8 	bge.w	80047b4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29a      	uxth	r2, r3
 800440c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004410:	4013      	ands	r3, r2
 8004412:	b29c      	uxth	r4, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800441c:	b292      	uxth	r2, r2
 800441e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004428:	b29b      	uxth	r3, r3
 800442a:	461a      	mov	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4413      	add	r3, r2
 8004434:	3306      	adds	r3, #6
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004442:	881b      	ldrh	r3, [r3, #0]
 8004444:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	69db      	ldr	r3, [r3, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <PCD_EP_ISR_Handler+0x1e4>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6959      	ldr	r1, [r3, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800446c:	b29b      	uxth	r3, r3
 800446e:	f002 fba4 	bl	8006bba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004480:	2100      	movs	r1, #0
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f004 f98c 	bl	80087a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	461c      	mov	r4, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004496:	b29b      	uxth	r3, r3
 8004498:	441c      	add	r4, r3
 800449a:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800449e:	461c      	mov	r4, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10e      	bne.n	80044c6 <PCD_EP_ISR_Handler+0x222>
 80044a8:	8823      	ldrh	r3, [r4, #0]
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	8023      	strh	r3, [r4, #0]
 80044b4:	8823      	ldrh	r3, [r4, #0]
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	8023      	strh	r3, [r4, #0]
 80044c4:	e02d      	b.n	8004522 <PCD_EP_ISR_Handler+0x27e>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b3e      	cmp	r3, #62	; 0x3e
 80044cc:	d812      	bhi.n	80044f4 <PCD_EP_ISR_Handler+0x250>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	085b      	lsrs	r3, r3, #1
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d002      	beq.n	80044e8 <PCD_EP_ISR_Handler+0x244>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3301      	adds	r3, #1
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	029b      	lsls	r3, r3, #10
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8023      	strh	r3, [r4, #0]
 80044f2:	e016      	b.n	8004522 <PCD_EP_ISR_Handler+0x27e>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f003 031f 	and.w	r3, r3, #31
 8004504:	2b00      	cmp	r3, #0
 8004506:	d102      	bne.n	800450e <PCD_EP_ISR_Handler+0x26a>
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	3b01      	subs	r3, #1
 800450c:	61bb      	str	r3, [r7, #24]
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	b29b      	uxth	r3, r3
 8004512:	029b      	lsls	r3, r3, #10
 8004514:	b29b      	uxth	r3, r3
 8004516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800451a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800451e:	b29b      	uxth	r3, r3
 8004520:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	b29b      	uxth	r3, r3
 800452a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800452e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004532:	b29c      	uxth	r4, r3
 8004534:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004538:	b29c      	uxth	r4, r3
 800453a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800453e:	b29c      	uxth	r4, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	4ba2      	ldr	r3, [pc, #648]	; (80047d0 <PCD_EP_ISR_Handler+0x52c>)
 8004546:	4323      	orrs	r3, r4
 8004548:	b29b      	uxth	r3, r3
 800454a:	8013      	strh	r3, [r2, #0]
 800454c:	e132      	b.n	80047b4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	7d7b      	ldrb	r3, [r7, #21]
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4413      	add	r3, r2
 800455a:	881b      	ldrh	r3, [r3, #0]
 800455c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800455e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f280 80d1 	bge.w	800470a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	461a      	mov	r2, r3
 800456e:	7d7b      	ldrb	r3, [r7, #21]
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	881b      	ldrh	r3, [r3, #0]
 8004576:	b29a      	uxth	r2, r3
 8004578:	f640 738f 	movw	r3, #3983	; 0xf8f
 800457c:	4013      	ands	r3, r2
 800457e:	b29c      	uxth	r4, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	7d7b      	ldrb	r3, [r7, #21]
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	4413      	add	r3, r2
 800458c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004590:	b292      	uxth	r2, r2
 8004592:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004594:	7d7b      	ldrb	r3, [r7, #21]
 8004596:	015b      	lsls	r3, r3, #5
 8004598:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800459c:	687a      	ldr	r2, [r7, #4]
 800459e:	4413      	add	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	7b1b      	ldrb	r3, [r3, #12]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d121      	bne.n	80045ee <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	3306      	adds	r3, #6
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80045cc:	881b      	ldrh	r3, [r3, #0]
 80045ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045d2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80045d4:	8bfb      	ldrh	r3, [r7, #30]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d072      	beq.n	80046c0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6818      	ldr	r0, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6959      	ldr	r1, [r3, #20]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	88da      	ldrh	r2, [r3, #6]
 80045e6:	8bfb      	ldrh	r3, [r7, #30]
 80045e8:	f002 fae7 	bl	8006bba <USB_ReadPMA>
 80045ec:	e068      	b.n	80046c0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	461a      	mov	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004604:	2b00      	cmp	r3, #0
 8004606:	d021      	beq.n	800464c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004610:	b29b      	uxth	r3, r3
 8004612:	461a      	mov	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	4413      	add	r3, r2
 800461c:	3302      	adds	r3, #2
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004630:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004632:	8bfb      	ldrh	r3, [r7, #30]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d02a      	beq.n	800468e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6959      	ldr	r1, [r3, #20]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	891a      	ldrh	r2, [r3, #8]
 8004644:	8bfb      	ldrh	r3, [r7, #30]
 8004646:	f002 fab8 	bl	8006bba <USB_ReadPMA>
 800464a:	e020      	b.n	800468e <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004654:	b29b      	uxth	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4413      	add	r3, r2
 8004660:	3306      	adds	r3, #6
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	4413      	add	r3, r2
 800466a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004674:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004676:	8bfb      	ldrh	r3, [r7, #30]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6818      	ldr	r0, [r3, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6959      	ldr	r1, [r3, #20]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	895a      	ldrh	r2, [r3, #10]
 8004688:	8bfb      	ldrh	r3, [r7, #30]
 800468a:	f002 fa96 	bl	8006bba <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	b29b      	uxth	r3, r3
 80046a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a8:	b29c      	uxth	r4, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	441a      	add	r2, r3
 80046b8:	4b46      	ldr	r3, [pc, #280]	; (80047d4 <PCD_EP_ISR_Handler+0x530>)
 80046ba:	4323      	orrs	r3, r4
 80046bc:	b29b      	uxth	r3, r3
 80046be:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	69da      	ldr	r2, [r3, #28]
 80046c4:	8bfb      	ldrh	r3, [r7, #30]
 80046c6:	441a      	add	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	695a      	ldr	r2, [r3, #20]
 80046d0:	8bfb      	ldrh	r3, [r7, #30]
 80046d2:	441a      	add	r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <PCD_EP_ISR_Handler+0x446>
 80046e0:	8bfa      	ldrh	r2, [r7, #30]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	691b      	ldr	r3, [r3, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d206      	bcs.n	80046f8 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	4619      	mov	r1, r3
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f004 f855 	bl	80087a0 <HAL_PCD_DataOutStageCallback>
 80046f6:	e008      	b.n	800470a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	7819      	ldrb	r1, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	695a      	ldr	r2, [r3, #20]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fc9e 	bl	8004046 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800470a:	8a7b      	ldrh	r3, [r7, #18]
 800470c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004710:	2b00      	cmp	r3, #0
 8004712:	d04f      	beq.n	80047b4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8004714:	7d7b      	ldrb	r3, [r7, #21]
 8004716:	015b      	lsls	r3, r3, #5
 8004718:	3328      	adds	r3, #40	; 0x28
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	461a      	mov	r2, r3
 8004726:	7d7b      	ldrb	r3, [r7, #21]
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	4413      	add	r3, r2
 800472c:	881b      	ldrh	r3, [r3, #0]
 800472e:	b29b      	uxth	r3, r3
 8004730:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004738:	b29c      	uxth	r4, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	7d7b      	ldrb	r3, [r7, #21]
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	441a      	add	r2, r3
 8004746:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800474a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800474e:	b29b      	uxth	r3, r3
 8004750:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800475a:	b29b      	uxth	r3, r3
 800475c:	461a      	mov	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	3302      	adds	r3, #2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	6812      	ldr	r2, [r2, #0]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	695a      	ldr	r2, [r3, #20]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	441a      	add	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f004 f818 	bl	80087d0 <HAL_PCD_DataInStageCallback>
 80047a0:	e008      	b.n	80047b4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	7819      	ldrb	r1, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f7ff fc97 	bl	80040e2 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047bc:	b29b      	uxth	r3, r3
 80047be:	b21b      	sxth	r3, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f6ff ad74 	blt.w	80042ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3724      	adds	r7, #36	; 0x24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd90      	pop	{r4, r7, pc}
 80047d0:	ffff8080 	.word	0xffff8080
 80047d4:	ffff80c0 	.word	0xffff80c0

080047d8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80047d8:	b480      	push	{r7}
 80047da:	b087      	sub	sp, #28
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607b      	str	r3, [r7, #4]
 80047e2:	460b      	mov	r3, r1
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	4613      	mov	r3, r2
 80047e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80047ea:	897b      	ldrh	r3, [r7, #10]
 80047ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047f6:	897b      	ldrh	r3, [r7, #10]
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	015b      	lsls	r3, r3, #5
 80047fe:	3328      	adds	r3, #40	; 0x28
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4413      	add	r3, r2
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	e006      	b.n	8004816 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004808:	897b      	ldrh	r3, [r7, #10]
 800480a:	015b      	lsls	r3, r3, #5
 800480c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004816:	893b      	ldrh	r3, [r7, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d107      	bne.n	800482c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	2200      	movs	r2, #0
 8004820:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	b29a      	uxth	r2, r3
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	80da      	strh	r2, [r3, #6]
 800482a:	e00b      	b.n	8004844 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2201      	movs	r2, #1
 8004830:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	b29a      	uxth	r2, r3
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0c1b      	lsrs	r3, r3, #16
 800483e:	b29a      	uxth	r2, r3
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	371c      	adds	r7, #28
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr

08004850 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b086      	sub	sp, #24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e26c      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 8087 	beq.w	800497e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004870:	4b92      	ldr	r3, [pc, #584]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 030c 	and.w	r3, r3, #12
 8004878:	2b04      	cmp	r3, #4
 800487a:	d00c      	beq.n	8004896 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f003 030c 	and.w	r3, r3, #12
 8004884:	2b08      	cmp	r3, #8
 8004886:	d112      	bne.n	80048ae <HAL_RCC_OscConfig+0x5e>
 8004888:	4b8c      	ldr	r3, [pc, #560]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004894:	d10b      	bne.n	80048ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004896:	4b89      	ldr	r3, [pc, #548]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d06c      	beq.n	800497c <HAL_RCC_OscConfig+0x12c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d168      	bne.n	800497c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e246      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b6:	d106      	bne.n	80048c6 <HAL_RCC_OscConfig+0x76>
 80048b8:	4b80      	ldr	r3, [pc, #512]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a7f      	ldr	r2, [pc, #508]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c2:	6013      	str	r3, [r2, #0]
 80048c4:	e02e      	b.n	8004924 <HAL_RCC_OscConfig+0xd4>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10c      	bne.n	80048e8 <HAL_RCC_OscConfig+0x98>
 80048ce:	4b7b      	ldr	r3, [pc, #492]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a7a      	ldr	r2, [pc, #488]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d8:	6013      	str	r3, [r2, #0]
 80048da:	4b78      	ldr	r3, [pc, #480]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a77      	ldr	r2, [pc, #476]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	e01d      	b.n	8004924 <HAL_RCC_OscConfig+0xd4>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0xbc>
 80048f2:	4b72      	ldr	r3, [pc, #456]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a71      	ldr	r2, [pc, #452]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80048f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048fc:	6013      	str	r3, [r2, #0]
 80048fe:	4b6f      	ldr	r3, [pc, #444]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e00b      	b.n	8004924 <HAL_RCC_OscConfig+0xd4>
 800490c:	4b6b      	ldr	r3, [pc, #428]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6a      	ldr	r2, [pc, #424]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	4b68      	ldr	r3, [pc, #416]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a67      	ldr	r2, [pc, #412]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800491e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004922:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d013      	beq.n	8004954 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fdda 	bl	80034e4 <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7fe fdd6 	bl	80034e4 <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e1fa      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004946:	4b5d      	ldr	r3, [pc, #372]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d0f0      	beq.n	8004934 <HAL_RCC_OscConfig+0xe4>
 8004952:	e014      	b.n	800497e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004954:	f7fe fdc6 	bl	80034e4 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe fdc2 	bl	80034e4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e1e6      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496e:	4b53      	ldr	r3, [pc, #332]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x10c>
 800497a:	e000      	b.n	800497e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0302 	and.w	r3, r3, #2
 8004986:	2b00      	cmp	r3, #0
 8004988:	d063      	beq.n	8004a52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800498a:	4b4c      	ldr	r3, [pc, #304]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00b      	beq.n	80049ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004996:	4b49      	ldr	r3, [pc, #292]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f003 030c 	and.w	r3, r3, #12
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d11c      	bne.n	80049dc <HAL_RCC_OscConfig+0x18c>
 80049a2:	4b46      	ldr	r3, [pc, #280]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d116      	bne.n	80049dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ae:	4b43      	ldr	r3, [pc, #268]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_RCC_OscConfig+0x176>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d001      	beq.n	80049c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e1ba      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c6:	4b3d      	ldr	r3, [pc, #244]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4939      	ldr	r1, [pc, #228]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049da:	e03a      	b.n	8004a52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d020      	beq.n	8004a26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <HAL_RCC_OscConfig+0x270>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fe fd7b 	bl	80034e4 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049f2:	f7fe fd77 	bl	80034e4 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e19b      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a04:	4b2d      	ldr	r3, [pc, #180]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a10:	4b2a      	ldr	r3, [pc, #168]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	695b      	ldr	r3, [r3, #20]
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4927      	ldr	r1, [pc, #156]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]
 8004a24:	e015      	b.n	8004a52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a26:	4b26      	ldr	r3, [pc, #152]	; (8004ac0 <HAL_RCC_OscConfig+0x270>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2c:	f7fe fd5a 	bl	80034e4 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a32:	e008      	b.n	8004a46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a34:	f7fe fd56 	bl	80034e4 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d901      	bls.n	8004a46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e17a      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a46:	4b1d      	ldr	r3, [pc, #116]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1f0      	bne.n	8004a34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0308 	and.w	r3, r3, #8
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d03a      	beq.n	8004ad4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d019      	beq.n	8004a9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a66:	4b17      	ldr	r3, [pc, #92]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a68:	2201      	movs	r2, #1
 8004a6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a6c:	f7fe fd3a 	bl	80034e4 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a74:	f7fe fd36 	bl	80034e4 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e15a      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a86:	4b0d      	ldr	r3, [pc, #52]	; (8004abc <HAL_RCC_OscConfig+0x26c>)
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a92:	2001      	movs	r0, #1
 8004a94:	f000 faa8 	bl	8004fe8 <RCC_Delay>
 8004a98:	e01c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <HAL_RCC_OscConfig+0x274>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa0:	f7fe fd20 	bl	80034e4 <HAL_GetTick>
 8004aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fe fd1c 	bl	80034e4 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d908      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e140      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	42420000 	.word	0x42420000
 8004ac4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac8:	4b9e      	ldr	r3, [pc, #632]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	f003 0302 	and.w	r3, r3, #2
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e9      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a6 	beq.w	8004c2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae6:	4b97      	ldr	r3, [pc, #604]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10d      	bne.n	8004b0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004af2:	4b94      	ldr	r3, [pc, #592]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004af4:	69db      	ldr	r3, [r3, #28]
 8004af6:	4a93      	ldr	r2, [pc, #588]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004afc:	61d3      	str	r3, [r2, #28]
 8004afe:	4b91      	ldr	r3, [pc, #580]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	60bb      	str	r3, [r7, #8]
 8004b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0e:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <HAL_RCC_OscConfig+0x4f8>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d118      	bne.n	8004b4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b1a:	4b8b      	ldr	r3, [pc, #556]	; (8004d48 <HAL_RCC_OscConfig+0x4f8>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a8a      	ldr	r2, [pc, #552]	; (8004d48 <HAL_RCC_OscConfig+0x4f8>)
 8004b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b26:	f7fe fcdd 	bl	80034e4 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	e008      	b.n	8004b40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2e:	f7fe fcd9 	bl	80034e4 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	2b64      	cmp	r3, #100	; 0x64
 8004b3a:	d901      	bls.n	8004b40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e0fd      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b40:	4b81      	ldr	r3, [pc, #516]	; (8004d48 <HAL_RCC_OscConfig+0x4f8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0f0      	beq.n	8004b2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d106      	bne.n	8004b62 <HAL_RCC_OscConfig+0x312>
 8004b54:	4b7b      	ldr	r3, [pc, #492]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	4a7a      	ldr	r2, [pc, #488]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6213      	str	r3, [r2, #32]
 8004b60:	e02d      	b.n	8004bbe <HAL_RCC_OscConfig+0x36e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCC_OscConfig+0x334>
 8004b6a:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	4a75      	ldr	r2, [pc, #468]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	6213      	str	r3, [r2, #32]
 8004b76:	4b73      	ldr	r3, [pc, #460]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	4a72      	ldr	r2, [pc, #456]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b7c:	f023 0304 	bic.w	r3, r3, #4
 8004b80:	6213      	str	r3, [r2, #32]
 8004b82:	e01c      	b.n	8004bbe <HAL_RCC_OscConfig+0x36e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x356>
 8004b8c:	4b6d      	ldr	r3, [pc, #436]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	4a6c      	ldr	r2, [pc, #432]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6213      	str	r3, [r2, #32]
 8004b98:	4b6a      	ldr	r3, [pc, #424]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	4a69      	ldr	r2, [pc, #420]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6213      	str	r3, [r2, #32]
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCC_OscConfig+0x36e>
 8004ba6:	4b67      	ldr	r3, [pc, #412]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	4a66      	ldr	r2, [pc, #408]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6213      	str	r3, [r2, #32]
 8004bb2:	4b64      	ldr	r3, [pc, #400]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	4a63      	ldr	r2, [pc, #396]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe fc8d 	bl	80034e4 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fe fc89 	bl	80034e4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e0ab      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b57      	ldr	r3, [pc, #348]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x37e>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f7fe fc77 	bl	80034e4 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fe fc73 	bl	80034e4 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e095      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	4b4c      	ldr	r3, [pc, #304]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b48      	ldr	r3, [pc, #288]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4a47      	ldr	r2, [pc, #284]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8081 	beq.w	8004d3a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c38:	4b42      	ldr	r3, [pc, #264]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d061      	beq.n	8004d08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	69db      	ldr	r3, [r3, #28]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d146      	bne.n	8004cda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b3f      	ldr	r3, [pc, #252]	; (8004d4c <HAL_RCC_OscConfig+0x4fc>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fe fc47 	bl	80034e4 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fe fc43 	bl	80034e4 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e067      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c6c:	4b35      	ldr	r3, [pc, #212]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c80:	d108      	bne.n	8004c94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c82:	4b30      	ldr	r3, [pc, #192]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	492d      	ldr	r1, [pc, #180]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a19      	ldr	r1, [r3, #32]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	4927      	ldr	r1, [pc, #156]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cac:	4b27      	ldr	r3, [pc, #156]	; (8004d4c <HAL_RCC_OscConfig+0x4fc>)
 8004cae:	2201      	movs	r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fe fc17 	bl	80034e4 <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb8:	e008      	b.n	8004ccc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cba:	f7fe fc13 	bl	80034e4 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e037      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ccc:	4b1d      	ldr	r3, [pc, #116]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d0f0      	beq.n	8004cba <HAL_RCC_OscConfig+0x46a>
 8004cd8:	e02f      	b.n	8004d3a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cda:	4b1c      	ldr	r3, [pc, #112]	; (8004d4c <HAL_RCC_OscConfig+0x4fc>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce0:	f7fe fc00 	bl	80034e4 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce8:	f7fe fbfc 	bl	80034e4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e020      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cfa:	4b12      	ldr	r3, [pc, #72]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1f0      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x498>
 8004d06:	e018      	b.n	8004d3a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	e013      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_OscConfig+0x4f4>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a1b      	ldr	r3, [r3, #32]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d106      	bne.n	8004d36 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e000      	b.n	8004d3c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40021000 	.word	0x40021000
 8004d48:	40007000 	.word	0x40007000
 8004d4c:	42420060 	.word	0x42420060

08004d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0d0      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d64:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d910      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b67      	ldr	r3, [pc, #412]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 0207 	bic.w	r2, r3, #7
 8004d7a:	4965      	ldr	r1, [pc, #404]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b8      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	494d      	ldr	r1, [pc, #308]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d040      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d115      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e07f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e073      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e06b      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4936      	ldr	r1, [pc, #216]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e40:	f7fe fb50 	bl	80034e4 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7fe fb4c 	bl	80034e4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e053      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 020c 	and.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1eb      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d210      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 0207 	bic.w	r2, r3, #7
 8004e86:	4922      	ldr	r1, [pc, #136]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e032      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490e      	ldr	r1, [pc, #56]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ede:	f000 f821 	bl	8004f24 <HAL_RCC_GetSysClockFreq>
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	5cd3      	ldrb	r3, [r2, r3]
 8004ef2:	fa21 f303 	lsr.w	r3, r1, r3
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1cc>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1d0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe faae 	bl	8003460 <HAL_InitTick>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	08009084 	.word	0x08009084
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	20000008 	.word	0x20000008

08004f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f24:	b490      	push	{r4, r7}
 8004f26:	b08a      	sub	sp, #40	; 0x28
 8004f28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f2a:	4b2a      	ldr	r3, [pc, #168]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f2c:	1d3c      	adds	r4, r7, #4
 8004f2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f34:	4b28      	ldr	r3, [pc, #160]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f36:	881b      	ldrh	r3, [r3, #0]
 8004f38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61bb      	str	r3, [r7, #24]
 8004f42:	2300      	movs	r3, #0
 8004f44:	627b      	str	r3, [r7, #36]	; 0x24
 8004f46:	2300      	movs	r3, #0
 8004f48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f4e:	4b23      	ldr	r3, [pc, #140]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d002      	beq.n	8004f64 <HAL_RCC_GetSysClockFreq+0x40>
 8004f5e:	2b08      	cmp	r3, #8
 8004f60:	d003      	beq.n	8004f6a <HAL_RCC_GetSysClockFreq+0x46>
 8004f62:	e02d      	b.n	8004fc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f64:	4b1e      	ldr	r3, [pc, #120]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004f66:	623b      	str	r3, [r7, #32]
      break;
 8004f68:	e02d      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	0c9b      	lsrs	r3, r3, #18
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f76:	4413      	add	r3, r2
 8004f78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d013      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f88:	4b14      	ldr	r3, [pc, #80]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	0c5b      	lsrs	r3, r3, #17
 8004f8e:	f003 0301 	and.w	r3, r3, #1
 8004f92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004f96:	4413      	add	r3, r2
 8004f98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fa2:	fb02 f203 	mul.w	r2, r2, r3
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
 8004fae:	e004      	b.n	8004fba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	4a0c      	ldr	r2, [pc, #48]	; (8004fe4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbc:	623b      	str	r3, [r7, #32]
      break;
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fc2:	623b      	str	r3, [r7, #32]
      break;
 8004fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3728      	adds	r7, #40	; 0x28
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bc90      	pop	{r4, r7}
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	08009048 	.word	0x08009048
 8004fd8:	08009058 	.word	0x08009058
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	007a1200 	.word	0x007a1200
 8004fe4:	003d0900 	.word	0x003d0900

08004fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ff0:	4b0a      	ldr	r3, [pc, #40]	; (800501c <RCC_Delay+0x34>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <RCC_Delay+0x38>)
 8004ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffa:	0a5b      	lsrs	r3, r3, #9
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	fb02 f303 	mul.w	r3, r2, r3
 8005002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005004:	bf00      	nop
  }
  while (Delay --);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	1e5a      	subs	r2, r3, #1
 800500a:	60fa      	str	r2, [r7, #12]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f9      	bne.n	8005004 <RCC_Delay+0x1c>
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000000 	.word	0x20000000
 8005020:	10624dd3 	.word	0x10624dd3

08005024 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	2300      	movs	r3, #0
 8005032:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0301 	and.w	r3, r3, #1
 800503c:	2b00      	cmp	r3, #0
 800503e:	d07d      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005040:	2300      	movs	r3, #0
 8005042:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005044:	4b4f      	ldr	r3, [pc, #316]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005046:	69db      	ldr	r3, [r3, #28]
 8005048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005050:	4b4c      	ldr	r3, [pc, #304]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005052:	69db      	ldr	r3, [r3, #28]
 8005054:	4a4b      	ldr	r2, [pc, #300]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505a:	61d3      	str	r3, [r2, #28]
 800505c:	4b49      	ldr	r3, [pc, #292]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	4b46      	ldr	r3, [pc, #280]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d118      	bne.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005078:	4b43      	ldr	r3, [pc, #268]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a42      	ldr	r2, [pc, #264]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800507e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005082:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005084:	f7fe fa2e 	bl	80034e4 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800508a:	e008      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800508c:	f7fe fa2a 	bl	80034e4 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	; 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e06d      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800509e:	4b3a      	ldr	r3, [pc, #232]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0f0      	beq.n	800508c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050aa:	4b36      	ldr	r3, [pc, #216]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d02e      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d027      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c8:	4b2e      	ldr	r3, [pc, #184]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d2:	4b2e      	ldr	r3, [pc, #184]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d8:	4b2c      	ldr	r3, [pc, #176]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80050de:	4a29      	ldr	r2, [pc, #164]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d014      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ee:	f7fe f9f9 	bl	80034e4 <HAL_GetTick>
 80050f2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f4:	e00a      	b.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050f6:	f7fe f9f5 	bl	80034e4 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	f241 3288 	movw	r2, #5000	; 0x1388
 8005104:	4293      	cmp	r3, r2
 8005106:	d901      	bls.n	800510c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005108:	2303      	movs	r3, #3
 800510a:	e036      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800510c:	4b1d      	ldr	r3, [pc, #116]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f003 0302 	and.w	r3, r3, #2
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0ee      	beq.n	80050f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005118:	4b1a      	ldr	r3, [pc, #104]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800511a:	6a1b      	ldr	r3, [r3, #32]
 800511c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4917      	ldr	r1, [pc, #92]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005126:	4313      	orrs	r3, r2
 8005128:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d105      	bne.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005130:	4b14      	ldr	r3, [pc, #80]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4a13      	ldr	r2, [pc, #76]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800513a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005148:	4b0e      	ldr	r3, [pc, #56]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	490b      	ldr	r1, [pc, #44]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005156:	4313      	orrs	r3, r2
 8005158:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0310 	and.w	r3, r3, #16
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005166:	4b07      	ldr	r3, [pc, #28]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	4904      	ldr	r1, [pc, #16]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005174:	4313      	orrs	r3, r2
 8005176:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40021000 	.word	0x40021000
 8005188:	40007000 	.word	0x40007000
 800518c:	42420440 	.word	0x42420440

08005190 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e053      	b.n	800524a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f7fd fbf7 	bl	80029b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685a      	ldr	r2, [r3, #4]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	431a      	orrs	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	431a      	orrs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	695b      	ldr	r3, [r3, #20]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051fe:	431a      	orrs	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	69db      	ldr	r3, [r3, #28]
 8005204:	431a      	orrs	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	ea42 0103 	orr.w	r1, r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	0c1a      	lsrs	r2, r3, #16
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f002 0204 	and.w	r2, r2, #4
 8005228:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005238:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b082      	sub	sp, #8
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e01d      	b.n	80052a0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b00      	cmp	r3, #0
 800526e:	d106      	bne.n	800527e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7fd fbe3 	bl	8002a44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2202      	movs	r2, #2
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3304      	adds	r3, #4
 800528e:	4619      	mov	r1, r3
 8005290:	4610      	mov	r0, r2
 8005292:	f000 fa39 	bl	8005708 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3708      	adds	r7, #8
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b085      	sub	sp, #20
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f003 0307 	and.w	r3, r3, #7
 80052ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b06      	cmp	r3, #6
 80052d0:	d007      	beq.n	80052e2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f042 0201 	orr.w	r2, r2, #1
 80052e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68da      	ldr	r2, [r3, #12]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <HAL_TIM_Base_Stop_IT+0x48>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	f240 4344 	movw	r3, #1092	; 0x444
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_TIM_Base_Stop_IT+0x48>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr

08005342 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b02      	cmp	r3, #2
 8005356:	d122      	bne.n	800539e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b02      	cmp	r3, #2
 8005364:	d11b      	bne.n	800539e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0202 	mvn.w	r2, #2
 800536e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	f003 0303 	and.w	r3, r3, #3
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 f9a4 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 800538a:	e005      	b.n	8005398 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f997 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f9a6 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d122      	bne.n	80053f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d11b      	bne.n	80053f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f06f 0204 	mvn.w	r2, #4
 80053c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 f97a 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 80053de:	e005      	b.n	80053ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f000 f96d 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f97c 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d122      	bne.n	8005446 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b08      	cmp	r3, #8
 800540c:	d11b      	bne.n	8005446 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0208 	mvn.w	r2, #8
 8005416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2204      	movs	r2, #4
 800541c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69db      	ldr	r3, [r3, #28]
 8005424:	f003 0303 	and.w	r3, r3, #3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d003      	beq.n	8005434 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 f950 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 8005432:	e005      	b.n	8005440 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f943 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f952 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b10      	cmp	r3, #16
 8005452:	d122      	bne.n	800549a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d11b      	bne.n	800549a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f06f 0210 	mvn.w	r2, #16
 800546a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2208      	movs	r2, #8
 8005470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 f926 	bl	80056d2 <HAL_TIM_IC_CaptureCallback>
 8005486:	e005      	b.n	8005494 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f919 	bl	80056c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f928 	bl	80056e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d10e      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0301 	and.w	r3, r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d107      	bne.n	80054c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f06f 0201 	mvn.w	r2, #1
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f7fd fbcd 	bl	8002c60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d0:	2b80      	cmp	r3, #128	; 0x80
 80054d2:	d10e      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054de:	2b80      	cmp	r3, #128	; 0x80
 80054e0:	d107      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa50 	bl	8005992 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d10e      	bne.n	800551e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d107      	bne.n	800551e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f8ec 	bl	80056f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	691b      	ldr	r3, [r3, #16]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b20      	cmp	r3, #32
 800552a:	d10e      	bne.n	800554a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b20      	cmp	r3, #32
 8005538:	d107      	bne.n	800554a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f06f 0220 	mvn.w	r2, #32
 8005542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 fa1b 	bl	8005980 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_TIM_ConfigClockSource+0x18>
 8005566:	2302      	movs	r3, #2
 8005568:	e0a6      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x166>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005588:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005590:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b40      	cmp	r3, #64	; 0x40
 80055a0:	d067      	beq.n	8005672 <HAL_TIM_ConfigClockSource+0x120>
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d80b      	bhi.n	80055be <HAL_TIM_ConfigClockSource+0x6c>
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d073      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x140>
 80055aa:	2b10      	cmp	r3, #16
 80055ac:	d802      	bhi.n	80055b4 <HAL_TIM_ConfigClockSource+0x62>
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d06f      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055b2:	e078      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d06c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x140>
 80055b8:	2b30      	cmp	r3, #48	; 0x30
 80055ba:	d06a      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055bc:	e073      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055be:	2b70      	cmp	r3, #112	; 0x70
 80055c0:	d00d      	beq.n	80055de <HAL_TIM_ConfigClockSource+0x8c>
 80055c2:	2b70      	cmp	r3, #112	; 0x70
 80055c4:	d804      	bhi.n	80055d0 <HAL_TIM_ConfigClockSource+0x7e>
 80055c6:	2b50      	cmp	r3, #80	; 0x50
 80055c8:	d033      	beq.n	8005632 <HAL_TIM_ConfigClockSource+0xe0>
 80055ca:	2b60      	cmp	r3, #96	; 0x60
 80055cc:	d041      	beq.n	8005652 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055ce:	e06a      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d4:	d066      	beq.n	80056a4 <HAL_TIM_ConfigClockSource+0x152>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055da:	d017      	beq.n	800560c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055dc:	e063      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	6899      	ldr	r1, [r3, #8]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	685a      	ldr	r2, [r3, #4]
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f000 f964 	bl	80058ba <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005600:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	609a      	str	r2, [r3, #8]
      break;
 800560a:	e04c      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	6899      	ldr	r1, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	f000 f94d 	bl	80058ba <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	689a      	ldr	r2, [r3, #8]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800562e:	609a      	str	r2, [r3, #8]
      break;
 8005630:	e039      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	461a      	mov	r2, r3
 8005640:	f000 f8c4 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2150      	movs	r1, #80	; 0x50
 800564a:	4618      	mov	r0, r3
 800564c:	f000 f91b 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005650:	e029      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	6859      	ldr	r1, [r3, #4]
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	461a      	mov	r2, r3
 8005660:	f000 f8e2 	bl	8005828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2160      	movs	r1, #96	; 0x60
 800566a:	4618      	mov	r0, r3
 800566c:	f000 f90b 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005670:	e019      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6818      	ldr	r0, [r3, #0]
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	6859      	ldr	r1, [r3, #4]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	461a      	mov	r2, r3
 8005680:	f000 f8a4 	bl	80057cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2140      	movs	r1, #64	; 0x40
 800568a:	4618      	mov	r0, r3
 800568c:	f000 f8fb 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 8005690:	e009      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f000 f8f2 	bl	8005886 <TIM_ITRx_SetConfig>
      break;
 80056a2:	e000      	b.n	80056a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80056a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056b6:	2300      	movs	r3, #0
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr

080056d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056d2:	b480      	push	{r7}
 80056d4:	b083      	sub	sp, #12
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr

080056e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056ec:	bf00      	nop
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bc80      	pop	{r7}
 80056f4:	4770      	bx	lr

080056f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b083      	sub	sp, #12
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056fe:	bf00      	nop
 8005700:	370c      	adds	r7, #12
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00b      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005726:	d007      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d003      	beq.n	8005738 <TIM_Base_SetConfig+0x30>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a25      	ldr	r2, [pc, #148]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d108      	bne.n	800574a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	4313      	orrs	r3, r2
 8005748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a19      	ldr	r2, [pc, #100]	; (80057c4 <TIM_Base_SetConfig+0xbc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0x62>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a18      	ldr	r2, [pc, #96]	; (80057c8 <TIM_Base_SetConfig+0xc0>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <TIM_Base_SetConfig+0xb8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d103      	bne.n	80057b0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	691a      	ldr	r2, [r3, #16]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	615a      	str	r2, [r3, #20]
}
 80057b6:	bf00      	nop
 80057b8:	3714      	adds	r7, #20
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr
 80057c0:	40012c00 	.word	0x40012c00
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800

080057cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f023 0201 	bic.w	r2, r3, #1
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	693a      	ldr	r2, [r7, #16]
 80057fe:	4313      	orrs	r3, r2
 8005800:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f023 030a 	bic.w	r3, r3, #10
 8005808:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	bc80      	pop	{r7}
 8005826:	4770      	bx	lr

08005828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005828:	b480      	push	{r7}
 800582a:	b087      	sub	sp, #28
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f023 0210 	bic.w	r2, r3, #16
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005852:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	031b      	lsls	r3, r3, #12
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005864:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	697a      	ldr	r2, [r7, #20]
 8005874:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	693a      	ldr	r2, [r7, #16]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	bc80      	pop	{r7}
 8005884:	4770      	bx	lr

08005886 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005886:	b480      	push	{r7}
 8005888:	b085      	sub	sp, #20
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
 800588e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800589e:	683a      	ldr	r2, [r7, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	f043 0307 	orr.w	r3, r3, #7
 80058a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bc80      	pop	{r7}
 80058b8:	4770      	bx	lr

080058ba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b087      	sub	sp, #28
 80058be:	af00      	add	r7, sp, #0
 80058c0:	60f8      	str	r0, [r7, #12]
 80058c2:	60b9      	str	r1, [r7, #8]
 80058c4:	607a      	str	r2, [r7, #4]
 80058c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058d4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	021a      	lsls	r2, r3, #8
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	431a      	orrs	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4313      	orrs	r3, r2
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	609a      	str	r2, [r3, #8]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bc80      	pop	{r7}
 80058f6:	4770      	bx	lr

080058f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800590c:	2302      	movs	r3, #2
 800590e:	e032      	b.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005936:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005948:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	bc80      	pop	{r7}
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	bc80      	pop	{r7}
 8005990:	4770      	bx	lr

08005992 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr

080059a4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80059a4:	b084      	sub	sp, #16
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
 80059ae:	f107 0014 	add.w	r0, r7, #20
 80059b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	bc80      	pop	{r7}
 80059c0:	b004      	add	sp, #16
 80059c2:	4770      	bx	lr

080059c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059d0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80059d8:	b29a      	uxth	r2, r3
 80059da:	89fb      	ldrh	r3, [r7, #14]
 80059dc:	4313      	orrs	r3, r2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bc80      	pop	{r7}
 80059f0:	4770      	bx	lr

080059f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b085      	sub	sp, #20
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059fa:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80059fe:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	b21a      	sxth	r2, r3
 8005a0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a0e:	43db      	mvns	r3, r3
 8005a10:	b21b      	sxth	r3, r3
 8005a12:	4013      	ands	r3, r2
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bc80      	pop	{r7}
 8005a28:	4770      	bx	lr

08005a2a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	460b      	mov	r3, r1
 8005a34:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bc80      	pop	{r7}
 8005a40:	4770      	bx	lr

08005a42 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a42:	b084      	sub	sp, #16
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	f107 0014 	add.w	r0, r7, #20
 8005a50:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ffa5 	bl	80059c4 <USB_EnableGlobalInt>

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a86:	b004      	add	sp, #16
 8005a88:	4770      	bx	lr
	...

08005a8c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a8c:	b490      	push	{r4, r7}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ab0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	78db      	ldrb	r3, [r3, #3]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d819      	bhi.n	8005aee <USB_ActivateEndpoint+0x62>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <USB_ActivateEndpoint+0x34>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ad1 	.word	0x08005ad1
 8005ac4:	08005ae5 	.word	0x08005ae5
 8005ac8:	08005af5 	.word	0x08005af5
 8005acc:	08005adb 	.word	0x08005adb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ad0:	89bb      	ldrh	r3, [r7, #12]
 8005ad2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad6:	81bb      	strh	r3, [r7, #12]
      break;
 8005ad8:	e00d      	b.n	8005af6 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ada:	89bb      	ldrh	r3, [r7, #12]
 8005adc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ae0:	81bb      	strh	r3, [r7, #12]
      break;
 8005ae2:	e008      	b.n	8005af6 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ae4:	89bb      	ldrh	r3, [r7, #12]
 8005ae6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005aea:	81bb      	strh	r3, [r7, #12]
      break;
 8005aec:	e003      	b.n	8005af6 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      break;
 8005af2:	e000      	b.n	8005af6 <USB_ActivateEndpoint+0x6a>
      break;
 8005af4:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	89bb      	ldrh	r3, [r7, #12]
 8005b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	881b      	ldrh	r3, [r3, #0]
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	4313      	orrs	r3, r2
 8005b36:	b29c      	uxth	r4, r3
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	781b      	ldrb	r3, [r3, #0]
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	4b8a      	ldr	r3, [pc, #552]	; (8005d6c <USB_ActivateEndpoint+0x2e0>)
 8005b44:	4323      	orrs	r3, r4
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	7b1b      	ldrb	r3, [r3, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	f040 8112 	bne.w	8005d78 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	785b      	ldrb	r3, [r3, #1]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d067      	beq.n	8005c2c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b5c:	687c      	ldr	r4, [r7, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	441c      	add	r4, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	4423      	add	r3, r4
 8005b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b74:	461c      	mov	r4, r3
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	88db      	ldrh	r3, [r3, #6]
 8005b7a:	085b      	lsrs	r3, r3, #1
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29c      	uxth	r4, r3
 8005b92:	4623      	mov	r3, r4
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d014      	beq.n	8005bc6 <USB_ActivateEndpoint+0x13a>
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb2:	b29c      	uxth	r4, r3
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	441a      	add	r2, r3
 8005bbe:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <USB_ActivateEndpoint+0x2e4>)
 8005bc0:	4323      	orrs	r3, r4
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d018      	beq.n	8005c00 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005be4:	b29c      	uxth	r4, r3
 8005be6:	f084 0320 	eor.w	r3, r4, #32
 8005bea:	b29c      	uxth	r4, r3
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	441a      	add	r2, r3
 8005bf6:	4b5d      	ldr	r3, [pc, #372]	; (8005d6c <USB_ActivateEndpoint+0x2e0>)
 8005bf8:	4323      	orrs	r3, r4
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	8013      	strh	r3, [r2, #0]
 8005bfe:	e22b      	b.n	8006058 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c16:	b29c      	uxth	r4, r3
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	441a      	add	r2, r3
 8005c22:	4b52      	ldr	r3, [pc, #328]	; (8005d6c <USB_ActivateEndpoint+0x2e0>)
 8005c24:	4323      	orrs	r3, r4
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	8013      	strh	r3, [r2, #0]
 8005c2a:	e215      	b.n	8006058 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c2c:	687c      	ldr	r4, [r7, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	441c      	add	r4, r3
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	011b      	lsls	r3, r3, #4
 8005c3e:	4423      	add	r3, r4
 8005c40:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c44:	461c      	mov	r4, r3
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	88db      	ldrh	r3, [r3, #6]
 8005c4a:	085b      	lsrs	r3, r3, #1
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	005b      	lsls	r3, r3, #1
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005c54:	687c      	ldr	r4, [r7, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	441c      	add	r4, r3
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	4423      	add	r3, r4
 8005c68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c6c:	461c      	mov	r4, r3
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	691b      	ldr	r3, [r3, #16]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10e      	bne.n	8005c94 <USB_ActivateEndpoint+0x208>
 8005c76:	8823      	ldrh	r3, [r4, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8023      	strh	r3, [r4, #0]
 8005c82:	8823      	ldrh	r3, [r4, #0]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	8023      	strh	r3, [r4, #0]
 8005c92:	e02d      	b.n	8005cf0 <USB_ActivateEndpoint+0x264>
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b3e      	cmp	r3, #62	; 0x3e
 8005c9a:	d812      	bhi.n	8005cc2 <USB_ActivateEndpoint+0x236>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	60bb      	str	r3, [r7, #8]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <USB_ActivateEndpoint+0x22a>
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8023      	strh	r3, [r4, #0]
 8005cc0:	e016      	b.n	8005cf0 <USB_ActivateEndpoint+0x264>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	691b      	ldr	r3, [r3, #16]
 8005cc6:	095b      	lsrs	r3, r3, #5
 8005cc8:	60bb      	str	r3, [r7, #8]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 031f 	and.w	r3, r3, #31
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <USB_ActivateEndpoint+0x250>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	3b01      	subs	r3, #1
 8005cda:	60bb      	str	r3, [r7, #8]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	029b      	lsls	r3, r3, #10
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29c      	uxth	r4, r3
 8005cfe:	4623      	mov	r3, r4
 8005d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d014      	beq.n	8005d32 <USB_ActivateEndpoint+0x2a6>
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	b29c      	uxth	r4, r3
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	441a      	add	r2, r3
 8005d2a:	4b12      	ldr	r3, [pc, #72]	; (8005d74 <USB_ActivateEndpoint+0x2e8>)
 8005d2c:	4323      	orrs	r3, r4
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d48:	b29c      	uxth	r4, r3
 8005d4a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005d4e:	b29c      	uxth	r4, r3
 8005d50:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005d54:	b29c      	uxth	r4, r3
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	441a      	add	r2, r3
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <USB_ActivateEndpoint+0x2e0>)
 8005d62:	4323      	orrs	r3, r4
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	8013      	strh	r3, [r2, #0]
 8005d68:	e176      	b.n	8006058 <USB_ActivateEndpoint+0x5cc>
 8005d6a:	bf00      	nop
 8005d6c:	ffff8080 	.word	0xffff8080
 8005d70:	ffff80c0 	.word	0xffff80c0
 8005d74:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	881b      	ldrh	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8e:	b29c      	uxth	r4, r3
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	441a      	add	r2, r3
 8005d9a:	4b96      	ldr	r3, [pc, #600]	; (8005ff4 <USB_ActivateEndpoint+0x568>)
 8005d9c:	4323      	orrs	r3, r4
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005da2:	687c      	ldr	r4, [r7, #4]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	441c      	add	r4, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	4423      	add	r3, r4
 8005db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dba:	461c      	mov	r4, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	891b      	ldrh	r3, [r3, #8]
 8005dc0:	085b      	lsrs	r3, r3, #1
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	8023      	strh	r3, [r4, #0]
 8005dca:	687c      	ldr	r4, [r7, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	441c      	add	r4, r3
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	011b      	lsls	r3, r3, #4
 8005ddc:	4423      	add	r3, r4
 8005dde:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005de2:	461c      	mov	r4, r3
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	895b      	ldrh	r3, [r3, #10]
 8005de8:	085b      	lsrs	r3, r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f040 8088 	bne.w	8005f0c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	b29c      	uxth	r4, r3
 8005e0a:	4623      	mov	r3, r4
 8005e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d014      	beq.n	8005e3e <USB_ActivateEndpoint+0x3b2>
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	881b      	ldrh	r3, [r3, #0]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2a:	b29c      	uxth	r4, r3
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	441a      	add	r2, r3
 8005e36:	4b70      	ldr	r3, [pc, #448]	; (8005ff8 <USB_ActivateEndpoint+0x56c>)
 8005e38:	4323      	orrs	r3, r4
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	881b      	ldrh	r3, [r3, #0]
 8005e4a:	b29c      	uxth	r4, r3
 8005e4c:	4623      	mov	r3, r4
 8005e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d014      	beq.n	8005e80 <USB_ActivateEndpoint+0x3f4>
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	4413      	add	r3, r2
 8005e60:	881b      	ldrh	r3, [r3, #0]
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e6c:	b29c      	uxth	r4, r3
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	441a      	add	r2, r3
 8005e78:	4b60      	ldr	r3, [pc, #384]	; (8005ffc <USB_ActivateEndpoint+0x570>)
 8005e7a:	4323      	orrs	r3, r4
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	b29c      	uxth	r4, r3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	4b56      	ldr	r3, [pc, #344]	; (8005ffc <USB_ActivateEndpoint+0x570>)
 8005ea4:	4323      	orrs	r3, r4
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	b29c      	uxth	r4, r3
 8005ec2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ec6:	b29c      	uxth	r4, r3
 8005ec8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005ecc:	b29c      	uxth	r4, r3
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	441a      	add	r2, r3
 8005ed8:	4b49      	ldr	r3, [pc, #292]	; (8006000 <USB_ActivateEndpoint+0x574>)
 8005eda:	4323      	orrs	r3, r4
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	881b      	ldrh	r3, [r3, #0]
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef6:	b29c      	uxth	r4, r3
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	4b3f      	ldr	r3, [pc, #252]	; (8006000 <USB_ActivateEndpoint+0x574>)
 8005f04:	4323      	orrs	r3, r4
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	8013      	strh	r3, [r2, #0]
 8005f0a:	e0a5      	b.n	8006058 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	b29c      	uxth	r4, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d014      	beq.n	8005f4e <USB_ActivateEndpoint+0x4c2>
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3a:	b29c      	uxth	r4, r3
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	441a      	add	r2, r3
 8005f46:	4b2c      	ldr	r3, [pc, #176]	; (8005ff8 <USB_ActivateEndpoint+0x56c>)
 8005f48:	4323      	orrs	r3, r4
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29c      	uxth	r4, r3
 8005f5c:	4623      	mov	r3, r4
 8005f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d014      	beq.n	8005f90 <USB_ActivateEndpoint+0x504>
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	881b      	ldrh	r3, [r3, #0]
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f7c:	b29c      	uxth	r4, r3
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	4b1c      	ldr	r3, [pc, #112]	; (8005ffc <USB_ActivateEndpoint+0x570>)
 8005f8a:	4323      	orrs	r3, r4
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	b29c      	uxth	r4, r3
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	4b11      	ldr	r3, [pc, #68]	; (8005ff8 <USB_ActivateEndpoint+0x56c>)
 8005fb4:	4323      	orrs	r3, r4
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	78db      	ldrb	r3, [r3, #3]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d020      	beq.n	8006004 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd8:	b29c      	uxth	r4, r3
 8005fda:	f084 0320 	eor.w	r3, r4, #32
 8005fde:	b29c      	uxth	r4, r3
 8005fe0:	687a      	ldr	r2, [r7, #4]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	441a      	add	r2, r3
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <USB_ActivateEndpoint+0x574>)
 8005fec:	4323      	orrs	r3, r4
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	8013      	strh	r3, [r2, #0]
 8005ff2:	e01c      	b.n	800602e <USB_ActivateEndpoint+0x5a2>
 8005ff4:	ffff8180 	.word	0xffff8180
 8005ff8:	ffffc080 	.word	0xffffc080
 8005ffc:	ffff80c0 	.word	0xffff80c0
 8006000:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	b29c      	uxth	r4, r3
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <USB_ActivateEndpoint+0x5d8>)
 8006028:	4323      	orrs	r3, r4
 800602a:	b29b      	uxth	r3, r3
 800602c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006044:	b29c      	uxth	r4, r3
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	441a      	add	r2, r3
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <USB_ActivateEndpoint+0x5d8>)
 8006052:	4323      	orrs	r3, r4
 8006054:	b29b      	uxth	r3, r3
 8006056:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bc90      	pop	{r4, r7}
 8006062:	4770      	bx	lr
 8006064:	ffff8080 	.word	0xffff8080

08006068 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006068:	b490      	push	{r4, r7}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	7b1b      	ldrb	r3, [r3, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d171      	bne.n	800615e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d036      	beq.n	80060f0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	b29c      	uxth	r4, r3
 8006090:	4623      	mov	r3, r4
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d014      	beq.n	80060c4 <USB_DeactivateEndpoint+0x5c>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	b29c      	uxth	r4, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	4b6b      	ldr	r3, [pc, #428]	; (800626c <USB_DeactivateEndpoint+0x204>)
 80060be:	4323      	orrs	r3, r4
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	4413      	add	r3, r2
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060da:	b29c      	uxth	r4, r3
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	4b62      	ldr	r3, [pc, #392]	; (8006270 <USB_DeactivateEndpoint+0x208>)
 80060e8:	4323      	orrs	r3, r4
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e144      	b.n	800637a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29c      	uxth	r4, r3
 80060fe:	4623      	mov	r3, r4
 8006100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d014      	beq.n	8006132 <USB_DeactivateEndpoint+0xca>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800611a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611e:	b29c      	uxth	r4, r3
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	441a      	add	r2, r3
 800612a:	4b52      	ldr	r3, [pc, #328]	; (8006274 <USB_DeactivateEndpoint+0x20c>)
 800612c:	4323      	orrs	r3, r4
 800612e:	b29b      	uxth	r3, r3
 8006130:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	4413      	add	r3, r2
 800613c:	881b      	ldrh	r3, [r3, #0]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006148:	b29c      	uxth	r4, r3
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	441a      	add	r2, r3
 8006154:	4b46      	ldr	r3, [pc, #280]	; (8006270 <USB_DeactivateEndpoint+0x208>)
 8006156:	4323      	orrs	r3, r4
 8006158:	b29b      	uxth	r3, r3
 800615a:	8013      	strh	r3, [r2, #0]
 800615c:	e10d      	b.n	800637a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	2b00      	cmp	r3, #0
 8006164:	f040 8088 	bne.w	8006278 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29c      	uxth	r4, r3
 8006176:	4623      	mov	r3, r4
 8006178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d014      	beq.n	80061aa <USB_DeactivateEndpoint+0x142>
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	b29c      	uxth	r4, r3
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	4b34      	ldr	r3, [pc, #208]	; (8006274 <USB_DeactivateEndpoint+0x20c>)
 80061a4:	4323      	orrs	r3, r4
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29c      	uxth	r4, r3
 80061b8:	4623      	mov	r3, r4
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d014      	beq.n	80061ec <USB_DeactivateEndpoint+0x184>
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	b29c      	uxth	r4, r3
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	441a      	add	r2, r3
 80061e4:	4b21      	ldr	r3, [pc, #132]	; (800626c <USB_DeactivateEndpoint+0x204>)
 80061e6:	4323      	orrs	r3, r4
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	b29c      	uxth	r4, r3
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	4b17      	ldr	r3, [pc, #92]	; (800626c <USB_DeactivateEndpoint+0x204>)
 8006210:	4323      	orrs	r3, r4
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	b29c      	uxth	r4, r3
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	441a      	add	r2, r3
 8006238:	4b0d      	ldr	r3, [pc, #52]	; (8006270 <USB_DeactivateEndpoint+0x208>)
 800623a:	4323      	orrs	r3, r4
 800623c:	b29b      	uxth	r3, r3
 800623e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	881b      	ldrh	r3, [r3, #0]
 800624c:	b29b      	uxth	r3, r3
 800624e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006256:	b29c      	uxth	r4, r3
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	441a      	add	r2, r3
 8006262:	4b03      	ldr	r3, [pc, #12]	; (8006270 <USB_DeactivateEndpoint+0x208>)
 8006264:	4323      	orrs	r3, r4
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]
 800626a:	e086      	b.n	800637a <USB_DeactivateEndpoint+0x312>
 800626c:	ffff80c0 	.word	0xffff80c0
 8006270:	ffff8080 	.word	0xffff8080
 8006274:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	4413      	add	r3, r2
 8006282:	881b      	ldrh	r3, [r3, #0]
 8006284:	b29c      	uxth	r4, r3
 8006286:	4623      	mov	r3, r4
 8006288:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d014      	beq.n	80062ba <USB_DeactivateEndpoint+0x252>
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062a6:	b29c      	uxth	r4, r3
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	441a      	add	r2, r3
 80062b2:	4b35      	ldr	r3, [pc, #212]	; (8006388 <USB_DeactivateEndpoint+0x320>)
 80062b4:	4323      	orrs	r3, r4
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	009b      	lsls	r3, r3, #2
 80062c2:	4413      	add	r3, r2
 80062c4:	881b      	ldrh	r3, [r3, #0]
 80062c6:	b29c      	uxth	r4, r3
 80062c8:	4623      	mov	r3, r4
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d014      	beq.n	80062fc <USB_DeactivateEndpoint+0x294>
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	b29b      	uxth	r3, r3
 80062e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e8:	b29c      	uxth	r4, r3
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	441a      	add	r2, r3
 80062f4:	4b25      	ldr	r3, [pc, #148]	; (800638c <USB_DeactivateEndpoint+0x324>)
 80062f6:	4323      	orrs	r3, r4
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	b29c      	uxth	r4, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	4b1a      	ldr	r3, [pc, #104]	; (8006388 <USB_DeactivateEndpoint+0x320>)
 8006320:	4323      	orrs	r3, r4
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29b      	uxth	r3, r3
 8006334:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800633c:	b29c      	uxth	r4, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	441a      	add	r2, r3
 8006348:	4b11      	ldr	r3, [pc, #68]	; (8006390 <USB_DeactivateEndpoint+0x328>)
 800634a:	4323      	orrs	r3, r4
 800634c:	b29b      	uxth	r3, r3
 800634e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006350:	687a      	ldr	r2, [r7, #4]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	b29b      	uxth	r3, r3
 800635e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006366:	b29c      	uxth	r4, r3
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	441a      	add	r2, r3
 8006372:	4b07      	ldr	r3, [pc, #28]	; (8006390 <USB_DeactivateEndpoint+0x328>)
 8006374:	4323      	orrs	r3, r4
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3708      	adds	r7, #8
 8006380:	46bd      	mov	sp, r7
 8006382:	bc90      	pop	{r4, r7}
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	ffffc080 	.word	0xffffc080
 800638c:	ffff80c0 	.word	0xffff80c0
 8006390:	ffff8080 	.word	0xffff8080

08006394 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b08d      	sub	sp, #52	; 0x34
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	f040 8160 	bne.w	8006668 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	699a      	ldr	r2, [r3, #24]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d909      	bls.n	80063c8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	699a      	ldr	r2, [r3, #24]
 80063be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c0:	1ad2      	subs	r2, r2, r3
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	619a      	str	r2, [r3, #24]
 80063c6:	e005      	b.n	80063d4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2200      	movs	r2, #0
 80063d2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	7b1b      	ldrb	r3, [r3, #12]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d119      	bne.n	8006410 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	6959      	ldr	r1, [r3, #20]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	88da      	ldrh	r2, [r3, #6]
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f000 fba2 	bl	8006b32 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80063ee:	687c      	ldr	r4, [r7, #4]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	441c      	add	r4, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	011b      	lsls	r3, r3, #4
 8006400:	4423      	add	r3, r4
 8006402:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006406:	461c      	mov	r4, r3
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	b29b      	uxth	r3, r3
 800640c:	8023      	strh	r3, [r4, #0]
 800640e:	e10f      	b.n	8006630 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	881b      	ldrh	r3, [r3, #0]
 800641c:	b29b      	uxth	r3, r3
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d065      	beq.n	80064f2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006426:	687c      	ldr	r4, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d148      	bne.n	80064c2 <USB_EPStartXfer+0x12e>
 8006430:	687c      	ldr	r4, [r7, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	441c      	add	r4, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	4423      	add	r3, r4
 8006444:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006448:	461c      	mov	r4, r3
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10e      	bne.n	800646e <USB_EPStartXfer+0xda>
 8006450:	8823      	ldrh	r3, [r4, #0]
 8006452:	b29b      	uxth	r3, r3
 8006454:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006458:	b29b      	uxth	r3, r3
 800645a:	8023      	strh	r3, [r4, #0]
 800645c:	8823      	ldrh	r3, [r4, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006464:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006468:	b29b      	uxth	r3, r3
 800646a:	8023      	strh	r3, [r4, #0]
 800646c:	e03d      	b.n	80064ea <USB_EPStartXfer+0x156>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	2b3e      	cmp	r3, #62	; 0x3e
 8006472:	d810      	bhi.n	8006496 <USB_EPStartXfer+0x102>
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	f003 0301 	and.w	r3, r3, #1
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <USB_EPStartXfer+0xf6>
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	3301      	adds	r3, #1
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	b29b      	uxth	r3, r3
 800648e:	029b      	lsls	r3, r3, #10
 8006490:	b29b      	uxth	r3, r3
 8006492:	8023      	strh	r3, [r4, #0]
 8006494:	e029      	b.n	80064ea <USB_EPStartXfer+0x156>
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	627b      	str	r3, [r7, #36]	; 0x24
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f003 031f 	and.w	r3, r3, #31
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <USB_EPStartXfer+0x118>
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	3b01      	subs	r3, #1
 80064aa:	627b      	str	r3, [r7, #36]	; 0x24
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	029b      	lsls	r3, r3, #10
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064bc:	b29b      	uxth	r3, r3
 80064be:	8023      	strh	r3, [r4, #0]
 80064c0:	e013      	b.n	80064ea <USB_EPStartXfer+0x156>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10f      	bne.n	80064ea <USB_EPStartXfer+0x156>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	441c      	add	r4, r3
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	011b      	lsls	r3, r3, #4
 80064da:	4423      	add	r3, r4
 80064dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	895b      	ldrh	r3, [r3, #10]
 80064ee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80064f0:	e063      	b.n	80065ba <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	785b      	ldrb	r3, [r3, #1]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d148      	bne.n	800658c <USB_EPStartXfer+0x1f8>
 80064fa:	687c      	ldr	r4, [r7, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006502:	b29b      	uxth	r3, r3
 8006504:	441c      	add	r4, r3
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	011b      	lsls	r3, r3, #4
 800650c:	4423      	add	r3, r4
 800650e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006512:	461c      	mov	r4, r3
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10e      	bne.n	8006538 <USB_EPStartXfer+0x1a4>
 800651a:	8823      	ldrh	r3, [r4, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006522:	b29b      	uxth	r3, r3
 8006524:	8023      	strh	r3, [r4, #0]
 8006526:	8823      	ldrh	r3, [r4, #0]
 8006528:	b29b      	uxth	r3, r3
 800652a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800652e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006532:	b29b      	uxth	r3, r3
 8006534:	8023      	strh	r3, [r4, #0]
 8006536:	e03d      	b.n	80065b4 <USB_EPStartXfer+0x220>
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	2b3e      	cmp	r3, #62	; 0x3e
 800653c:	d810      	bhi.n	8006560 <USB_EPStartXfer+0x1cc>
 800653e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	623b      	str	r3, [r7, #32]
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <USB_EPStartXfer+0x1c0>
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	3301      	adds	r3, #1
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	b29b      	uxth	r3, r3
 8006558:	029b      	lsls	r3, r3, #10
 800655a:	b29b      	uxth	r3, r3
 800655c:	8023      	strh	r3, [r4, #0]
 800655e:	e029      	b.n	80065b4 <USB_EPStartXfer+0x220>
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	095b      	lsrs	r3, r3, #5
 8006564:	623b      	str	r3, [r7, #32]
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	f003 031f 	and.w	r3, r3, #31
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <USB_EPStartXfer+0x1e2>
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	3b01      	subs	r3, #1
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	b29b      	uxth	r3, r3
 800657a:	029b      	lsls	r3, r3, #10
 800657c:	b29b      	uxth	r3, r3
 800657e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006582:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006586:	b29b      	uxth	r3, r3
 8006588:	8023      	strh	r3, [r4, #0]
 800658a:	e013      	b.n	80065b4 <USB_EPStartXfer+0x220>
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	785b      	ldrb	r3, [r3, #1]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d10f      	bne.n	80065b4 <USB_EPStartXfer+0x220>
 8006594:	687c      	ldr	r4, [r7, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800659c:	b29b      	uxth	r3, r3
 800659e:	441c      	add	r4, r3
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	4423      	add	r3, r4
 80065a8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065ac:	461c      	mov	r4, r3
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	891b      	ldrh	r3, [r3, #8]
 80065b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6959      	ldr	r1, [r3, #20]
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fab4 	bl	8006b32 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d115      	bne.n	80065fe <USB_EPStartXfer+0x26a>
 80065d2:	687a      	ldr	r2, [r7, #4]
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	4413      	add	r3, r2
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	b29b      	uxth	r3, r3
 80065e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e8:	b29c      	uxth	r4, r3
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	441a      	add	r2, r3
 80065f4:	4b9a      	ldr	r3, [pc, #616]	; (8006860 <USB_EPStartXfer+0x4cc>)
 80065f6:	4323      	orrs	r3, r4
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]
 80065fc:	e018      	b.n	8006630 <USB_EPStartXfer+0x29c>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d114      	bne.n	8006630 <USB_EPStartXfer+0x29c>
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	881b      	ldrh	r3, [r3, #0]
 8006612:	b29b      	uxth	r3, r3
 8006614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661c:	b29c      	uxth	r4, r3
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	441a      	add	r2, r3
 8006628:	4b8e      	ldr	r3, [pc, #568]	; (8006864 <USB_EPStartXfer+0x4d0>)
 800662a:	4323      	orrs	r3, r4
 800662c:	b29b      	uxth	r3, r3
 800662e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	b29c      	uxth	r4, r3
 8006648:	f084 0310 	eor.w	r3, r4, #16
 800664c:	b29c      	uxth	r4, r3
 800664e:	f084 0320 	eor.w	r3, r4, #32
 8006652:	b29c      	uxth	r4, r3
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	441a      	add	r2, r3
 800665e:	4b82      	ldr	r3, [pc, #520]	; (8006868 <USB_EPStartXfer+0x4d4>)
 8006660:	4323      	orrs	r3, r4
 8006662:	b29b      	uxth	r3, r3
 8006664:	8013      	strh	r3, [r2, #0]
 8006666:	e146      	b.n	80068f6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	429a      	cmp	r2, r3
 8006672:	d909      	bls.n	8006688 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	699a      	ldr	r2, [r3, #24]
 800667e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006680:	1ad2      	subs	r2, r2, r3
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	619a      	str	r2, [r3, #24]
 8006686:	e005      	b.n	8006694 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	7b1b      	ldrb	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d148      	bne.n	800672e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800669c:	687c      	ldr	r4, [r7, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	441c      	add	r4, r3
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	4423      	add	r3, r4
 80066b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066b4:	461c      	mov	r4, r3
 80066b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d10e      	bne.n	80066da <USB_EPStartXfer+0x346>
 80066bc:	8823      	ldrh	r3, [r4, #0]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	8023      	strh	r3, [r4, #0]
 80066c8:	8823      	ldrh	r3, [r4, #0]
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	8023      	strh	r3, [r4, #0]
 80066d8:	e0f2      	b.n	80068c0 <USB_EPStartXfer+0x52c>
 80066da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066dc:	2b3e      	cmp	r3, #62	; 0x3e
 80066de:	d810      	bhi.n	8006702 <USB_EPStartXfer+0x36e>
 80066e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
 80066e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <USB_EPStartXfer+0x362>
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	029b      	lsls	r3, r3, #10
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	8023      	strh	r3, [r4, #0]
 8006700:	e0de      	b.n	80068c0 <USB_EPStartXfer+0x52c>
 8006702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006704:	095b      	lsrs	r3, r3, #5
 8006706:	61fb      	str	r3, [r7, #28]
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	f003 031f 	and.w	r3, r3, #31
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <USB_EPStartXfer+0x384>
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	3b01      	subs	r3, #1
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	b29b      	uxth	r3, r3
 800671c:	029b      	lsls	r3, r3, #10
 800671e:	b29b      	uxth	r3, r3
 8006720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006728:	b29b      	uxth	r3, r3
 800672a:	8023      	strh	r3, [r4, #0]
 800672c:	e0c8      	b.n	80068c0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d148      	bne.n	80067c8 <USB_EPStartXfer+0x434>
 8006736:	687c      	ldr	r4, [r7, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800673e:	b29b      	uxth	r3, r3
 8006740:	441c      	add	r4, r3
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4423      	add	r3, r4
 800674a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800674e:	461c      	mov	r4, r3
 8006750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <USB_EPStartXfer+0x3e0>
 8006756:	8823      	ldrh	r3, [r4, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800675e:	b29b      	uxth	r3, r3
 8006760:	8023      	strh	r3, [r4, #0]
 8006762:	8823      	ldrh	r3, [r4, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800676a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800676e:	b29b      	uxth	r3, r3
 8006770:	8023      	strh	r3, [r4, #0]
 8006772:	e03d      	b.n	80067f0 <USB_EPStartXfer+0x45c>
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	2b3e      	cmp	r3, #62	; 0x3e
 8006778:	d810      	bhi.n	800679c <USB_EPStartXfer+0x408>
 800677a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677c:	085b      	lsrs	r3, r3, #1
 800677e:	61bb      	str	r3, [r7, #24]
 8006780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d002      	beq.n	8006790 <USB_EPStartXfer+0x3fc>
 800678a:	69bb      	ldr	r3, [r7, #24]
 800678c:	3301      	adds	r3, #1
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	b29b      	uxth	r3, r3
 8006794:	029b      	lsls	r3, r3, #10
 8006796:	b29b      	uxth	r3, r3
 8006798:	8023      	strh	r3, [r4, #0]
 800679a:	e029      	b.n	80067f0 <USB_EPStartXfer+0x45c>
 800679c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a4:	f003 031f 	and.w	r3, r3, #31
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d102      	bne.n	80067b2 <USB_EPStartXfer+0x41e>
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	3b01      	subs	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	029b      	lsls	r3, r3, #10
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	8023      	strh	r3, [r4, #0]
 80067c6:	e013      	b.n	80067f0 <USB_EPStartXfer+0x45c>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d10f      	bne.n	80067f0 <USB_EPStartXfer+0x45c>
 80067d0:	687c      	ldr	r4, [r7, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067d8:	b29b      	uxth	r3, r3
 80067da:	441c      	add	r4, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	011b      	lsls	r3, r3, #4
 80067e2:	4423      	add	r3, r4
 80067e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067e8:	461c      	mov	r4, r3
 80067ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	8023      	strh	r3, [r4, #0]
 80067f0:	687c      	ldr	r4, [r7, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	785b      	ldrb	r3, [r3, #1]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d14e      	bne.n	8006898 <USB_EPStartXfer+0x504>
 80067fa:	687c      	ldr	r4, [r7, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006802:	b29b      	uxth	r3, r3
 8006804:	441c      	add	r4, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	4423      	add	r3, r4
 800680e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006812:	461c      	mov	r4, r3
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10e      	bne.n	8006838 <USB_EPStartXfer+0x4a4>
 800681a:	8823      	ldrh	r3, [r4, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006822:	b29b      	uxth	r3, r3
 8006824:	8023      	strh	r3, [r4, #0]
 8006826:	8823      	ldrh	r3, [r4, #0]
 8006828:	b29b      	uxth	r3, r3
 800682a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006832:	b29b      	uxth	r3, r3
 8006834:	8023      	strh	r3, [r4, #0]
 8006836:	e043      	b.n	80068c0 <USB_EPStartXfer+0x52c>
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b3e      	cmp	r3, #62	; 0x3e
 800683c:	d816      	bhi.n	800686c <USB_EPStartXfer+0x4d8>
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	085b      	lsrs	r3, r3, #1
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	d002      	beq.n	8006854 <USB_EPStartXfer+0x4c0>
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	3301      	adds	r3, #1
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	b29b      	uxth	r3, r3
 8006858:	029b      	lsls	r3, r3, #10
 800685a:	b29b      	uxth	r3, r3
 800685c:	8023      	strh	r3, [r4, #0]
 800685e:	e02f      	b.n	80068c0 <USB_EPStartXfer+0x52c>
 8006860:	ffff80c0 	.word	0xffff80c0
 8006864:	ffffc080 	.word	0xffffc080
 8006868:	ffff8080 	.word	0xffff8080
 800686c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800686e:	095b      	lsrs	r3, r3, #5
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f003 031f 	and.w	r3, r3, #31
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <USB_EPStartXfer+0x4ee>
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	3b01      	subs	r3, #1
 8006880:	617b      	str	r3, [r7, #20]
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	b29b      	uxth	r3, r3
 8006886:	029b      	lsls	r3, r3, #10
 8006888:	b29b      	uxth	r3, r3
 800688a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800688e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006892:	b29b      	uxth	r3, r3
 8006894:	8023      	strh	r3, [r4, #0]
 8006896:	e013      	b.n	80068c0 <USB_EPStartXfer+0x52c>
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	785b      	ldrb	r3, [r3, #1]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d10f      	bne.n	80068c0 <USB_EPStartXfer+0x52c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	441c      	add	r4, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	011b      	lsls	r3, r3, #4
 80068b0:	4423      	add	r3, r4
 80068b2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068b6:	613b      	str	r3, [r7, #16]
 80068b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	009b      	lsls	r3, r3, #2
 80068c8:	4413      	add	r3, r2
 80068ca:	881b      	ldrh	r3, [r3, #0]
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068d6:	b29c      	uxth	r4, r3
 80068d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80068dc:	b29c      	uxth	r4, r3
 80068de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80068e2:	b29c      	uxth	r4, r3
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	441a      	add	r2, r3
 80068ee:	4b04      	ldr	r3, [pc, #16]	; (8006900 <USB_EPStartXfer+0x56c>)
 80068f0:	4323      	orrs	r3, r4
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3734      	adds	r7, #52	; 0x34
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd90      	pop	{r4, r7, pc}
 8006900:	ffff8080 	.word	0xffff8080

08006904 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006904:	b490      	push	{r4, r7}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	785b      	ldrb	r3, [r3, #1]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d018      	beq.n	8006948 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	b29b      	uxth	r3, r3
 8006924:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006928:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800692c:	b29c      	uxth	r4, r3
 800692e:	f084 0310 	eor.w	r3, r4, #16
 8006932:	b29c      	uxth	r4, r3
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	781b      	ldrb	r3, [r3, #0]
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	441a      	add	r2, r3
 800693e:	4b11      	ldr	r3, [pc, #68]	; (8006984 <USB_EPSetStall+0x80>)
 8006940:	4323      	orrs	r3, r4
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
 8006946:	e017      	b.n	8006978 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	881b      	ldrh	r3, [r3, #0]
 8006954:	b29b      	uxth	r3, r3
 8006956:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800695e:	b29c      	uxth	r4, r3
 8006960:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006964:	b29c      	uxth	r4, r3
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	441a      	add	r2, r3
 8006970:	4b04      	ldr	r3, [pc, #16]	; (8006984 <USB_EPSetStall+0x80>)
 8006972:	4323      	orrs	r3, r4
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006978:	2300      	movs	r3, #0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bc90      	pop	{r4, r7}
 8006982:	4770      	bx	lr
 8006984:	ffff8080 	.word	0xffff8080

08006988 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006988:	b490      	push	{r4, r7}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	7b1b      	ldrb	r3, [r3, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d17d      	bne.n	8006a96 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	785b      	ldrb	r3, [r3, #1]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d03d      	beq.n	8006a1e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29c      	uxth	r4, r3
 80069b0:	4623      	mov	r3, r4
 80069b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d014      	beq.n	80069e4 <USB_EPClearStall+0x5c>
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	4413      	add	r3, r2
 80069c4:	881b      	ldrh	r3, [r3, #0]
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d0:	b29c      	uxth	r4, r3
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	4b31      	ldr	r3, [pc, #196]	; (8006aa4 <USB_EPClearStall+0x11c>)
 80069de:	4323      	orrs	r3, r4
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	78db      	ldrb	r3, [r3, #3]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d054      	beq.n	8006a96 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a02:	b29c      	uxth	r4, r3
 8006a04:	f084 0320 	eor.w	r3, r4, #32
 8006a08:	b29c      	uxth	r4, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	441a      	add	r2, r3
 8006a14:	4b24      	ldr	r3, [pc, #144]	; (8006aa8 <USB_EPClearStall+0x120>)
 8006a16:	4323      	orrs	r3, r4
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	8013      	strh	r3, [r2, #0]
 8006a1c:	e03b      	b.n	8006a96 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	4413      	add	r3, r2
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	b29c      	uxth	r4, r3
 8006a2c:	4623      	mov	r3, r4
 8006a2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d014      	beq.n	8006a60 <USB_EPClearStall+0xd8>
 8006a36:	687a      	ldr	r2, [r7, #4]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	4413      	add	r3, r2
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a4c:	b29c      	uxth	r4, r3
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	441a      	add	r2, r3
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <USB_EPClearStall+0x124>)
 8006a5a:	4323      	orrs	r3, r4
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	b29c      	uxth	r4, r3
 8006a78:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006a7c:	b29c      	uxth	r4, r3
 8006a7e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006a82:	b29c      	uxth	r4, r3
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	441a      	add	r2, r3
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <USB_EPClearStall+0x120>)
 8006a90:	4323      	orrs	r3, r4
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bc90      	pop	{r4, r7}
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	ffff80c0 	.word	0xffff80c0
 8006aa8:	ffff8080 	.word	0xffff8080
 8006aac:	ffffc080 	.word	0xffffc080

08006ab0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	460b      	mov	r3, r1
 8006aba:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006abc:	78fb      	ldrb	r3, [r7, #3]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d103      	bne.n	8006aca <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2280      	movs	r2, #128	; 0x80
 8006ac6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	370c      	adds	r7, #12
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	370c      	adds	r7, #12
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bc80      	pop	{r7}
 8006ae8:	4770      	bx	lr

08006aea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr

08006afe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b085      	sub	sp, #20
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b10:	68fb      	ldr	r3, [r7, #12]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bc80      	pop	{r7}
 8006b30:	4770      	bx	lr

08006b32 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b32:	b480      	push	{r7}
 8006b34:	b08d      	sub	sp, #52	; 0x34
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	60f8      	str	r0, [r7, #12]
 8006b3a:	60b9      	str	r1, [r7, #8]
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	461a      	mov	r2, r3
 8006b40:	460b      	mov	r3, r1
 8006b42:	80fb      	strh	r3, [r7, #6]
 8006b44:	4613      	mov	r3, r2
 8006b46:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b48:	88bb      	ldrh	r3, [r7, #4]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	085b      	lsrs	r3, r3, #1
 8006b4e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	005a      	lsls	r2, r3, #1
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b64:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b6a:	e01e      	b.n	8006baa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b74:	3301      	adds	r3, #1
 8006b76:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	021b      	lsls	r3, r3, #8
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	461a      	mov	r2, r3
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b90:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b94:	3302      	adds	r3, #2
 8006b96:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	3302      	adds	r3, #2
 8006b9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba6:	3b01      	subs	r3, #1
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1dd      	bne.n	8006b6c <USB_WritePMA+0x3a>
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	3734      	adds	r7, #52	; 0x34
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc80      	pop	{r7}
 8006bb8:	4770      	bx	lr

08006bba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b08b      	sub	sp, #44	; 0x2c
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	460b      	mov	r3, r1
 8006bca:	80fb      	strh	r3, [r7, #6]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bd0:	88bb      	ldrh	r3, [r7, #4]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006be0:	88fb      	ldrh	r3, [r7, #6]
 8006be2:	005a      	lsls	r2, r3, #1
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	4413      	add	r3, r2
 8006be8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bec:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	e01b      	b.n	8006c2c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	881b      	ldrh	r3, [r3, #0]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	3302      	adds	r3, #2
 8006c00:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	0a1b      	lsrs	r3, r3, #8
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c20:	6a3b      	ldr	r3, [r7, #32]
 8006c22:	3302      	adds	r3, #2
 8006c24:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e0      	bne.n	8006bf4 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c32:	88bb      	ldrh	r3, [r7, #4]
 8006c34:	f003 0301 	and.w	r3, r3, #1
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d007      	beq.n	8006c4e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	881b      	ldrh	r3, [r3, #0]
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	b2da      	uxtb	r2, r3
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	701a      	strb	r2, [r3, #0]
  }
}
 8006c4e:	bf00      	nop
 8006c50:	372c      	adds	r7, #44	; 0x2c
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	7c1b      	ldrb	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d115      	bne.n	8006c9c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c74:	2202      	movs	r2, #2
 8006c76:	2181      	movs	r1, #129	; 0x81
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f001 fe8a 	bl	8008992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c88:	2202      	movs	r2, #2
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f001 fe80 	bl	8008992 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006c9a:	e012      	b.n	8006cc2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c9c:	2340      	movs	r3, #64	; 0x40
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	2181      	movs	r1, #129	; 0x81
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fe75 	bl	8008992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cae:	2340      	movs	r3, #64	; 0x40
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fe6c 	bl	8008992 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006cc2:	2308      	movs	r3, #8
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	2182      	movs	r1, #130	; 0x82
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f001 fe62 	bl	8008992 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cd4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cd8:	f001 ff7c 	bl	8008bd4 <USBD_static_malloc>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d102      	bne.n	8006cf4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	e026      	b.n	8006d42 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	7c1b      	ldrb	r3, [r3, #16]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f001 ff1b 	bl	8008b66 <USBD_LL_PrepareReceive>
 8006d30:	e007      	b.n	8006d42 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d38:	2340      	movs	r3, #64	; 0x40
 8006d3a:	2101      	movs	r1, #1
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f001 ff12 	bl	8008b66 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3710      	adds	r7, #16
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b084      	sub	sp, #16
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006d5c:	2181      	movs	r1, #129	; 0x81
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 fe3d 	bl	80089de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f001 fe36 	bl	80089de <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d7a:	2182      	movs	r1, #130	; 0x82
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f001 fe2e 	bl	80089de <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00e      	beq.n	8006db0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006da2:	4618      	mov	r0, r3
 8006da4:	f001 ff22 	bl	8008bec <USBD_static_free>
    pdev->pClassData = NULL;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b086      	sub	sp, #24
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dca:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	781b      	ldrb	r3, [r3, #0]
 8006ddc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d039      	beq.n	8006e58 <USBD_CDC_Setup+0x9e>
 8006de4:	2b20      	cmp	r3, #32
 8006de6:	d17c      	bne.n	8006ee2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	88db      	ldrh	r3, [r3, #6]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d029      	beq.n	8006e44 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	da11      	bge.n	8006e1e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	88d2      	ldrh	r2, [r2, #6]
 8006e0c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e0e:	6939      	ldr	r1, [r7, #16]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	88db      	ldrh	r3, [r3, #6]
 8006e14:	461a      	mov	r2, r3
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f001 f9f6 	bl	8008208 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e1c:	e068      	b.n	8006ef0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	785a      	ldrb	r2, [r3, #1]
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	88db      	ldrh	r3, [r3, #6]
 8006e2c:	b2da      	uxtb	r2, r3
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e34:	6939      	ldr	r1, [r7, #16]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	88db      	ldrh	r3, [r3, #6]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fa11 	bl	8008264 <USBD_CtlPrepareRx>
      break;
 8006e42:	e055      	b.n	8006ef0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	7850      	ldrb	r0, [r2, #1]
 8006e50:	2200      	movs	r2, #0
 8006e52:	6839      	ldr	r1, [r7, #0]
 8006e54:	4798      	blx	r3
      break;
 8006e56:	e04b      	b.n	8006ef0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	785b      	ldrb	r3, [r3, #1]
 8006e5c:	2b0a      	cmp	r3, #10
 8006e5e:	d017      	beq.n	8006e90 <USBD_CDC_Setup+0xd6>
 8006e60:	2b0b      	cmp	r3, #11
 8006e62:	d029      	beq.n	8006eb8 <USBD_CDC_Setup+0xfe>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d133      	bne.n	8006ed0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e72:	f107 030c 	add.w	r3, r7, #12
 8006e76:	2202      	movs	r2, #2
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 f9c4 	bl	8008208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e80:	e02e      	b.n	8006ee0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f955 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 8006e8a:	2302      	movs	r3, #2
 8006e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e8e:	e027      	b.n	8006ee0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d107      	bne.n	8006eaa <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e9a:	f107 030f 	add.w	r3, r7, #15
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 f9b0 	bl	8008208 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ea8:	e01a      	b.n	8006ee0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006eaa:	6839      	ldr	r1, [r7, #0]
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f001 f941 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eb2:	2302      	movs	r3, #2
 8006eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8006eb6:	e013      	b.n	8006ee0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d00d      	beq.n	8006ede <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f001 f935 	bl	8008134 <USBD_CtlError>
            ret = USBD_FAIL;
 8006eca:	2302      	movs	r3, #2
 8006ecc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006ece:	e006      	b.n	8006ede <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006ed0:	6839      	ldr	r1, [r7, #0]
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f001 f92e 	bl	8008134 <USBD_CtlError>
          ret = USBD_FAIL;
 8006ed8:	2302      	movs	r3, #2
 8006eda:	75fb      	strb	r3, [r7, #23]
          break;
 8006edc:	e000      	b.n	8006ee0 <USBD_CDC_Setup+0x126>
          break;
 8006ede:	bf00      	nop
      }
      break;
 8006ee0:	e006      	b.n	8006ef0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006ee2:	6839      	ldr	r1, [r7, #0]
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 f925 	bl	8008134 <USBD_CtlError>
      ret = USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	75fb      	strb	r3, [r7, #23]
      break;
 8006eee:	bf00      	nop
  }

  return ret;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f0c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f14:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d037      	beq.n	8006f90 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f20:	78fa      	ldrb	r2, [r7, #3]
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	4613      	mov	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	331c      	adds	r3, #28
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d026      	beq.n	8006f84 <USBD_CDC_DataIn+0x8a>
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	331c      	adds	r3, #28
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	78fa      	ldrb	r2, [r7, #3]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	0152      	lsls	r2, r2, #5
 8006f4e:	440a      	add	r2, r1
 8006f50:	3238      	adds	r2, #56	; 0x38
 8006f52:	6812      	ldr	r2, [r2, #0]
 8006f54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f58:	fb02 f201 	mul.w	r2, r2, r1
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d110      	bne.n	8006f84 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006f62:	78fa      	ldrb	r2, [r7, #3]
 8006f64:	6879      	ldr	r1, [r7, #4]
 8006f66:	4613      	mov	r3, r2
 8006f68:	009b      	lsls	r3, r3, #2
 8006f6a:	4413      	add	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	440b      	add	r3, r1
 8006f70:	331c      	adds	r3, #28
 8006f72:	2200      	movs	r2, #0
 8006f74:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f76:	78f9      	ldrb	r1, [r7, #3]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f001 fdcf 	bl	8008b20 <USBD_LL_Transmit>
 8006f82:	e003      	b.n	8006f8c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	e000      	b.n	8006f92 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006f90:	2302      	movs	r3, #2
  }
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b084      	sub	sp, #16
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fae:	78fb      	ldrb	r3, [r7, #3]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f001 fdfa 	bl	8008bac <USBD_LL_GetRxDataSize>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00d      	beq.n	8006fe6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4798      	blx	r3

    return USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e000      	b.n	8006fe8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006fe6:	2302      	movs	r3, #2
  }
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3710      	adds	r7, #16
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ffe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007006:	2b00      	cmp	r3, #0
 8007008:	d015      	beq.n	8007036 <USBD_CDC_EP0_RxReady+0x46>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007010:	2bff      	cmp	r3, #255	; 0xff
 8007012:	d010      	beq.n	8007036 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	68fa      	ldr	r2, [r7, #12]
 800701e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007022:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800702a:	b292      	uxth	r2, r2
 800702c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	22ff      	movs	r2, #255	; 0xff
 8007032:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007036:	2300      	movs	r3, #0
}
 8007038:	4618      	mov	r0, r3
 800703a:	3710      	adds	r7, #16
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}

08007040 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2243      	movs	r2, #67	; 0x43
 800704c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	bc80      	pop	{r7}
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	20000098 	.word	0x20000098

08007060 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2243      	movs	r2, #67	; 0x43
 800706c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800706e:	4b03      	ldr	r3, [pc, #12]	; (800707c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	bc80      	pop	{r7}
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000054 	.word	0x20000054

08007080 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2243      	movs	r2, #67	; 0x43
 800708c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	bc80      	pop	{r7}
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	200000dc 	.word	0x200000dc

080070a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	220a      	movs	r2, #10
 80070ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bc80      	pop	{r7}
 80070b8:	4770      	bx	lr
 80070ba:	bf00      	nop
 80070bc:	20000010 	.word	0x20000010

080070c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80070ca:	2302      	movs	r3, #2
 80070cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bc80      	pop	{r7}
 80070ea:	4770      	bx	lr

080070ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b087      	sub	sp, #28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	4613      	mov	r3, r2
 80070f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	68ba      	ldr	r2, [r7, #8]
 8007106:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800710a:	88fa      	ldrh	r2, [r7, #6]
 800710c:	697b      	ldr	r3, [r7, #20]
 800710e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	371c      	adds	r7, #28
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr

0800711e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800711e:	b480      	push	{r7}
 8007120:	b085      	sub	sp, #20
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
 8007126:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	bc80      	pop	{r7}
 8007142:	4770      	bx	lr

08007144 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007152:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01c      	beq.n	8007198 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007164:	2b00      	cmp	r3, #0
 8007166:	d115      	bne.n	8007194 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8007186:	b29b      	uxth	r3, r3
 8007188:	2181      	movs	r1, #129	; 0x81
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f001 fcc8 	bl	8008b20 <USBD_LL_Transmit>

      return USBD_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	e002      	b.n	800719a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007194:	2301      	movs	r3, #1
 8007196:	e000      	b.n	800719a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007198:	2302      	movs	r3, #2
  }
}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d017      	beq.n	80071ec <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	7c1b      	ldrb	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d109      	bne.n	80071d8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071ce:	2101      	movs	r1, #1
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f001 fcc8 	bl	8008b66 <USBD_LL_PrepareReceive>
 80071d6:	e007      	b.n	80071e8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071de:	2340      	movs	r3, #64	; 0x40
 80071e0:	2101      	movs	r1, #1
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 fcbf 	bl	8008b66 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	e000      	b.n	80071ee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80071ec:	2302      	movs	r3, #2
  }
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3710      	adds	r7, #16
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b084      	sub	sp, #16
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	4613      	mov	r3, r2
 8007202:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	e01a      	b.n	8007244 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007214:	2b00      	cmp	r3, #0
 8007216:	d003      	beq.n	8007220 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	68ba      	ldr	r2, [r7, #8]
 800722a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2201      	movs	r2, #1
 8007232:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	79fa      	ldrb	r2, [r7, #7]
 800723a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f001 fb33 	bl	80088a8 <USBD_LL_Init>

  return USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800724c:	b480      	push	{r7}
 800724e:	b085      	sub	sp, #20
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007256:	2300      	movs	r3, #0
 8007258:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d006      	beq.n	800726e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	683a      	ldr	r2, [r7, #0]
 8007264:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	73fb      	strb	r3, [r7, #15]
 800726c:	e001      	b.n	8007272 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800726e:	2302      	movs	r3, #2
 8007270:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007272:	7bfb      	ldrb	r3, [r7, #15]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3714      	adds	r7, #20
 8007278:	46bd      	mov	sp, r7
 800727a:	bc80      	pop	{r7}
 800727c:	4770      	bx	lr

0800727e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f001 fb68 	bl	800895c <USBD_LL_Start>

  return USBD_OK;
 800728c:	2300      	movs	r3, #0
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007296:	b480      	push	{r7}
 8007298:	b083      	sub	sp, #12
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bc80      	pop	{r7}
 80072a8:	4770      	bx	lr

080072aa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	6078      	str	r0, [r7, #4]
 80072b2:	460b      	mov	r3, r1
 80072b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072b6:	2302      	movs	r3, #2
 80072b8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00c      	beq.n	80072de <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	78fa      	ldrb	r2, [r7, #3]
 80072ce:	4611      	mov	r1, r2
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	4798      	blx	r3
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d101      	bne.n	80072de <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	78fa      	ldrb	r2, [r7, #3]
 80072fe:	4611      	mov	r1, r2
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	4798      	blx	r3

  return USBD_OK;
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b082      	sub	sp, #8
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	4618      	mov	r0, r3
 8007322:	f000 fecb 	bl	80080bc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007334:	461a      	mov	r2, r3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	2b01      	cmp	r3, #1
 8007348:	d00c      	beq.n	8007364 <USBD_LL_SetupStage+0x56>
 800734a:	2b01      	cmp	r3, #1
 800734c:	d302      	bcc.n	8007354 <USBD_LL_SetupStage+0x46>
 800734e:	2b02      	cmp	r3, #2
 8007350:	d010      	beq.n	8007374 <USBD_LL_SetupStage+0x66>
 8007352:	e017      	b.n	8007384 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800735a:	4619      	mov	r1, r3
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9cb 	bl	80076f8 <USBD_StdDevReq>
      break;
 8007362:	e01a      	b.n	800739a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800736a:	4619      	mov	r1, r3
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fa2d 	bl	80077cc <USBD_StdItfReq>
      break;
 8007372:	e012      	b.n	800739a <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa6b 	bl	8007858 <USBD_StdEPReq>
      break;
 8007382:	e00a      	b.n	800739a <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800738a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800738e:	b2db      	uxtb	r3, r3
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 fb42 	bl	8008a1c <USBD_LL_StallEP>
      break;
 8007398:	bf00      	nop
  }

  return USBD_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	460b      	mov	r3, r1
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80073b2:	7afb      	ldrb	r3, [r7, #11]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d14b      	bne.n	8007450 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80073be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073c6:	2b03      	cmp	r3, #3
 80073c8:	d134      	bne.n	8007434 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	68da      	ldr	r2, [r3, #12]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d919      	bls.n	800740a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	68da      	ldr	r2, [r3, #12]
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	1ad2      	subs	r2, r2, r3
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d203      	bcs.n	80073f8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	e002      	b.n	80073fe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	461a      	mov	r2, r3
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	68f8      	ldr	r0, [r7, #12]
 8007404:	f000 ff4c 	bl	80082a0 <USBD_CtlContinueRx>
 8007408:	e038      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007410:	691b      	ldr	r3, [r3, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800741c:	2b03      	cmp	r3, #3
 800741e:	d105      	bne.n	800742c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007426:	691b      	ldr	r3, [r3, #16]
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 ff49 	bl	80082c4 <USBD_CtlSendStatus>
 8007432:	e023      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800743a:	2b05      	cmp	r3, #5
 800743c:	d11e      	bne.n	800747c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007446:	2100      	movs	r1, #0
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f001 fae7 	bl	8008a1c <USBD_LL_StallEP>
 800744e:	e015      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007462:	2b03      	cmp	r3, #3
 8007464:	d108      	bne.n	8007478 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	7afa      	ldrb	r2, [r7, #11]
 8007470:	4611      	mov	r1, r2
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	4798      	blx	r3
 8007476:	e001      	b.n	800747c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007478:	2302      	movs	r3, #2
 800747a:	e000      	b.n	800747e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3718      	adds	r7, #24
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}

08007486 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007486:	b580      	push	{r7, lr}
 8007488:	b086      	sub	sp, #24
 800748a:	af00      	add	r7, sp, #0
 800748c:	60f8      	str	r0, [r7, #12]
 800748e:	460b      	mov	r3, r1
 8007490:	607a      	str	r2, [r7, #4]
 8007492:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007494:	7afb      	ldrb	r3, [r7, #11]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d17f      	bne.n	800759a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3314      	adds	r3, #20
 800749e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a6:	2b02      	cmp	r3, #2
 80074a8:	d15c      	bne.n	8007564 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	68da      	ldr	r2, [r3, #12]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d915      	bls.n	80074e2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	68da      	ldr	r2, [r3, #12]
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	461a      	mov	r2, r3
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 feb6 	bl	8008240 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074d4:	2300      	movs	r3, #0
 80074d6:	2200      	movs	r2, #0
 80074d8:	2100      	movs	r1, #0
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f001 fb43 	bl	8008b66 <USBD_LL_PrepareReceive>
 80074e0:	e04e      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	697a      	ldr	r2, [r7, #20]
 80074e8:	6912      	ldr	r2, [r2, #16]
 80074ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80074ee:	fb02 f201 	mul.w	r2, r2, r1
 80074f2:	1a9b      	subs	r3, r3, r2
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d11c      	bne.n	8007532 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007500:	429a      	cmp	r2, r3
 8007502:	d316      	bcc.n	8007532 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	689a      	ldr	r2, [r3, #8]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800750e:	429a      	cmp	r2, r3
 8007510:	d20f      	bcs.n	8007532 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007512:	2200      	movs	r2, #0
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 fe92 	bl	8008240 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007524:	2300      	movs	r3, #0
 8007526:	2200      	movs	r2, #0
 8007528:	2100      	movs	r1, #0
 800752a:	68f8      	ldr	r0, [r7, #12]
 800752c:	f001 fb1b 	bl	8008b66 <USBD_LL_PrepareReceive>
 8007530:	e026      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00a      	beq.n	8007554 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007544:	2b03      	cmp	r3, #3
 8007546:	d105      	bne.n	8007554 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007554:	2180      	movs	r1, #128	; 0x80
 8007556:	68f8      	ldr	r0, [r7, #12]
 8007558:	f001 fa60 	bl	8008a1c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 fec4 	bl	80082ea <USBD_CtlReceiveStatus>
 8007562:	e00d      	b.n	8007580 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800756a:	2b04      	cmp	r3, #4
 800756c:	d004      	beq.n	8007578 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007574:	2b00      	cmp	r3, #0
 8007576:	d103      	bne.n	8007580 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007578:	2180      	movs	r1, #128	; 0x80
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f001 fa4e 	bl	8008a1c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007586:	2b01      	cmp	r3, #1
 8007588:	d11d      	bne.n	80075c6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f7ff fe83 	bl	8007296 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2200      	movs	r2, #0
 8007594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007598:	e015      	b.n	80075c6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d00d      	beq.n	80075c2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ac:	2b03      	cmp	r3, #3
 80075ae:	d108      	bne.n	80075c2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	7afa      	ldrb	r2, [r7, #11]
 80075ba:	4611      	mov	r1, r2
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	4798      	blx	r3
 80075c0:	e001      	b.n	80075c6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075c2:	2302      	movs	r3, #2
 80075c4:	e000      	b.n	80075c8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3718      	adds	r7, #24
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075d8:	2340      	movs	r3, #64	; 0x40
 80075da:	2200      	movs	r2, #0
 80075dc:	2100      	movs	r1, #0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 f9d7 	bl	8008992 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2240      	movs	r2, #64	; 0x40
 80075f0:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80075f4:	2340      	movs	r3, #64	; 0x40
 80075f6:	2200      	movs	r2, #0
 80075f8:	2180      	movs	r1, #128	; 0x80
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f001 f9c9 	bl	8008992 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2201      	movs	r2, #1
 8007604:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2240      	movs	r2, #64	; 0x40
 800760a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007630:	2b00      	cmp	r3, #0
 8007632:	d009      	beq.n	8007648 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	6852      	ldr	r2, [r2, #4]
 8007640:	b2d2      	uxtb	r2, r2
 8007642:	4611      	mov	r1, r2
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	4798      	blx	r3
  }

  return USBD_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}

08007652 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	78fa      	ldrb	r2, [r7, #3]
 8007662:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	bc80      	pop	{r7}
 8007696:	4770      	bx	lr

08007698 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076a6:	2b04      	cmp	r3, #4
 80076a8:	d105      	bne.n	80076b6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr

080076c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b082      	sub	sp, #8
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d0:	2b03      	cmp	r3, #3
 80076d2:	d10b      	bne.n	80076ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3708      	adds	r7, #8
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007702:	2300      	movs	r3, #0
 8007704:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800770e:	2b20      	cmp	r3, #32
 8007710:	d004      	beq.n	800771c <USBD_StdDevReq+0x24>
 8007712:	2b40      	cmp	r3, #64	; 0x40
 8007714:	d002      	beq.n	800771c <USBD_StdDevReq+0x24>
 8007716:	2b00      	cmp	r3, #0
 8007718:	d008      	beq.n	800772c <USBD_StdDevReq+0x34>
 800771a:	e04c      	b.n	80077b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	4798      	blx	r3
      break;
 800772a:	e049      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785b      	ldrb	r3, [r3, #1]
 8007730:	2b09      	cmp	r3, #9
 8007732:	d83a      	bhi.n	80077aa <USBD_StdDevReq+0xb2>
 8007734:	a201      	add	r2, pc, #4	; (adr r2, 800773c <USBD_StdDevReq+0x44>)
 8007736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773a:	bf00      	nop
 800773c:	0800778d 	.word	0x0800778d
 8007740:	080077a1 	.word	0x080077a1
 8007744:	080077ab 	.word	0x080077ab
 8007748:	08007797 	.word	0x08007797
 800774c:	080077ab 	.word	0x080077ab
 8007750:	0800776f 	.word	0x0800776f
 8007754:	08007765 	.word	0x08007765
 8007758:	080077ab 	.word	0x080077ab
 800775c:	08007783 	.word	0x08007783
 8007760:	08007779 	.word	0x08007779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9d4 	bl	8007b14 <USBD_GetDescriptor>
          break;
 800776c:	e022      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb37 	bl	8007de4 <USBD_SetAddress>
          break;
 8007776:	e01d      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 fb74 	bl	8007e68 <USBD_SetConfig>
          break;
 8007780:	e018      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007782:	6839      	ldr	r1, [r7, #0]
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fbfd 	bl	8007f84 <USBD_GetConfig>
          break;
 800778a:	e013      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800778c:	6839      	ldr	r1, [r7, #0]
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f000 fc2c 	bl	8007fec <USBD_GetStatus>
          break;
 8007794:	e00e      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 fc5a 	bl	8008052 <USBD_SetFeature>
          break;
 800779e:	e009      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077a0:	6839      	ldr	r1, [r7, #0]
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 fc69 	bl	800807a <USBD_ClrFeature>
          break;
 80077a8:	e004      	b.n	80077b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80077aa:	6839      	ldr	r1, [r7, #0]
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fcc1 	bl	8008134 <USBD_CtlError>
          break;
 80077b2:	bf00      	nop
      }
      break;
 80077b4:	e004      	b.n	80077c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fcbb 	bl	8008134 <USBD_CtlError>
      break;
 80077be:	bf00      	nop
  }

  return ret;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop

080077cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077d6:	2300      	movs	r3, #0
 80077d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077e2:	2b20      	cmp	r3, #32
 80077e4:	d003      	beq.n	80077ee <USBD_StdItfReq+0x22>
 80077e6:	2b40      	cmp	r3, #64	; 0x40
 80077e8:	d001      	beq.n	80077ee <USBD_StdItfReq+0x22>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d12a      	bne.n	8007844 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077f4:	3b01      	subs	r3, #1
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d81d      	bhi.n	8007836 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	889b      	ldrh	r3, [r3, #4]
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	2b01      	cmp	r3, #1
 8007802:	d813      	bhi.n	800782c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
 8007812:	4603      	mov	r3, r0
 8007814:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	88db      	ldrh	r3, [r3, #6]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d110      	bne.n	8007840 <USBD_StdItfReq+0x74>
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10d      	bne.n	8007840 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fd4d 	bl	80082c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800782a:	e009      	b.n	8007840 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800782c:	6839      	ldr	r1, [r7, #0]
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fc80 	bl	8008134 <USBD_CtlError>
          break;
 8007834:	e004      	b.n	8007840 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007836:	6839      	ldr	r1, [r7, #0]
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fc7b 	bl	8008134 <USBD_CtlError>
          break;
 800783e:	e000      	b.n	8007842 <USBD_StdItfReq+0x76>
          break;
 8007840:	bf00      	nop
      }
      break;
 8007842:	e004      	b.n	800784e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fc74 	bl	8008134 <USBD_CtlError>
      break;
 800784c:	bf00      	nop
  }

  return USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007874:	2b20      	cmp	r3, #32
 8007876:	d004      	beq.n	8007882 <USBD_StdEPReq+0x2a>
 8007878:	2b40      	cmp	r3, #64	; 0x40
 800787a:	d002      	beq.n	8007882 <USBD_StdEPReq+0x2a>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d008      	beq.n	8007892 <USBD_StdEPReq+0x3a>
 8007880:	e13d      	b.n	8007afe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	6839      	ldr	r1, [r7, #0]
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	4798      	blx	r3
      break;
 8007890:	e13a      	b.n	8007b08 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789a:	2b20      	cmp	r3, #32
 800789c:	d10a      	bne.n	80078b4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	4798      	blx	r3
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

        return ret;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	e12a      	b.n	8007b0a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d03e      	beq.n	800793a <USBD_StdEPReq+0xe2>
 80078bc:	2b03      	cmp	r3, #3
 80078be:	d002      	beq.n	80078c6 <USBD_StdEPReq+0x6e>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d070      	beq.n	80079a6 <USBD_StdEPReq+0x14e>
 80078c4:	e115      	b.n	8007af2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d002      	beq.n	80078d6 <USBD_StdEPReq+0x7e>
 80078d0:	2b03      	cmp	r3, #3
 80078d2:	d015      	beq.n	8007900 <USBD_StdEPReq+0xa8>
 80078d4:	e02b      	b.n	800792e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078d6:	7bbb      	ldrb	r3, [r7, #14]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00c      	beq.n	80078f6 <USBD_StdEPReq+0x9e>
 80078dc:	7bbb      	ldrb	r3, [r7, #14]
 80078de:	2b80      	cmp	r3, #128	; 0x80
 80078e0:	d009      	beq.n	80078f6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80078e2:	7bbb      	ldrb	r3, [r7, #14]
 80078e4:	4619      	mov	r1, r3
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f001 f898 	bl	8008a1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80078ec:	2180      	movs	r1, #128	; 0x80
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f001 f894 	bl	8008a1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078f4:	e020      	b.n	8007938 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 fc1b 	bl	8008134 <USBD_CtlError>
              break;
 80078fe:	e01b      	b.n	8007938 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	885b      	ldrh	r3, [r3, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d10e      	bne.n	8007926 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007908:	7bbb      	ldrb	r3, [r7, #14]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00b      	beq.n	8007926 <USBD_StdEPReq+0xce>
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	2b80      	cmp	r3, #128	; 0x80
 8007912:	d008      	beq.n	8007926 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	88db      	ldrh	r3, [r3, #6]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d104      	bne.n	8007926 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800791c:	7bbb      	ldrb	r3, [r7, #14]
 800791e:	4619      	mov	r1, r3
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f001 f87b 	bl	8008a1c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fccc 	bl	80082c4 <USBD_CtlSendStatus>

              break;
 800792c:	e004      	b.n	8007938 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fbff 	bl	8008134 <USBD_CtlError>
              break;
 8007936:	bf00      	nop
          }
          break;
 8007938:	e0e0      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007940:	2b02      	cmp	r3, #2
 8007942:	d002      	beq.n	800794a <USBD_StdEPReq+0xf2>
 8007944:	2b03      	cmp	r3, #3
 8007946:	d015      	beq.n	8007974 <USBD_StdEPReq+0x11c>
 8007948:	e026      	b.n	8007998 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800794a:	7bbb      	ldrb	r3, [r7, #14]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00c      	beq.n	800796a <USBD_StdEPReq+0x112>
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	2b80      	cmp	r3, #128	; 0x80
 8007954:	d009      	beq.n	800796a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f85e 	bl	8008a1c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f001 f85a 	bl	8008a1c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007968:	e01c      	b.n	80079a4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 fbe1 	bl	8008134 <USBD_CtlError>
              break;
 8007972:	e017      	b.n	80079a4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	885b      	ldrh	r3, [r3, #2]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d112      	bne.n	80079a2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007982:	2b00      	cmp	r3, #0
 8007984:	d004      	beq.n	8007990 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007986:	7bbb      	ldrb	r3, [r7, #14]
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 f865 	bl	8008a5a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	f000 fc97 	bl	80082c4 <USBD_CtlSendStatus>
              }
              break;
 8007996:	e004      	b.n	80079a2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fbca 	bl	8008134 <USBD_CtlError>
              break;
 80079a0:	e000      	b.n	80079a4 <USBD_StdEPReq+0x14c>
              break;
 80079a2:	bf00      	nop
          }
          break;
 80079a4:	e0aa      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_StdEPReq+0x15e>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d032      	beq.n	8007a1a <USBD_StdEPReq+0x1c2>
 80079b4:	e097      	b.n	8007ae6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d007      	beq.n	80079cc <USBD_StdEPReq+0x174>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d004      	beq.n	80079cc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80079c2:	6839      	ldr	r1, [r7, #0]
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 fbb5 	bl	8008134 <USBD_CtlError>
                break;
 80079ca:	e091      	b.n	8007af0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	da0b      	bge.n	80079ec <USBD_StdEPReq+0x194>
 80079d4:	7bbb      	ldrb	r3, [r7, #14]
 80079d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079da:	4613      	mov	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	3310      	adds	r3, #16
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	4413      	add	r3, r2
 80079e8:	3304      	adds	r3, #4
 80079ea:	e00b      	b.n	8007a04 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ec:	7bbb      	ldrb	r3, [r7, #14]
 80079ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	4413      	add	r3, r2
 8007a02:	3304      	adds	r3, #4
 8007a04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	4619      	mov	r1, r3
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fbf8 	bl	8008208 <USBD_CtlSendData>
              break;
 8007a18:	e06a      	b.n	8007af0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	da11      	bge.n	8007a46 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	f003 020f 	and.w	r2, r3, #15
 8007a28:	6879      	ldr	r1, [r7, #4]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4413      	add	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	440b      	add	r3, r1
 8007a34:	3318      	adds	r3, #24
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d117      	bne.n	8007a6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a3c:	6839      	ldr	r1, [r7, #0]
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fb78 	bl	8008134 <USBD_CtlError>
                  break;
 8007a44:	e054      	b.n	8007af0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	f003 020f 	and.w	r2, r3, #15
 8007a4c:	6879      	ldr	r1, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	440b      	add	r3, r1
 8007a58:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d104      	bne.n	8007a6c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007a62:	6839      	ldr	r1, [r7, #0]
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fb65 	bl	8008134 <USBD_CtlError>
                  break;
 8007a6a:	e041      	b.n	8007af0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	da0b      	bge.n	8007a8c <USBD_StdEPReq+0x234>
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	009b      	lsls	r3, r3, #2
 8007a7e:	4413      	add	r3, r2
 8007a80:	009b      	lsls	r3, r3, #2
 8007a82:	3310      	adds	r3, #16
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	4413      	add	r3, r2
 8007a88:	3304      	adds	r3, #4
 8007a8a:	e00b      	b.n	8007aa4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a8c:	7bbb      	ldrb	r3, [r7, #14]
 8007a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	3304      	adds	r3, #4
 8007aa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <USBD_StdEPReq+0x25a>
 8007aac:	7bbb      	ldrb	r3, [r7, #14]
 8007aae:	2b80      	cmp	r3, #128	; 0x80
 8007ab0:	d103      	bne.n	8007aba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	601a      	str	r2, [r3, #0]
 8007ab8:	e00e      	b.n	8007ad8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007aba:	7bbb      	ldrb	r3, [r7, #14]
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 ffea 	bl	8008a98 <USBD_LL_IsStallEP>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d003      	beq.n	8007ad2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e002      	b.n	8007ad8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	2202      	movs	r2, #2
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 fb92 	bl	8008208 <USBD_CtlSendData>
              break;
 8007ae4:	e004      	b.n	8007af0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007ae6:	6839      	ldr	r1, [r7, #0]
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 fb23 	bl	8008134 <USBD_CtlError>
              break;
 8007aee:	bf00      	nop
          }
          break;
 8007af0:	e004      	b.n	8007afc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007af2:	6839      	ldr	r1, [r7, #0]
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fb1d 	bl	8008134 <USBD_CtlError>
          break;
 8007afa:	bf00      	nop
      }
      break;
 8007afc:	e004      	b.n	8007b08 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007afe:	6839      	ldr	r1, [r7, #0]
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 fb17 	bl	8008134 <USBD_CtlError>
      break;
 8007b06:	bf00      	nop
  }

  return ret;
 8007b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
	...

08007b14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b084      	sub	sp, #16
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b26:	2300      	movs	r3, #0
 8007b28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	885b      	ldrh	r3, [r3, #2]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	3b01      	subs	r3, #1
 8007b34:	2b06      	cmp	r3, #6
 8007b36:	f200 8128 	bhi.w	8007d8a <USBD_GetDescriptor+0x276>
 8007b3a:	a201      	add	r2, pc, #4	; (adr r2, 8007b40 <USBD_GetDescriptor+0x2c>)
 8007b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b40:	08007b5d 	.word	0x08007b5d
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007bb5 	.word	0x08007bb5
 8007b4c:	08007d8b 	.word	0x08007d8b
 8007b50:	08007d8b 	.word	0x08007d8b
 8007b54:	08007d2b 	.word	0x08007d2b
 8007b58:	08007d57 	.word	0x08007d57
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	7c12      	ldrb	r2, [r2, #16]
 8007b68:	f107 0108 	add.w	r1, r7, #8
 8007b6c:	4610      	mov	r0, r2
 8007b6e:	4798      	blx	r3
 8007b70:	60f8      	str	r0, [r7, #12]
      break;
 8007b72:	e112      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	7c1b      	ldrb	r3, [r3, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10d      	bne.n	8007b98 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b84:	f107 0208 	add.w	r2, r7, #8
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4798      	blx	r3
 8007b8c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3301      	adds	r3, #1
 8007b92:	2202      	movs	r2, #2
 8007b94:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b96:	e100      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	f107 0208 	add.w	r2, r7, #8
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4798      	blx	r3
 8007ba8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	2202      	movs	r2, #2
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e0f2      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	885b      	ldrh	r3, [r3, #2]
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	f200 80ac 	bhi.w	8007d18 <USBD_GetDescriptor+0x204>
 8007bc0:	a201      	add	r2, pc, #4	; (adr r2, 8007bc8 <USBD_GetDescriptor+0xb4>)
 8007bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc6:	bf00      	nop
 8007bc8:	08007be1 	.word	0x08007be1
 8007bcc:	08007c15 	.word	0x08007c15
 8007bd0:	08007c49 	.word	0x08007c49
 8007bd4:	08007c7d 	.word	0x08007c7d
 8007bd8:	08007cb1 	.word	0x08007cb1
 8007bdc:	08007ce5 	.word	0x08007ce5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00b      	beq.n	8007c04 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	7c12      	ldrb	r2, [r2, #16]
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
 8007c00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c02:	e091      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fa94 	bl	8008134 <USBD_CtlError>
            err++;
 8007c0c:	7afb      	ldrb	r3, [r7, #11]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	72fb      	strb	r3, [r7, #11]
          break;
 8007c12:	e089      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00b      	beq.n	8007c38 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	7c12      	ldrb	r2, [r2, #16]
 8007c2c:	f107 0108 	add.w	r1, r7, #8
 8007c30:	4610      	mov	r0, r2
 8007c32:	4798      	blx	r3
 8007c34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c36:	e077      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa7a 	bl	8008134 <USBD_CtlError>
            err++;
 8007c40:	7afb      	ldrb	r3, [r7, #11]
 8007c42:	3301      	adds	r3, #1
 8007c44:	72fb      	strb	r3, [r7, #11]
          break;
 8007c46:	e06f      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00b      	beq.n	8007c6c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	7c12      	ldrb	r2, [r2, #16]
 8007c60:	f107 0108 	add.w	r1, r7, #8
 8007c64:	4610      	mov	r0, r2
 8007c66:	4798      	blx	r3
 8007c68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6a:	e05d      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fa60 	bl	8008134 <USBD_CtlError>
            err++;
 8007c74:	7afb      	ldrb	r3, [r7, #11]
 8007c76:	3301      	adds	r3, #1
 8007c78:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7a:	e055      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c82:	691b      	ldr	r3, [r3, #16]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c8e:	691b      	ldr	r3, [r3, #16]
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	7c12      	ldrb	r2, [r2, #16]
 8007c94:	f107 0108 	add.w	r1, r7, #8
 8007c98:	4610      	mov	r0, r2
 8007c9a:	4798      	blx	r3
 8007c9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c9e:	e043      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 fa46 	bl	8008134 <USBD_CtlError>
            err++;
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	3301      	adds	r3, #1
 8007cac:	72fb      	strb	r3, [r7, #11]
          break;
 8007cae:	e03b      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d00b      	beq.n	8007cd4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	7c12      	ldrb	r2, [r2, #16]
 8007cc8:	f107 0108 	add.w	r1, r7, #8
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4798      	blx	r3
 8007cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd2:	e029      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa2c 	bl	8008134 <USBD_CtlError>
            err++;
 8007cdc:	7afb      	ldrb	r3, [r7, #11]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce2:	e021      	b.n	8007d28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	7c12      	ldrb	r2, [r2, #16]
 8007cfc:	f107 0108 	add.w	r1, r7, #8
 8007d00:	4610      	mov	r0, r2
 8007d02:	4798      	blx	r3
 8007d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d06:	e00f      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa12 	bl	8008134 <USBD_CtlError>
            err++;
 8007d10:	7afb      	ldrb	r3, [r7, #11]
 8007d12:	3301      	adds	r3, #1
 8007d14:	72fb      	strb	r3, [r7, #11]
          break;
 8007d16:	e007      	b.n	8007d28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d18:	6839      	ldr	r1, [r7, #0]
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 fa0a 	bl	8008134 <USBD_CtlError>
          err++;
 8007d20:	7afb      	ldrb	r3, [r7, #11]
 8007d22:	3301      	adds	r3, #1
 8007d24:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d26:	e038      	b.n	8007d9a <USBD_GetDescriptor+0x286>
 8007d28:	e037      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7c1b      	ldrb	r3, [r3, #16]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d109      	bne.n	8007d46 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3a:	f107 0208 	add.w	r2, r7, #8
 8007d3e:	4610      	mov	r0, r2
 8007d40:	4798      	blx	r3
 8007d42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d44:	e029      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d46:	6839      	ldr	r1, [r7, #0]
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f000 f9f3 	bl	8008134 <USBD_CtlError>
        err++;
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	3301      	adds	r3, #1
 8007d52:	72fb      	strb	r3, [r7, #11]
      break;
 8007d54:	e021      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	7c1b      	ldrb	r3, [r3, #16]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10d      	bne.n	8007d7a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f107 0208 	add.w	r2, r7, #8
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4798      	blx	r3
 8007d6e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3301      	adds	r3, #1
 8007d74:	2207      	movs	r2, #7
 8007d76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d78:	e00f      	b.n	8007d9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d7a:	6839      	ldr	r1, [r7, #0]
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9d9 	bl	8008134 <USBD_CtlError>
        err++;
 8007d82:	7afb      	ldrb	r3, [r7, #11]
 8007d84:	3301      	adds	r3, #1
 8007d86:	72fb      	strb	r3, [r7, #11]
      break;
 8007d88:	e007      	b.n	8007d9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d8a:	6839      	ldr	r1, [r7, #0]
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f9d1 	bl	8008134 <USBD_CtlError>
      err++;
 8007d92:	7afb      	ldrb	r3, [r7, #11]
 8007d94:	3301      	adds	r3, #1
 8007d96:	72fb      	strb	r3, [r7, #11]
      break;
 8007d98:	bf00      	nop
  }

  if (err != 0U)
 8007d9a:	7afb      	ldrb	r3, [r7, #11]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d11c      	bne.n	8007dda <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007da0:	893b      	ldrh	r3, [r7, #8]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d011      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	88db      	ldrh	r3, [r3, #6]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d00d      	beq.n	8007dca <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88da      	ldrh	r2, [r3, #6]
 8007db2:	893b      	ldrh	r3, [r7, #8]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	bf28      	it	cs
 8007db8:	4613      	movcs	r3, r2
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007dbe:	893b      	ldrh	r3, [r7, #8]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	68f9      	ldr	r1, [r7, #12]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fa1f 	bl	8008208 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d104      	bne.n	8007ddc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fa76 	bl	80082c4 <USBD_CtlSendStatus>
 8007dd8:	e000      	b.n	8007ddc <USBD_GetDescriptor+0x2c8>
    return;
 8007dda:	bf00      	nop
    }
  }
}
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop

08007de4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	889b      	ldrh	r3, [r3, #4]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d130      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	88db      	ldrh	r3, [r3, #6]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d12c      	bne.n	8007e58 <USBD_SetAddress+0x74>
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	885b      	ldrh	r3, [r3, #2]
 8007e02:	2b7f      	cmp	r3, #127	; 0x7f
 8007e04:	d828      	bhi.n	8007e58 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	885b      	ldrh	r3, [r3, #2]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e10:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d104      	bne.n	8007e26 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f988 	bl	8008134 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e24:	e01c      	b.n	8007e60 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7bfa      	ldrb	r2, [r7, #15]
 8007e2a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e2e:	7bfb      	ldrb	r3, [r7, #15]
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f000 fe55 	bl	8008ae2 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f000 fa43 	bl	80082c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e4c:	e008      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e56:	e003      	b.n	8007e60 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f96a 	bl	8008134 <USBD_CtlError>
  }
}
 8007e60:	bf00      	nop
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	4b41      	ldr	r3, [pc, #260]	; (8007f80 <USBD_SetConfig+0x118>)
 8007e7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e7c:	4b40      	ldr	r3, [pc, #256]	; (8007f80 <USBD_SetConfig+0x118>)
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d904      	bls.n	8007e8e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f954 	bl	8008134 <USBD_CtlError>
 8007e8c:	e075      	b.n	8007f7a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d002      	beq.n	8007e9e <USBD_SetConfig+0x36>
 8007e98:	2b03      	cmp	r3, #3
 8007e9a:	d023      	beq.n	8007ee4 <USBD_SetConfig+0x7c>
 8007e9c:	e062      	b.n	8007f64 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007e9e:	4b38      	ldr	r3, [pc, #224]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d01a      	beq.n	8007edc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007ea6:	4b36      	ldr	r3, [pc, #216]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2203      	movs	r2, #3
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007eb8:	4b31      	ldr	r3, [pc, #196]	; (8007f80 <USBD_SetConfig+0x118>)
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7ff f9f3 	bl	80072aa <USBD_SetClassConfig>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d104      	bne.n	8007ed4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f931 	bl	8008134 <USBD_CtlError>
            return;
 8007ed2:	e052      	b.n	8007f7a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f9f5 	bl	80082c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007eda:	e04e      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 f9f1 	bl	80082c4 <USBD_CtlSendStatus>
        break;
 8007ee2:	e04a      	b.n	8007f7a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ee4:	4b26      	ldr	r3, [pc, #152]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d112      	bne.n	8007f12 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2202      	movs	r2, #2
 8007ef0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ef4:	4b22      	ldr	r3, [pc, #136]	; (8007f80 <USBD_SetConfig+0x118>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007efe:	4b20      	ldr	r3, [pc, #128]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff f9ef 	bl	80072e8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f000 f9da 	bl	80082c4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f10:	e033      	b.n	8007f7a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f12:	4b1b      	ldr	r3, [pc, #108]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d01d      	beq.n	8007f5c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	4619      	mov	r1, r3
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f7ff f9dd 	bl	80072e8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f2e:	4b14      	ldr	r3, [pc, #80]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	461a      	mov	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f38:	4b11      	ldr	r3, [pc, #68]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7ff f9b3 	bl	80072aa <USBD_SetClassConfig>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d104      	bne.n	8007f54 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f8f1 	bl	8008134 <USBD_CtlError>
            return;
 8007f52:	e012      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 f9b5 	bl	80082c4 <USBD_CtlSendStatus>
        break;
 8007f5a:	e00e      	b.n	8007f7a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f9b1 	bl	80082c4 <USBD_CtlSendStatus>
        break;
 8007f62:	e00a      	b.n	8007f7a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f8e4 	bl	8008134 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007f6c:	4b04      	ldr	r3, [pc, #16]	; (8007f80 <USBD_SetConfig+0x118>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff f9b8 	bl	80072e8 <USBD_ClrClassConfig>
        break;
 8007f78:	bf00      	nop
    }
  }
}
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	20000374 	.word	0x20000374

08007f84 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	88db      	ldrh	r3, [r3, #6]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d004      	beq.n	8007fa0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 f8cb 	bl	8008134 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007f9e:	e021      	b.n	8007fe4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	db17      	blt.n	8007fda <USBD_GetConfig+0x56>
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	dd02      	ble.n	8007fb4 <USBD_GetConfig+0x30>
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d00b      	beq.n	8007fca <USBD_GetConfig+0x46>
 8007fb2:	e012      	b.n	8007fda <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f920 	bl	8008208 <USBD_CtlSendData>
        break;
 8007fc8:	e00c      	b.n	8007fe4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	3304      	adds	r3, #4
 8007fce:	2201      	movs	r2, #1
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f918 	bl	8008208 <USBD_CtlSendData>
        break;
 8007fd8:	e004      	b.n	8007fe4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007fda:	6839      	ldr	r1, [r7, #0]
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 f8a9 	bl	8008134 <USBD_CtlError>
        break;
 8007fe2:	bf00      	nop
}
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ffc:	3b01      	subs	r3, #1
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d81e      	bhi.n	8008040 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	88db      	ldrh	r3, [r3, #6]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d004      	beq.n	8008014 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 f891 	bl	8008134 <USBD_CtlError>
        break;
 8008012:	e01a      	b.n	800804a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2201      	movs	r2, #1
 8008018:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d005      	beq.n	8008030 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	f043 0202 	orr.w	r2, r3, #2
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	330c      	adds	r3, #12
 8008034:	2202      	movs	r2, #2
 8008036:	4619      	mov	r1, r3
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 f8e5 	bl	8008208 <USBD_CtlSendData>
      break;
 800803e:	e004      	b.n	800804a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f876 	bl	8008134 <USBD_CtlError>
      break;
 8008048:	bf00      	nop
  }
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	885b      	ldrh	r3, [r3, #2]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d106      	bne.n	8008072 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f929 	bl	80082c4 <USBD_CtlSendStatus>
  }
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800808a:	3b01      	subs	r3, #1
 800808c:	2b02      	cmp	r3, #2
 800808e:	d80b      	bhi.n	80080a8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d10c      	bne.n	80080b2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 f90f 	bl	80082c4 <USBD_CtlSendStatus>
      }
      break;
 80080a6:	e004      	b.n	80080b2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80080a8:	6839      	ldr	r1, [r7, #0]
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f842 	bl	8008134 <USBD_CtlError>
      break;
 80080b0:	e000      	b.n	80080b4 <USBD_ClrFeature+0x3a>
      break;
 80080b2:	bf00      	nop
  }
}
 80080b4:	bf00      	nop
 80080b6:	3708      	adds	r7, #8
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	785a      	ldrb	r2, [r3, #1]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	3302      	adds	r3, #2
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	3303      	adds	r3, #3
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	021b      	lsls	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	4413      	add	r3, r2
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	3304      	adds	r3, #4
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	3305      	adds	r3, #5
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	b29b      	uxth	r3, r3
 8008102:	021b      	lsls	r3, r3, #8
 8008104:	b29b      	uxth	r3, r3
 8008106:	4413      	add	r3, r2
 8008108:	b29a      	uxth	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	3306      	adds	r3, #6
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b29a      	uxth	r2, r3
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	3307      	adds	r3, #7
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b29b      	uxth	r3, r3
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	b29b      	uxth	r3, r3
 8008122:	4413      	add	r3, r2
 8008124:	b29a      	uxth	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	80da      	strh	r2, [r3, #6]

}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	bc80      	pop	{r7}
 8008132:	4770      	bx	lr

08008134 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800813e:	2180      	movs	r1, #128	; 0x80
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 fc6b 	bl	8008a1c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008146:	2100      	movs	r1, #0
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fc67 	bl	8008a1c <USBD_LL_StallEP>
}
 800814e:	bf00      	nop
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b086      	sub	sp, #24
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008162:	2300      	movs	r3, #0
 8008164:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d032      	beq.n	80081d2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f834 	bl	80081da <USBD_GetLen>
 8008172:	4603      	mov	r3, r0
 8008174:	3301      	adds	r3, #1
 8008176:	b29b      	uxth	r3, r3
 8008178:	005b      	lsls	r3, r3, #1
 800817a:	b29a      	uxth	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	75fa      	strb	r2, [r7, #23]
 8008186:	461a      	mov	r2, r3
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	4413      	add	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	7812      	ldrb	r2, [r2, #0]
 8008190:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	75fa      	strb	r2, [r7, #23]
 8008198:	461a      	mov	r2, r3
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	4413      	add	r3, r2
 800819e:	2203      	movs	r2, #3
 80081a0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80081a2:	e012      	b.n	80081ca <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	1c5a      	adds	r2, r3, #1
 80081a8:	60fa      	str	r2, [r7, #12]
 80081aa:	7dfa      	ldrb	r2, [r7, #23]
 80081ac:	1c51      	adds	r1, r2, #1
 80081ae:	75f9      	strb	r1, [r7, #23]
 80081b0:	4611      	mov	r1, r2
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	440a      	add	r2, r1
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80081ba:	7dfb      	ldrb	r3, [r7, #23]
 80081bc:	1c5a      	adds	r2, r3, #1
 80081be:	75fa      	strb	r2, [r7, #23]
 80081c0:	461a      	mov	r2, r3
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	4413      	add	r3, r2
 80081c6:	2200      	movs	r2, #0
 80081c8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d1e8      	bne.n	80081a4 <USBD_GetString+0x4e>
    }
  }
}
 80081d2:	bf00      	nop
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081da:	b480      	push	{r7}
 80081dc:	b085      	sub	sp, #20
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80081e6:	e005      	b.n	80081f4 <USBD_GetLen+0x1a>
  {
    len++;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
 80081ea:	3301      	adds	r3, #1
 80081ec:	73fb      	strb	r3, [r7, #15]
    buf++;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3301      	adds	r3, #1
 80081f2:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1f5      	bne.n	80081e8 <USBD_GetLen+0xe>
  }

  return len;
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	bc80      	pop	{r7}
 8008206:	4770      	bx	lr

08008208 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2202      	movs	r2, #2
 800821a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800821e:	88fa      	ldrh	r2, [r7, #6]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800822a:	88fb      	ldrh	r3, [r7, #6]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	2100      	movs	r1, #0
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f000 fc75 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 8008236:	2300      	movs	r3, #0
}
 8008238:	4618      	mov	r0, r3
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	60f8      	str	r0, [r7, #12]
 8008248:	60b9      	str	r1, [r7, #8]
 800824a:	4613      	mov	r3, r2
 800824c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800824e:	88fb      	ldrh	r3, [r7, #6]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	2100      	movs	r1, #0
 8008254:	68f8      	ldr	r0, [r7, #12]
 8008256:	f000 fc63 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	4613      	mov	r3, r2
 8008270:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2203      	movs	r2, #3
 8008276:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800827a:	88fa      	ldrh	r2, [r7, #6]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008282:	88fa      	ldrh	r2, [r7, #6]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800828a:	88fb      	ldrh	r3, [r7, #6]
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	2100      	movs	r1, #0
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	f000 fc68 	bl	8008b66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	4613      	mov	r3, r2
 80082ac:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082ae:	88fb      	ldrh	r3, [r7, #6]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fc56 	bl	8008b66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b082      	sub	sp, #8
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2204      	movs	r2, #4
 80082d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80082d4:	2300      	movs	r3, #0
 80082d6:	2200      	movs	r2, #0
 80082d8:	2100      	movs	r1, #0
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fc20 	bl	8008b20 <USBD_LL_Transmit>

  return USBD_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b082      	sub	sp, #8
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2205      	movs	r2, #5
 80082f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082fa:	2300      	movs	r3, #0
 80082fc:	2200      	movs	r2, #0
 80082fe:	2100      	movs	r1, #0
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc30 	bl	8008b66 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3708      	adds	r7, #8
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008314:	2200      	movs	r2, #0
 8008316:	4912      	ldr	r1, [pc, #72]	; (8008360 <MX_USB_DEVICE_Init+0x50>)
 8008318:	4812      	ldr	r0, [pc, #72]	; (8008364 <MX_USB_DEVICE_Init+0x54>)
 800831a:	f7fe ff6c 	bl	80071f6 <USBD_Init>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008324:	f7fa faee 	bl	8002904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008328:	490f      	ldr	r1, [pc, #60]	; (8008368 <MX_USB_DEVICE_Init+0x58>)
 800832a:	480e      	ldr	r0, [pc, #56]	; (8008364 <MX_USB_DEVICE_Init+0x54>)
 800832c:	f7fe ff8e 	bl	800724c <USBD_RegisterClass>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008336:	f7fa fae5 	bl	8002904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800833a:	490c      	ldr	r1, [pc, #48]	; (800836c <MX_USB_DEVICE_Init+0x5c>)
 800833c:	4809      	ldr	r0, [pc, #36]	; (8008364 <MX_USB_DEVICE_Init+0x54>)
 800833e:	f7fe febf 	bl	80070c0 <USBD_CDC_RegisterInterface>
 8008342:	4603      	mov	r3, r0
 8008344:	2b00      	cmp	r3, #0
 8008346:	d001      	beq.n	800834c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008348:	f7fa fadc 	bl	8002904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800834c:	4805      	ldr	r0, [pc, #20]	; (8008364 <MX_USB_DEVICE_Init+0x54>)
 800834e:	f7fe ff96 	bl	800727e <USBD_Start>
 8008352:	4603      	mov	r3, r0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d001      	beq.n	800835c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008358:	f7fa fad4 	bl	8002904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800835c:	bf00      	nop
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000130 	.word	0x20000130
 8008364:	20000740 	.word	0x20000740
 8008368:	2000001c 	.word	0x2000001c
 800836c:	20000120 	.word	0x20000120

08008370 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008374:	2200      	movs	r2, #0
 8008376:	4905      	ldr	r1, [pc, #20]	; (800838c <CDC_Init_FS+0x1c>)
 8008378:	4805      	ldr	r0, [pc, #20]	; (8008390 <CDC_Init_FS+0x20>)
 800837a:	f7fe feb7 	bl	80070ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800837e:	4905      	ldr	r1, [pc, #20]	; (8008394 <CDC_Init_FS+0x24>)
 8008380:	4803      	ldr	r0, [pc, #12]	; (8008390 <CDC_Init_FS+0x20>)
 8008382:	f7fe fecc 	bl	800711e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008386:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008388:	4618      	mov	r0, r3
 800838a:	bd80      	pop	{r7, pc}
 800838c:	20000dec 	.word	0x20000dec
 8008390:	20000740 	.word	0x20000740
 8008394:	20000a04 	.word	0x20000a04

08008398 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008398:	b480      	push	{r7}
 800839a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800839c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800839e:	4618      	mov	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bc80      	pop	{r7}
 80083a4:	4770      	bx	lr
	...

080083a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	4603      	mov	r3, r0
 80083b0:	6039      	str	r1, [r7, #0]
 80083b2:	71fb      	strb	r3, [r7, #7]
 80083b4:	4613      	mov	r3, r2
 80083b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80083b8:	79fb      	ldrb	r3, [r7, #7]
 80083ba:	2b23      	cmp	r3, #35	; 0x23
 80083bc:	d84a      	bhi.n	8008454 <CDC_Control_FS+0xac>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <CDC_Control_FS+0x1c>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	08008455 	.word	0x08008455
 80083c8:	08008455 	.word	0x08008455
 80083cc:	08008455 	.word	0x08008455
 80083d0:	08008455 	.word	0x08008455
 80083d4:	08008455 	.word	0x08008455
 80083d8:	08008455 	.word	0x08008455
 80083dc:	08008455 	.word	0x08008455
 80083e0:	08008455 	.word	0x08008455
 80083e4:	08008455 	.word	0x08008455
 80083e8:	08008455 	.word	0x08008455
 80083ec:	08008455 	.word	0x08008455
 80083f0:	08008455 	.word	0x08008455
 80083f4:	08008455 	.word	0x08008455
 80083f8:	08008455 	.word	0x08008455
 80083fc:	08008455 	.word	0x08008455
 8008400:	08008455 	.word	0x08008455
 8008404:	08008455 	.word	0x08008455
 8008408:	08008455 	.word	0x08008455
 800840c:	08008455 	.word	0x08008455
 8008410:	08008455 	.word	0x08008455
 8008414:	08008455 	.word	0x08008455
 8008418:	08008455 	.word	0x08008455
 800841c:	08008455 	.word	0x08008455
 8008420:	08008455 	.word	0x08008455
 8008424:	08008455 	.word	0x08008455
 8008428:	08008455 	.word	0x08008455
 800842c:	08008455 	.word	0x08008455
 8008430:	08008455 	.word	0x08008455
 8008434:	08008455 	.word	0x08008455
 8008438:	08008455 	.word	0x08008455
 800843c:	08008455 	.word	0x08008455
 8008440:	08008455 	.word	0x08008455
 8008444:	08008455 	.word	0x08008455
 8008448:	08008455 	.word	0x08008455
 800844c:	08008455 	.word	0x08008455
 8008450:	08008455 	.word	0x08008455
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008454:	bf00      	nop
  }

  return (USBD_OK);
 8008456:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008458:	4618      	mov	r0, r3
 800845a:	370c      	adds	r7, #12
 800845c:	46bd      	mov	sp, r7
 800845e:	bc80      	pop	{r7}
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop

08008464 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4810      	ldr	r0, [pc, #64]	; (80084b4 <CDC_Receive_FS+0x50>)
 8008472:	f7fe fe54 	bl	800711e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008476:	480f      	ldr	r0, [pc, #60]	; (80084b4 <CDC_Receive_FS+0x50>)
 8008478:	f7fe fe93 	bl	80071a2 <USBD_CDC_ReceivePacket>
  memcpy(rxBuffer, Buf, (*Len) + 1);
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <CDC_Receive_FS+0x54>)
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3301      	adds	r3, #1
 8008486:	461a      	mov	r2, r3
 8008488:	6879      	ldr	r1, [r7, #4]
 800848a:	f000 fc41 	bl	8008d10 <memcpy>
  incomingMessageFlag=1;
 800848e:	4b0b      	ldr	r3, [pc, #44]	; (80084bc <CDC_Receive_FS+0x58>)
 8008490:	2201      	movs	r2, #1
 8008492:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008494:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008498:	4809      	ldr	r0, [pc, #36]	; (80084c0 <CDC_Receive_FS+0x5c>)
 800849a:	f7fb fae0 	bl	8003a5e <HAL_GPIO_TogglePin>
  sizeOfMessage=*Len;
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	b2da      	uxtb	r2, r3
 80084a4:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <CDC_Receive_FS+0x60>)
 80084a6:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80084a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3708      	adds	r7, #8
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	20000740 	.word	0x20000740
 80084b8:	200006a0 	.word	0x200006a0
 80084bc:	20000375 	.word	0x20000375
 80084c0:	40011000 	.word	0x40011000
 80084c4:	20000698 	.word	0x20000698

080084c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80084d4:	2300      	movs	r3, #0
 80084d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80084d8:	4b0d      	ldr	r3, [pc, #52]	; (8008510 <CDC_Transmit_FS+0x48>)
 80084da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e00b      	b.n	8008506 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80084ee:	887b      	ldrh	r3, [r7, #2]
 80084f0:	461a      	mov	r2, r3
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	4806      	ldr	r0, [pc, #24]	; (8008510 <CDC_Transmit_FS+0x48>)
 80084f6:	f7fe fdf9 	bl	80070ec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80084fa:	4805      	ldr	r0, [pc, #20]	; (8008510 <CDC_Transmit_FS+0x48>)
 80084fc:	f7fe fe22 	bl	8007144 <USBD_CDC_TransmitPacket>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	20000740 	.word	0x20000740

08008514 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008514:	b480      	push	{r7}
 8008516:	b083      	sub	sp, #12
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	6039      	str	r1, [r7, #0]
 800851e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	2212      	movs	r2, #18
 8008524:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	2000014c 	.word	0x2000014c

08008538 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	6039      	str	r1, [r7, #0]
 8008542:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2204      	movs	r2, #4
 8008548:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800854a:	4b03      	ldr	r3, [pc, #12]	; (8008558 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000160 	.word	0x20000160

0800855c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	4603      	mov	r3, r0
 8008564:	6039      	str	r1, [r7, #0]
 8008566:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008568:	79fb      	ldrb	r3, [r7, #7]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	4907      	ldr	r1, [pc, #28]	; (8008590 <USBD_FS_ProductStrDescriptor+0x34>)
 8008572:	4808      	ldr	r0, [pc, #32]	; (8008594 <USBD_FS_ProductStrDescriptor+0x38>)
 8008574:	f7ff fdef 	bl	8008156 <USBD_GetString>
 8008578:	e004      	b.n	8008584 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <USBD_FS_ProductStrDescriptor+0x34>)
 800857e:	4805      	ldr	r0, [pc, #20]	; (8008594 <USBD_FS_ProductStrDescriptor+0x38>)
 8008580:	f7ff fde9 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008584:	4b02      	ldr	r3, [pc, #8]	; (8008590 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008586:	4618      	mov	r0, r3
 8008588:	3708      	adds	r7, #8
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	200011d4 	.word	0x200011d4
 8008594:	0800905c 	.word	0x0800905c

08008598 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	4603      	mov	r3, r0
 80085a0:	6039      	str	r1, [r7, #0]
 80085a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	4904      	ldr	r1, [pc, #16]	; (80085b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085a8:	4804      	ldr	r0, [pc, #16]	; (80085bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085aa:	f7ff fdd4 	bl	8008156 <USBD_GetString>
  return USBD_StrDesc;
 80085ae:	4b02      	ldr	r3, [pc, #8]	; (80085b8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	200011d4 	.word	0x200011d4
 80085bc:	0800905c 	.word	0x0800905c

080085c0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	4603      	mov	r3, r0
 80085c8:	6039      	str	r1, [r7, #0]
 80085ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	221a      	movs	r2, #26
 80085d0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085d2:	f000 f843 	bl	800865c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085d6:	4b02      	ldr	r3, [pc, #8]	; (80085e0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20000164 	.word	0x20000164

080085e4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	6039      	str	r1, [r7, #0]
 80085ee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d105      	bne.n	8008602 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085f6:	683a      	ldr	r2, [r7, #0]
 80085f8:	4907      	ldr	r1, [pc, #28]	; (8008618 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085fa:	4808      	ldr	r0, [pc, #32]	; (800861c <USBD_FS_ConfigStrDescriptor+0x38>)
 80085fc:	f7ff fdab 	bl	8008156 <USBD_GetString>
 8008600:	e004      	b.n	800860c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4904      	ldr	r1, [pc, #16]	; (8008618 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008606:	4805      	ldr	r0, [pc, #20]	; (800861c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008608:	f7ff fda5 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 800860c:	4b02      	ldr	r3, [pc, #8]	; (8008618 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800860e:	4618      	mov	r0, r3
 8008610:	3708      	adds	r7, #8
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	200011d4 	.word	0x200011d4
 800861c:	08009068 	.word	0x08009068

08008620 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b082      	sub	sp, #8
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800862c:	79fb      	ldrb	r3, [r7, #7]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d105      	bne.n	800863e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008632:	683a      	ldr	r2, [r7, #0]
 8008634:	4907      	ldr	r1, [pc, #28]	; (8008654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008636:	4808      	ldr	r0, [pc, #32]	; (8008658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008638:	f7ff fd8d 	bl	8008156 <USBD_GetString>
 800863c:	e004      	b.n	8008648 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4904      	ldr	r1, [pc, #16]	; (8008654 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008644:	f7ff fd87 	bl	8008156 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008648:	4b02      	ldr	r3, [pc, #8]	; (8008654 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800864a:	4618      	mov	r0, r3
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	200011d4 	.word	0x200011d4
 8008658:	08009074 	.word	0x08009074

0800865c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008662:	4b0f      	ldr	r3, [pc, #60]	; (80086a0 <Get_SerialNum+0x44>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <Get_SerialNum+0x48>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800866e:	4b0e      	ldr	r3, [pc, #56]	; (80086a8 <Get_SerialNum+0x4c>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4413      	add	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d009      	beq.n	8008696 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008682:	2208      	movs	r2, #8
 8008684:	4909      	ldr	r1, [pc, #36]	; (80086ac <Get_SerialNum+0x50>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f814 	bl	80086b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800868c:	2204      	movs	r2, #4
 800868e:	4908      	ldr	r1, [pc, #32]	; (80086b0 <Get_SerialNum+0x54>)
 8008690:	68b8      	ldr	r0, [r7, #8]
 8008692:	f000 f80f 	bl	80086b4 <IntToUnicode>
  }
}
 8008696:	bf00      	nop
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	1ffff7e8 	.word	0x1ffff7e8
 80086a4:	1ffff7ec 	.word	0x1ffff7ec
 80086a8:	1ffff7f0 	.word	0x1ffff7f0
 80086ac:	20000166 	.word	0x20000166
 80086b0:	20000176 	.word	0x20000176

080086b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b087      	sub	sp, #28
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	4613      	mov	r3, r2
 80086c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086c6:	2300      	movs	r3, #0
 80086c8:	75fb      	strb	r3, [r7, #23]
 80086ca:	e027      	b.n	800871c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	0f1b      	lsrs	r3, r3, #28
 80086d0:	2b09      	cmp	r3, #9
 80086d2:	d80b      	bhi.n	80086ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	0f1b      	lsrs	r3, r3, #28
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	7dfb      	ldrb	r3, [r7, #23]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	4619      	mov	r1, r3
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	440b      	add	r3, r1
 80086e4:	3230      	adds	r2, #48	; 0x30
 80086e6:	b2d2      	uxtb	r2, r2
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e00a      	b.n	8008702 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	0f1b      	lsrs	r3, r3, #28
 80086f0:	b2da      	uxtb	r2, r3
 80086f2:	7dfb      	ldrb	r3, [r7, #23]
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4619      	mov	r1, r3
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	440b      	add	r3, r1
 80086fc:	3237      	adds	r2, #55	; 0x37
 80086fe:	b2d2      	uxtb	r2, r2
 8008700:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	011b      	lsls	r3, r3, #4
 8008706:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	005b      	lsls	r3, r3, #1
 800870c:	3301      	adds	r3, #1
 800870e:	68ba      	ldr	r2, [r7, #8]
 8008710:	4413      	add	r3, r2
 8008712:	2200      	movs	r2, #0
 8008714:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	3301      	adds	r3, #1
 800871a:	75fb      	strb	r3, [r7, #23]
 800871c:	7dfa      	ldrb	r2, [r7, #23]
 800871e:	79fb      	ldrb	r3, [r7, #7]
 8008720:	429a      	cmp	r2, r3
 8008722:	d3d3      	bcc.n	80086cc <IntToUnicode+0x18>
  }
}
 8008724:	bf00      	nop
 8008726:	371c      	adds	r7, #28
 8008728:	46bd      	mov	sp, r7
 800872a:	bc80      	pop	{r7}
 800872c:	4770      	bx	lr
	...

08008730 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a0d      	ldr	r2, [pc, #52]	; (8008774 <HAL_PCD_MspInit+0x44>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d113      	bne.n	800876a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <HAL_PCD_MspInit+0x48>)
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	4a0c      	ldr	r2, [pc, #48]	; (8008778 <HAL_PCD_MspInit+0x48>)
 8008748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800874c:	61d3      	str	r3, [r2, #28]
 800874e:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <HAL_PCD_MspInit+0x48>)
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008756:	60fb      	str	r3, [r7, #12]
 8008758:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800875a:	2200      	movs	r2, #0
 800875c:	2100      	movs	r1, #0
 800875e:	2014      	movs	r0, #20
 8008760:	f7fa ffa1 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008764:	2014      	movs	r0, #20
 8008766:	f7fa ffba 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	40005c00 	.word	0x40005c00
 8008778:	40021000 	.word	0x40021000

0800877c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008790:	4619      	mov	r1, r3
 8008792:	4610      	mov	r0, r2
 8008794:	f7fe fdbb 	bl	800730e <USBD_LL_SetupStage>
}
 8008798:	bf00      	nop
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	460b      	mov	r3, r1
 80087aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80087b2:	78fb      	ldrb	r3, [r7, #3]
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	015b      	lsls	r3, r3, #5
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80087be:	681a      	ldr	r2, [r3, #0]
 80087c0:	78fb      	ldrb	r3, [r7, #3]
 80087c2:	4619      	mov	r1, r3
 80087c4:	f7fe fdee 	bl	80073a4 <USBD_LL_DataOutStage>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	015b      	lsls	r3, r3, #5
 80087e8:	4413      	add	r3, r2
 80087ea:	333c      	adds	r3, #60	; 0x3c
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	78fb      	ldrb	r3, [r7, #3]
 80087f0:	4619      	mov	r1, r3
 80087f2:	f7fe fe48 	bl	8007486 <USBD_LL_DataInStage>
}
 80087f6:	bf00      	nop
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe ff58 	bl	80076c2 <USBD_LL_SOF>
}
 8008812:	bf00      	nop
 8008814:	3708      	adds	r7, #8
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}

0800881a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800881a:	b580      	push	{r7, lr}
 800881c:	b084      	sub	sp, #16
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008822:	2301      	movs	r3, #1
 8008824:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d001      	beq.n	8008832 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800882e:	f7fa f869 	bl	8002904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008838:	7bfa      	ldrb	r2, [r7, #15]
 800883a:	4611      	mov	r1, r2
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe ff08 	bl	8007652 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008848:	4618      	mov	r0, r3
 800884a:	f7fe fec1 	bl	80075d0 <USBD_LL_Reset>
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008866:	4618      	mov	r0, r3
 8008868:	f7fe ff02 	bl	8007670 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008874:	4b04      	ldr	r3, [pc, #16]	; (8008888 <HAL_PCD_SuspendCallback+0x30>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4a03      	ldr	r2, [pc, #12]	; (8008888 <HAL_PCD_SuspendCallback+0x30>)
 800887a:	f043 0306 	orr.w	r3, r3, #6
 800887e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	e000ed00 	.word	0xe000ed00

0800888c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fefc 	bl	8007698 <USBD_LL_Resume>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80088b0:	4a28      	ldr	r2, [pc, #160]	; (8008954 <USBD_LL_Init+0xac>)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4a26      	ldr	r2, [pc, #152]	; (8008954 <USBD_LL_Init+0xac>)
 80088bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80088c0:	4b24      	ldr	r3, [pc, #144]	; (8008954 <USBD_LL_Init+0xac>)
 80088c2:	4a25      	ldr	r2, [pc, #148]	; (8008958 <USBD_LL_Init+0xb0>)
 80088c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80088c6:	4b23      	ldr	r3, [pc, #140]	; (8008954 <USBD_LL_Init+0xac>)
 80088c8:	2208      	movs	r2, #8
 80088ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80088cc:	4b21      	ldr	r3, [pc, #132]	; (8008954 <USBD_LL_Init+0xac>)
 80088ce:	2202      	movs	r2, #2
 80088d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80088d2:	4b20      	ldr	r3, [pc, #128]	; (8008954 <USBD_LL_Init+0xac>)
 80088d4:	2200      	movs	r2, #0
 80088d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80088d8:	4b1e      	ldr	r3, [pc, #120]	; (8008954 <USBD_LL_Init+0xac>)
 80088da:	2200      	movs	r2, #0
 80088dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80088de:	4b1d      	ldr	r3, [pc, #116]	; (8008954 <USBD_LL_Init+0xac>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80088e4:	481b      	ldr	r0, [pc, #108]	; (8008954 <USBD_LL_Init+0xac>)
 80088e6:	f7fb f8d2 	bl	8003a8e <HAL_PCD_Init>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80088f0:	f7fa f808 	bl	8002904 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80088fa:	2318      	movs	r3, #24
 80088fc:	2200      	movs	r2, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	f7fb ff6a 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800890a:	2358      	movs	r3, #88	; 0x58
 800890c:	2200      	movs	r2, #0
 800890e:	2180      	movs	r1, #128	; 0x80
 8008910:	f7fb ff62 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800891a:	23c0      	movs	r3, #192	; 0xc0
 800891c:	2200      	movs	r2, #0
 800891e:	2181      	movs	r1, #129	; 0x81
 8008920:	f7fb ff5a 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800892a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800892e:	2200      	movs	r2, #0
 8008930:	2101      	movs	r1, #1
 8008932:	f7fb ff51 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800893c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008940:	2200      	movs	r2, #0
 8008942:	2182      	movs	r1, #130	; 0x82
 8008944:	f7fb ff48 	bl	80047d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3708      	adds	r7, #8
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	200013d4 	.word	0x200013d4
 8008958:	40005c00 	.word	0x40005c00

0800895c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008964:	2300      	movs	r3, #0
 8008966:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008972:	4618      	mov	r0, r3
 8008974:	f7fb f96c 	bl	8003c50 <HAL_PCD_Start>
 8008978:	4603      	mov	r3, r0
 800897a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800897c:	7bfb      	ldrb	r3, [r7, #15]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 f948 	bl	8008c14 <USBD_Get_USB_Status>
 8008984:	4603      	mov	r3, r0
 8008986:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008988:	7bbb      	ldrb	r3, [r7, #14]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]
 800899a:	4608      	mov	r0, r1
 800899c:	4611      	mov	r1, r2
 800899e:	461a      	mov	r2, r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	70fb      	strb	r3, [r7, #3]
 80089a4:	460b      	mov	r3, r1
 80089a6:	70bb      	strb	r3, [r7, #2]
 80089a8:	4613      	mov	r3, r2
 80089aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b0:	2300      	movs	r3, #0
 80089b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089ba:	78bb      	ldrb	r3, [r7, #2]
 80089bc:	883a      	ldrh	r2, [r7, #0]
 80089be:	78f9      	ldrb	r1, [r7, #3]
 80089c0:	f7fb fa9f 	bl	8003f02 <HAL_PCD_EP_Open>
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
 80089ca:	4618      	mov	r0, r3
 80089cc:	f000 f922 	bl	8008c14 <USBD_Get_USB_Status>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80089d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089f8:	78fa      	ldrb	r2, [r7, #3]
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fb fae0 	bl	8003fc2 <HAL_PCD_EP_Close>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a06:	7bfb      	ldrb	r3, [r7, #15]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 f903 	bl	8008c14 <USBD_Get_USB_Status>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a36:	78fa      	ldrb	r2, [r7, #3]
 8008a38:	4611      	mov	r1, r2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fb fb8a 	bl	8004154 <HAL_PCD_EP_SetStall>
 8008a40:	4603      	mov	r3, r0
 8008a42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f000 f8e4 	bl	8008c14 <USBD_Get_USB_Status>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}

08008a5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a5a:	b580      	push	{r7, lr}
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	af00      	add	r7, sp, #0
 8008a60:	6078      	str	r0, [r7, #4]
 8008a62:	460b      	mov	r3, r1
 8008a64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a74:	78fa      	ldrb	r2, [r7, #3]
 8008a76:	4611      	mov	r1, r2
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fb fbc5 	bl	8004208 <HAL_PCD_EP_ClrStall>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a82:	7bfb      	ldrb	r3, [r7, #15]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f000 f8c5 	bl	8008c14 <USBD_Get_USB_Status>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008a8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aaa:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008aac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	da08      	bge.n	8008ac6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008ab4:	78fb      	ldrb	r3, [r7, #3]
 8008ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	015b      	lsls	r3, r3, #5
 8008abe:	4413      	add	r3, r2
 8008ac0:	332a      	adds	r3, #42	; 0x2a
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	e008      	b.n	8008ad8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	015b      	lsls	r3, r3, #5
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008ad6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bc80      	pop	{r7}
 8008ae0:	4770      	bx	lr

08008ae2 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
 8008aea:	460b      	mov	r3, r1
 8008aec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aee:	2300      	movs	r3, #0
 8008af0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fb f9d9 	bl	8003eb8 <HAL_PCD_SetAddress>
 8008b06:	4603      	mov	r3, r0
 8008b08:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f000 f881 	bl	8008c14 <USBD_Get_USB_Status>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3710      	adds	r7, #16
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	72fb      	strb	r3, [r7, #11]
 8008b30:	4613      	mov	r3, r2
 8008b32:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b34:	2300      	movs	r3, #0
 8008b36:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b42:	893b      	ldrh	r3, [r7, #8]
 8008b44:	7af9      	ldrb	r1, [r7, #11]
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	f7fb facb 	bl	80040e2 <HAL_PCD_EP_Transmit>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	4618      	mov	r0, r3
 8008b54:	f000 f85e 	bl	8008c14 <USBD_Get_USB_Status>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008b5c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3718      	adds	r7, #24
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b086      	sub	sp, #24
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	60f8      	str	r0, [r7, #12]
 8008b6e:	607a      	str	r2, [r7, #4]
 8008b70:	461a      	mov	r2, r3
 8008b72:	460b      	mov	r3, r1
 8008b74:	72fb      	strb	r3, [r7, #11]
 8008b76:	4613      	mov	r3, r2
 8008b78:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008b88:	893b      	ldrh	r3, [r7, #8]
 8008b8a:	7af9      	ldrb	r1, [r7, #11]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f7fb fa5a 	bl	8004046 <HAL_PCD_EP_Receive>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b96:	7dfb      	ldrb	r3, [r7, #23]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f83b 	bl	8008c14 <USBD_Get_USB_Status>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008ba2:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3718      	adds	r7, #24
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fb fa79 	bl	80040ba <HAL_PCD_EP_GetRxCount>
 8008bc8:	4603      	mov	r3, r0
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008bdc:	4b02      	ldr	r3, [pc, #8]	; (8008be8 <USBD_static_malloc+0x14>)
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	370c      	adds	r7, #12
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bc80      	pop	{r7}
 8008be6:	4770      	bx	lr
 8008be8:	20000378 	.word	0x20000378

08008bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]

}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bc80      	pop	{r7}
 8008bfc:	4770      	bx	lr

08008bfe <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfe:	b480      	push	{r7}
 8008c00:	b083      	sub	sp, #12
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c0a:	bf00      	nop
 8008c0c:	370c      	adds	r7, #12
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bc80      	pop	{r7}
 8008c12:	4770      	bx	lr

08008c14 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	2b03      	cmp	r3, #3
 8008c26:	d817      	bhi.n	8008c58 <USBD_Get_USB_Status+0x44>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <USBD_Get_USB_Status+0x1c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c41 	.word	0x08008c41
 8008c34:	08008c47 	.word	0x08008c47
 8008c38:	08008c4d 	.word	0x08008c4d
 8008c3c:	08008c53 	.word	0x08008c53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c40:	2300      	movs	r3, #0
 8008c42:	73fb      	strb	r3, [r7, #15]
    break;
 8008c44:	e00b      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c46:	2302      	movs	r3, #2
 8008c48:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4a:	e008      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c50:	e005      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c52:	2302      	movs	r3, #2
 8008c54:	73fb      	strb	r3, [r7, #15]
    break;
 8008c56:	e002      	b.n	8008c5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c58:	2302      	movs	r3, #2
 8008c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5c:	bf00      	nop
  }
  return usb_status;
 8008c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop

08008c6c <__errno>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <__errno+0x8>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000180 	.word	0x20000180

08008c78 <__libc_init_array>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	4e0c      	ldr	r6, [pc, #48]	; (8008cb0 <__libc_init_array+0x38>)
 8008c7e:	4c0d      	ldr	r4, [pc, #52]	; (8008cb4 <__libc_init_array+0x3c>)
 8008c80:	1ba4      	subs	r4, r4, r6
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	42a5      	cmp	r5, r4
 8008c86:	d109      	bne.n	8008c9c <__libc_init_array+0x24>
 8008c88:	f000 f9d2 	bl	8009030 <_init>
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	4e0a      	ldr	r6, [pc, #40]	; (8008cb8 <__libc_init_array+0x40>)
 8008c90:	4c0a      	ldr	r4, [pc, #40]	; (8008cbc <__libc_init_array+0x44>)
 8008c92:	1ba4      	subs	r4, r4, r6
 8008c94:	10a4      	asrs	r4, r4, #2
 8008c96:	42a5      	cmp	r5, r4
 8008c98:	d105      	bne.n	8008ca6 <__libc_init_array+0x2e>
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca0:	4798      	blx	r3
 8008ca2:	3501      	adds	r5, #1
 8008ca4:	e7ee      	b.n	8008c84 <__libc_init_array+0xc>
 8008ca6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008caa:	4798      	blx	r3
 8008cac:	3501      	adds	r5, #1
 8008cae:	e7f2      	b.n	8008c96 <__libc_init_array+0x1e>
 8008cb0:	080091a4 	.word	0x080091a4
 8008cb4:	080091a4 	.word	0x080091a4
 8008cb8:	080091a4 	.word	0x080091a4
 8008cbc:	080091a8 	.word	0x080091a8

08008cc0 <__locale_ctype_ptr>:
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <__locale_ctype_ptr+0x14>)
 8008cc2:	4a05      	ldr	r2, [pc, #20]	; (8008cd8 <__locale_ctype_ptr+0x18>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	6a1b      	ldr	r3, [r3, #32]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	bf08      	it	eq
 8008ccc:	4613      	moveq	r3, r2
 8008cce:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008cd2:	4770      	bx	lr
 8008cd4:	20000180 	.word	0x20000180
 8008cd8:	200001e4 	.word	0x200001e4

08008cdc <malloc>:
 8008cdc:	4b02      	ldr	r3, [pc, #8]	; (8008ce8 <malloc+0xc>)
 8008cde:	4601      	mov	r1, r0
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	f000 b829 	b.w	8008d38 <_malloc_r>
 8008ce6:	bf00      	nop
 8008ce8:	20000180 	.word	0x20000180

08008cec <__ascii_mbtowc>:
 8008cec:	b082      	sub	sp, #8
 8008cee:	b901      	cbnz	r1, 8008cf2 <__ascii_mbtowc+0x6>
 8008cf0:	a901      	add	r1, sp, #4
 8008cf2:	b142      	cbz	r2, 8008d06 <__ascii_mbtowc+0x1a>
 8008cf4:	b14b      	cbz	r3, 8008d0a <__ascii_mbtowc+0x1e>
 8008cf6:	7813      	ldrb	r3, [r2, #0]
 8008cf8:	600b      	str	r3, [r1, #0]
 8008cfa:	7812      	ldrb	r2, [r2, #0]
 8008cfc:	1c10      	adds	r0, r2, #0
 8008cfe:	bf18      	it	ne
 8008d00:	2001      	movne	r0, #1
 8008d02:	b002      	add	sp, #8
 8008d04:	4770      	bx	lr
 8008d06:	4610      	mov	r0, r2
 8008d08:	e7fb      	b.n	8008d02 <__ascii_mbtowc+0x16>
 8008d0a:	f06f 0001 	mvn.w	r0, #1
 8008d0e:	e7f8      	b.n	8008d02 <__ascii_mbtowc+0x16>

08008d10 <memcpy>:
 8008d10:	b510      	push	{r4, lr}
 8008d12:	1e43      	subs	r3, r0, #1
 8008d14:	440a      	add	r2, r1
 8008d16:	4291      	cmp	r1, r2
 8008d18:	d100      	bne.n	8008d1c <memcpy+0xc>
 8008d1a:	bd10      	pop	{r4, pc}
 8008d1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d24:	e7f7      	b.n	8008d16 <memcpy+0x6>

08008d26 <memset>:
 8008d26:	4603      	mov	r3, r0
 8008d28:	4402      	add	r2, r0
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d100      	bne.n	8008d30 <memset+0xa>
 8008d2e:	4770      	bx	lr
 8008d30:	f803 1b01 	strb.w	r1, [r3], #1
 8008d34:	e7f9      	b.n	8008d2a <memset+0x4>
	...

08008d38 <_malloc_r>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	1ccd      	adds	r5, r1, #3
 8008d3c:	f025 0503 	bic.w	r5, r5, #3
 8008d40:	3508      	adds	r5, #8
 8008d42:	2d0c      	cmp	r5, #12
 8008d44:	bf38      	it	cc
 8008d46:	250c      	movcc	r5, #12
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	4606      	mov	r6, r0
 8008d4c:	db01      	blt.n	8008d52 <_malloc_r+0x1a>
 8008d4e:	42a9      	cmp	r1, r5
 8008d50:	d903      	bls.n	8008d5a <_malloc_r+0x22>
 8008d52:	230c      	movs	r3, #12
 8008d54:	6033      	str	r3, [r6, #0]
 8008d56:	2000      	movs	r0, #0
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	f000 f864 	bl	8008e26 <__malloc_lock>
 8008d5e:	4a21      	ldr	r2, [pc, #132]	; (8008de4 <_malloc_r+0xac>)
 8008d60:	6814      	ldr	r4, [r2, #0]
 8008d62:	4621      	mov	r1, r4
 8008d64:	b991      	cbnz	r1, 8008d8c <_malloc_r+0x54>
 8008d66:	4c20      	ldr	r4, [pc, #128]	; (8008de8 <_malloc_r+0xb0>)
 8008d68:	6823      	ldr	r3, [r4, #0]
 8008d6a:	b91b      	cbnz	r3, 8008d74 <_malloc_r+0x3c>
 8008d6c:	4630      	mov	r0, r6
 8008d6e:	f000 f83d 	bl	8008dec <_sbrk_r>
 8008d72:	6020      	str	r0, [r4, #0]
 8008d74:	4629      	mov	r1, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	f000 f838 	bl	8008dec <_sbrk_r>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d124      	bne.n	8008dca <_malloc_r+0x92>
 8008d80:	230c      	movs	r3, #12
 8008d82:	4630      	mov	r0, r6
 8008d84:	6033      	str	r3, [r6, #0]
 8008d86:	f000 f84f 	bl	8008e28 <__malloc_unlock>
 8008d8a:	e7e4      	b.n	8008d56 <_malloc_r+0x1e>
 8008d8c:	680b      	ldr	r3, [r1, #0]
 8008d8e:	1b5b      	subs	r3, r3, r5
 8008d90:	d418      	bmi.n	8008dc4 <_malloc_r+0x8c>
 8008d92:	2b0b      	cmp	r3, #11
 8008d94:	d90f      	bls.n	8008db6 <_malloc_r+0x7e>
 8008d96:	600b      	str	r3, [r1, #0]
 8008d98:	18cc      	adds	r4, r1, r3
 8008d9a:	50cd      	str	r5, [r1, r3]
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 f843 	bl	8008e28 <__malloc_unlock>
 8008da2:	f104 000b 	add.w	r0, r4, #11
 8008da6:	1d23      	adds	r3, r4, #4
 8008da8:	f020 0007 	bic.w	r0, r0, #7
 8008dac:	1ac3      	subs	r3, r0, r3
 8008dae:	d0d3      	beq.n	8008d58 <_malloc_r+0x20>
 8008db0:	425a      	negs	r2, r3
 8008db2:	50e2      	str	r2, [r4, r3]
 8008db4:	e7d0      	b.n	8008d58 <_malloc_r+0x20>
 8008db6:	684b      	ldr	r3, [r1, #4]
 8008db8:	428c      	cmp	r4, r1
 8008dba:	bf16      	itet	ne
 8008dbc:	6063      	strne	r3, [r4, #4]
 8008dbe:	6013      	streq	r3, [r2, #0]
 8008dc0:	460c      	movne	r4, r1
 8008dc2:	e7eb      	b.n	8008d9c <_malloc_r+0x64>
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	6849      	ldr	r1, [r1, #4]
 8008dc8:	e7cc      	b.n	8008d64 <_malloc_r+0x2c>
 8008dca:	1cc4      	adds	r4, r0, #3
 8008dcc:	f024 0403 	bic.w	r4, r4, #3
 8008dd0:	42a0      	cmp	r0, r4
 8008dd2:	d005      	beq.n	8008de0 <_malloc_r+0xa8>
 8008dd4:	1a21      	subs	r1, r4, r0
 8008dd6:	4630      	mov	r0, r6
 8008dd8:	f000 f808 	bl	8008dec <_sbrk_r>
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d0cf      	beq.n	8008d80 <_malloc_r+0x48>
 8008de0:	6025      	str	r5, [r4, #0]
 8008de2:	e7db      	b.n	8008d9c <_malloc_r+0x64>
 8008de4:	20000598 	.word	0x20000598
 8008de8:	2000059c 	.word	0x2000059c

08008dec <_sbrk_r>:
 8008dec:	b538      	push	{r3, r4, r5, lr}
 8008dee:	2300      	movs	r3, #0
 8008df0:	4c05      	ldr	r4, [pc, #20]	; (8008e08 <_sbrk_r+0x1c>)
 8008df2:	4605      	mov	r5, r0
 8008df4:	4608      	mov	r0, r1
 8008df6:	6023      	str	r3, [r4, #0]
 8008df8:	f7f9 fed2 	bl	8002ba0 <_sbrk>
 8008dfc:	1c43      	adds	r3, r0, #1
 8008dfe:	d102      	bne.n	8008e06 <_sbrk_r+0x1a>
 8008e00:	6823      	ldr	r3, [r4, #0]
 8008e02:	b103      	cbz	r3, 8008e06 <_sbrk_r+0x1a>
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	bd38      	pop	{r3, r4, r5, pc}
 8008e08:	20001640 	.word	0x20001640

08008e0c <__ascii_wctomb>:
 8008e0c:	b149      	cbz	r1, 8008e22 <__ascii_wctomb+0x16>
 8008e0e:	2aff      	cmp	r2, #255	; 0xff
 8008e10:	bf8b      	itete	hi
 8008e12:	238a      	movhi	r3, #138	; 0x8a
 8008e14:	700a      	strbls	r2, [r1, #0]
 8008e16:	6003      	strhi	r3, [r0, #0]
 8008e18:	2001      	movls	r0, #1
 8008e1a:	bf88      	it	hi
 8008e1c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e20:	4770      	bx	lr
 8008e22:	4608      	mov	r0, r1
 8008e24:	4770      	bx	lr

08008e26 <__malloc_lock>:
 8008e26:	4770      	bx	lr

08008e28 <__malloc_unlock>:
 8008e28:	4770      	bx	lr
	...

08008e2c <sqrt>:
 8008e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e30:	b08b      	sub	sp, #44	; 0x2c
 8008e32:	4604      	mov	r4, r0
 8008e34:	460d      	mov	r5, r1
 8008e36:	f000 f84d 	bl	8008ed4 <__ieee754_sqrt>
 8008e3a:	4b24      	ldr	r3, [pc, #144]	; (8008ecc <sqrt+0xa0>)
 8008e3c:	4680      	mov	r8, r0
 8008e3e:	f993 a000 	ldrsb.w	sl, [r3]
 8008e42:	4689      	mov	r9, r1
 8008e44:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008e48:	d02b      	beq.n	8008ea2 <sqrt+0x76>
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	f7f7 fdd3 	bl	80009fc <__aeabi_dcmpun>
 8008e56:	4683      	mov	fp, r0
 8008e58:	bb18      	cbnz	r0, 8008ea2 <sqrt+0x76>
 8008e5a:	2600      	movs	r6, #0
 8008e5c:	2700      	movs	r7, #0
 8008e5e:	4632      	mov	r2, r6
 8008e60:	463b      	mov	r3, r7
 8008e62:	4620      	mov	r0, r4
 8008e64:	4629      	mov	r1, r5
 8008e66:	f7f7 fda1 	bl	80009ac <__aeabi_dcmplt>
 8008e6a:	b1d0      	cbz	r0, 8008ea2 <sqrt+0x76>
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	9300      	str	r3, [sp, #0]
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <sqrt+0xa4>)
 8008e72:	f8cd b020 	str.w	fp, [sp, #32]
 8008e76:	9301      	str	r3, [sp, #4]
 8008e78:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008e7c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008e80:	f1ba 0f00 	cmp.w	sl, #0
 8008e84:	d112      	bne.n	8008eac <sqrt+0x80>
 8008e86:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e8a:	4668      	mov	r0, sp
 8008e8c:	f000 f8ce 	bl	800902c <matherr>
 8008e90:	b1b8      	cbz	r0, 8008ec2 <sqrt+0x96>
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	b11b      	cbz	r3, 8008e9e <sqrt+0x72>
 8008e96:	f7ff fee9 	bl	8008c6c <__errno>
 8008e9a:	9b08      	ldr	r3, [sp, #32]
 8008e9c:	6003      	str	r3, [r0, #0]
 8008e9e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	b00b      	add	sp, #44	; 0x2c
 8008ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	4639      	mov	r1, r7
 8008eb4:	f7f7 fc32 	bl	800071c <__aeabi_ddiv>
 8008eb8:	f1ba 0f02 	cmp.w	sl, #2
 8008ebc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ec0:	d1e3      	bne.n	8008e8a <sqrt+0x5e>
 8008ec2:	f7ff fed3 	bl	8008c6c <__errno>
 8008ec6:	2321      	movs	r3, #33	; 0x21
 8008ec8:	6003      	str	r3, [r0, #0]
 8008eca:	e7e2      	b.n	8008e92 <sqrt+0x66>
 8008ecc:	20000350 	.word	0x20000350
 8008ed0:	0800919f 	.word	0x0800919f

08008ed4 <__ieee754_sqrt>:
 8008ed4:	4b54      	ldr	r3, [pc, #336]	; (8009028 <__ieee754_sqrt+0x154>)
 8008ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eda:	438b      	bics	r3, r1
 8008edc:	4606      	mov	r6, r0
 8008ede:	460d      	mov	r5, r1
 8008ee0:	460a      	mov	r2, r1
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	d10f      	bne.n	8008f06 <__ieee754_sqrt+0x32>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	460b      	mov	r3, r1
 8008eea:	f7f7 faed 	bl	80004c8 <__aeabi_dmul>
 8008eee:	4602      	mov	r2, r0
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	4630      	mov	r0, r6
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	f7f7 f931 	bl	800015c <__adddf3>
 8008efa:	4606      	mov	r6, r0
 8008efc:	460d      	mov	r5, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4629      	mov	r1, r5
 8008f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f06:	2900      	cmp	r1, #0
 8008f08:	4607      	mov	r7, r0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	dc0e      	bgt.n	8008f2c <__ieee754_sqrt+0x58>
 8008f0e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008f12:	ea5c 0707 	orrs.w	r7, ip, r7
 8008f16:	d0f2      	beq.n	8008efe <__ieee754_sqrt+0x2a>
 8008f18:	b141      	cbz	r1, 8008f2c <__ieee754_sqrt+0x58>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	f7f7 f91b 	bl	8000158 <__aeabi_dsub>
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	f7f7 fbf9 	bl	800071c <__aeabi_ddiv>
 8008f2a:	e7e6      	b.n	8008efa <__ieee754_sqrt+0x26>
 8008f2c:	1512      	asrs	r2, r2, #20
 8008f2e:	d074      	beq.n	800901a <__ieee754_sqrt+0x146>
 8008f30:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008f34:	07d5      	lsls	r5, r2, #31
 8008f36:	f04f 0500 	mov.w	r5, #0
 8008f3a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008f3e:	bf48      	it	mi
 8008f40:	0fd9      	lsrmi	r1, r3, #31
 8008f42:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008f46:	bf44      	itt	mi
 8008f48:	005b      	lslmi	r3, r3, #1
 8008f4a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008f4e:	1051      	asrs	r1, r2, #1
 8008f50:	0fda      	lsrs	r2, r3, #31
 8008f52:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	2216      	movs	r2, #22
 8008f5a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008f5e:	005b      	lsls	r3, r3, #1
 8008f60:	1987      	adds	r7, r0, r6
 8008f62:	42a7      	cmp	r7, r4
 8008f64:	bfde      	ittt	le
 8008f66:	19b8      	addle	r0, r7, r6
 8008f68:	1be4      	suble	r4, r4, r7
 8008f6a:	19ad      	addle	r5, r5, r6
 8008f6c:	0fdf      	lsrs	r7, r3, #31
 8008f6e:	3a01      	subs	r2, #1
 8008f70:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008f74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f7c:	d1f0      	bne.n	8008f60 <__ieee754_sqrt+0x8c>
 8008f7e:	f04f 0c20 	mov.w	ip, #32
 8008f82:	4696      	mov	lr, r2
 8008f84:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f88:	4284      	cmp	r4, r0
 8008f8a:	eb06 070e 	add.w	r7, r6, lr
 8008f8e:	dc02      	bgt.n	8008f96 <__ieee754_sqrt+0xc2>
 8008f90:	d112      	bne.n	8008fb8 <__ieee754_sqrt+0xe4>
 8008f92:	429f      	cmp	r7, r3
 8008f94:	d810      	bhi.n	8008fb8 <__ieee754_sqrt+0xe4>
 8008f96:	2f00      	cmp	r7, #0
 8008f98:	eb07 0e06 	add.w	lr, r7, r6
 8008f9c:	da42      	bge.n	8009024 <__ieee754_sqrt+0x150>
 8008f9e:	f1be 0f00 	cmp.w	lr, #0
 8008fa2:	db3f      	blt.n	8009024 <__ieee754_sqrt+0x150>
 8008fa4:	f100 0801 	add.w	r8, r0, #1
 8008fa8:	1a24      	subs	r4, r4, r0
 8008faa:	4640      	mov	r0, r8
 8008fac:	429f      	cmp	r7, r3
 8008fae:	bf88      	it	hi
 8008fb0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008fb4:	1bdb      	subs	r3, r3, r7
 8008fb6:	4432      	add	r2, r6
 8008fb8:	0064      	lsls	r4, r4, #1
 8008fba:	f1bc 0c01 	subs.w	ip, ip, #1
 8008fbe:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008fc2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008fc6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fca:	d1dd      	bne.n	8008f88 <__ieee754_sqrt+0xb4>
 8008fcc:	4323      	orrs	r3, r4
 8008fce:	d006      	beq.n	8008fde <__ieee754_sqrt+0x10a>
 8008fd0:	1c54      	adds	r4, r2, #1
 8008fd2:	bf0b      	itete	eq
 8008fd4:	4662      	moveq	r2, ip
 8008fd6:	3201      	addne	r2, #1
 8008fd8:	3501      	addeq	r5, #1
 8008fda:	f022 0201 	bicne.w	r2, r2, #1
 8008fde:	106b      	asrs	r3, r5, #1
 8008fe0:	0852      	lsrs	r2, r2, #1
 8008fe2:	07e8      	lsls	r0, r5, #31
 8008fe4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008fe8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008fec:	bf48      	it	mi
 8008fee:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008ff2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008ff6:	4616      	mov	r6, r2
 8008ff8:	e781      	b.n	8008efe <__ieee754_sqrt+0x2a>
 8008ffa:	0adc      	lsrs	r4, r3, #11
 8008ffc:	3915      	subs	r1, #21
 8008ffe:	055b      	lsls	r3, r3, #21
 8009000:	2c00      	cmp	r4, #0
 8009002:	d0fa      	beq.n	8008ffa <__ieee754_sqrt+0x126>
 8009004:	02e6      	lsls	r6, r4, #11
 8009006:	d50a      	bpl.n	800901e <__ieee754_sqrt+0x14a>
 8009008:	f1c2 0020 	rsb	r0, r2, #32
 800900c:	fa23 f000 	lsr.w	r0, r3, r0
 8009010:	1e55      	subs	r5, r2, #1
 8009012:	4093      	lsls	r3, r2
 8009014:	4304      	orrs	r4, r0
 8009016:	1b4a      	subs	r2, r1, r5
 8009018:	e78a      	b.n	8008f30 <__ieee754_sqrt+0x5c>
 800901a:	4611      	mov	r1, r2
 800901c:	e7f0      	b.n	8009000 <__ieee754_sqrt+0x12c>
 800901e:	0064      	lsls	r4, r4, #1
 8009020:	3201      	adds	r2, #1
 8009022:	e7ef      	b.n	8009004 <__ieee754_sqrt+0x130>
 8009024:	4680      	mov	r8, r0
 8009026:	e7bf      	b.n	8008fa8 <__ieee754_sqrt+0xd4>
 8009028:	7ff00000 	.word	0x7ff00000

0800902c <matherr>:
 800902c:	2000      	movs	r0, #0
 800902e:	4770      	bx	lr

08009030 <_init>:
 8009030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009032:	bf00      	nop
 8009034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009036:	bc08      	pop	{r3}
 8009038:	469e      	mov	lr, r3
 800903a:	4770      	bx	lr

0800903c <_fini>:
 800903c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800903e:	bf00      	nop
 8009040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009042:	bc08      	pop	{r3}
 8009044:	469e      	mov	lr, r3
 8009046:	4770      	bx	lr
