
stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d58  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc4  08008fc4  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08008fc4  08008fc4  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008fc4  08008fc4  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fc4  08008fc4  00018fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08008fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000354  08009320  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  08009320  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa5e  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e19  00000000  00000000  0003addb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  0003ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  0003ff28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d27  00000000  00000000  00041080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012051  00000000  00000000  00059da7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007817b  00000000  00000000  0006bdf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005410  00000000  00000000  000e3ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	08008e50 	.word	0x08008e50

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	08008e50 	.word	0x08008e50

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <parseCodeString>:
 */

#include "GParser.h"


void parseCodeString(char *array, char len){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	switch(array[2]){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b47      	cmp	r3, #71	; 0x47
 8001160:	d002      	beq.n	8001168 <parseCodeString+0x1c>
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d00a      	beq.n	800117c <parseCodeString+0x30>
			parseMCode(array+3,len-1);
			break;
		}
		default:{

			break;
 8001166:	e013      	b.n	8001190 <parseCodeString+0x44>
			parseGCode(array+3,len-1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1cda      	adds	r2, r3, #3
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 f80f 	bl	8001198 <parseGCode>
			break;
 800117a:	e009      	b.n	8001190 <parseCodeString+0x44>
			parseMCode(array+3,len-1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1cda      	adds	r2, r3, #3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3b01      	subs	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 f9eb 	bl	8001564 <parseMCode>
			break;
 800118e:	bf00      	nop
		}
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <parseGCode>:
//////////////////////////////////////////////////////////////////////
void parseGCode(char *array, char len){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	//в массиве строка в коде ASCII. первые 2 байта команда G, далее аргументы через пробелы

	struct driversComand comand;
	comand.GCode=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
	comand.posX=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	comand.posY=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	comand.posZ=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	comand.F=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	comand.R=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	comand.valid=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	comand.I=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	comand.J=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	char ok=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	float result=0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int pos=-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38

	//читаем номер команды
	int tmp=(int)(array[0]);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 80011e0:	f007 fc7e 	bl	8008ae0 <__locale_ctype_ptr>
 80011e4:	4602      	mov	r2, r0
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 81b0 	beq.w	8001558 <parseGCode+0x3c0>
		comand.GCode=(char)(stringToInt(array,2,&ok)/100);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	461a      	mov	r2, r3
 80011fe:	2102      	movs	r1, #2
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9dd 	bl	80015c0 <stringToInt>
 8001206:	4603      	mov	r3, r0
 8001208:	4a89      	ldr	r2, [pc, #548]	; (8001430 <parseGCode+0x298>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1152      	asrs	r2, r2, #5
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	743b      	strb	r3, [r7, #16]
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}

	//читаем координату Х
	pos = findInString(array,'X',len);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	2158      	movs	r1, #88	; 0x58
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 facd 	bl	80017be <findInString>
 8001224:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d027      	beq.n	800127e <parseGCode+0xe6>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	3301      	adds	r3, #1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001238:	b2db      	uxtb	r3, r3
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f107 020f 	add.w	r2, r7, #15
 8001244:	4619      	mov	r1, r3
 8001246:	f000 f9bb 	bl	80015c0 <stringToInt>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd1d 	bl	8000c8c <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <parseGCode+0xe6>
			comand.posX = result/10;
 800125c:	4975      	ldr	r1, [pc, #468]	; (8001434 <parseGCode+0x29c>)
 800125e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001260:	f7ff fe1c 	bl	8000e9c <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff2a 	bl	80010c0 <__aeabi_f2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	617b      	str	r3, [r7, #20]
			comand.valid |= (1<<0);
 8001270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Y
	pos = findInString(array,'Y',len);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	461a      	mov	r2, r3
 8001282:	2159      	movs	r1, #89	; 0x59
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa9a 	bl	80017be <findInString>
 800128a:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d027      	beq.n	80012e4 <parseGCode+0x14c>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	3301      	adds	r3, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d0      	adds	r0, r2, r3
 800129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 020f 	add.w	r2, r7, #15
 80012aa:	4619      	mov	r1, r3
 80012ac:	f000 f988 	bl	80015c0 <stringToInt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcea 	bl	8000c8c <__aeabi_i2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <parseGCode+0x14c>
			comand.posY = result/10;
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <parseGCode+0x29c>)
 80012c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c6:	f7ff fde9 	bl	8000e9c <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef7 	bl	80010c0 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
			comand.valid |= (1<<1);
 80012d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Z
	pos = findInString(array,'Z',len);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	215a      	movs	r1, #90	; 0x5a
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa67 	bl	80017be <findInString>
 80012f0:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d027      	beq.n	800134a <parseGCode+0x1b2>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80012fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fc:	3301      	adds	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	18d0      	adds	r0, r2, r3
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	b2db      	uxtb	r3, r3
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f107 020f 	add.w	r2, r7, #15
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f955 	bl	80015c0 <stringToInt>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb7 	bl	8000c8c <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <parseGCode+0x1b2>
			comand.posZ = result/10;
 8001328:	4942      	ldr	r1, [pc, #264]	; (8001434 <parseGCode+0x29c>)
 800132a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800132c:	f7ff fdb6 	bl	8000e9c <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec4 	bl	80010c0 <__aeabi_f2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	61fb      	str	r3, [r7, #28]
			comand.valid |= (1<<2);
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем F
	pos = findInString(array,'F',len);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fa34 	bl	80017be <findInString>
 8001356:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d022      	beq.n	80013a6 <parseGCode+0x20e>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	3301      	adds	r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d0      	adds	r0, r2, r3
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b2db      	uxtb	r3, r3
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f107 020f 	add.w	r2, r7, #15
 8001376:	4619      	mov	r1, r3
 8001378:	f000 f922 	bl	80015c0 <stringToInt>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc84 	bl	8000c8c <__aeabi_i2f>
 8001384:	4603      	mov	r3, r0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <parseGCode+0x20e>
			comand.F = result;
 800138e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001390:	f7ff fe96 	bl	80010c0 <__aeabi_f2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	623b      	str	r3, [r7, #32]
			comand.valid |= (1<<3);
 8001398:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем R
	pos = findInString(array,'R',len);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa06 	bl	80017be <findInString>
 80013b2:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d03d      	beq.n	8001438 <parseGCode+0x2a0>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	3301      	adds	r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d0      	adds	r0, r2, r3
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f107 020f 	add.w	r2, r7, #15
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f8f4 	bl	80015c0 <stringToInt>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc56 	bl	8000c8c <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a9 	beq.w	800153e <parseGCode+0x3a6>
			if(result < 0){//радиус не может быть отрицательным
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f2:	f7ff fe3d 	bl	8001070 <__aeabi_fcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <parseGCode+0x272>
				result = 0 - result;
 80013fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	f7ff fb8d 	bl	8000b20 <__aeabi_fsub>
 8001406:	4603      	mov	r3, r0
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			comand.R = result/10;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <parseGCode+0x29c>)
 800140c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800140e:	f7ff fd45 	bl	8000e9c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe53 	bl	80010c0 <__aeabi_f2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
			comand.valid |= (1<<4);
 800141e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800142c:	e087      	b.n	800153e <parseGCode+0x3a6>
 800142e:	bf00      	nop
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	41200000 	.word	0x41200000
		}
	}
	else{
		//читаем I
		pos = findInString(array,'I',len);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	2149      	movs	r1, #73	; 0x49
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9bd 	bl	80017be <findInString>
 8001444:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 8001446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d027      	beq.n	800149e <parseGCode+0x306>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 800144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001450:	3301      	adds	r3, #1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	18d0      	adds	r0, r2, r3
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	b2db      	uxtb	r3, r3
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f107 020f 	add.w	r2, r7, #15
 8001464:	4619      	mov	r1, r3
 8001466:	f000 f8ab 	bl	80015c0 <stringToInt>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc0d 	bl	8000c8c <__aeabi_i2f>
 8001472:	4603      	mov	r3, r0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <parseGCode+0x306>
				comand.I = result/10;
 800147c:	4938      	ldr	r1, [pc, #224]	; (8001560 <parseGCode+0x3c8>)
 800147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001480:	f7ff fd0c 	bl	8000e9c <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe1a 	bl	80010c0 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
				comand.valid |= (1<<5);
 8001490:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}

		//читаем J
		pos = findInString(array,'J',len);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	214a      	movs	r1, #74	; 0x4a
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f98a 	bl	80017be <findInString>
 80014aa:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d027      	beq.n	8001504 <parseGCode+0x36c>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	18d0      	adds	r0, r2, r3
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f107 020f 	add.w	r2, r7, #15
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 f878 	bl	80015c0 <stringToInt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fbda 	bl	8000c8c <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <parseGCode+0x36c>
				comand.J = result/10;
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <parseGCode+0x3c8>)
 80014e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014e6:	f7ff fcd9 	bl	8000e9c <__aeabi_fdiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_f2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				comand.valid |= (1<<6);
 80014f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}
		comand.R=abs(sqrt(comand.I*comand.I + comand.J*comand.J));
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	fb02 f203 	mul.w	r2, r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff6c 	bl	80003f4 <__aeabi_i2d>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	f007 fb92 	bl	8008c4c <sqrt>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	4618      	mov	r0, r3
 800152e:	4621      	mov	r1, r4
 8001530:	f7ff fa7a 	bl	8000a28 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	executeGComand(comand);
 800153e:	466d      	mov	r5, sp
 8001540:	f107 0420 	add.w	r4, r7, #32
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	f000 f995 	bl	8001880 <executeGComand>
 8001556:	e000      	b.n	800155a <parseGCode+0x3c2>
		return;
 8001558:	bf00      	nop
}
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	41200000 	.word	0x41200000

08001564 <parseMCode>:
////////////////////////////////////////////////////////////////////////
void parseMCode(char *array, char len){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	struct MComand comand;
	char ok=0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

	//читаем номер команды
	int tmp=(int)(array[0]);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	617b      	str	r3, [r7, #20]
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 800157a:	f007 fab1 	bl	8008ae0 <__locale_ctype_ptr>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <parseMCode+0x52>
		comand.MCode=(char)(stringToInt(array,2,&ok)/100);
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	461a      	mov	r2, r3
 8001596:	2102      	movs	r1, #2
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f811 	bl	80015c0 <stringToInt>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <parseMCode+0x58>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1152      	asrs	r2, r2, #5
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	743b      	strb	r3, [r7, #16]
		executeMComand(comand);
 80015b0:	7c38      	ldrb	r0, [r7, #16]
 80015b2:	f000 fb6d 	bl	8001c90 <executeMComand>
	}
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}
}
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	51eb851f 	.word	0x51eb851f

080015c0 <stringToInt>:
//////////////////////////////////////////////////////////////////////////
int stringToInt(char *string, char len, char *ok){
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08d      	sub	sp, #52	; 0x34
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	460b      	mov	r3, r1
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	72fb      	strb	r3, [r7, #11]
	int endPos=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pointPos=len;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
	int result=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	char minus=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 80015e0:	e042      	b.n	8001668 <stringToInt+0xa8>
		if(isByteDigit(string[endPos]) == 0){
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8d4 	bl	8001798 <isByteDigit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d135      	bne.n	8001662 <stringToInt+0xa2>
			if(string[endPos] == 46){//проверяем на десятичную точку (46 - ASCII код точки)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d10b      	bne.n	800161a <stringToInt+0x5a>
				if(pointPos == len){//если раньше точка не встречалась
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <stringToInt+0x50>
					pointPos=endPos;//то запоминаем позицию
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	e028      	b.n	8001662 <stringToInt+0xa2>
				}
				else{//если на точку уже натыкались, то в строке ошибка
					*ok=0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
					return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e0b1      	b.n	800177e <stringToInt+0x1be>
				}
			}
			else if(string[endPos] == 45){//если минус (45 - ASCII код минуса)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b2d      	cmp	r3, #45	; 0x2d
 8001624:	d10c      	bne.n	8001640 <stringToInt+0x80>
				if(minus != 0){//если минус уже встречался, то в строке ошибка
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <stringToInt+0x78>
					*ok=0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
					return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e0a2      	b.n	800177e <stringToInt+0x1be>
				}
				minus=1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800163e:	e010      	b.n	8001662 <stringToInt+0xa2>
			}
			else if(string[endPos] == 32){//если пробел (32 - ASCII код пробела)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b20      	cmp	r3, #32
 800164a:	d012      	beq.n	8001672 <stringToInt+0xb2>
				break;//то прерываемся
			}
			else if(string[endPos] == 10){//если конец строки (10 - ASCII код конца строки)
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d00e      	beq.n	8001676 <stringToInt+0xb6>
				break;//то прерываемся
			}
			else{//если символ не цифра и не точка, то в строке ошибка
				*ok=0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e08d      	b.n	800177e <stringToInt+0x1be>
	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	3301      	adds	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d1b8      	bne.n	80015e2 <stringToInt+0x22>
 8001670:	e002      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001672:	bf00      	nop
 8001674:	e000      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001676:	bf00      	nop
			}
		}
	}
	if(pointPos==len){//точка в строке так и не встретилась,
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	429a      	cmp	r2, r3
 800167e:	d101      	bne.n	8001684 <stringToInt+0xc4>
		pointPos=endPos;//то её позиция в конце числа
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(endPos!=0){
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d069      	beq.n	800175e <stringToInt+0x19e>
		float multiplier=100;
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <stringToInt+0x1d0>)
 800168c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e025      	b.n	80016e0 <stringToInt+0x120>
			result += (string[n-1]-48)*multiplier;
 8001694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001696:	f7ff faf9 	bl	8000c8c <__aeabi_i2f>
 800169a:	4604      	mov	r4, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faef 	bl	8000c8c <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb3e 	bl	8000d34 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa31 	bl	8000b24 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcfb 	bl	80010c0 <__aeabi_f2iz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=10;
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <stringToInt+0x1d4>)
 80016d0:	69f8      	ldr	r0, [r7, #28]
 80016d2:	f7ff fb2f 	bl	8000d34 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3b01      	subs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d1d4      	bne.n	8001694 <stringToInt+0xd4>
		}

		multiplier=10;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <stringToInt+0x1d4>)
 80016ec:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e02e      	b.n	8001754 <stringToInt+0x194>
			result += (string[n]-48)*multiplier;
 80016f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016f8:	f7ff fac8 	bl	8000c8c <__aeabi_i2f>
 80016fc:	4604      	mov	r4, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b30      	subs	r3, #48	; 0x30
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fabf 	bl	8000c8c <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb0e 	bl	8000d34 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa01 	bl	8000b24 <__addsf3>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fccb 	bl	80010c0 <__aeabi_f2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=0.1;
 800172e:	69f8      	ldr	r0, [r7, #28]
 8001730:	f7fe fe72 	bl	8000418 <__aeabi_f2d>
 8001734:	a314      	add	r3, pc, #80	; (adr r3, 8001788 <stringToInt+0x1c8>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe fec5 	bl	80004c8 <__aeabi_dmul>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	dbcc      	blt.n	80016f6 <stringToInt+0x136>
 800175c:	e004      	b.n	8001768 <stringToInt+0x1a8>
		}
	}
	else{
		*ok=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e00a      	b.n	800177e <stringToInt+0x1be>
	}
	if(minus != 0){
 8001768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <stringToInt+0x1b6>
		result = 0 - result;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	425b      	negs	r3, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*ok=1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	return result;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800177e:	4618      	mov	r0, r3
 8001780:	3734      	adds	r7, #52	; 0x34
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	9999999a 	.word	0x9999999a
 800178c:	3fb99999 	.word	0x3fb99999
 8001790:	42c80000 	.word	0x42c80000
 8001794:	41200000 	.word	0x41200000

08001798 <isByteDigit>:
//////////////////////////////////////////////////////////////////////////////////
char isByteDigit(char byte){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	if((byte >=48) && (byte<=57)){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b2f      	cmp	r3, #47	; 0x2f
 80017a6:	d904      	bls.n	80017b2 <isByteDigit+0x1a>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b39      	cmp	r3, #57	; 0x39
 80017ac:	d801      	bhi.n	80017b2 <isByteDigit+0x1a>
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <isByteDigit+0x1c>
	}
	return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <findInString>:
////////////////////////////////////////////////////////////////////////////////////
int findInString(char *string, char symbol, char len){
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	for(int n=0; n!=len; n++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e00b      	b.n	80017ec <findInString+0x2e>
		if(string[n] == symbol){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <findInString+0x28>
			return n;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e008      	b.n	80017f8 <findInString+0x3a>
	for(int n=0; n!=len; n++){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1ef      	bne.n	80017d4 <findInString+0x16>
		}
	}
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <initDrives>:


#include "drive.h"


void initDrives(){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	positionX=0;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <initDrives+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
	positionY=0;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <initDrives+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	positionZ=0;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <initDrives+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	stepsCounterX=0;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <initDrives+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	stepsCounterY=0;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <initDrives+0x60>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	stepsCounterZ=0;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <initDrives+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	timerDivider=0;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <initDrives+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

	zeroPointX=0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <initDrives+0x6c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
	zeroPointY=0;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <initDrives+0x70>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

	lastF=0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <initDrives+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

	relCoordinates=0;//по умолчанию координаты абсолютные
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <initDrives+0x78>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200005a8 	.word	0x200005a8
 8001858:	200005c8 	.word	0x200005c8
 800185c:	200005a4 	.word	0x200005a4
 8001860:	200005a0 	.word	0x200005a0
 8001864:	200005c0 	.word	0x200005c0
 8001868:	200005b4 	.word	0x200005b4
 800186c:	200005b8 	.word	0x200005b8
 8001870:	200005b0 	.word	0x200005b0
 8001874:	200005f4 	.word	0x200005f4
 8001878:	200005bc 	.word	0x200005bc
 800187c:	200005cc 	.word	0x200005cc

08001880 <executeGComand>:
//////////////////////////////////////////////////////////////////////////////////////
void executeGComand(struct driversComand comand){
 8001880:	b084      	sub	sp, #16
 8001882:	b5b0      	push	{r4, r5, r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	f107 0420 	add.w	r4, r7, #32
 800188c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	currentComand = comand;
 8001890:	4b8b      	ldr	r3, [pc, #556]	; (8001ac0 <executeGComand+0x240>)
 8001892:	461c      	mov	r4, r3
 8001894:	f107 0520 	add.w	r5, r7, #32
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	6023      	str	r3, [r4, #0]

	if(currentComand.valid & (1<<3)){//если подача валидна,
 80018a4:	4b86      	ldr	r3, [pc, #536]	; (8001ac0 <executeGComand+0x240>)
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <executeGComand+0x3a>
		lastF = currentComand.F;//то запоминаем её. В следующей команде подачи может не быть
 80018b2:	4b83      	ldr	r3, [pc, #524]	; (8001ac0 <executeGComand+0x240>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4a83      	ldr	r2, [pc, #524]	; (8001ac4 <executeGComand+0x244>)
 80018b8:	6013      	str	r3, [r2, #0]
	}

	//заполняем невалидные параметры текущими значениями
	if(!(currentComand.valid & (1<<0))){
 80018ba:	4b81      	ldr	r3, [pc, #516]	; (8001ac0 <executeGComand+0x240>)
 80018bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d103      	bne.n	80018d0 <executeGComand+0x50>
		currentComand.posX = positionX;
 80018c8:	4b7f      	ldr	r3, [pc, #508]	; (8001ac8 <executeGComand+0x248>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a7c      	ldr	r2, [pc, #496]	; (8001ac0 <executeGComand+0x240>)
 80018ce:	6053      	str	r3, [r2, #4]
	}
	if(!(currentComand.valid & (1<<1))){
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <executeGComand+0x240>)
 80018d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d103      	bne.n	80018e6 <executeGComand+0x66>
		currentComand.posY = positionY;
 80018de:	4b7b      	ldr	r3, [pc, #492]	; (8001acc <executeGComand+0x24c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <executeGComand+0x240>)
 80018e4:	6093      	str	r3, [r2, #8]
	}
	if(!(currentComand.valid & (1<<2))){
 80018e6:	4b76      	ldr	r3, [pc, #472]	; (8001ac0 <executeGComand+0x240>)
 80018e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ec:	f003 0304 	and.w	r3, r3, #4
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d103      	bne.n	80018fc <executeGComand+0x7c>
		currentComand.posZ = positionZ;
 80018f4:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <executeGComand+0x250>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a71      	ldr	r2, [pc, #452]	; (8001ac0 <executeGComand+0x240>)
 80018fa:	60d3      	str	r3, [r2, #12]
	}
	if(currentComand.valid & (1<<5)){//если I валидна, то преобразуем ее в абсолютные координаты
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <executeGComand+0x240>)
 80018fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b00      	cmp	r3, #0
 8001908:	d007      	beq.n	800191a <executeGComand+0x9a>
		currentComand.I = positionX + currentComand.I;
 800190a:	4b6d      	ldr	r3, [pc, #436]	; (8001ac0 <executeGComand+0x240>)
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	4b6e      	ldr	r3, [pc, #440]	; (8001ac8 <executeGComand+0x248>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a6a      	ldr	r2, [pc, #424]	; (8001ac0 <executeGComand+0x240>)
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	e003      	b.n	8001922 <executeGComand+0xa2>
	}
	else{
		currentComand.I = positionX;//иначе просто присваиваем позицию Х
 800191a:	4b6b      	ldr	r3, [pc, #428]	; (8001ac8 <executeGComand+0x248>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a68      	ldr	r2, [pc, #416]	; (8001ac0 <executeGComand+0x240>)
 8001920:	6193      	str	r3, [r2, #24]
	}
	if(currentComand.valid & (1<<6)){//если J валидна, то преобразуем ее в абсолютные координаты
 8001922:	4b67      	ldr	r3, [pc, #412]	; (8001ac0 <executeGComand+0x240>)
 8001924:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192c:	2b00      	cmp	r3, #0
 800192e:	d007      	beq.n	8001940 <executeGComand+0xc0>
		currentComand.J = positionY + currentComand.J;
 8001930:	4b63      	ldr	r3, [pc, #396]	; (8001ac0 <executeGComand+0x240>)
 8001932:	69da      	ldr	r2, [r3, #28]
 8001934:	4b65      	ldr	r3, [pc, #404]	; (8001acc <executeGComand+0x24c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4413      	add	r3, r2
 800193a:	4a61      	ldr	r2, [pc, #388]	; (8001ac0 <executeGComand+0x240>)
 800193c:	61d3      	str	r3, [r2, #28]
 800193e:	e003      	b.n	8001948 <executeGComand+0xc8>
	}
	else{
		currentComand.J = positionY;//иначе просто присваиваем позицию Y
 8001940:	4b62      	ldr	r3, [pc, #392]	; (8001acc <executeGComand+0x24c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <executeGComand+0x240>)
 8001946:	61d3      	str	r3, [r2, #28]
	}

	//одно прерывание таймера = 0.000 025 С
	float F=(float)lastF/100;
 8001948:	4b5e      	ldr	r3, [pc, #376]	; (8001ac4 <executeGComand+0x244>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f99d 	bl	8000c8c <__aeabi_i2f>
 8001952:	4603      	mov	r3, r0
 8001954:	495f      	ldr	r1, [pc, #380]	; (8001ad4 <executeGComand+0x254>)
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff faa0 	bl	8000e9c <__aeabi_fdiv>
 800195c:	4603      	mov	r3, r0
 800195e:	60fb      	str	r3, [r7, #12]
	float periodPerStep=1/(1/F/200);
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001966:	f7ff fa99 	bl	8000e9c <__aeabi_fdiv>
 800196a:	4603      	mov	r3, r0
 800196c:	495a      	ldr	r1, [pc, #360]	; (8001ad8 <executeGComand+0x258>)
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fa94 	bl	8000e9c <__aeabi_fdiv>
 8001974:	4603      	mov	r3, r0
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800197c:	f7ff fa8e 	bl	8000e9c <__aeabi_fdiv>
 8001980:	4603      	mov	r3, r0
 8001982:	60bb      	str	r3, [r7, #8]
	timerDivider=40000/periodPerStep;
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	4855      	ldr	r0, [pc, #340]	; (8001adc <executeGComand+0x25c>)
 8001988:	f7ff fa88 	bl	8000e9c <__aeabi_fdiv>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fbbc 	bl	800110c <__aeabi_f2uiz>
 8001994:	4602      	mov	r2, r0
 8001996:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <executeGComand+0x260>)
 8001998:	601a      	str	r2, [r3, #0]

	switch(currentComand.GCode){
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <executeGComand+0x240>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b03      	cmp	r3, #3
 80019a0:	f000 80df 	beq.w	8001b62 <executeGComand+0x2e2>
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	dc07      	bgt.n	80019b8 <executeGComand+0x138>
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d041      	beq.n	8001a30 <executeGComand+0x1b0>
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	f300 80a7 	bgt.w	8001b00 <executeGComand+0x280>
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00a      	beq.n	80019cc <executeGComand+0x14c>
			relCoordinates = 1;
			comandExecuted();
			break;
		}
	}
}
 80019b6:	e11e      	b.n	8001bf6 <executeGComand+0x376>
	switch(currentComand.GCode){
 80019b8:	2b5b      	cmp	r3, #91	; 0x5b
 80019ba:	f000 8115 	beq.w	8001be8 <executeGComand+0x368>
 80019be:	2b5c      	cmp	r3, #92	; 0x5c
 80019c0:	f000 8100 	beq.w	8001bc4 <executeGComand+0x344>
 80019c4:	2b5a      	cmp	r3, #90	; 0x5a
 80019c6:	f000 8109 	beq.w	8001bdc <executeGComand+0x35c>
}
 80019ca:	e114      	b.n	8001bf6 <executeGComand+0x376>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 80019cc:	4b45      	ldr	r3, [pc, #276]	; (8001ae4 <executeGComand+0x264>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <executeGComand+0x17e>
				currentComand.posX = currentComand.posX + positionX;
 80019d4:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <executeGComand+0x240>)
 80019d6:	685a      	ldr	r2, [r3, #4]
 80019d8:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <executeGComand+0x248>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4413      	add	r3, r2
 80019de:	4a38      	ldr	r2, [pc, #224]	; (8001ac0 <executeGComand+0x240>)
 80019e0:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 80019e2:	4b37      	ldr	r3, [pc, #220]	; (8001ac0 <executeGComand+0x240>)
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	4b39      	ldr	r3, [pc, #228]	; (8001acc <executeGComand+0x24c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a34      	ldr	r2, [pc, #208]	; (8001ac0 <executeGComand+0x240>)
 80019ee:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 80019f0:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <executeGComand+0x240>)
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <executeGComand+0x250>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4413      	add	r3, r2
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <executeGComand+0x240>)
 80019fc:	60d3      	str	r3, [r2, #12]
			stepsCounterX = currentComand.posX - positionX;
 80019fe:	4b30      	ldr	r3, [pc, #192]	; (8001ac0 <executeGComand+0x240>)
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	4b31      	ldr	r3, [pc, #196]	; (8001ac8 <executeGComand+0x248>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	4a37      	ldr	r2, [pc, #220]	; (8001ae8 <executeGComand+0x268>)
 8001a0a:	6013      	str	r3, [r2, #0]
			stepsCounterY = currentComand.posY - positionY;
 8001a0c:	4b2c      	ldr	r3, [pc, #176]	; (8001ac0 <executeGComand+0x240>)
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <executeGComand+0x24c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a35      	ldr	r2, [pc, #212]	; (8001aec <executeGComand+0x26c>)
 8001a18:	6013      	str	r3, [r2, #0]
			stepsCounterZ = currentComand.posZ - positionZ;
 8001a1a:	4b29      	ldr	r3, [pc, #164]	; (8001ac0 <executeGComand+0x240>)
 8001a1c:	68da      	ldr	r2, [r3, #12]
 8001a1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ad0 <executeGComand+0x250>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	4a32      	ldr	r2, [pc, #200]	; (8001af0 <executeGComand+0x270>)
 8001a26:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001a28:	4832      	ldr	r0, [pc, #200]	; (8001af4 <executeGComand+0x274>)
 8001a2a:	f003 fb4d 	bl	80050c8 <HAL_TIM_Base_Start_IT>
			break;
 8001a2e:	e0e2      	b.n	8001bf6 <executeGComand+0x376>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <executeGComand+0x264>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d014      	beq.n	8001a62 <executeGComand+0x1e2>
				currentComand.posX = currentComand.posX + positionX;
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <executeGComand+0x240>)
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	4b22      	ldr	r3, [pc, #136]	; (8001ac8 <executeGComand+0x248>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4413      	add	r3, r2
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <executeGComand+0x240>)
 8001a44:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	; (8001ac0 <executeGComand+0x240>)
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	4b20      	ldr	r3, [pc, #128]	; (8001acc <executeGComand+0x24c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <executeGComand+0x240>)
 8001a52:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <executeGComand+0x240>)
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <executeGComand+0x250>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	4a18      	ldr	r2, [pc, #96]	; (8001ac0 <executeGComand+0x240>)
 8001a60:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<2)){//если Z валидна,
 8001a62:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <executeGComand+0x240>)
 8001a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00d      	beq.n	8001a8c <executeGComand+0x20c>
				int difZ=positionZ-currentComand.posZ;//то задаем для нее количество шагов
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <executeGComand+0x250>)
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <executeGComand+0x240>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	607b      	str	r3, [r7, #4]
				stepsCounterZ=difZ*10;
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <executeGComand+0x270>)
 8001a8a:	601a      	str	r2, [r3, #0]
			if((currentComand.valid & (1<<0)) || (currentComand.valid & (1<<1))){//если х или у валидны
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <executeGComand+0x240>)
 8001a8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d107      	bne.n	8001aaa <executeGComand+0x22a>
 8001a9a:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <executeGComand+0x240>)
 8001a9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f000 80a5 	beq.w	8001bf4 <executeGComand+0x374>
					zeroPointX = positionX;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <executeGComand+0x248>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <executeGComand+0x278>)
 8001ab0:	6013      	str	r3, [r2, #0]
					zeroPointY = positionY;
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <executeGComand+0x24c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a11      	ldr	r2, [pc, #68]	; (8001afc <executeGComand+0x27c>)
 8001ab8:	6013      	str	r3, [r2, #0]
					calcInterpolation();//считаем интерполяцию
 8001aba:	f000 f8b1 	bl	8001c20 <calcInterpolation>
			break;
 8001abe:	e099      	b.n	8001bf4 <executeGComand+0x374>
 8001ac0:	200005d0 	.word	0x200005d0
 8001ac4:	200005bc 	.word	0x200005bc
 8001ac8:	200005a8 	.word	0x200005a8
 8001acc:	200005c8 	.word	0x200005c8
 8001ad0:	200005a4 	.word	0x200005a4
 8001ad4:	42c80000 	.word	0x42c80000
 8001ad8:	43480000 	.word	0x43480000
 8001adc:	471c4000 	.word	0x471c4000
 8001ae0:	200005b8 	.word	0x200005b8
 8001ae4:	200005cc 	.word	0x200005cc
 8001ae8:	200005a0 	.word	0x200005a0
 8001aec:	200005c0 	.word	0x200005c0
 8001af0:	200005b4 	.word	0x200005b4
 8001af4:	200006fc 	.word	0x200006fc
 8001af8:	200005b0 	.word	0x200005b0
 8001afc:	200005f4 	.word	0x200005f4
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b00:	4b40      	ldr	r3, [pc, #256]	; (8001c04 <executeGComand+0x384>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d014      	beq.n	8001b32 <executeGComand+0x2b2>
				currentComand.posX = currentComand.posX + positionX;
 8001b08:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <executeGComand+0x388>)
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	; (8001c0c <executeGComand+0x38c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <executeGComand+0x388>)
 8001b14:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b16:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <executeGComand+0x388>)
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <executeGComand+0x390>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a39      	ldr	r2, [pc, #228]	; (8001c08 <executeGComand+0x388>)
 8001b22:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <executeGComand+0x388>)
 8001b26:	68da      	ldr	r2, [r3, #12]
 8001b28:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <executeGComand+0x394>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <executeGComand+0x388>)
 8001b30:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001b32:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <executeGComand+0x388>)
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	f003 0310 	and.w	r3, r3, #16
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <executeGComand+0x2dc>
				vPosX = positionX - currentComand.I;
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <executeGComand+0x38c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <executeGComand+0x388>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	4a33      	ldr	r2, [pc, #204]	; (8001c18 <executeGComand+0x398>)
 8001b4c:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001b4e:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <executeGComand+0x390>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	4b2d      	ldr	r3, [pc, #180]	; (8001c08 <executeGComand+0x388>)
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	4a30      	ldr	r2, [pc, #192]	; (8001c1c <executeGComand+0x39c>)
 8001b5a:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001b5c:	f000 f860 	bl	8001c20 <calcInterpolation>
			break;
 8001b60:	e049      	b.n	8001bf6 <executeGComand+0x376>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <executeGComand+0x384>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d014      	beq.n	8001b94 <executeGComand+0x314>
				currentComand.posX = currentComand.posX + positionX;
 8001b6a:	4b27      	ldr	r3, [pc, #156]	; (8001c08 <executeGComand+0x388>)
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	4b27      	ldr	r3, [pc, #156]	; (8001c0c <executeGComand+0x38c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4413      	add	r3, r2
 8001b74:	4a24      	ldr	r2, [pc, #144]	; (8001c08 <executeGComand+0x388>)
 8001b76:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <executeGComand+0x388>)
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <executeGComand+0x390>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4413      	add	r3, r2
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <executeGComand+0x388>)
 8001b84:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <executeGComand+0x388>)
 8001b88:	68da      	ldr	r2, [r3, #12]
 8001b8a:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <executeGComand+0x394>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4413      	add	r3, r2
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <executeGComand+0x388>)
 8001b92:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001b94:	4b1c      	ldr	r3, [pc, #112]	; (8001c08 <executeGComand+0x388>)
 8001b96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <executeGComand+0x33e>
				vPosX = positionX - currentComand.I;
 8001ba2:	4b1a      	ldr	r3, [pc, #104]	; (8001c0c <executeGComand+0x38c>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <executeGComand+0x388>)
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	4a1a      	ldr	r2, [pc, #104]	; (8001c18 <executeGComand+0x398>)
 8001bae:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001bb0:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <executeGComand+0x390>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <executeGComand+0x388>)
 8001bb6:	69db      	ldr	r3, [r3, #28]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	4a18      	ldr	r2, [pc, #96]	; (8001c1c <executeGComand+0x39c>)
 8001bbc:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001bbe:	f000 f82f 	bl	8001c20 <calcInterpolation>
			break;
 8001bc2:	e018      	b.n	8001bf6 <executeGComand+0x376>
			positionX=0;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <executeGComand+0x38c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
			positionY=0;
 8001bca:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <executeGComand+0x390>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
			positionZ=0;
 8001bd0:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <executeGComand+0x394>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	601a      	str	r2, [r3, #0]
			comandExecuted();
 8001bd6:	f000 fb31 	bl	800223c <comandExecuted>
			break;
 8001bda:	e00c      	b.n	8001bf6 <executeGComand+0x376>
			relCoordinates = 0;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <executeGComand+0x384>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001be2:	f000 fb2b 	bl	800223c <comandExecuted>
			break;
 8001be6:	e006      	b.n	8001bf6 <executeGComand+0x376>
			relCoordinates = 1;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <executeGComand+0x384>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001bee:	f000 fb25 	bl	800223c <comandExecuted>
			break;
 8001bf2:	e000      	b.n	8001bf6 <executeGComand+0x376>
			break;
 8001bf4:	bf00      	nop
}
 8001bf6:	bf00      	nop
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c00:	b004      	add	sp, #16
 8001c02:	4770      	bx	lr
 8001c04:	200005cc 	.word	0x200005cc
 8001c08:	200005d0 	.word	0x200005d0
 8001c0c:	200005a8 	.word	0x200005a8
 8001c10:	200005c8 	.word	0x200005c8
 8001c14:	200005a4 	.word	0x200005a4
 8001c18:	200005ac 	.word	0x200005ac
 8001c1c:	200005c4 	.word	0x200005c4

08001c20 <calcInterpolation>:
////////////////////////////////////////////////////////////////////////////////////////
void calcInterpolation(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0

	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001c24:	4b16      	ldr	r3, [pc, #88]	; (8001c80 <calcInterpolation+0x60>)
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <calcInterpolation+0x64>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d108      	bne.n	8001c42 <calcInterpolation+0x22>
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <calcInterpolation+0x60>)
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <calcInterpolation+0x68>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d102      	bne.n	8001c42 <calcInterpolation+0x22>
		comandExecuted();
 8001c3c:	f000 fafe 	bl	800223c <comandExecuted>
		return;
 8001c40:	e01d      	b.n	8001c7e <calcInterpolation+0x5e>
	}

	switch(currentComand.GCode){
 8001c42:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <calcInterpolation+0x60>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d818      	bhi.n	8001c7c <calcInterpolation+0x5c>
 8001c4a:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <calcInterpolation+0x30>)
 8001c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c50:	08001c73 	.word	0x08001c73
 8001c54:	08001c61 	.word	0x08001c61
 8001c58:	08001c67 	.word	0x08001c67
 8001c5c:	08001c6d 	.word	0x08001c6d
		case(0):{
			break;
		}
		case(1):{//линейное перемещение
			lineInterpolacion();
 8001c60:	f000 f86c 	bl	8001d3c <lineInterpolacion>
			break;
 8001c64:	e006      	b.n	8001c74 <calcInterpolation+0x54>
		}
		case(2):{//круговая интерполяция по часовой стрелке
			cwCicleInterpolation();
 8001c66:	f000 f925 	bl	8001eb4 <cwCicleInterpolation>
			break;
 8001c6a:	e003      	b.n	8001c74 <calcInterpolation+0x54>
		}
		case(3):{//круговая интерполяция против часосвой стрелки
			ccwCicleInterpolation();
 8001c6c:	f000 fa04 	bl	8002078 <ccwCicleInterpolation>
			break;
 8001c70:	e000      	b.n	8001c74 <calcInterpolation+0x54>
			break;
 8001c72:	bf00      	nop
		}
		default:{
			return;//todo потом сделать обработку ошибки
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <calcInterpolation+0x6c>)
 8001c76:	f003 fa27 	bl	80050c8 <HAL_TIM_Base_Start_IT>
 8001c7a:	e000      	b.n	8001c7e <calcInterpolation+0x5e>
			return;//todo потом сделать обработку ошибки
 8001c7c:	bf00      	nop
}
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	200005d0 	.word	0x200005d0
 8001c84:	200005a8 	.word	0x200005a8
 8001c88:	200005c8 	.word	0x200005c8
 8001c8c:	200006fc 	.word	0x200006fc

08001c90 <executeMComand>:
////////////////////////////////////////////////////////////////////////////////////
void executeMComand(struct MComand comand){
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	7138      	strb	r0, [r7, #4]
	switch(comand.MCode){
 8001c98:	793b      	ldrb	r3, [r7, #4]
 8001c9a:	2b12      	cmp	r3, #18
 8001c9c:	d000      	beq.n	8001ca0 <executeMComand+0x10>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
			break;
		}
	}
}
 8001c9e:	e044      	b.n	8001d2a <executeMComand+0x9a>
			HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca6:	4823      	ldr	r0, [pc, #140]	; (8001d34 <executeMComand+0xa4>)
 8001ca8:	f001 fdd0 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cb2:	4820      	ldr	r0, [pc, #128]	; (8001d34 <executeMComand+0xa4>)
 8001cb4:	f001 fdca 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cbe:	481d      	ldr	r0, [pc, #116]	; (8001d34 <executeMComand+0xa4>)
 8001cc0:	f001 fdc4 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cca:	481a      	ldr	r0, [pc, #104]	; (8001d34 <executeMComand+0xa4>)
 8001ccc:	f001 fdbe 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2140      	movs	r1, #64	; 0x40
 8001cd4:	4817      	ldr	r0, [pc, #92]	; (8001d34 <executeMComand+0xa4>)
 8001cd6:	f001 fdb9 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ce0:	4815      	ldr	r0, [pc, #84]	; (8001d38 <executeMComand+0xa8>)
 8001ce2:	f001 fdb3 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2110      	movs	r1, #16
 8001cea:	4812      	ldr	r0, [pc, #72]	; (8001d34 <executeMComand+0xa4>)
 8001cec:	f001 fdae 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	2108      	movs	r1, #8
 8001cf4:	480f      	ldr	r0, [pc, #60]	; (8001d34 <executeMComand+0xa4>)
 8001cf6:	f001 fda9 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <executeMComand+0xa8>)
 8001d02:	f001 fda3 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d0c:	480a      	ldr	r0, [pc, #40]	; (8001d38 <executeMComand+0xa8>)
 8001d0e:	f001 fd9d 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2180      	movs	r1, #128	; 0x80
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <executeMComand+0xa4>)
 8001d18:	f001 fd98 	bl	800384c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <executeMComand+0xa8>)
 8001d24:	f001 fd92 	bl	800384c <HAL_GPIO_WritePin>
			break;
 8001d28:	bf00      	nop
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40010c00 	.word	0x40010c00
 8001d38:	40010800 	.word	0x40010800

08001d3c <lineInterpolacion>:
////////////////////////////////////////////////////////////////////////////////////
void lineInterpolacion(){
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
	int offsetX = zeroPointX - positionX;
 8001d42:	4b55      	ldr	r3, [pc, #340]	; (8001e98 <lineInterpolacion+0x15c>)
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	4b55      	ldr	r3, [pc, #340]	; (8001e9c <lineInterpolacion+0x160>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001d4e:	4b54      	ldr	r3, [pc, #336]	; (8001ea0 <lineInterpolacion+0x164>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <lineInterpolacion+0x168>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	613b      	str	r3, [r7, #16]
	int vectorX = currentComand.posX - positionX;
 8001d5a:	4b53      	ldr	r3, [pc, #332]	; (8001ea8 <lineInterpolacion+0x16c>)
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <lineInterpolacion+0x160>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	60fb      	str	r3, [r7, #12]
	int vectorY = currentComand.posY - positionY;
 8001d66:	4b50      	ldr	r3, [pc, #320]	; (8001ea8 <lineInterpolacion+0x16c>)
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	4b4e      	ldr	r3, [pc, #312]	; (8001ea4 <lineInterpolacion+0x168>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	60bb      	str	r3, [r7, #8]

	int F = (abs(offsetY) * abs(vectorX) - (abs(offsetX) * abs(vectorY)));//оценочная функция
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bfb8      	it	lt
 8001d78:	425b      	neglt	r3, r3
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	2a00      	cmp	r2, #0
 8001d7e:	bfb8      	it	lt
 8001d80:	4252      	neglt	r2, r2
 8001d82:	fb02 f203 	mul.w	r2, r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bfb8      	it	lt
 8001d8c:	425b      	neglt	r3, r3
 8001d8e:	68b9      	ldr	r1, [r7, #8]
 8001d90:	2900      	cmp	r1, #0
 8001d92:	bfb8      	it	lt
 8001d94:	4249      	neglt	r1, r1
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	607b      	str	r3, [r7, #4]
	if(F == 0){
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d124      	bne.n	8001dee <lineInterpolacion+0xb2>
		if(vectorX > 0){
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	dd03      	ble.n	8001db2 <lineInterpolacion+0x76>
			stepsCounterX = 1;
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <lineInterpolacion+0x170>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	e00a      	b.n	8001dc8 <lineInterpolacion+0x8c>
		}
		else if(vectorX < 0){
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	da04      	bge.n	8001dc2 <lineInterpolacion+0x86>
			stepsCounterX = -1;
 8001db8:	4b3c      	ldr	r3, [pc, #240]	; (8001eac <lineInterpolacion+0x170>)
 8001dba:	f04f 32ff 	mov.w	r2, #4294967295
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	e002      	b.n	8001dc8 <lineInterpolacion+0x8c>
		}
		else{
			stepsCounterX = 0;
 8001dc2:	4b3a      	ldr	r3, [pc, #232]	; (8001eac <lineInterpolacion+0x170>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
		}
		if(vectorY > 0){
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	dd03      	ble.n	8001dd6 <lineInterpolacion+0x9a>
			stepsCounterY = 1;
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <lineInterpolacion+0x174>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
			else{
				stepsCounterX = 0;
			}
		}
	}
}
 8001dd4:	e05a      	b.n	8001e8c <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	da04      	bge.n	8001de6 <lineInterpolacion+0xaa>
			stepsCounterY = -1;
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <lineInterpolacion+0x174>)
 8001dde:	f04f 32ff 	mov.w	r2, #4294967295
 8001de2:	601a      	str	r2, [r3, #0]
}
 8001de4:	e052      	b.n	8001e8c <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001de6:	4b32      	ldr	r3, [pc, #200]	; (8001eb0 <lineInterpolacion+0x174>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
}
 8001dec:	e04e      	b.n	8001e8c <lineInterpolacion+0x150>
	else if(F > 0){
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	dd24      	ble.n	8001e3e <lineInterpolacion+0x102>
		if(vectorX > 0){
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	dd03      	ble.n	8001e02 <lineInterpolacion+0xc6>
			stepsCounterX = 1;
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <lineInterpolacion+0x170>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	e044      	b.n	8001e8c <lineInterpolacion+0x150>
		else if(vectorX < 0){
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	da04      	bge.n	8001e12 <lineInterpolacion+0xd6>
			stepsCounterX = -1;
 8001e08:	4b28      	ldr	r3, [pc, #160]	; (8001eac <lineInterpolacion+0x170>)
 8001e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e0e:	601a      	str	r2, [r3, #0]
}
 8001e10:	e03c      	b.n	8001e8c <lineInterpolacion+0x150>
			stepsCounterX = 0;
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <lineInterpolacion+0x170>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
			if(vectorY > 0){
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	dd03      	ble.n	8001e26 <lineInterpolacion+0xea>
				stepsCounterY = 1;
 8001e1e:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]
}
 8001e24:	e032      	b.n	8001e8c <lineInterpolacion+0x150>
			else if(vectorY < 0){
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da04      	bge.n	8001e36 <lineInterpolacion+0xfa>
				stepsCounterY = -1;
 8001e2c:	4b20      	ldr	r3, [pc, #128]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e32:	601a      	str	r2, [r3, #0]
}
 8001e34:	e02a      	b.n	8001e8c <lineInterpolacion+0x150>
				stepsCounterY = 0;
 8001e36:	4b1e      	ldr	r3, [pc, #120]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
}
 8001e3c:	e026      	b.n	8001e8c <lineInterpolacion+0x150>
	else if(F < 0){
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	da23      	bge.n	8001e8c <lineInterpolacion+0x150>
		if(vectorY > 0){
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dd03      	ble.n	8001e52 <lineInterpolacion+0x116>
			stepsCounterY = 1;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	e01c      	b.n	8001e8c <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da04      	bge.n	8001e62 <lineInterpolacion+0x126>
			stepsCounterY = -1;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e5e:	601a      	str	r2, [r3, #0]
}
 8001e60:	e014      	b.n	8001e8c <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <lineInterpolacion+0x174>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
			if(vectorX > 0){
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dd03      	ble.n	8001e76 <lineInterpolacion+0x13a>
				stepsCounterX = 1;
 8001e6e:	4b0f      	ldr	r3, [pc, #60]	; (8001eac <lineInterpolacion+0x170>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	e00a      	b.n	8001e8c <lineInterpolacion+0x150>
			else if(vectorX < 0){
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da04      	bge.n	8001e86 <lineInterpolacion+0x14a>
				stepsCounterX = -1;
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <lineInterpolacion+0x170>)
 8001e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e82:	601a      	str	r2, [r3, #0]
}
 8001e84:	e002      	b.n	8001e8c <lineInterpolacion+0x150>
				stepsCounterX = 0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <lineInterpolacion+0x170>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200005b0 	.word	0x200005b0
 8001e9c:	200005a8 	.word	0x200005a8
 8001ea0:	200005f4 	.word	0x200005f4
 8001ea4:	200005c8 	.word	0x200005c8
 8001ea8:	200005d0 	.word	0x200005d0
 8001eac:	200005a0 	.word	0x200005a0
 8001eb0:	200005c0 	.word	0x200005c0

08001eb4 <cwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void cwCicleInterpolation(){
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001eba:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001ec0:	6812      	ldr	r2, [r2, #0]
 8001ec2:	fb02 f203 	mul.w	r2, r2, r3
 8001ec6:	4b68      	ldr	r3, [pc, #416]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4967      	ldr	r1, [pc, #412]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001ecc:	6809      	ldr	r1, [r1, #0]
 8001ece:	fb01 f303 	mul.w	r3, r1, r3
 8001ed2:	441a      	add	r2, r3
 8001ed4:	4b65      	ldr	r3, [pc, #404]	; (800206c <cwCicleInterpolation+0x1b8>)
 8001ed6:	695b      	ldr	r3, [r3, #20]
 8001ed8:	4964      	ldr	r1, [pc, #400]	; (800206c <cwCicleInterpolation+0x1b8>)
 8001eda:	6949      	ldr	r1, [r1, #20]
 8001edc:	fb01 f303 	mul.w	r3, r1, r3
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	607b      	str	r3, [r7, #4]
																		//контролируется на этапе парсинга
	if(F >= 0){//если на окружности или за ней
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db53      	blt.n	8001f92 <cwCicleInterpolation+0xde>

		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001eea:	4b5e      	ldr	r3, [pc, #376]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	dd08      	ble.n	8001f04 <cwCicleInterpolation+0x50>
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	dd04      	ble.n	8001f04 <cwCicleInterpolation+0x50>
			stepsCounterY = -1;
 8001efa:	4b5d      	ldr	r3, [pc, #372]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001efc:	f04f 32ff 	mov.w	r2, #4294967295
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	e09c      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001f04:	4b57      	ldr	r3, [pc, #348]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dd08      	ble.n	8001f1e <cwCicleInterpolation+0x6a>
 8001f0c:	4b56      	ldr	r3, [pc, #344]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	da04      	bge.n	8001f1e <cwCicleInterpolation+0x6a>
			stepsCounterX = -1;
 8001f14:	4b57      	ldr	r3, [pc, #348]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001f16:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e08f      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001f1e:	4b51      	ldr	r3, [pc, #324]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	da07      	bge.n	8001f36 <cwCicleInterpolation+0x82>
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	da03      	bge.n	8001f36 <cwCicleInterpolation+0x82>
			stepsCounterY = 1;
 8001f2e:	4b50      	ldr	r3, [pc, #320]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	e083      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001f36:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	da07      	bge.n	8001f4e <cwCicleInterpolation+0x9a>
 8001f3e:	4b4a      	ldr	r3, [pc, #296]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dd03      	ble.n	8001f4e <cwCicleInterpolation+0x9a>
			stepsCounterX = 1;
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	e077      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	dd04      	ble.n	8001f60 <cwCicleInterpolation+0xac>
				stepsCounterY = -1;
 8001f56:	4b46      	ldr	r3, [pc, #280]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001f58:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e06e      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 8001f60:	4b41      	ldr	r3, [pc, #260]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	da03      	bge.n	8001f70 <cwCicleInterpolation+0xbc>
				stepsCounterY = 1;
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	e066      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 8001f70:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	dd04      	ble.n	8001f82 <cwCicleInterpolation+0xce>
				stepsCounterX = -1;
 8001f78:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	e05d      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8001f82:	4b38      	ldr	r3, [pc, #224]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da59      	bge.n	800203e <cwCicleInterpolation+0x18a>
				stepsCounterX = 1;
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	e055      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
		}
	}
	else if(F < 0){//если внутри окружности
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	da52      	bge.n	800203e <cwCicleInterpolation+0x18a>
		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dd07      	ble.n	8001fb0 <cwCicleInterpolation+0xfc>
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	dd03      	ble.n	8001fb0 <cwCicleInterpolation+0xfc>
			stepsCounterX = 1;
 8001fa8:	4b32      	ldr	r3, [pc, #200]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e046      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	dd08      	ble.n	8001fca <cwCicleInterpolation+0x116>
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da04      	bge.n	8001fca <cwCicleInterpolation+0x116>
			stepsCounterY = -1;
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	e039      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001fca:	4b26      	ldr	r3, [pc, #152]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	da08      	bge.n	8001fe4 <cwCicleInterpolation+0x130>
 8001fd2:	4b25      	ldr	r3, [pc, #148]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da04      	bge.n	8001fe4 <cwCicleInterpolation+0x130>
			stepsCounterX = -1;
 8001fda:	4b26      	ldr	r3, [pc, #152]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8001fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	e02c      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001fe4:	4b1f      	ldr	r3, [pc, #124]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da07      	bge.n	8001ffc <cwCicleInterpolation+0x148>
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	dd03      	ble.n	8001ffc <cwCicleInterpolation+0x148>
			stepsCounterY = 1;
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	e020      	b.n	800203e <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001ffc:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	dd03      	ble.n	800200c <cwCicleInterpolation+0x158>
				stepsCounterX = 1;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	e018      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <cwCicleInterpolation+0x1b4>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	da04      	bge.n	800201e <cwCicleInterpolation+0x16a>
				stepsCounterX = -1;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8002016:	f04f 32ff 	mov.w	r2, #4294967295
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e00f      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	dd04      	ble.n	8002030 <cwCicleInterpolation+0x17c>
				stepsCounterY = -1;
 8002026:	4b12      	ldr	r3, [pc, #72]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8002028:	f04f 32ff 	mov.w	r2, #4294967295
 800202c:	601a      	str	r2, [r3, #0]
 800202e:	e006      	b.n	800203e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8002030:	4b0c      	ldr	r3, [pc, #48]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da02      	bge.n	800203e <cwCicleInterpolation+0x18a>
				stepsCounterY = 1;
 8002038:	4b0d      	ldr	r3, [pc, #52]	; (8002070 <cwCicleInterpolation+0x1bc>)
 800203a:	2201      	movs	r2, #1
 800203c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	vPosX+=stepsCounterX;
 800203e:	4b09      	ldr	r3, [pc, #36]	; (8002064 <cwCicleInterpolation+0x1b0>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <cwCicleInterpolation+0x1c0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a06      	ldr	r2, [pc, #24]	; (8002064 <cwCicleInterpolation+0x1b0>)
 800204a:	6013      	str	r3, [r2, #0]
	vPosY+=stepsCounterY;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <cwCicleInterpolation+0x1b4>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <cwCicleInterpolation+0x1bc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4413      	add	r3, r2
 8002056:	4a04      	ldr	r2, [pc, #16]	; (8002068 <cwCicleInterpolation+0x1b4>)
 8002058:	6013      	str	r3, [r2, #0]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	200005ac 	.word	0x200005ac
 8002068:	200005c4 	.word	0x200005c4
 800206c:	200005d0 	.word	0x200005d0
 8002070:	200005c0 	.word	0x200005c0
 8002074:	200005a0 	.word	0x200005a0

08002078 <ccwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void ccwCicleInterpolation(){
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 800207e:	4b6a      	ldr	r3, [pc, #424]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a69      	ldr	r2, [pc, #420]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	fb02 f203 	mul.w	r2, r2, r3
 800208a:	4b68      	ldr	r3, [pc, #416]	; (800222c <ccwCicleInterpolation+0x1b4>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4967      	ldr	r1, [pc, #412]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002090:	6809      	ldr	r1, [r1, #0]
 8002092:	fb01 f303 	mul.w	r3, r1, r3
 8002096:	441a      	add	r2, r3
 8002098:	4b65      	ldr	r3, [pc, #404]	; (8002230 <ccwCicleInterpolation+0x1b8>)
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	4964      	ldr	r1, [pc, #400]	; (8002230 <ccwCicleInterpolation+0x1b8>)
 800209e:	6949      	ldr	r1, [r1, #20]
 80020a0:	fb01 f303 	mul.w	r3, r1, r3
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	607b      	str	r3, [r7, #4]
																			//контролируется на этапе парсинга
		if(F >= 0){//если на окружности или за ней
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	db53      	blt.n	8002156 <ccwCicleInterpolation+0xde>

			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 80020ae:	4b5e      	ldr	r3, [pc, #376]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	dd08      	ble.n	80020c8 <ccwCicleInterpolation+0x50>
 80020b6:	4b5d      	ldr	r3, [pc, #372]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	dd04      	ble.n	80020c8 <ccwCicleInterpolation+0x50>
				stepsCounterX = -1;
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 80020c0:	f04f 32ff 	mov.w	r2, #4294967295
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	e09c      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 80020c8:	4b57      	ldr	r3, [pc, #348]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	dd07      	ble.n	80020e0 <ccwCicleInterpolation+0x68>
 80020d0:	4b56      	ldr	r3, [pc, #344]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da03      	bge.n	80020e0 <ccwCicleInterpolation+0x68>
				stepsCounterY = 1;
 80020d8:	4b57      	ldr	r3, [pc, #348]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e090      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 80020e0:	4b51      	ldr	r3, [pc, #324]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	da07      	bge.n	80020f8 <ccwCicleInterpolation+0x80>
 80020e8:	4b50      	ldr	r3, [pc, #320]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	da03      	bge.n	80020f8 <ccwCicleInterpolation+0x80>
				stepsCounterX = 1;
 80020f0:	4b50      	ldr	r3, [pc, #320]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 80020f2:	2201      	movs	r2, #1
 80020f4:	601a      	str	r2, [r3, #0]
 80020f6:	e084      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80020f8:	4b4b      	ldr	r3, [pc, #300]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da08      	bge.n	8002112 <ccwCicleInterpolation+0x9a>
 8002100:	4b4a      	ldr	r3, [pc, #296]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2b00      	cmp	r3, #0
 8002106:	dd04      	ble.n	8002112 <ccwCicleInterpolation+0x9a>
				stepsCounterY = -1;
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 800210a:	f04f 32ff 	mov.w	r2, #4294967295
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e077      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else{
				if(vPosY > 0){
 8002112:	4b46      	ldr	r3, [pc, #280]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2b00      	cmp	r3, #0
 8002118:	dd04      	ble.n	8002124 <ccwCicleInterpolation+0xac>
					stepsCounterY = -1;
 800211a:	4b47      	ldr	r3, [pc, #284]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 800211c:	f04f 32ff 	mov.w	r2, #4294967295
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e06e      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosY < 0){
 8002124:	4b41      	ldr	r3, [pc, #260]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	da03      	bge.n	8002134 <ccwCicleInterpolation+0xbc>
					stepsCounterY = 1;
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e066      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX > 0){
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	dd04      	ble.n	8002146 <ccwCicleInterpolation+0xce>
					stepsCounterX = -1;
 800213c:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 800213e:	f04f 32ff 	mov.w	r2, #4294967295
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e05d      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX < 0){
 8002146:	4b38      	ldr	r3, [pc, #224]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	da59      	bge.n	8002202 <ccwCicleInterpolation+0x18a>
					stepsCounterX = 1;
 800214e:	4b39      	ldr	r3, [pc, #228]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 8002150:	2201      	movs	r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e055      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
			}
		}
		else if(F < 0){//если внутри окружности
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	da52      	bge.n	8002202 <ccwCicleInterpolation+0x18a>
			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800215c:	4b32      	ldr	r3, [pc, #200]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	dd07      	ble.n	8002174 <ccwCicleInterpolation+0xfc>
 8002164:	4b31      	ldr	r3, [pc, #196]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	dd03      	ble.n	8002174 <ccwCicleInterpolation+0xfc>
				stepsCounterY = 1;
 800216c:	4b32      	ldr	r3, [pc, #200]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 800216e:	2201      	movs	r2, #1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	e046      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	dd07      	ble.n	800218c <ccwCicleInterpolation+0x114>
 800217c:	4b2b      	ldr	r3, [pc, #172]	; (800222c <ccwCicleInterpolation+0x1b4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	da03      	bge.n	800218c <ccwCicleInterpolation+0x114>
				stepsCounterX = 1;
 8002184:	4b2b      	ldr	r3, [pc, #172]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	e03a      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	da08      	bge.n	80021a6 <ccwCicleInterpolation+0x12e>
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	da04      	bge.n	80021a6 <ccwCicleInterpolation+0x12e>
				stepsCounterY = -1;
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 800219e:	f04f 32ff 	mov.w	r2, #4294967295
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	e02d      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80021a6:	4b20      	ldr	r3, [pc, #128]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	da08      	bge.n	80021c0 <ccwCicleInterpolation+0x148>
 80021ae:	4b1f      	ldr	r3, [pc, #124]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	dd04      	ble.n	80021c0 <ccwCicleInterpolation+0x148>
				stepsCounterX = -1;
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 80021b8:	f04f 32ff 	mov.w	r2, #4294967295
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	e020      	b.n	8002202 <ccwCicleInterpolation+0x18a>
			}
			else{
				if(vPosY > 0){
 80021c0:	4b1a      	ldr	r3, [pc, #104]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	dd04      	ble.n	80021d2 <ccwCicleInterpolation+0x15a>
					stepsCounterX = -1;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 80021ca:	f04f 32ff 	mov.w	r2, #4294967295
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	e017      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosY < 0){
 80021d2:	4b16      	ldr	r3, [pc, #88]	; (800222c <ccwCicleInterpolation+0x1b4>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	da03      	bge.n	80021e2 <ccwCicleInterpolation+0x16a>
					stepsCounterX = 1;
 80021da:	4b16      	ldr	r3, [pc, #88]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e00f      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX > 0){
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	dd03      	ble.n	80021f2 <ccwCicleInterpolation+0x17a>
					stepsCounterY = 1;
 80021ea:	4b13      	ldr	r3, [pc, #76]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	e007      	b.n	8002202 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX < 0){
 80021f2:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da03      	bge.n	8002202 <ccwCicleInterpolation+0x18a>
					stepsCounterY = -1;
 80021fa:	4b0f      	ldr	r3, [pc, #60]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	601a      	str	r2, [r3, #0]
				}
			}
		}

		vPosX+=stepsCounterX;
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <ccwCicleInterpolation+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4413      	add	r3, r2
 800220c:	4a06      	ldr	r2, [pc, #24]	; (8002228 <ccwCicleInterpolation+0x1b0>)
 800220e:	6013      	str	r3, [r2, #0]
		vPosY+=stepsCounterY;
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <ccwCicleInterpolation+0x1b4>)
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	4b08      	ldr	r3, [pc, #32]	; (8002238 <ccwCicleInterpolation+0x1c0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a04      	ldr	r2, [pc, #16]	; (800222c <ccwCicleInterpolation+0x1b4>)
 800221c:	6013      	str	r3, [r2, #0]
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	200005ac 	.word	0x200005ac
 800222c:	200005c4 	.word	0x200005c4
 8002230:	200005d0 	.word	0x200005d0
 8002234:	200005a0 	.word	0x200005a0
 8002238:	200005c0 	.word	0x200005c0

0800223c <comandExecuted>:
/////////////////////////////////////////////////////////////////////////////////////
void comandExecuted(){
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	vPosX = 0;
 8002240:	4b07      	ldr	r3, [pc, #28]	; (8002260 <comandExecuted+0x24>)
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
	vPosY = 0;
 8002246:	4b07      	ldr	r3, [pc, #28]	; (8002264 <comandExecuted+0x28>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
	counter = 0;
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <comandExecuted+0x2c>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
	resetCurrentCommand();
 8002252:	f000 f80b 	bl	800226c <resetCurrentCommand>
	sendFree();
 8002256:	f000 ffe3 	bl	8003220 <sendFree>
}
 800225a:	bf00      	nop
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	200005ac 	.word	0x200005ac
 8002264:	200005c4 	.word	0x200005c4
 8002268:	2000069c 	.word	0x2000069c

0800226c <resetCurrentCommand>:
//////////////////////////////////////////////////////////////////////////////////////
void resetCurrentCommand(){
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	currentComand.F = 0;
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <resetCurrentCommand+0x44>)
 8002272:	2200      	movs	r2, #0
 8002274:	611a      	str	r2, [r3, #16]
	currentComand.GCode = 0;
 8002276:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <resetCurrentCommand+0x44>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
	currentComand.I = 0;
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <resetCurrentCommand+0x44>)
 800227e:	2200      	movs	r2, #0
 8002280:	619a      	str	r2, [r3, #24]
	currentComand.J = 0;
 8002282:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <resetCurrentCommand+0x44>)
 8002284:	2200      	movs	r2, #0
 8002286:	61da      	str	r2, [r3, #28]
	currentComand.R = 0;
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <resetCurrentCommand+0x44>)
 800228a:	2200      	movs	r2, #0
 800228c:	615a      	str	r2, [r3, #20]
	currentComand.posX = 0;
 800228e:	4b08      	ldr	r3, [pc, #32]	; (80022b0 <resetCurrentCommand+0x44>)
 8002290:	2200      	movs	r2, #0
 8002292:	605a      	str	r2, [r3, #4]
	currentComand.posY = 0;
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <resetCurrentCommand+0x44>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
	currentComand.posZ = 0;
 800229a:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <resetCurrentCommand+0x44>)
 800229c:	2200      	movs	r2, #0
 800229e:	60da      	str	r2, [r3, #12]
	currentComand.valid = 0;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <resetCurrentCommand+0x44>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2020 	strb.w	r2, [r3, #32]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	200005d0 	.word	0x200005d0

080022b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022b8:	f000 ffe2 	bl	8003280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022bc:	f000 f81c 	bl	80022f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022c0:	f000 f9a4 	bl	800260c <MX_GPIO_Init>
  MX_SPI1_Init();
 80022c4:	f000 f888 	bl	80023d8 <MX_SPI1_Init>
  MX_TIM2_Init();
 80022c8:	f000 f8bc 	bl	8002444 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022cc:	f000 f906 	bl	80024dc <MX_TIM3_Init>
  MX_TIM4_Init();
 80022d0:	f000 f950 	bl	8002574 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80022d4:	f005 ff2c 	bl	8008130 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80022d8:	f000 f86a 	bl	80023b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  initDrives();
 80022dc:	f7ff fa92 	bl	8001804 <initDrives>
  usbInit();
 80022e0:	f000 fe3c 	bl	8002f5c <usbInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(incomingMessageFlag==1){
 80022e4:	4b03      	ldr	r3, [pc, #12]	; (80022f4 <main+0x40>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d1fb      	bne.n	80022e4 <main+0x30>
		  readMessage();
 80022ec:	f000 fe4c 	bl	8002f88 <readMessage>
	  if(incomingMessageFlag==1){
 80022f0:	e7f8      	b.n	80022e4 <main+0x30>
 80022f2:	bf00      	nop
 80022f4:	20000375 	.word	0x20000375

080022f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b094      	sub	sp, #80	; 0x50
 80022fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002302:	2228      	movs	r2, #40	; 0x28
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f006 fc1d 	bl	8008b46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230c:	f107 0314 	add.w	r3, r7, #20
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002328:	2301      	movs	r3, #1
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800232c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002336:	2301      	movs	r3, #1
 8002338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800233a:	2302      	movs	r3, #2
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800233e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002342:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002344:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002348:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800234a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800234e:	4618      	mov	r0, r3
 8002350:	f002 f98e 	bl	8004670 <HAL_RCC_OscConfig>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800235a:	f000 f9e9 	bl	8002730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235e:	230f      	movs	r3, #15
 8002360:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002362:	2302      	movs	r3, #2
 8002364:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800236a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800236e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	2101      	movs	r1, #1
 800237a:	4618      	mov	r0, r3
 800237c:	f002 fbf8 	bl	8004b70 <HAL_RCC_ClockConfig>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002386:	f000 f9d3 	bl	8002730 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800238a:	2310      	movs	r3, #16
 800238c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800238e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002392:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	4618      	mov	r0, r3
 8002398:	f002 fd54 	bl	8004e44 <HAL_RCCEx_PeriphCLKConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80023a2:	f000 f9c5 	bl	8002730 <Error_Handler>
  }
}
 80023a6:	bf00      	nop
 80023a8:	3750      	adds	r7, #80	; 0x50
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
	...

080023b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <MX_CRC_Init+0x20>)
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <MX_CRC_Init+0x24>)
 80023b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <MX_CRC_Init+0x20>)
 80023bc:	f001 f8cf 	bl	800355e <HAL_CRC_Init>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80023c6:	f000 f9b3 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000638 	.word	0x20000638
 80023d4:	40023000 	.word	0x40023000

080023d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80023dc:	4b17      	ldr	r3, [pc, #92]	; (800243c <MX_SPI1_Init+0x64>)
 80023de:	4a18      	ldr	r2, [pc, #96]	; (8002440 <MX_SPI1_Init+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <MX_SPI1_Init+0x64>)
 80023e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <MX_SPI1_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <MX_SPI1_Init+0x64>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023f6:	4b11      	ldr	r3, [pc, #68]	; (800243c <MX_SPI1_Init+0x64>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023fc:	4b0f      	ldr	r3, [pc, #60]	; (800243c <MX_SPI1_Init+0x64>)
 80023fe:	2200      	movs	r2, #0
 8002400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <MX_SPI1_Init+0x64>)
 8002404:	2200      	movs	r2, #0
 8002406:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <MX_SPI1_Init+0x64>)
 800240a:	2200      	movs	r2, #0
 800240c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800240e:	4b0b      	ldr	r3, [pc, #44]	; (800243c <MX_SPI1_Init+0x64>)
 8002410:	2200      	movs	r2, #0
 8002412:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <MX_SPI1_Init+0x64>)
 8002416:	2200      	movs	r2, #0
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800241a:	4b08      	ldr	r3, [pc, #32]	; (800243c <MX_SPI1_Init+0x64>)
 800241c:	2200      	movs	r2, #0
 800241e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002420:	4b06      	ldr	r3, [pc, #24]	; (800243c <MX_SPI1_Init+0x64>)
 8002422:	220a      	movs	r2, #10
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002426:	4805      	ldr	r0, [pc, #20]	; (800243c <MX_SPI1_Init+0x64>)
 8002428:	f002 fdc2 	bl	8004fb0 <HAL_SPI_Init>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8002432:	f000 f97d 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	200006a4 	.word	0x200006a4
 8002440:	40013000 	.word	0x40013000

08002444 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800244a:	f107 0308 	add.w	r3, r7, #8
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <MX_TIM2_Init+0x94>)
 8002462:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002466:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002468:	4b1b      	ldr	r3, [pc, #108]	; (80024d8 <MX_TIM2_Init+0x94>)
 800246a:	2277      	movs	r2, #119	; 0x77
 800246c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <MX_TIM2_Init+0x94>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <MX_TIM2_Init+0x94>)
 8002476:	2209      	movs	r2, #9
 8002478:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <MX_TIM2_Init+0x94>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002480:	4b15      	ldr	r3, [pc, #84]	; (80024d8 <MX_TIM2_Init+0x94>)
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002486:	4814      	ldr	r0, [pc, #80]	; (80024d8 <MX_TIM2_Init+0x94>)
 8002488:	f002 fdf3 	bl	8005072 <HAL_TIM_Base_Init>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002492:	f000 f94d 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800249a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800249c:	f107 0308 	add.w	r3, r7, #8
 80024a0:	4619      	mov	r1, r3
 80024a2:	480d      	ldr	r0, [pc, #52]	; (80024d8 <MX_TIM2_Init+0x94>)
 80024a4:	f002 ff65 	bl	8005372 <HAL_TIM_ConfigClockSource>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80024ae:	f000 f93f 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024ba:	463b      	mov	r3, r7
 80024bc:	4619      	mov	r1, r3
 80024be:	4806      	ldr	r0, [pc, #24]	; (80024d8 <MX_TIM2_Init+0x94>)
 80024c0:	f003 f92a 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80024ca:	f000 f931 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ce:	bf00      	nop
 80024d0:	3718      	adds	r7, #24
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	200006fc 	.word	0x200006fc

080024dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024f0:	463b      	mov	r3, r7
 80024f2:	2200      	movs	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024f8:	4b1c      	ldr	r3, [pc, #112]	; (800256c <MX_TIM3_Init+0x90>)
 80024fa:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <MX_TIM3_Init+0x94>)
 80024fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024fe:	4b1b      	ldr	r3, [pc, #108]	; (800256c <MX_TIM3_Init+0x90>)
 8002500:	2200      	movs	r2, #0
 8002502:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <MX_TIM3_Init+0x90>)
 8002506:	2200      	movs	r2, #0
 8002508:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <MX_TIM3_Init+0x90>)
 800250c:	2200      	movs	r2, #0
 800250e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002510:	4b16      	ldr	r3, [pc, #88]	; (800256c <MX_TIM3_Init+0x90>)
 8002512:	2200      	movs	r2, #0
 8002514:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <MX_TIM3_Init+0x90>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800251c:	4813      	ldr	r0, [pc, #76]	; (800256c <MX_TIM3_Init+0x90>)
 800251e:	f002 fda8 	bl	8005072 <HAL_TIM_Base_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002528:	f000 f902 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800252c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002530:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002532:	f107 0308 	add.w	r3, r7, #8
 8002536:	4619      	mov	r1, r3
 8002538:	480c      	ldr	r0, [pc, #48]	; (800256c <MX_TIM3_Init+0x90>)
 800253a:	f002 ff1a 	bl	8005372 <HAL_TIM_ConfigClockSource>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002544:	f000 f8f4 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002548:	2300      	movs	r3, #0
 800254a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002550:	463b      	mov	r3, r7
 8002552:	4619      	mov	r1, r3
 8002554:	4805      	ldr	r0, [pc, #20]	; (800256c <MX_TIM3_Init+0x90>)
 8002556:	f003 f8df 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002560:	f000 f8e6 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002564:	bf00      	nop
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000644 	.word	0x20000644
 8002570:	40000400 	.word	0x40000400

08002574 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	609a      	str	r2, [r3, #8]
 8002586:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002588:	463b      	mov	r3, r7
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002590:	4b1c      	ldr	r3, [pc, #112]	; (8002604 <MX_TIM4_Init+0x90>)
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <MX_TIM4_Init+0x94>)
 8002594:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002596:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <MX_TIM4_Init+0x90>)
 8002598:	2200      	movs	r2, #0
 800259a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800259c:	4b19      	ldr	r3, [pc, #100]	; (8002604 <MX_TIM4_Init+0x90>)
 800259e:	2200      	movs	r2, #0
 80025a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80025a2:	4b18      	ldr	r3, [pc, #96]	; (8002604 <MX_TIM4_Init+0x90>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a8:	4b16      	ldr	r3, [pc, #88]	; (8002604 <MX_TIM4_Init+0x90>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <MX_TIM4_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025b4:	4813      	ldr	r0, [pc, #76]	; (8002604 <MX_TIM4_Init+0x90>)
 80025b6:	f002 fd5c 	bl	8005072 <HAL_TIM_Base_Init>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 80025c0:	f000 f8b6 	bl	8002730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025ca:	f107 0308 	add.w	r3, r7, #8
 80025ce:	4619      	mov	r1, r3
 80025d0:	480c      	ldr	r0, [pc, #48]	; (8002604 <MX_TIM4_Init+0x90>)
 80025d2:	f002 fece 	bl	8005372 <HAL_TIM_ConfigClockSource>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80025dc:	f000 f8a8 	bl	8002730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025e8:	463b      	mov	r3, r7
 80025ea:	4619      	mov	r1, r3
 80025ec:	4805      	ldr	r0, [pc, #20]	; (8002604 <MX_TIM4_Init+0x90>)
 80025ee:	f003 f893 	bl	8005718 <HAL_TIMEx_MasterConfigSynchronization>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80025f8:	f000 f89a 	bl	8002730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	200005f8 	.word	0x200005f8
 8002608:	40000800 	.word	0x40000800

0800260c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b088      	sub	sp, #32
 8002610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	609a      	str	r2, [r3, #8]
 800261e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002620:	4b3f      	ldr	r3, [pc, #252]	; (8002720 <MX_GPIO_Init+0x114>)
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	4a3e      	ldr	r2, [pc, #248]	; (8002720 <MX_GPIO_Init+0x114>)
 8002626:	f043 0310 	orr.w	r3, r3, #16
 800262a:	6193      	str	r3, [r2, #24]
 800262c:	4b3c      	ldr	r3, [pc, #240]	; (8002720 <MX_GPIO_Init+0x114>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002638:	4b39      	ldr	r3, [pc, #228]	; (8002720 <MX_GPIO_Init+0x114>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	4a38      	ldr	r2, [pc, #224]	; (8002720 <MX_GPIO_Init+0x114>)
 800263e:	f043 0320 	orr.w	r3, r3, #32
 8002642:	6193      	str	r3, [r2, #24]
 8002644:	4b36      	ldr	r3, [pc, #216]	; (8002720 <MX_GPIO_Init+0x114>)
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f003 0320 	and.w	r3, r3, #32
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002650:	4b33      	ldr	r3, [pc, #204]	; (8002720 <MX_GPIO_Init+0x114>)
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	4a32      	ldr	r2, [pc, #200]	; (8002720 <MX_GPIO_Init+0x114>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6193      	str	r3, [r2, #24]
 800265c:	4b30      	ldr	r3, [pc, #192]	; (8002720 <MX_GPIO_Init+0x114>)
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	607b      	str	r3, [r7, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002668:	4b2d      	ldr	r3, [pc, #180]	; (8002720 <MX_GPIO_Init+0x114>)
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <MX_GPIO_Init+0x114>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6193      	str	r3, [r2, #24]
 8002674:	4b2a      	ldr	r3, [pc, #168]	; (8002720 <MX_GPIO_Init+0x114>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	603b      	str	r3, [r7, #0]
 800267e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002680:	2201      	movs	r2, #1
 8002682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002686:	4827      	ldr	r0, [pc, #156]	; (8002724 <MX_GPIO_Init+0x118>)
 8002688:	f001 f8e0 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 800268c:	2200      	movs	r2, #0
 800268e:	f24f 01d8 	movw	r1, #61656	; 0xf0d8
 8002692:	4825      	ldr	r0, [pc, #148]	; (8002728 <MX_GPIO_Init+0x11c>)
 8002694:	f001 f8da 	bl	800384c <HAL_GPIO_WritePin>
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin, GPIO_PIN_RESET);
 8002698:	2200      	movs	r2, #0
 800269a:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800269e:	4823      	ldr	r0, [pc, #140]	; (800272c <MX_GPIO_Init+0x120>)
 80026a0:	f001 f8d4 	bl	800384c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80026a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026aa:	2301      	movs	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2302      	movs	r3, #2
 80026b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 0310 	add.w	r3, r7, #16
 80026ba:	4619      	mov	r1, r3
 80026bc:	4819      	ldr	r0, [pc, #100]	; (8002724 <MX_GPIO_Init+0x118>)
 80026be:	f000 ff6b 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_A_Pin X_B_Pin X_C_Pin X_D_Pin 
                           Z_C_Pin Z_D_Pin Y_D_Pin Z_A_Pin */
  GPIO_InitStruct.Pin = X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 80026c2:	f24f 03d8 	movw	r3, #61656	; 0xf0d8
 80026c6:	613b      	str	r3, [r7, #16]
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2302      	movs	r3, #2
 80026d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026d4:	f107 0310 	add.w	r3, r7, #16
 80026d8:	4619      	mov	r1, r3
 80026da:	4813      	ldr	r0, [pc, #76]	; (8002728 <MX_GPIO_Init+0x11c>)
 80026dc:	f000 ff5c 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_A_Pin Y_B_Pin Y_C_Pin Z_B_Pin */
  GPIO_InitStruct.Pin = Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin;
 80026e0:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80026e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026e6:	2301      	movs	r3, #1
 80026e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f2:	f107 0310 	add.w	r3, r7, #16
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_GPIO_Init+0x120>)
 80026fa:	f000 ff4d 	bl	8003598 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 80026fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800270c:	f107 0310 	add.w	r3, r7, #16
 8002710:	4619      	mov	r1, r3
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <MX_GPIO_Init+0x11c>)
 8002714:	f000 ff40 	bl	8003598 <HAL_GPIO_Init>

}
 8002718:	bf00      	nop
 800271a:	3720      	adds	r7, #32
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	40021000 	.word	0x40021000
 8002724:	40011000 	.word	0x40011000
 8002728:	40010c00 	.word	0x40010c00
 800272c:	40010800 	.word	0x40010800

08002730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002734:	bf00      	nop
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <HAL_MspInit+0x5c>)
 8002744:	699b      	ldr	r3, [r3, #24]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <HAL_MspInit+0x5c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6193      	str	r3, [r2, #24]
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_MspInit+0x5c>)
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60bb      	str	r3, [r7, #8]
 8002758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_MspInit+0x5c>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a0e      	ldr	r2, [pc, #56]	; (8002798 <HAL_MspInit+0x5c>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_MspInit+0x5c>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	607b      	str	r3, [r7, #4]
 8002770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_MspInit+0x60>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	4a04      	ldr	r2, [pc, #16]	; (800279c <HAL_MspInit+0x60>)
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800278e:	bf00      	nop
 8002790:	3714      	adds	r7, #20
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr
 8002798:	40021000 	.word	0x40021000
 800279c:	40010000 	.word	0x40010000

080027a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_CRC_MspInit+0x34>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d10b      	bne.n	80027ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_CRC_MspInit+0x38>)
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	4a08      	ldr	r2, [pc, #32]	; (80027d8 <HAL_CRC_MspInit+0x38>)
 80027b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027bc:	6153      	str	r3, [r2, #20]
 80027be:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <HAL_CRC_MspInit+0x38>)
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80027ca:	bf00      	nop
 80027cc:	3714      	adds	r7, #20
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	40023000 	.word	0x40023000
 80027d8:	40021000 	.word	0x40021000

080027dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b088      	sub	sp, #32
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 0310 	add.w	r3, r7, #16
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1b      	ldr	r2, [pc, #108]	; (8002864 <HAL_SPI_MspInit+0x88>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d12f      	bne.n	800285c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 8002802:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b17      	ldr	r3, [pc, #92]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002814:	4b14      	ldr	r3, [pc, #80]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a13      	ldr	r2, [pc, #76]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b11      	ldr	r3, [pc, #68]	; (8002868 <HAL_SPI_MspInit+0x8c>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800282c:	2350      	movs	r3, #80	; 0x50
 800282e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002838:	f107 0310 	add.w	r3, r7, #16
 800283c:	4619      	mov	r1, r3
 800283e:	480b      	ldr	r0, [pc, #44]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002840:	f000 feaa 	bl	8003598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002844:	23a0      	movs	r3, #160	; 0xa0
 8002846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284c:	2303      	movs	r3, #3
 800284e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002850:	f107 0310 	add.w	r3, r7, #16
 8002854:	4619      	mov	r1, r3
 8002856:	4805      	ldr	r0, [pc, #20]	; (800286c <HAL_SPI_MspInit+0x90>)
 8002858:	f000 fe9e 	bl	8003598 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800285c:	bf00      	nop
 800285e:	3720      	adds	r7, #32
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40013000 	.word	0x40013000
 8002868:	40021000 	.word	0x40021000
 800286c:	40010800 	.word	0x40010800

08002870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002880:	d114      	bne.n	80028ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4a25      	ldr	r2, [pc, #148]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 8002888:	f043 0301 	orr.w	r3, r3, #1
 800288c:	61d3      	str	r3, [r2, #28]
 800288e:	4b23      	ldr	r3, [pc, #140]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800289a:	2200      	movs	r2, #0
 800289c:	2100      	movs	r1, #0
 800289e:	201c      	movs	r0, #28
 80028a0:	f000 fe27 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a4:	201c      	movs	r0, #28
 80028a6:	f000 fe40 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028aa:	e032      	b.n	8002912 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a1b      	ldr	r2, [pc, #108]	; (8002920 <HAL_TIM_Base_MspInit+0xb0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d114      	bne.n	80028e0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b6:	4b19      	ldr	r3, [pc, #100]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	4a18      	ldr	r2, [pc, #96]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	61d3      	str	r3, [r2, #28]
 80028c2:	4b16      	ldr	r3, [pc, #88]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	613b      	str	r3, [r7, #16]
 80028cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	201d      	movs	r0, #29
 80028d4:	f000 fe0d 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d8:	201d      	movs	r0, #29
 80028da:	f000 fe26 	bl	800352a <HAL_NVIC_EnableIRQ>
}
 80028de:	e018      	b.n	8002912 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0f      	ldr	r2, [pc, #60]	; (8002924 <HAL_TIM_Base_MspInit+0xb4>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80028ea:	4b0c      	ldr	r3, [pc, #48]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028f0:	f043 0304 	orr.w	r3, r3, #4
 80028f4:	61d3      	str	r3, [r2, #28]
 80028f6:	4b09      	ldr	r3, [pc, #36]	; (800291c <HAL_TIM_Base_MspInit+0xac>)
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f003 0304 	and.w	r3, r3, #4
 80028fe:	60fb      	str	r3, [r7, #12]
 8002900:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	201e      	movs	r0, #30
 8002908:	f000 fdf3 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800290c:	201e      	movs	r0, #30
 800290e:	f000 fe0c 	bl	800352a <HAL_NVIC_EnableIRQ>
}
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40021000 	.word	0x40021000
 8002920:	40000400 	.word	0x40000400
 8002924:	40000800 	.word	0x40000800

08002928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <HardFault_Handler+0x4>

0800293a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <MemManage_Handler+0x4>

08002940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <BusFault_Handler+0x4>

08002946 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294a:	e7fe      	b.n	800294a <UsageFault_Handler+0x4>

0800294c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	bc80      	pop	{r7}
 800296e:	4770      	bx	lr

08002970 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002974:	f000 fcca 	bl	800330c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002980:	4802      	ldr	r0, [pc, #8]	; (800298c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002982:	f001 f89a 	bl	8003aba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002986:	bf00      	nop
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	200013d4 	.word	0x200013d4

08002990 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002994:	4802      	ldr	r0, [pc, #8]	; (80029a0 <TIM2_IRQHandler+0x10>)
 8002996:	f002 fbe4 	bl	8005162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	200006fc 	.word	0x200006fc

080029a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80029a8:	4802      	ldr	r0, [pc, #8]	; (80029b4 <TIM3_IRQHandler+0x10>)
 80029aa:	f002 fbda 	bl	8005162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80029ae:	bf00      	nop
 80029b0:	bd80      	pop	{r7, pc}
 80029b2:	bf00      	nop
 80029b4:	20000644 	.word	0x20000644

080029b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80029bc:	4802      	ldr	r0, [pc, #8]	; (80029c8 <TIM4_IRQHandler+0x10>)
 80029be:	f002 fbd0 	bl	8005162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80029c2:	bf00      	nop
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200005f8 	.word	0x200005f8

080029cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <_sbrk+0x50>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <_sbrk+0x16>
		heap_end = &end;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <_sbrk+0x50>)
 80029de:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <_sbrk+0x54>)
 80029e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80029e2:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <_sbrk+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <_sbrk+0x50>)
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4413      	add	r3, r2
 80029f0:	466a      	mov	r2, sp
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d907      	bls.n	8002a06 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80029f6:	f006 f849 	bl	8008a8c <__errno>
 80029fa:	4602      	mov	r2, r0
 80029fc:	230c      	movs	r3, #12
 80029fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002a00:	f04f 33ff 	mov.w	r3, #4294967295
 8002a04:	e006      	b.n	8002a14 <_sbrk+0x48>
	}

	heap_end += incr;
 8002a06:	4b05      	ldr	r3, [pc, #20]	; (8002a1c <_sbrk+0x50>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	4a03      	ldr	r2, [pc, #12]	; (8002a1c <_sbrk+0x50>)
 8002a10:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002a12:	68fb      	ldr	r3, [r7, #12]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	20000370 	.word	0x20000370
 8002a20:	20001648 	.word	0x20001648

08002a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <SystemInit+0x5c>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a14      	ldr	r2, [pc, #80]	; (8002a80 <SystemInit+0x5c>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <SystemInit+0x5c>)
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	4911      	ldr	r1, [pc, #68]	; (8002a80 <SystemInit+0x5c>)
 8002a3a:	4b12      	ldr	r3, [pc, #72]	; (8002a84 <SystemInit+0x60>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <SystemInit+0x5c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <SystemInit+0x5c>)
 8002a46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <SystemInit+0x5c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <SystemInit+0x5c>)
 8002a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002a5c:	4b08      	ldr	r3, [pc, #32]	; (8002a80 <SystemInit+0x5c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a07      	ldr	r2, [pc, #28]	; (8002a80 <SystemInit+0x5c>)
 8002a62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002a66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002a68:	4b05      	ldr	r3, [pc, #20]	; (8002a80 <SystemInit+0x5c>)
 8002a6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002a6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002a70:	4b05      	ldr	r3, [pc, #20]	; (8002a88 <SystemInit+0x64>)
 8002a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a76:	609a      	str	r2, [r3, #8]
#endif 
}
 8002a78:	bf00      	nop
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	40021000 	.word	0x40021000
 8002a84:	f8ff0000 	.word	0xf8ff0000
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Игорь
 */
#include "timers.h"

////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2){
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d126      	bne.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x60>

		counter++;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002aa6:	6013      	str	r3, [r2, #0]
		if(counter>=timerDivider){
 8002aa8:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	461a      	mov	r2, r3
 8002aae:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d31a      	bcc.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x60>

			if((stepsCounterX==0) && (stepsCounterY==0) && (stepsCounterZ==0)){
 8002ab6:	4b11      	ldr	r3, [pc, #68]	; (8002afc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10d      	bne.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d105      	bne.n	8002ada <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002ace:	480e      	ldr	r0, [pc, #56]	; (8002b08 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002ad0:	f002 fb1d 	bl	800510e <HAL_TIM_Base_Stop_IT>
				calcInterpolation();//пересчитываем следующий шаг интерполяции
 8002ad4:	f7ff f8a4 	bl	8001c20 <calcInterpolation>
				return;
 8002ad8:	e008      	b.n	8002aec <HAL_TIM_PeriodElapsedCallback+0x60>
			}

			moveDirX();
 8002ada:	f000 f817 	bl	8002b0c <moveDirX>
			moveDirY();
 8002ade:	f000 f8d1 	bl	8002c84 <moveDirY>
			moveDirZ();
 8002ae2:	f000 f981 	bl	8002de8 <moveDirZ>
			counter=0;
 8002ae6:	4b03      	ldr	r3, [pc, #12]	; (8002af4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	2000069c 	.word	0x2000069c
 8002af8:	200005b8 	.word	0x200005b8
 8002afc:	200005a0 	.word	0x200005a0
 8002b00:	200005c0 	.word	0x200005c0
 8002b04:	200005b4 	.word	0x200005b4
 8002b08:	200006fc 	.word	0x200006fc

08002b0c <moveDirX>:
/////////////////////////////////////////////////////////////////////////////
void moveDirX(){
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
	static char stepX=1;

	if(stepsCounterX!=0){
 8002b10:	4b58      	ldr	r3, [pc, #352]	; (8002c74 <moveDirX+0x168>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f000 80ab 	beq.w	8002c70 <moveDirX+0x164>
		if(stepsCounterX>0){
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <moveDirX+0x168>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	dd17      	ble.n	8002b52 <moveDirX+0x46>
			stepX++;
 8002b22:	4b55      	ldr	r3, [pc, #340]	; (8002c78 <moveDirX+0x16c>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <moveDirX+0x16c>)
 8002b2c:	701a      	strb	r2, [r3, #0]
			if(stepX == 5)stepX = 1;
 8002b2e:	4b52      	ldr	r3, [pc, #328]	; (8002c78 <moveDirX+0x16c>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b05      	cmp	r3, #5
 8002b34:	d102      	bne.n	8002b3c <moveDirX+0x30>
 8002b36:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <moveDirX+0x16c>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
			positionX+=1;
 8002b3c:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <moveDirX+0x170>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	4a4e      	ldr	r2, [pc, #312]	; (8002c7c <moveDirX+0x170>)
 8002b44:	6013      	str	r3, [r2, #0]
			stepsCounterX--;
 8002b46:	4b4b      	ldr	r3, [pc, #300]	; (8002c74 <moveDirX+0x168>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	4a49      	ldr	r2, [pc, #292]	; (8002c74 <moveDirX+0x168>)
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e01a      	b.n	8002b88 <moveDirX+0x7c>
		}
		else if(stepsCounterX<0){
 8002b52:	4b48      	ldr	r3, [pc, #288]	; (8002c74 <moveDirX+0x168>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	da16      	bge.n	8002b88 <moveDirX+0x7c>
			stepX--;
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <moveDirX+0x16c>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	4b45      	ldr	r3, [pc, #276]	; (8002c78 <moveDirX+0x16c>)
 8002b64:	701a      	strb	r2, [r3, #0]
			if(stepX==0)stepX = 4;
 8002b66:	4b44      	ldr	r3, [pc, #272]	; (8002c78 <moveDirX+0x16c>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <moveDirX+0x68>
 8002b6e:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <moveDirX+0x16c>)
 8002b70:	2204      	movs	r2, #4
 8002b72:	701a      	strb	r2, [r3, #0]
			positionX-=1;
 8002b74:	4b41      	ldr	r3, [pc, #260]	; (8002c7c <moveDirX+0x170>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <moveDirX+0x170>)
 8002b7c:	6013      	str	r3, [r2, #0]
			stepsCounterX++;
 8002b7e:	4b3d      	ldr	r3, [pc, #244]	; (8002c74 <moveDirX+0x168>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3301      	adds	r3, #1
 8002b84:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <moveDirX+0x168>)
 8002b86:	6013      	str	r3, [r2, #0]
		}
		switch(stepX){
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <moveDirX+0x16c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d86e      	bhi.n	8002c70 <moveDirX+0x164>
 8002b92:	a201      	add	r2, pc, #4	; (adr r2, 8002b98 <moveDirX+0x8c>)
 8002b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b98:	08002ba9 	.word	0x08002ba9
 8002b9c:	08002bdb 	.word	0x08002bdb
 8002ba0:	08002c0d 	.word	0x08002c0d
 8002ba4:	08002c3f 	.word	0x08002c3f
			case(1):{
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bae:	4834      	ldr	r0, [pc, #208]	; (8002c80 <moveDirX+0x174>)
 8002bb0:	f000 fe4c 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bba:	4831      	ldr	r0, [pc, #196]	; (8002c80 <moveDirX+0x174>)
 8002bbc:	f000 fe46 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc6:	482e      	ldr	r0, [pc, #184]	; (8002c80 <moveDirX+0x174>)
 8002bc8:	f000 fe40 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_A,GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd2:	482b      	ldr	r0, [pc, #172]	; (8002c80 <moveDirX+0x174>)
 8002bd4:	f000 fe3a 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002bd8:	e04a      	b.n	8002c70 <moveDirX+0x164>
			}
			case(2):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002be0:	4827      	ldr	r0, [pc, #156]	; (8002c80 <moveDirX+0x174>)
 8002be2:	f000 fe33 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002bec:	4824      	ldr	r0, [pc, #144]	; (8002c80 <moveDirX+0x174>)
 8002bee:	f000 fe2d 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bf8:	4821      	ldr	r0, [pc, #132]	; (8002c80 <moveDirX+0x174>)
 8002bfa:	f000 fe27 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c04:	481e      	ldr	r0, [pc, #120]	; (8002c80 <moveDirX+0x174>)
 8002c06:	f000 fe21 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002c0a:	e031      	b.n	8002c70 <moveDirX+0x164>
			}
			case(3):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c12:	481b      	ldr	r0, [pc, #108]	; (8002c80 <moveDirX+0x174>)
 8002c14:	f000 fe1a 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c1e:	4818      	ldr	r0, [pc, #96]	; (8002c80 <moveDirX+0x174>)
 8002c20:	f000 fe14 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c2a:	4815      	ldr	r0, [pc, #84]	; (8002c80 <moveDirX+0x174>)
 8002c2c:	f000 fe0e 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_SET);
 8002c30:	2201      	movs	r2, #1
 8002c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c36:	4812      	ldr	r0, [pc, #72]	; (8002c80 <moveDirX+0x174>)
 8002c38:	f000 fe08 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002c3c:	e018      	b.n	8002c70 <moveDirX+0x164>
			}
			case(4):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002c44:	480e      	ldr	r0, [pc, #56]	; (8002c80 <moveDirX+0x174>)
 8002c46:	f000 fe01 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c50:	480b      	ldr	r0, [pc, #44]	; (8002c80 <moveDirX+0x174>)
 8002c52:	f000 fdfb 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002c56:	2200      	movs	r2, #0
 8002c58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002c5c:	4808      	ldr	r0, [pc, #32]	; (8002c80 <moveDirX+0x174>)
 8002c5e:	f000 fdf5 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c68:	4805      	ldr	r0, [pc, #20]	; (8002c80 <moveDirX+0x174>)
 8002c6a:	f000 fdef 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002c6e:	bf00      	nop
			}
		}
	}
}
 8002c70:	bf00      	nop
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	200005a0 	.word	0x200005a0
 8002c78:	20000004 	.word	0x20000004
 8002c7c:	200005a8 	.word	0x200005a8
 8002c80:	40010c00 	.word	0x40010c00

08002c84 <moveDirY>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirY(){
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	static char stepY=1;

	if(stepsCounterY!=0){
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <moveDirY+0x150>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 809f 	beq.w	8002dd0 <moveDirY+0x14c>
		if(stepsCounterY>0){
 8002c92:	4b50      	ldr	r3, [pc, #320]	; (8002dd4 <moveDirY+0x150>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	dd17      	ble.n	8002cca <moveDirY+0x46>
			stepY++;
 8002c9a:	4b4f      	ldr	r3, [pc, #316]	; (8002dd8 <moveDirY+0x154>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	b2da      	uxtb	r2, r3
 8002ca2:	4b4d      	ldr	r3, [pc, #308]	; (8002dd8 <moveDirY+0x154>)
 8002ca4:	701a      	strb	r2, [r3, #0]
			if(stepY == 5)stepY = 1;
 8002ca6:	4b4c      	ldr	r3, [pc, #304]	; (8002dd8 <moveDirY+0x154>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b05      	cmp	r3, #5
 8002cac:	d102      	bne.n	8002cb4 <moveDirY+0x30>
 8002cae:	4b4a      	ldr	r3, [pc, #296]	; (8002dd8 <moveDirY+0x154>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
			positionY+=1;
 8002cb4:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <moveDirY+0x158>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	4a48      	ldr	r2, [pc, #288]	; (8002ddc <moveDirY+0x158>)
 8002cbc:	6013      	str	r3, [r2, #0]
			stepsCounterY--;
 8002cbe:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <moveDirY+0x150>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	4a43      	ldr	r2, [pc, #268]	; (8002dd4 <moveDirY+0x150>)
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	e01a      	b.n	8002d00 <moveDirY+0x7c>
		}
		else if(stepsCounterY<0){
 8002cca:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <moveDirY+0x150>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da16      	bge.n	8002d00 <moveDirY+0x7c>
			stepY--;
 8002cd2:	4b41      	ldr	r3, [pc, #260]	; (8002dd8 <moveDirY+0x154>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	b2da      	uxtb	r2, r3
 8002cda:	4b3f      	ldr	r3, [pc, #252]	; (8002dd8 <moveDirY+0x154>)
 8002cdc:	701a      	strb	r2, [r3, #0]
			if(stepY == 0)stepY = 4;
 8002cde:	4b3e      	ldr	r3, [pc, #248]	; (8002dd8 <moveDirY+0x154>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <moveDirY+0x68>
 8002ce6:	4b3c      	ldr	r3, [pc, #240]	; (8002dd8 <moveDirY+0x154>)
 8002ce8:	2204      	movs	r2, #4
 8002cea:	701a      	strb	r2, [r3, #0]
			positionY-=1;
 8002cec:	4b3b      	ldr	r3, [pc, #236]	; (8002ddc <moveDirY+0x158>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	4a3a      	ldr	r2, [pc, #232]	; (8002ddc <moveDirY+0x158>)
 8002cf4:	6013      	str	r3, [r2, #0]
			stepsCounterY++;
 8002cf6:	4b37      	ldr	r3, [pc, #220]	; (8002dd4 <moveDirY+0x150>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <moveDirY+0x150>)
 8002cfe:	6013      	str	r3, [r2, #0]
		}
		switch(stepY){
 8002d00:	4b35      	ldr	r3, [pc, #212]	; (8002dd8 <moveDirY+0x154>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d862      	bhi.n	8002dd0 <moveDirY+0x14c>
 8002d0a:	a201      	add	r2, pc, #4	; (adr r2, 8002d10 <moveDirY+0x8c>)
 8002d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d10:	08002d21 	.word	0x08002d21
 8002d14:	08002d4d 	.word	0x08002d4d
 8002d18:	08002d79 	.word	0x08002d79
 8002d1c:	08002da5 	.word	0x08002da5
			case(1):{
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d26:	482e      	ldr	r0, [pc, #184]	; (8002de0 <moveDirY+0x15c>)
 8002d28:	f000 fd90 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2108      	movs	r1, #8
 8002d30:	482c      	ldr	r0, [pc, #176]	; (8002de4 <moveDirY+0x160>)
 8002d32:	f000 fd8b 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_SET);
 8002d36:	2201      	movs	r2, #1
 8002d38:	2110      	movs	r1, #16
 8002d3a:	482a      	ldr	r0, [pc, #168]	; (8002de4 <moveDirY+0x160>)
 8002d3c:	f000 fd86 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002d40:	2200      	movs	r2, #0
 8002d42:	2140      	movs	r1, #64	; 0x40
 8002d44:	4827      	ldr	r0, [pc, #156]	; (8002de4 <moveDirY+0x160>)
 8002d46:	f000 fd81 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002d4a:	e041      	b.n	8002dd0 <moveDirY+0x14c>
			}
			case(2):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2140      	movs	r1, #64	; 0x40
 8002d50:	4824      	ldr	r0, [pc, #144]	; (8002de4 <moveDirY+0x160>)
 8002d52:	f000 fd7b 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_SET);
 8002d56:	2201      	movs	r2, #1
 8002d58:	2108      	movs	r1, #8
 8002d5a:	4822      	ldr	r0, [pc, #136]	; (8002de4 <moveDirY+0x160>)
 8002d5c:	f000 fd76 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002d60:	2200      	movs	r2, #0
 8002d62:	2110      	movs	r1, #16
 8002d64:	481f      	ldr	r0, [pc, #124]	; (8002de4 <moveDirY+0x160>)
 8002d66:	f000 fd71 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d70:	481b      	ldr	r0, [pc, #108]	; (8002de0 <moveDirY+0x15c>)
 8002d72:	f000 fd6b 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002d76:	e02b      	b.n	8002dd0 <moveDirY+0x14c>
			}
			case(3):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2140      	movs	r1, #64	; 0x40
 8002d7c:	4819      	ldr	r0, [pc, #100]	; (8002de4 <moveDirY+0x160>)
 8002d7e:	f000 fd65 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_SET);
 8002d82:	2201      	movs	r2, #1
 8002d84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d88:	4815      	ldr	r0, [pc, #84]	; (8002de0 <moveDirY+0x15c>)
 8002d8a:	f000 fd5f 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2110      	movs	r1, #16
 8002d92:	4814      	ldr	r0, [pc, #80]	; (8002de4 <moveDirY+0x160>)
 8002d94:	f000 fd5a 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002d98:	2200      	movs	r2, #0
 8002d9a:	2108      	movs	r1, #8
 8002d9c:	4811      	ldr	r0, [pc, #68]	; (8002de4 <moveDirY+0x160>)
 8002d9e:	f000 fd55 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002da2:	e015      	b.n	8002dd0 <moveDirY+0x14c>
			}
			case(4):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_SET);
 8002da4:	2201      	movs	r2, #1
 8002da6:	2140      	movs	r1, #64	; 0x40
 8002da8:	480e      	ldr	r0, [pc, #56]	; (8002de4 <moveDirY+0x160>)
 8002daa:	f000 fd4f 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002dae:	2200      	movs	r2, #0
 8002db0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002db4:	480a      	ldr	r0, [pc, #40]	; (8002de0 <moveDirY+0x15c>)
 8002db6:	f000 fd49 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2108      	movs	r1, #8
 8002dbe:	4809      	ldr	r0, [pc, #36]	; (8002de4 <moveDirY+0x160>)
 8002dc0:	f000 fd44 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2110      	movs	r1, #16
 8002dc8:	4806      	ldr	r0, [pc, #24]	; (8002de4 <moveDirY+0x160>)
 8002dca:	f000 fd3f 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002dce:	bf00      	nop
			}
		}
	}
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200005c0 	.word	0x200005c0
 8002dd8:	20000005 	.word	0x20000005
 8002ddc:	200005c8 	.word	0x200005c8
 8002de0:	40010800 	.word	0x40010800
 8002de4:	40010c00 	.word	0x40010c00

08002de8 <moveDirZ>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirZ(){
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	static char stepZ=1;

	if(stepsCounterZ!=0){
 8002dec:	4b56      	ldr	r3, [pc, #344]	; (8002f48 <moveDirZ+0x160>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80a7 	beq.w	8002f44 <moveDirZ+0x15c>
			if(stepsCounterZ>0){
 8002df6:	4b54      	ldr	r3, [pc, #336]	; (8002f48 <moveDirZ+0x160>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	dd17      	ble.n	8002e2e <moveDirZ+0x46>
				stepZ++;
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <moveDirZ+0x164>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	4b51      	ldr	r3, [pc, #324]	; (8002f4c <moveDirZ+0x164>)
 8002e08:	701a      	strb	r2, [r3, #0]
				if(stepZ == 5)stepZ = 1;
 8002e0a:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <moveDirZ+0x164>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b05      	cmp	r3, #5
 8002e10:	d102      	bne.n	8002e18 <moveDirZ+0x30>
 8002e12:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <moveDirZ+0x164>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
				positionZ+=1;
 8002e18:	4b4d      	ldr	r3, [pc, #308]	; (8002f50 <moveDirZ+0x168>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	4a4c      	ldr	r2, [pc, #304]	; (8002f50 <moveDirZ+0x168>)
 8002e20:	6013      	str	r3, [r2, #0]
				stepsCounterZ--;
 8002e22:	4b49      	ldr	r3, [pc, #292]	; (8002f48 <moveDirZ+0x160>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	4a47      	ldr	r2, [pc, #284]	; (8002f48 <moveDirZ+0x160>)
 8002e2a:	6013      	str	r3, [r2, #0]
 8002e2c:	e01a      	b.n	8002e64 <moveDirZ+0x7c>
			}
			else if(stepsCounterZ<0){
 8002e2e:	4b46      	ldr	r3, [pc, #280]	; (8002f48 <moveDirZ+0x160>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	da16      	bge.n	8002e64 <moveDirZ+0x7c>
				stepZ--;
 8002e36:	4b45      	ldr	r3, [pc, #276]	; (8002f4c <moveDirZ+0x164>)
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b2da      	uxtb	r2, r3
 8002e3e:	4b43      	ldr	r3, [pc, #268]	; (8002f4c <moveDirZ+0x164>)
 8002e40:	701a      	strb	r2, [r3, #0]
				if(stepZ == 0)stepZ = 4;
 8002e42:	4b42      	ldr	r3, [pc, #264]	; (8002f4c <moveDirZ+0x164>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <moveDirZ+0x68>
 8002e4a:	4b40      	ldr	r3, [pc, #256]	; (8002f4c <moveDirZ+0x164>)
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	701a      	strb	r2, [r3, #0]
				positionZ-=1;
 8002e50:	4b3f      	ldr	r3, [pc, #252]	; (8002f50 <moveDirZ+0x168>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	4a3e      	ldr	r2, [pc, #248]	; (8002f50 <moveDirZ+0x168>)
 8002e58:	6013      	str	r3, [r2, #0]
				stepsCounterZ++;
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <moveDirZ+0x160>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	4a39      	ldr	r2, [pc, #228]	; (8002f48 <moveDirZ+0x160>)
 8002e62:	6013      	str	r3, [r2, #0]
			}
		switch(stepZ){
 8002e64:	4b39      	ldr	r3, [pc, #228]	; (8002f4c <moveDirZ+0x164>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	2b03      	cmp	r3, #3
 8002e6c:	d86a      	bhi.n	8002f44 <moveDirZ+0x15c>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <moveDirZ+0x8c>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002e85 	.word	0x08002e85
 8002e78:	08002eb5 	.word	0x08002eb5
 8002e7c:	08002ee5 	.word	0x08002ee5
 8002e80:	08002f15 	.word	0x08002f15
			case(1):{
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002e84:	2200      	movs	r2, #0
 8002e86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002e8a:	4832      	ldr	r0, [pc, #200]	; (8002f54 <moveDirZ+0x16c>)
 8002e8c:	f000 fcde 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002e90:	2200      	movs	r2, #0
 8002e92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e96:	482f      	ldr	r0, [pc, #188]	; (8002f54 <moveDirZ+0x16c>)
 8002e98:	f000 fcd8 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2180      	movs	r1, #128	; 0x80
 8002ea0:	482d      	ldr	r0, [pc, #180]	; (8002f58 <moveDirZ+0x170>)
 8002ea2:	f000 fcd3 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_SET);
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eac:	4829      	ldr	r0, [pc, #164]	; (8002f54 <moveDirZ+0x16c>)
 8002eae:	f000 fccd 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002eb2:	e047      	b.n	8002f44 <moveDirZ+0x15c>
			}
			case(2):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eba:	4826      	ldr	r0, [pc, #152]	; (8002f54 <moveDirZ+0x16c>)
 8002ebc:	f000 fcc6 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ec6:	4823      	ldr	r0, [pc, #140]	; (8002f54 <moveDirZ+0x16c>)
 8002ec8:	f000 fcc0 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	4821      	ldr	r0, [pc, #132]	; (8002f58 <moveDirZ+0x170>)
 8002ed2:	f000 fcbb 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_SET);
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002edc:	481d      	ldr	r0, [pc, #116]	; (8002f54 <moveDirZ+0x16c>)
 8002ede:	f000 fcb5 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002ee2:	e02f      	b.n	8002f44 <moveDirZ+0x15c>
			}
			case(3):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eea:	481a      	ldr	r0, [pc, #104]	; (8002f54 <moveDirZ+0x16c>)
 8002eec:	f000 fcae 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ef6:	4817      	ldr	r0, [pc, #92]	; (8002f54 <moveDirZ+0x16c>)
 8002ef8:	f000 fca8 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	; 0x80
 8002f00:	4815      	ldr	r0, [pc, #84]	; (8002f58 <moveDirZ+0x170>)
 8002f02:	f000 fca3 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_SET);
 8002f06:	2201      	movs	r2, #1
 8002f08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f0c:	4811      	ldr	r0, [pc, #68]	; (8002f54 <moveDirZ+0x16c>)
 8002f0e:	f000 fc9d 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002f12:	e017      	b.n	8002f44 <moveDirZ+0x15c>
			}
			case(4):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002f14:	2200      	movs	r2, #0
 8002f16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f1a:	480e      	ldr	r0, [pc, #56]	; (8002f54 <moveDirZ+0x16c>)
 8002f1c:	f000 fc96 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002f20:	2200      	movs	r2, #0
 8002f22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f26:	480b      	ldr	r0, [pc, #44]	; (8002f54 <moveDirZ+0x16c>)
 8002f28:	f000 fc90 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f32:	4808      	ldr	r0, [pc, #32]	; (8002f54 <moveDirZ+0x16c>)
 8002f34:	f000 fc8a 	bl	800384c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_SET);
 8002f38:	2201      	movs	r2, #1
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	4806      	ldr	r0, [pc, #24]	; (8002f58 <moveDirZ+0x170>)
 8002f3e:	f000 fc85 	bl	800384c <HAL_GPIO_WritePin>
				break;
 8002f42:	bf00      	nop
			}
		}
	}
}
 8002f44:	bf00      	nop
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	200005b4 	.word	0x200005b4
 8002f4c:	20000006 	.word	0x20000006
 8002f50:	200005a4 	.word	0x200005a4
 8002f54:	40010800 	.word	0x40010800
 8002f58:	40010c00 	.word	0x40010c00

08002f5c <usbInit>:
 */


#include "usb.h"

void usbInit(){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
	if(rxBuffer==NULL){
 8002f60:	4b07      	ldr	r3, [pc, #28]	; (8002f80 <usbInit+0x24>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <usbInit+0x1a>
		rxBuffer=malloc(50);
 8002f68:	2032      	movs	r0, #50	; 0x32
 8002f6a:	f005 fdc7 	bl	8008afc <malloc>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	461a      	mov	r2, r3
 8002f72:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <usbInit+0x24>)
 8002f74:	601a      	str	r2, [r3, #0]
	}
	sizeOfMessage=0;
 8002f76:	4b03      	ldr	r3, [pc, #12]	; (8002f84 <usbInit+0x28>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	200006a0 	.word	0x200006a0
 8002f84:	20000698 	.word	0x20000698

08002f88 <readMessage>:
///////////////////////////////////////////////////////////////
void readMessage(){
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0

	incomingMessageFlag=0;
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <readMessage+0x98>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	701a      	strb	r2, [r3, #0]
	unsigned short crc=0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	80bb      	strh	r3, [r7, #4]
	unsigned short crc2=0;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	80fb      	strh	r3, [r7, #6]
	memcpy(&crc,&rxBuffer[sizeOfMessage-2],2);
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <readMessage+0x9c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b21      	ldr	r3, [pc, #132]	; (8003028 <readMessage+0xa0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	3b02      	subs	r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	80bb      	strh	r3, [r7, #4]
	crc2=Crc16(rxBuffer,sizeOfMessage-2);
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <readMessage+0x9c>)
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <readMessage+0xa0>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b02      	subs	r3, #2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f000 f834 	bl	800302c <Crc16>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	80fb      	strh	r3, [r7, #6]
	if(crc==crc2){
 8002fc8:	88bb      	ldrh	r3, [r7, #4]
 8002fca:	88fa      	ldrh	r2, [r7, #6]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d122      	bne.n	8003016 <readMessage+0x8e>
		switch(rxBuffer[1]){
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <readMessage+0x9c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <readMessage+0x5a>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d003      	beq.n	8002fe8 <readMessage+0x60>
				break;
			}
		}
	}

}
 8002fe0:	e019      	b.n	8003016 <readMessage+0x8e>
				sendStatus();
 8002fe2:	f000 f85f 	bl	80030a4 <sendStatus>
				break;
 8002fe6:	e016      	b.n	8003016 <readMessage+0x8e>
				parseCodeString(rxBuffer+2,sizeOfMessage-4);
 8002fe8:	4b0e      	ldr	r3, [pc, #56]	; (8003024 <readMessage+0x9c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	4b0e      	ldr	r3, [pc, #56]	; (8003028 <readMessage+0xa0>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	3b04      	subs	r3, #4
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe f8a7 	bl	800114c <parseCodeString>
				sendAcknolege(MESSAGE_G_CODE,rxBuffer+2,sizeOfMessage-4);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <readMessage+0x9c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	1c99      	adds	r1, r3, #2
 8003004:	4b08      	ldr	r3, [pc, #32]	; (8003028 <readMessage+0xa0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3b04      	subs	r3, #4
 800300a:	b2db      	uxtb	r3, r3
 800300c:	461a      	mov	r2, r3
 800300e:	2001      	movs	r0, #1
 8003010:	f000 f8aa 	bl	8003168 <sendAcknolege>
				break;
 8003014:	bf00      	nop
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	20000375 	.word	0x20000375
 8003024:	200006a0 	.word	0x200006a0
 8003028:	20000698 	.word	0x20000698

0800302c <Crc16>:
////////////////////////////////////////////////////////////////
unsigned short Crc16(char *pcBlock, unsigned short len){
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8003038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800303c:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--){
 800303e:	e025      	b.n	800308c <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	1c5a      	adds	r2, r3, #1
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	021b      	lsls	r3, r3, #8
 800304a:	b21a      	sxth	r2, r3
 800304c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003050:	4053      	eors	r3, r2
 8003052:	b21b      	sxth	r3, r3
 8003054:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8003056:	2300      	movs	r3, #0
 8003058:	737b      	strb	r3, [r7, #13]
 800305a:	e014      	b.n	8003086 <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 800305c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003060:	2b00      	cmp	r3, #0
 8003062:	da09      	bge.n	8003078 <Crc16+0x4c>
 8003064:	89fb      	ldrh	r3, [r7, #14]
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	b21b      	sxth	r3, r3
 800306a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800306e:	f083 0301 	eor.w	r3, r3, #1
 8003072:	b21b      	sxth	r3, r3
 8003074:	b29b      	uxth	r3, r3
 8003076:	e002      	b.n	800307e <Crc16+0x52>
 8003078:	89fb      	ldrh	r3, [r7, #14]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	b29b      	uxth	r3, r3
 800307e:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8003080:	7b7b      	ldrb	r3, [r7, #13]
 8003082:	3301      	adds	r3, #1
 8003084:	737b      	strb	r3, [r7, #13]
 8003086:	7b7b      	ldrb	r3, [r7, #13]
 8003088:	2b07      	cmp	r3, #7
 800308a:	d9e7      	bls.n	800305c <Crc16+0x30>
    while (len--){
 800308c:	887b      	ldrh	r3, [r7, #2]
 800308e:	1e5a      	subs	r2, r3, #1
 8003090:	807a      	strh	r2, [r7, #2]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1d4      	bne.n	8003040 <Crc16+0x14>
        }
    }
    return crc;
 8003096:	89fb      	ldrh	r3, [r7, #14]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3714      	adds	r7, #20
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr
	...

080030a4 <sendStatus>:
////////////////////////////////////////////////////////////////////////
void sendStatus(){
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	466b      	mov	r3, sp
 80030ac:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2;//размер,тип,3 флоата,CRC
 80030ae:	2310      	movs	r3, #16
 80030b0:	73fb      	strb	r3, [r7, #15]
	char dataToSend[size];
 80030b2:	7bf8      	ldrb	r0, [r7, #15]
 80030b4:	4603      	mov	r3, r0
 80030b6:	3b01      	subs	r3, #1
 80030b8:	60bb      	str	r3, [r7, #8]
 80030ba:	b2c1      	uxtb	r1, r0
 80030bc:	f04f 0200 	mov.w	r2, #0
 80030c0:	f04f 0300 	mov.w	r3, #0
 80030c4:	f04f 0400 	mov.w	r4, #0
 80030c8:	00d4      	lsls	r4, r2, #3
 80030ca:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80030ce:	00cb      	lsls	r3, r1, #3
 80030d0:	b2c1      	uxtb	r1, r0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	f04f 0400 	mov.w	r4, #0
 80030de:	00d4      	lsls	r4, r2, #3
 80030e0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80030e4:	00cb      	lsls	r3, r1, #3
 80030e6:	4603      	mov	r3, r0
 80030e8:	3307      	adds	r3, #7
 80030ea:	08db      	lsrs	r3, r3, #3
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	ebad 0d03 	sub.w	sp, sp, r3
 80030f2:	466b      	mov	r3, sp
 80030f4:	3300      	adds	r3, #0
 80030f6:	607b      	str	r3, [r7, #4]

	dataToSend[0]=size;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7bfa      	ldrb	r2, [r7, #15]
 80030fc:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=MESSAGE_STATUS;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	705a      	strb	r2, [r3, #1]
	//отправляем позицию X. Разбираем int на char
	memcpy(dataToSend+2,&positionX,sizeof(int));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3302      	adds	r3, #2
 8003108:	4a14      	ldr	r2, [pc, #80]	; (800315c <sendStatus+0xb8>)
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	601a      	str	r2, [r3, #0]
	//отправляем позицию Y. Разбираем int на char
	memcpy(dataToSend+2+sizeof(int),&positionY,sizeof(int));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	3306      	adds	r3, #6
 8003112:	4a13      	ldr	r2, [pc, #76]	; (8003160 <sendStatus+0xbc>)
 8003114:	6812      	ldr	r2, [r2, #0]
 8003116:	601a      	str	r2, [r3, #0]
	//отправляем позицию X. Разбираем int на char
	memcpy(dataToSend+2+sizeof(int)*2,&positionZ,sizeof(int));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	330a      	adds	r3, #10
 800311c:	4a11      	ldr	r2, [pc, #68]	; (8003164 <sendStatus+0xc0>)
 800311e:	6812      	ldr	r2, [r2, #0]
 8003120:	601a      	str	r2, [r3, #0]

	unsigned short crc = Crc16(dataToSend,size-2);
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b02      	subs	r3, #2
 800312a:	b29b      	uxth	r3, r3
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f7ff ff7c 	bl	800302c <Crc16>
 8003134:	4603      	mov	r3, r0
 8003136:	807b      	strh	r3, [r7, #2]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	3b02      	subs	r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f005 f8cc 	bl	80082e8 <CDC_Transmit_FS>
 8003150:	46ad      	mov	sp, r5

}
 8003152:	bf00      	nop
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bdb0      	pop	{r4, r5, r7, pc}
 800315a:	bf00      	nop
 800315c:	200005a8 	.word	0x200005a8
 8003160:	200005c8 	.word	0x200005c8
 8003164:	200005a4 	.word	0x200005a4

08003168 <sendAcknolege>:
/////////////////////////////////////////////////////////////////////////
void sendAcknolege(enum messageType mess, char *array, char arrSize){
 8003168:	b5b0      	push	{r4, r5, r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	4603      	mov	r3, r0
 8003170:	6039      	str	r1, [r7, #0]
 8003172:	71fb      	strb	r3, [r7, #7]
 8003174:	4613      	mov	r3, r2
 8003176:	71bb      	strb	r3, [r7, #6]
 8003178:	466b      	mov	r3, sp
 800317a:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2+arrSize;//размер,тип,3 инта,CRC, размер массива
 800317c:	79bb      	ldrb	r3, [r7, #6]
 800317e:	3310      	adds	r3, #16
 8003180:	75fb      	strb	r3, [r7, #23]
	char dataToSend[size];
 8003182:	7df8      	ldrb	r0, [r7, #23]
 8003184:	4603      	mov	r3, r0
 8003186:	3b01      	subs	r3, #1
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	b2c1      	uxtb	r1, r0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	f04f 0400 	mov.w	r4, #0
 8003198:	00d4      	lsls	r4, r2, #3
 800319a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800319e:	00cb      	lsls	r3, r1, #3
 80031a0:	b2c1      	uxtb	r1, r0
 80031a2:	f04f 0200 	mov.w	r2, #0
 80031a6:	f04f 0300 	mov.w	r3, #0
 80031aa:	f04f 0400 	mov.w	r4, #0
 80031ae:	00d4      	lsls	r4, r2, #3
 80031b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80031b4:	00cb      	lsls	r3, r1, #3
 80031b6:	4603      	mov	r3, r0
 80031b8:	3307      	adds	r3, #7
 80031ba:	08db      	lsrs	r3, r3, #3
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	ebad 0d03 	sub.w	sp, sp, r3
 80031c2:	466b      	mov	r3, sp
 80031c4:	3300      	adds	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]

	dataToSend[0]=size;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	7dfa      	ldrb	r2, [r7, #23]
 80031cc:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=mess;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	79fa      	ldrb	r2, [r7, #7]
 80031d2:	705a      	strb	r2, [r3, #1]

	if(array != NULL){
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d006      	beq.n	80031e8 <sendAcknolege+0x80>
		memcpy(array,dataToSend+2,arrSize);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	3302      	adds	r3, #2
 80031de:	79ba      	ldrb	r2, [r7, #6]
 80031e0:	4619      	mov	r1, r3
 80031e2:	6838      	ldr	r0, [r7, #0]
 80031e4:	f005 fca4 	bl	8008b30 <memcpy>
	}
	unsigned short crc = Crc16(dataToSend,size-2);
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	7dfb      	ldrb	r3, [r7, #23]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b02      	subs	r3, #2
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	4619      	mov	r1, r3
 80031f4:	4610      	mov	r0, r2
 80031f6:	f7ff ff19 	bl	800302c <Crc16>
 80031fa:	4603      	mov	r3, r0
 80031fc:	817b      	strh	r3, [r7, #10]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	7dfb      	ldrb	r3, [r7, #23]
 8003202:	3b02      	subs	r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	897a      	ldrh	r2, [r7, #10]
 8003208:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	7dfa      	ldrb	r2, [r7, #23]
 800320e:	4611      	mov	r1, r2
 8003210:	4618      	mov	r0, r3
 8003212:	f005 f869 	bl	80082e8 <CDC_Transmit_FS>
 8003216:	46ad      	mov	sp, r5
}
 8003218:	bf00      	nop
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bdb0      	pop	{r4, r5, r7, pc}

08003220 <sendFree>:
/////////////////////////////////////////////////////////////////////////
void sendFree(){
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	sendAcknolege(MESSAGE_ACKNOWLEDGE,NULL,0);
 8003224:	2200      	movs	r2, #0
 8003226:	2100      	movs	r1, #0
 8003228:	2002      	movs	r0, #2
 800322a:	f7ff ff9d 	bl	8003168 <sendAcknolege>
}
 800322e:	bf00      	nop
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003234:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003236:	e003      	b.n	8003240 <LoopCopyDataInit>

08003238 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003238:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800323a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800323c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800323e:	3104      	adds	r1, #4

08003240 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003240:	480a      	ldr	r0, [pc, #40]	; (800326c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003242:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003244:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003246:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003248:	d3f6      	bcc.n	8003238 <CopyDataInit>
  ldr r2, =_sbss
 800324a:	4a0a      	ldr	r2, [pc, #40]	; (8003274 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800324c:	e002      	b.n	8003254 <LoopFillZerobss>

0800324e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800324e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003250:	f842 3b04 	str.w	r3, [r2], #4

08003254 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003254:	4b08      	ldr	r3, [pc, #32]	; (8003278 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003256:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003258:	d3f9      	bcc.n	800324e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800325a:	f7ff fbe3 	bl	8002a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800325e:	f005 fc1b 	bl	8008a98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003262:	f7ff f827 	bl	80022b4 <main>
  bx lr
 8003266:	4770      	bx	lr
  ldr r3, =_sidata
 8003268:	08008fcc 	.word	0x08008fcc
  ldr r0, =_sdata
 800326c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003270:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 8003274:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 8003278:	20001644 	.word	0x20001644

0800327c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800327c:	e7fe      	b.n	800327c <ADC1_2_IRQHandler>
	...

08003280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003284:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <HAL_Init+0x28>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <HAL_Init+0x28>)
 800328a:	f043 0310 	orr.w	r3, r3, #16
 800328e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003290:	2003      	movs	r0, #3
 8003292:	f000 f923 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003296:	2000      	movs	r0, #0
 8003298:	f000 f808 	bl	80032ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800329c:	f7ff fa4e 	bl	800273c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	40022000 	.word	0x40022000

080032ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b4:	4b12      	ldr	r3, [pc, #72]	; (8003300 <HAL_InitTick+0x54>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x58>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	4619      	mov	r1, r3
 80032be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80032c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 f93b 	bl	8003546 <HAL_SYSTICK_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00e      	b.n	80032f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b0f      	cmp	r3, #15
 80032de:	d80a      	bhi.n	80032f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e0:	2200      	movs	r2, #0
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f000 f903 	bl	80034f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032ec:	4a06      	ldr	r2, [pc, #24]	; (8003308 <HAL_InitTick+0x5c>)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000000 	.word	0x20000000
 8003304:	2000000c 	.word	0x2000000c
 8003308:	20000008 	.word	0x20000008

0800330c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003310:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_IncTick+0x1c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	461a      	mov	r2, r3
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <HAL_IncTick+0x20>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4413      	add	r3, r2
 800331c:	4a03      	ldr	r2, [pc, #12]	; (800332c <HAL_IncTick+0x20>)
 800331e:	6013      	str	r3, [r2, #0]
}
 8003320:	bf00      	nop
 8003322:	46bd      	mov	sp, r7
 8003324:	bc80      	pop	{r7}
 8003326:	4770      	bx	lr
 8003328:	2000000c 	.word	0x2000000c
 800332c:	2000073c 	.word	0x2000073c

08003330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003330:	b480      	push	{r7}
 8003332:	af00      	add	r7, sp, #0
  return uwTick;
 8003334:	4b02      	ldr	r3, [pc, #8]	; (8003340 <HAL_GetTick+0x10>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr
 8003340:	2000073c 	.word	0x2000073c

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800336c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003376:	4a04      	ldr	r2, [pc, #16]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	60d3      	str	r3, [r2, #12]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	e000ed00 	.word	0xe000ed00

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4906      	ldr	r1, [pc, #24]	; (80033dc <__NVIC_EnableIRQ+0x34>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	e000e100 	.word	0xe000e100

080033e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	6039      	str	r1, [r7, #0]
 80033ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	db0a      	blt.n	800340a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	490c      	ldr	r1, [pc, #48]	; (800342c <__NVIC_SetPriority+0x4c>)
 80033fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fe:	0112      	lsls	r2, r2, #4
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	440b      	add	r3, r1
 8003404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003408:	e00a      	b.n	8003420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <__NVIC_SetPriority+0x50>)
 8003410:	79fb      	ldrb	r3, [r7, #7]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	3b04      	subs	r3, #4
 8003418:	0112      	lsls	r2, r2, #4
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	440b      	add	r3, r1
 800341e:	761a      	strb	r2, [r3, #24]
}
 8003420:	bf00      	nop
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	bc80      	pop	{r7}
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003434:	b480      	push	{r7}
 8003436:	b089      	sub	sp, #36	; 0x24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f003 0307 	and.w	r3, r3, #7
 8003446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f1c3 0307 	rsb	r3, r3, #7
 800344e:	2b04      	cmp	r3, #4
 8003450:	bf28      	it	cs
 8003452:	2304      	movcs	r3, #4
 8003454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	3304      	adds	r3, #4
 800345a:	2b06      	cmp	r3, #6
 800345c:	d902      	bls.n	8003464 <NVIC_EncodePriority+0x30>
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	3b03      	subs	r3, #3
 8003462:	e000      	b.n	8003466 <NVIC_EncodePriority+0x32>
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003468:	f04f 32ff 	mov.w	r2, #4294967295
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43da      	mvns	r2, r3
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	401a      	ands	r2, r3
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800347c:	f04f 31ff 	mov.w	r1, #4294967295
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	fa01 f303 	lsl.w	r3, r1, r3
 8003486:	43d9      	mvns	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800348c:	4313      	orrs	r3, r2
         );
}
 800348e:	4618      	mov	r0, r3
 8003490:	3724      	adds	r7, #36	; 0x24
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff90 	bl	80033e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff2d 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff42 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff90 	bl	8003434 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5f 	bl	80033e0 <__NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff35 	bl	80033a8 <__NVIC_EnableIRQ>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffa2 	bl	8003498 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e00e      	b.n	800358e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	795b      	ldrb	r3, [r3, #5]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d105      	bne.n	8003586 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f7ff f90d 	bl	80027a0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003598:	b480      	push	{r7}
 800359a:	b08b      	sub	sp, #44	; 0x2c
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80035a6:	2300      	movs	r3, #0
 80035a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035aa:	e127      	b.n	80037fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80035ac:	2201      	movs	r2, #1
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	f040 8116 	bne.w	80037f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b12      	cmp	r3, #18
 80035d0:	d034      	beq.n	800363c <HAL_GPIO_Init+0xa4>
 80035d2:	2b12      	cmp	r3, #18
 80035d4:	d80d      	bhi.n	80035f2 <HAL_GPIO_Init+0x5a>
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d02b      	beq.n	8003632 <HAL_GPIO_Init+0x9a>
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d804      	bhi.n	80035e8 <HAL_GPIO_Init+0x50>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d031      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d01c      	beq.n	8003620 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80035e6:	e048      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035e8:	2b03      	cmp	r3, #3
 80035ea:	d043      	beq.n	8003674 <HAL_GPIO_Init+0xdc>
 80035ec:	2b11      	cmp	r3, #17
 80035ee:	d01b      	beq.n	8003628 <HAL_GPIO_Init+0x90>
          break;
 80035f0:	e043      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80035f2:	4a89      	ldr	r2, [pc, #548]	; (8003818 <HAL_GPIO_Init+0x280>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d026      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 80035f8:	4a87      	ldr	r2, [pc, #540]	; (8003818 <HAL_GPIO_Init+0x280>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d806      	bhi.n	800360c <HAL_GPIO_Init+0x74>
 80035fe:	4a87      	ldr	r2, [pc, #540]	; (800381c <HAL_GPIO_Init+0x284>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d020      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003604:	4a86      	ldr	r2, [pc, #536]	; (8003820 <HAL_GPIO_Init+0x288>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01d      	beq.n	8003646 <HAL_GPIO_Init+0xae>
          break;
 800360a:	e036      	b.n	800367a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800360c:	4a85      	ldr	r2, [pc, #532]	; (8003824 <HAL_GPIO_Init+0x28c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d019      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003612:	4a85      	ldr	r2, [pc, #532]	; (8003828 <HAL_GPIO_Init+0x290>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d016      	beq.n	8003646 <HAL_GPIO_Init+0xae>
 8003618:	4a84      	ldr	r2, [pc, #528]	; (800382c <HAL_GPIO_Init+0x294>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d013      	beq.n	8003646 <HAL_GPIO_Init+0xae>
          break;
 800361e:	e02c      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	623b      	str	r3, [r7, #32]
          break;
 8003626:	e028      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	3304      	adds	r3, #4
 800362e:	623b      	str	r3, [r7, #32]
          break;
 8003630:	e023      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	3308      	adds	r3, #8
 8003638:	623b      	str	r3, [r7, #32]
          break;
 800363a:	e01e      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	330c      	adds	r3, #12
 8003642:	623b      	str	r3, [r7, #32]
          break;
 8003644:	e019      	b.n	800367a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d102      	bne.n	8003654 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800364e:	2304      	movs	r3, #4
 8003650:	623b      	str	r3, [r7, #32]
          break;
 8003652:	e012      	b.n	800367a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800365c:	2308      	movs	r3, #8
 800365e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69fa      	ldr	r2, [r7, #28]
 8003664:	611a      	str	r2, [r3, #16]
          break;
 8003666:	e008      	b.n	800367a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003668:	2308      	movs	r3, #8
 800366a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	615a      	str	r2, [r3, #20]
          break;
 8003672:	e002      	b.n	800367a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003674:	2300      	movs	r3, #0
 8003676:	623b      	str	r3, [r7, #32]
          break;
 8003678:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	2bff      	cmp	r3, #255	; 0xff
 800367e:	d801      	bhi.n	8003684 <HAL_GPIO_Init+0xec>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	e001      	b.n	8003688 <HAL_GPIO_Init+0xf0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	3304      	adds	r3, #4
 8003688:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2bff      	cmp	r3, #255	; 0xff
 800368e:	d802      	bhi.n	8003696 <HAL_GPIO_Init+0xfe>
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	e002      	b.n	800369c <HAL_GPIO_Init+0x104>
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	3b08      	subs	r3, #8
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	210f      	movs	r1, #15
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	fa01 f303 	lsl.w	r3, r1, r3
 80036aa:	43db      	mvns	r3, r3
 80036ac:	401a      	ands	r2, r3
 80036ae:	6a39      	ldr	r1, [r7, #32]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	431a      	orrs	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 8096 	beq.w	80037f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80036ca:	4b59      	ldr	r3, [pc, #356]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6193      	str	r3, [r2, #24]
 80036d6:	4b56      	ldr	r3, [pc, #344]	; (8003830 <HAL_GPIO_Init+0x298>)
 80036d8:	699b      	ldr	r3, [r3, #24]
 80036da:	f003 0301 	and.w	r3, r3, #1
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80036e2:	4a54      	ldr	r2, [pc, #336]	; (8003834 <HAL_GPIO_Init+0x29c>)
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	089b      	lsrs	r3, r3, #2
 80036e8:	3302      	adds	r3, #2
 80036ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	f003 0303 	and.w	r3, r3, #3
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	220f      	movs	r2, #15
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43db      	mvns	r3, r3
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	4013      	ands	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4b      	ldr	r2, [pc, #300]	; (8003838 <HAL_GPIO_Init+0x2a0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <HAL_GPIO_Init+0x19e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4a      	ldr	r2, [pc, #296]	; (800383c <HAL_GPIO_Init+0x2a4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00d      	beq.n	8003732 <HAL_GPIO_Init+0x19a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a49      	ldr	r2, [pc, #292]	; (8003840 <HAL_GPIO_Init+0x2a8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <HAL_GPIO_Init+0x196>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a48      	ldr	r2, [pc, #288]	; (8003844 <HAL_GPIO_Init+0x2ac>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_GPIO_Init+0x192>
 8003726:	2303      	movs	r3, #3
 8003728:	e006      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 800372a:	2304      	movs	r3, #4
 800372c:	e004      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 800372e:	2302      	movs	r3, #2
 8003730:	e002      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_GPIO_Init+0x1a0>
 8003736:	2300      	movs	r3, #0
 8003738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373a:	f002 0203 	and.w	r2, r2, #3
 800373e:	0092      	lsls	r2, r2, #2
 8003740:	4093      	lsls	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003748:	493a      	ldr	r1, [pc, #232]	; (8003834 <HAL_GPIO_Init+0x29c>)
 800374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374c:	089b      	lsrs	r3, r3, #2
 800374e:	3302      	adds	r3, #2
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	4938      	ldr	r1, [pc, #224]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	600b      	str	r3, [r1, #0]
 800376e:	e006      	b.n	800377e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	43db      	mvns	r3, r3
 8003778:	4933      	ldr	r1, [pc, #204]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800377a:	4013      	ands	r3, r2
 800377c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d006      	beq.n	8003798 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800378a:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	492e      	ldr	r1, [pc, #184]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	604b      	str	r3, [r1, #4]
 8003796:	e006      	b.n	80037a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003798:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	43db      	mvns	r3, r3
 80037a0:	4929      	ldr	r1, [pc, #164]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	4924      	ldr	r1, [pc, #144]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
 80037be:	e006      	b.n	80037ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037c2:	689a      	ldr	r2, [r3, #8]
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	43db      	mvns	r3, r3
 80037c8:	491f      	ldr	r1, [pc, #124]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	491a      	ldr	r1, [pc, #104]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60cb      	str	r3, [r1, #12]
 80037e6:	e006      	b.n	80037f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	43db      	mvns	r3, r3
 80037f0:	4915      	ldr	r1, [pc, #84]	; (8003848 <HAL_GPIO_Init+0x2b0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	3301      	adds	r3, #1
 80037fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	f47f aed0 	bne.w	80035ac <HAL_GPIO_Init+0x14>
  }
}
 800380c:	bf00      	nop
 800380e:	372c      	adds	r7, #44	; 0x2c
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	10210000 	.word	0x10210000
 800381c:	10110000 	.word	0x10110000
 8003820:	10120000 	.word	0x10120000
 8003824:	10310000 	.word	0x10310000
 8003828:	10320000 	.word	0x10320000
 800382c:	10220000 	.word	0x10220000
 8003830:	40021000 	.word	0x40021000
 8003834:	40010000 	.word	0x40010000
 8003838:	40010800 	.word	0x40010800
 800383c:	40010c00 	.word	0x40010c00
 8003840:	40011000 	.word	0x40011000
 8003844:	40011400 	.word	0x40011400
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
 8003858:	4613      	mov	r3, r2
 800385a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800385c:	787b      	ldrb	r3, [r7, #1]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800386a:	887b      	ldrh	r3, [r7, #2]
 800386c:	041a      	lsls	r2, r3, #16
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	611a      	str	r2, [r3, #16]
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr

0800387c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003894:	887a      	ldrh	r2, [r7, #2]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800389a:	e002      	b.n	80038a2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800389c:	887a      	ldrh	r2, [r7, #2]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	611a      	str	r2, [r3, #16]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bc80      	pop	{r7}
 80038aa:	4770      	bx	lr

080038ac <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038ae:	b08b      	sub	sp, #44	; 0x2c
 80038b0:	af06      	add	r7, sp, #24
 80038b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0d3      	b.n	8003a66 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f004 fe3c 	bl	8008550 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2203      	movs	r2, #3
 80038dc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 ff94 	bl	8005812 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	603b      	str	r3, [r7, #0]
 80038f0:	687e      	ldr	r6, [r7, #4]
 80038f2:	466d      	mov	r5, sp
 80038f4:	f106 0410 	add.w	r4, r6, #16
 80038f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	602b      	str	r3, [r5, #0]
 8003900:	1d33      	adds	r3, r6, #4
 8003902:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003904:	6838      	ldr	r0, [r7, #0]
 8003906:	f001 ff5d 	bl	80057c4 <USB_CoreInit>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d005      	beq.n	800391c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0a4      	b.n	8003a66 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f001 ff91 	bl	800584a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
 800392c:	e035      	b.n	800399a <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	015b      	lsls	r3, r3, #5
 8003934:	4413      	add	r3, r2
 8003936:	3329      	adds	r3, #41	; 0x29
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	015b      	lsls	r3, r3, #5
 8003942:	4413      	add	r3, r2
 8003944:	3328      	adds	r3, #40	; 0x28
 8003946:	7bfa      	ldrb	r2, [r7, #15]
 8003948:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	b291      	uxth	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	015b      	lsls	r3, r3, #5
 8003954:	4413      	add	r3, r2
 8003956:	3336      	adds	r3, #54	; 0x36
 8003958:	460a      	mov	r2, r1
 800395a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800395c:	7bfb      	ldrb	r3, [r7, #15]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	015b      	lsls	r3, r3, #5
 8003962:	4413      	add	r3, r2
 8003964:	332b      	adds	r3, #43	; 0x2b
 8003966:	2200      	movs	r2, #0
 8003968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	015b      	lsls	r3, r3, #5
 8003970:	4413      	add	r3, r2
 8003972:	3338      	adds	r3, #56	; 0x38
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	015b      	lsls	r3, r3, #5
 800397e:	4413      	add	r3, r2
 8003980:	333c      	adds	r3, #60	; 0x3c
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	3302      	adds	r3, #2
 800398c:	015b      	lsls	r3, r3, #5
 800398e:	4413      	add	r3, r2
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	3301      	adds	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
 800399a:	7bfa      	ldrb	r2, [r7, #15]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d3c4      	bcc.n	800392e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	e031      	b.n	8003a0e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	015b      	lsls	r3, r3, #5
 80039b0:	4413      	add	r3, r2
 80039b2:	f203 1329 	addw	r3, r3, #297	; 0x129
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	015b      	lsls	r3, r3, #5
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80039c6:	7bfa      	ldrb	r2, [r7, #15]
 80039c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	015b      	lsls	r3, r3, #5
 80039d0:	4413      	add	r3, r2
 80039d2:	f203 132b 	addw	r3, r3, #299	; 0x12b
 80039d6:	2200      	movs	r2, #0
 80039d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80039da:	7bfb      	ldrb	r3, [r7, #15]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	015b      	lsls	r3, r3, #5
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80039e6:	2200      	movs	r2, #0
 80039e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	015b      	lsls	r3, r3, #5
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	330a      	adds	r3, #10
 8003a00:	015b      	lsls	r3, r3, #5
 8003a02:	4413      	add	r3, r2
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a08:	7bfb      	ldrb	r3, [r7, #15]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
 8003a0e:	7bfa      	ldrb	r2, [r7, #15]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d3c8      	bcc.n	80039aa <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	687e      	ldr	r6, [r7, #4]
 8003a20:	466d      	mov	r5, sp
 8003a22:	f106 0410 	add.w	r4, r6, #16
 8003a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a2a:	6823      	ldr	r3, [r4, #0]
 8003a2c:	602b      	str	r3, [r5, #0]
 8003a2e:	1d33      	adds	r3, r6, #4
 8003a30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a32:	6838      	ldr	r0, [r7, #0]
 8003a34:	f001 ff15 	bl	8005862 <USB_DevInit>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2202      	movs	r2, #2
 8003a42:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e00d      	b.n	8003a66 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f002 ff53 	bl	800690a <USB_DevDisconnect>

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a6e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_PCD_Start+0x16>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e016      	b.n	8003ab2 <HAL_PCD_Start+0x44>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f004 ffc5 	bl	8008a1e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f002 ff2c 	bl	80068f6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fe9e 	bl	80057e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f002 ff29 	bl	800691e <USB_ReadInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad6:	d102      	bne.n	8003ade <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 faf3 	bl	80040c4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f002 ff1b 	bl	800691e <USB_ReadInterrupts>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af2:	d112      	bne.n	8003b1a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b06:	b292      	uxth	r2, r2
 8003b08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f004 fd94 	bl	800863a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003b12:	2100      	movs	r1, #0
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f8de 	bl	8003cd6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 fefd 	bl	800691e <USB_ReadInterrupts>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b2e:	d10b      	bne.n	8003b48 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b42:	b292      	uxth	r2, r2
 8003b44:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f002 fee6 	bl	800691e <USB_ReadInterrupts>
 8003b52:	4603      	mov	r3, r0
 8003b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b5c:	d10b      	bne.n	8003b76 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b70:	b292      	uxth	r2, r2
 8003b72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f002 fecf 	bl	800691e <USB_ReadInterrupts>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d126      	bne.n	8003bda <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b94:	b29a      	uxth	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f022 0204 	bic.w	r2, r2, #4
 8003b9e:	b292      	uxth	r2, r2
 8003ba0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0208 	bic.w	r2, r2, #8
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f004 fd75 	bl	80086ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bd4:	b292      	uxth	r2, r2
 8003bd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4618      	mov	r0, r3
 8003be0:	f002 fe9d 	bl	800691e <USB_ReadInterrupts>
 8003be4:	4603      	mov	r3, r0
 8003be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bee:	d13d      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003bf8:	b29a      	uxth	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f042 0208 	orr.w	r2, r2, #8
 8003c02:	b292      	uxth	r2, r2
 8003c04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0204 	orr.w	r2, r2, #4
 8003c32:	b292      	uxth	r2, r2
 8003c34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 fe6e 	bl	800691e <USB_ReadInterrupts>
 8003c42:	4603      	mov	r3, r0
 8003c44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4c:	d10b      	bne.n	8003c66 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c60:	b292      	uxth	r2, r2
 8003c62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f004 fd06 	bl	8008678 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f002 fe54 	bl	800691e <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c80:	d10e      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c94:	b292      	uxth	r2, r2
 8003c96:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f004 fcbf 	bl	800861e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fe3a 	bl	800691e <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb4:	d10b      	bne.n	8003cce <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cbe:	b29a      	uxth	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cc8:	b292      	uxth	r2, r2
 8003cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003cce:	bf00      	nop
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_PCD_SetAddress+0x1a>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e013      	b.n	8003d18 <HAL_PCD_SetAddress+0x42>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f002 fde1 	bl	80068d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	4608      	mov	r0, r1
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4603      	mov	r3, r0
 8003d30:	70fb      	strb	r3, [r7, #3]
 8003d32:	460b      	mov	r3, r1
 8003d34:	803b      	strh	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	da0b      	bge.n	8003d5e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	015b      	lsls	r3, r3, #5
 8003d4e:	3328      	adds	r3, #40	; 0x28
 8003d50:	687a      	ldr	r2, [r7, #4]
 8003d52:	4413      	add	r3, r2
 8003d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	705a      	strb	r2, [r3, #1]
 8003d5c:	e00b      	b.n	8003d76 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 0307 	and.w	r3, r3, #7
 8003d64:	015b      	lsls	r3, r3, #5
 8003d66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d6a:	687a      	ldr	r2, [r7, #4]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2200      	movs	r2, #0
 8003d74:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003d76:	78fb      	ldrb	r3, [r7, #3]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003d82:	883a      	ldrh	r2, [r7, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	78ba      	ldrb	r2, [r7, #2]
 8003d8c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	785b      	ldrb	r3, [r3, #1]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d004      	beq.n	8003da0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003da0:	78bb      	ldrb	r3, [r7, #2]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d102      	bne.n	8003dac <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <HAL_PCD_EP_Open+0x9a>
 8003db6:	2302      	movs	r3, #2
 8003db8:	e00e      	b.n	8003dd8 <HAL_PCD_EP_Open+0xb8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68f9      	ldr	r1, [r7, #12]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 fd6f 	bl	80058ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003dec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	da0b      	bge.n	8003e0c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	015b      	lsls	r3, r3, #5
 8003dfc:	3328      	adds	r3, #40	; 0x28
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	705a      	strb	r2, [r3, #1]
 8003e0a:	e00b      	b.n	8003e24 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e0c:	78fb      	ldrb	r3, [r7, #3]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	015b      	lsls	r3, r3, #5
 8003e14:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e24:	78fb      	ldrb	r3, [r7, #3]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d101      	bne.n	8003e3e <HAL_PCD_EP_Close+0x5e>
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	e00e      	b.n	8003e5c <HAL_PCD_EP_Close+0x7c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 f81b 	bl	8005e88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	607a      	str	r2, [r7, #4]
 8003e6e:	603b      	str	r3, [r7, #0]
 8003e70:	460b      	mov	r3, r1
 8003e72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e74:	7afb      	ldrb	r3, [r7, #11]
 8003e76:	f003 0307 	and.w	r3, r3, #7
 8003e7a:	015b      	lsls	r3, r3, #5
 8003e7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	2200      	movs	r2, #0
 8003e96:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e9e:	7afb      	ldrb	r3, [r7, #11]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d106      	bne.n	8003ec2 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6979      	ldr	r1, [r7, #20]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f002 f97a 	bl	80061b4 <USB_EPStartXfer>
 8003ec0:	e005      	b.n	8003ece <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6979      	ldr	r1, [r7, #20]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f002 f973 	bl	80061b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	330a      	adds	r3, #10
 8003eee:	015b      	lsls	r3, r3, #5
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	681b      	ldr	r3, [r3, #0]
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr

08003f00 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	f003 0307 	and.w	r3, r3, #7
 8003f16:	015b      	lsls	r3, r3, #5
 8003f18:	3328      	adds	r3, #40	; 0x28
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2201      	movs	r2, #1
 8003f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d106      	bne.n	8003f5c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 f92d 	bl	80061b4 <USB_EPStartXfer>
 8003f5a:	e005      	b.n	8003f68 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6979      	ldr	r1, [r7, #20]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 f926 	bl	80061b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b084      	sub	sp, #16
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 0207 	and.w	r2, r3, #7
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d901      	bls.n	8003f90 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e046      	b.n	800401e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	da0b      	bge.n	8003fb0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	015b      	lsls	r3, r3, #5
 8003fa0:	3328      	adds	r3, #40	; 0x28
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2201      	movs	r2, #1
 8003fac:	705a      	strb	r2, [r3, #1]
 8003fae:	e009      	b.n	8003fc4 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4413      	add	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	f003 0307 	and.w	r3, r3, #7
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_PCD_EP_SetStall+0x72>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e01c      	b.n	800401e <HAL_PCD_EP_SetStall+0xac>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68f9      	ldr	r1, [r7, #12]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f002 fb96 	bl	8006724 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ff8:	78fb      	ldrb	r3, [r7, #3]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d108      	bne.n	8004014 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800400c:	4619      	mov	r1, r3
 800400e:	4610      	mov	r0, r2
 8004010:	f002 fc94 	bl	800693c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 020f 	and.w	r2, r3, #15
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	429a      	cmp	r2, r3
 800403e:	d901      	bls.n	8004044 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e03a      	b.n	80040ba <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004044:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004048:	2b00      	cmp	r3, #0
 800404a:	da0b      	bge.n	8004064 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	015b      	lsls	r3, r3, #5
 8004054:	3328      	adds	r3, #40	; 0x28
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4413      	add	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2201      	movs	r2, #1
 8004060:	705a      	strb	r2, [r3, #1]
 8004062:	e00b      	b.n	800407c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	015b      	lsls	r3, r3, #5
 800406c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004082:	78fb      	ldrb	r3, [r7, #3]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_PCD_EP_ClrStall+0x76>
 8004098:	2302      	movs	r3, #2
 800409a:	e00e      	b.n	80040ba <HAL_PCD_EP_ClrStall+0x94>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68f9      	ldr	r1, [r7, #12]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 fb7c 	bl	80067a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
	...

080040c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80040c4:	b590      	push	{r4, r7, lr}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80040cc:	e282      	b.n	80045d4 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80040d6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80040d8:	8afb      	ldrh	r3, [r7, #22]
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80040e2:	7d7b      	ldrb	r3, [r7, #21]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f040 8142 	bne.w	800436e <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80040ea:	8afb      	ldrh	r3, [r7, #22]
 80040ec:	f003 0310 	and.w	r3, r3, #16
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d151      	bne.n	8004198 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004104:	b29c      	uxth	r4, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800410e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004112:	b29b      	uxth	r3, r3
 8004114:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3328      	adds	r3, #40	; 0x28
 800411a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004124:	b29b      	uxth	r3, r3
 8004126:	461a      	mov	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	3302      	adds	r3, #2
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	695a      	ldr	r2, [r3, #20]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	441a      	add	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004156:	2100      	movs	r1, #0
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f004 fa49 	bl	80085f0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	f000 8234 	beq.w	80045d4 <PCD_EP_ISR_Handler+0x510>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	f040 822f 	bne.w	80045d4 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	b292      	uxth	r2, r2
 800418a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004196:	e21d      	b.n	80045d4 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800419e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80041a8:	8a7b      	ldrh	r3, [r7, #18]
 80041aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d033      	beq.n	800421a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	461a      	mov	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	3306      	adds	r3, #6
 80041c8:	005b      	lsls	r3, r3, #1
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6812      	ldr	r2, [r2, #0]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6818      	ldr	r0, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f002 fbf2 	bl	80069da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	881b      	ldrh	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004202:	4013      	ands	r3, r2
 8004204:	b29c      	uxth	r4, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800420e:	b292      	uxth	r2, r2
 8004210:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f004 f9c2 	bl	800859c <HAL_PCD_SetupStageCallback>
 8004218:	e1dc      	b.n	80045d4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800421a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f280 81d8 	bge.w	80045d4 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29a      	uxth	r2, r3
 800422c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004230:	4013      	ands	r3, r2
 8004232:	b29c      	uxth	r4, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800423c:	b292      	uxth	r2, r2
 800423e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004248:	b29b      	uxth	r3, r3
 800424a:	461a      	mov	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	4413      	add	r3, r2
 8004254:	3306      	adds	r3, #6
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d019      	beq.n	80042a8 <PCD_EP_ISR_Handler+0x1e4>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6959      	ldr	r1, [r3, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800428c:	b29b      	uxth	r3, r3
 800428e:	f002 fba4 	bl	80069da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	441a      	add	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f004 f98c 	bl	80085c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	461c      	mov	r4, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	441c      	add	r4, r3
 80042ba:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80042be:	461c      	mov	r4, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10e      	bne.n	80042e6 <PCD_EP_ISR_Handler+0x222>
 80042c8:	8823      	ldrh	r3, [r4, #0]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	8023      	strh	r3, [r4, #0]
 80042d4:	8823      	ldrh	r3, [r4, #0]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	8023      	strh	r3, [r4, #0]
 80042e4:	e02d      	b.n	8004342 <PCD_EP_ISR_Handler+0x27e>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	2b3e      	cmp	r3, #62	; 0x3e
 80042ec:	d812      	bhi.n	8004314 <PCD_EP_ISR_Handler+0x250>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	085b      	lsrs	r3, r3, #1
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <PCD_EP_ISR_Handler+0x244>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	3301      	adds	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	b29b      	uxth	r3, r3
 800430c:	029b      	lsls	r3, r3, #10
 800430e:	b29b      	uxth	r3, r3
 8004310:	8023      	strh	r3, [r4, #0]
 8004312:	e016      	b.n	8004342 <PCD_EP_ISR_Handler+0x27e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	095b      	lsrs	r3, r3, #5
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <PCD_EP_ISR_Handler+0x26a>
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	3b01      	subs	r3, #1
 800432c:	61bb      	str	r3, [r7, #24]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	b29b      	uxth	r3, r3
 8004332:	029b      	lsls	r3, r3, #10
 8004334:	b29b      	uxth	r3, r3
 8004336:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800433a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800433e:	b29b      	uxth	r3, r3
 8004340:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	881b      	ldrh	r3, [r3, #0]
 8004348:	b29b      	uxth	r3, r3
 800434a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	b29c      	uxth	r4, r3
 8004354:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004358:	b29c      	uxth	r4, r3
 800435a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800435e:	b29c      	uxth	r4, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	4ba2      	ldr	r3, [pc, #648]	; (80045f0 <PCD_EP_ISR_Handler+0x52c>)
 8004366:	4323      	orrs	r3, r4
 8004368:	b29b      	uxth	r3, r3
 800436a:	8013      	strh	r3, [r2, #0]
 800436c:	e132      	b.n	80045d4 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	7d7b      	ldrb	r3, [r7, #21]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800437e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004382:	2b00      	cmp	r3, #0
 8004384:	f280 80d1 	bge.w	800452a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	7d7b      	ldrb	r3, [r7, #21]
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	881b      	ldrh	r3, [r3, #0]
 8004396:	b29a      	uxth	r2, r3
 8004398:	f640 738f 	movw	r3, #3983	; 0xf8f
 800439c:	4013      	ands	r3, r2
 800439e:	b29c      	uxth	r4, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	461a      	mov	r2, r3
 80043a6:	7d7b      	ldrb	r3, [r7, #21]
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80043b0:	b292      	uxth	r2, r2
 80043b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80043b4:	7d7b      	ldrb	r3, [r7, #21]
 80043b6:	015b      	lsls	r3, r3, #5
 80043b8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	4413      	add	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	7b1b      	ldrb	r3, [r3, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d121      	bne.n	800440e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	461a      	mov	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	4413      	add	r3, r2
 80043de:	3306      	adds	r3, #6
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6812      	ldr	r2, [r2, #0]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043f2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80043f4:	8bfb      	ldrh	r3, [r7, #30]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d072      	beq.n	80044e0 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6959      	ldr	r1, [r3, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	88da      	ldrh	r2, [r3, #6]
 8004406:	8bfb      	ldrh	r3, [r7, #30]
 8004408:	f002 fae7 	bl	80069da <USB_ReadPMA>
 800440c:	e068      	b.n	80044e0 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b29b      	uxth	r3, r3
 8004420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d021      	beq.n	800446c <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004430:	b29b      	uxth	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	781b      	ldrb	r3, [r3, #0]
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	4413      	add	r3, r2
 800443c:	3302      	adds	r3, #2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6812      	ldr	r2, [r2, #0]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800444a:	881b      	ldrh	r3, [r3, #0]
 800444c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004450:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004452:	8bfb      	ldrh	r3, [r7, #30]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d02a      	beq.n	80044ae <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6818      	ldr	r0, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6959      	ldr	r1, [r3, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	891a      	ldrh	r2, [r3, #8]
 8004464:	8bfb      	ldrh	r3, [r7, #30]
 8004466:	f002 fab8 	bl	80069da <USB_ReadPMA>
 800446a:	e020      	b.n	80044ae <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	461a      	mov	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	3306      	adds	r3, #6
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	4413      	add	r3, r2
 800448a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800448e:	881b      	ldrh	r3, [r3, #0]
 8004490:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004494:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004496:	8bfb      	ldrh	r3, [r7, #30]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d008      	beq.n	80044ae <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6959      	ldr	r1, [r3, #20]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	895a      	ldrh	r2, [r3, #10]
 80044a8:	8bfb      	ldrh	r3, [r7, #30]
 80044aa:	f002 fa96 	bl	80069da <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c8:	b29c      	uxth	r4, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	461a      	mov	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	441a      	add	r2, r3
 80044d8:	4b46      	ldr	r3, [pc, #280]	; (80045f4 <PCD_EP_ISR_Handler+0x530>)
 80044da:	4323      	orrs	r3, r4
 80044dc:	b29b      	uxth	r3, r3
 80044de:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	69da      	ldr	r2, [r3, #28]
 80044e4:	8bfb      	ldrh	r3, [r7, #30]
 80044e6:	441a      	add	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	8bfb      	ldrh	r3, [r7, #30]
 80044f2:	441a      	add	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d004      	beq.n	800450a <PCD_EP_ISR_Handler+0x446>
 8004500:	8bfa      	ldrh	r2, [r7, #30]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	429a      	cmp	r2, r3
 8004508:	d206      	bcs.n	8004518 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	4619      	mov	r1, r3
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f004 f855 	bl	80085c0 <HAL_PCD_DataOutStageCallback>
 8004516:	e008      	b.n	800452a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	7819      	ldrb	r1, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	695a      	ldr	r2, [r3, #20]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	6878      	ldr	r0, [r7, #4]
 8004526:	f7ff fc9d 	bl	8003e64 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800452a:	8a7b      	ldrh	r3, [r7, #18]
 800452c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004530:	2b00      	cmp	r3, #0
 8004532:	d04f      	beq.n	80045d4 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8004534:	7d7b      	ldrb	r3, [r7, #21]
 8004536:	015b      	lsls	r3, r3, #5
 8004538:	3328      	adds	r3, #40	; 0x28
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	4413      	add	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	7d7b      	ldrb	r3, [r7, #21]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	881b      	ldrh	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004558:	b29c      	uxth	r4, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	461a      	mov	r2, r3
 8004560:	7d7b      	ldrb	r3, [r7, #21]
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	441a      	add	r2, r3
 8004566:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800456a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800456e:	b29b      	uxth	r3, r3
 8004570:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800457a:	b29b      	uxth	r3, r3
 800457c:	461a      	mov	r2, r3
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	3302      	adds	r3, #2
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	4413      	add	r3, r2
 8004590:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004594:	881b      	ldrh	r3, [r3, #0]
 8004596:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	695a      	ldr	r2, [r3, #20]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	441a      	add	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	4619      	mov	r1, r3
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f004 f818 	bl	80085f0 <HAL_PCD_DataInStageCallback>
 80045c0:	e008      	b.n	80045d4 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	7819      	ldrb	r1, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	695a      	ldr	r2, [r3, #20]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff fc96 	bl	8003f00 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045dc:	b29b      	uxth	r3, r3
 80045de:	b21b      	sxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f6ff ad74 	blt.w	80040ce <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3724      	adds	r7, #36	; 0x24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd90      	pop	{r4, r7, pc}
 80045f0:	ffff8080 	.word	0xffff8080
 80045f4:	ffff80c0 	.word	0xffff80c0

080045f8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607b      	str	r3, [r7, #4]
 8004602:	460b      	mov	r3, r1
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	4613      	mov	r3, r2
 8004608:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800460a:	897b      	ldrh	r3, [r7, #10]
 800460c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004616:	897b      	ldrh	r3, [r7, #10]
 8004618:	f003 0307 	and.w	r3, r3, #7
 800461c:	015b      	lsls	r3, r3, #5
 800461e:	3328      	adds	r3, #40	; 0x28
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e006      	b.n	8004636 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004628:	897b      	ldrh	r3, [r7, #10]
 800462a:	015b      	lsls	r3, r3, #5
 800462c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	4413      	add	r3, r2
 8004634:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004636:	893b      	ldrh	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2200      	movs	r2, #0
 8004640:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	b29a      	uxth	r2, r3
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	80da      	strh	r2, [r3, #6]
 800464a:	e00b      	b.n	8004664 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	2201      	movs	r2, #1
 8004650:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	b29a      	uxth	r2, r3
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	b29a      	uxth	r2, r3
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	371c      	adds	r7, #28
 800466a:	46bd      	mov	sp, r7
 800466c:	bc80      	pop	{r7}
 800466e:	4770      	bx	lr

08004670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e26c      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8087 	beq.w	800479e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004690:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b04      	cmp	r3, #4
 800469a:	d00c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d112      	bne.n	80046ce <HAL_RCC_OscConfig+0x5e>
 80046a8:	4b8c      	ldr	r3, [pc, #560]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d10b      	bne.n	80046ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b6:	4b89      	ldr	r3, [pc, #548]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d06c      	beq.n	800479c <HAL_RCC_OscConfig+0x12c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d168      	bne.n	800479c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e246      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x76>
 80046d8:	4b80      	ldr	r3, [pc, #512]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7f      	ldr	r2, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7a      	ldr	r2, [pc, #488]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b78      	ldr	r3, [pc, #480]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a77      	ldr	r2, [pc, #476]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0xbc>
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a71      	ldr	r2, [pc, #452]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 800472c:	4b6b      	ldr	r3, [pc, #428]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a67      	ldr	r2, [pc, #412]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe fdf0 	bl	8003330 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe fdec 	bl	8003330 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1fa      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xe4>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fe fddc 	bl	8003330 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fe fdd8 	bl	8003330 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1e6      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x10c>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x18c>
 80047c2:	4b46      	ldr	r3, [pc, #280]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x176>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1ba      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e03a      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_RCC_OscConfig+0x270>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fe fd91 	bl	8003330 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004812:	f7fe fd8d 	bl	8003330 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e19b      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4927      	ldr	r1, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCC_OscConfig+0x270>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe fd70 	bl	8003330 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fe fd6c 	bl	8003330 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e17a      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d03a      	beq.n	80048f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d019      	beq.n	80048ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <HAL_RCC_OscConfig+0x274>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fe fd50 	bl	8003330 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7fe fd4c 	bl	8003330 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e15a      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f000 faa8 	bl	8004e08 <RCC_Delay>
 80048b8:	e01c      	b.n	80048f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_OscConfig+0x274>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c0:	f7fe fd36 	bl	8003330 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c6:	e00f      	b.n	80048e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c8:	f7fe fd32 	bl	8003330 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d908      	bls.n	80048e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e140      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	42420000 	.word	0x42420000
 80048e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b9e      	ldr	r3, [pc, #632]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e9      	bne.n	80048c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a6 	beq.w	8004a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b97      	ldr	r3, [pc, #604]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	4b94      	ldr	r3, [pc, #592]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4a93      	ldr	r2, [pc, #588]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	61d3      	str	r3, [r2, #28]
 800491e:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	4b8e      	ldr	r3, [pc, #568]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d118      	bne.n	800496c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493a:	4b8b      	ldr	r3, [pc, #556]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a8a      	ldr	r2, [pc, #552]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fe fcf3 	bl	8003330 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7fe fcef 	bl	8003330 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e0fd      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x312>
 8004974:	4b7b      	ldr	r3, [pc, #492]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4a7a      	ldr	r2, [pc, #488]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6213      	str	r3, [r2, #32]
 8004980:	e02d      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x334>
 800498a:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a75      	ldr	r2, [pc, #468]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a72      	ldr	r2, [pc, #456]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	e01c      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x356>
 80049ac:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4a6c      	ldr	r2, [pc, #432]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6213      	str	r3, [r2, #32]
 80049b8:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a69      	ldr	r2, [pc, #420]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	e00b      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 80049c6:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6213      	str	r3, [r2, #32]
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a63      	ldr	r2, [pc, #396]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d015      	beq.n	8004a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e6:	f7fe fca3 	bl	8003330 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fe fc9f 	bl	8003330 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0ab      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ee      	beq.n	80049ee <HAL_RCC_OscConfig+0x37e>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a12:	f7fe fc8d 	bl	8003330 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fe fc89 	bl	8003330 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e095      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ee      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b48      	ldr	r3, [pc, #288]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8081 	beq.w	8004b5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d061      	beq.n	8004b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d146      	bne.n	8004afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fe fc5d 	bl	8003330 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fe fc59 	bl	8003330 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e067      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d108      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a19      	ldr	r1, [r3, #32]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	4927      	ldr	r1, [pc, #156]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fe fc2d 	bl	8003330 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe fc29 	bl	8003330 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e037      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x46a>
 8004af8:	e02f      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fe fc16 	bl	8003330 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe fc12 	bl	8003330 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e020      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x498>
 8004b26:	e018      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e013      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42420060 	.word	0x42420060

08004b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0d0      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b6a      	ldr	r3, [pc, #424]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d910      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b67      	ldr	r3, [pc, #412]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	4965      	ldr	r1, [pc, #404]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b8      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be4:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	494d      	ldr	r1, [pc, #308]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d040      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d115      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e073      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06b      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4936      	ldr	r1, [pc, #216]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fe fb66 	bl	8003330 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fe fb62 	bl	8003330 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e053      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d210      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4922      	ldr	r1, [pc, #136]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e032      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4916      	ldr	r1, [pc, #88]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	490e      	ldr	r1, [pc, #56]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cfe:	f000 f821 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004d02:	4601      	mov	r1, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	5cd3      	ldrb	r3, [r2, r3]
 8004d12:	fa21 f303 	lsr.w	r3, r1, r3
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_RCC_ClockConfig+0x1cc>)
 8004d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fe fac4 	bl	80032ac <HAL_InitTick>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08008ea4 	.word	0x08008ea4
 8004d3c:	20000000 	.word	0x20000000
 8004d40:	20000008 	.word	0x20000008

08004d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	b490      	push	{r4, r7}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004d4a:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004d4c:	1d3c      	adds	r4, r7, #4
 8004d4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004d54:	4b28      	ldr	r3, [pc, #160]	; (8004df8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004d56:	881b      	ldrh	r3, [r3, #0]
 8004d58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
 8004d62:	2300      	movs	r3, #0
 8004d64:	627b      	str	r3, [r7, #36]	; 0x24
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d6e:	4b23      	ldr	r3, [pc, #140]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f003 030c 	and.w	r3, r3, #12
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	d002      	beq.n	8004d84 <HAL_RCC_GetSysClockFreq+0x40>
 8004d7e:	2b08      	cmp	r3, #8
 8004d80:	d003      	beq.n	8004d8a <HAL_RCC_GetSysClockFreq+0x46>
 8004d82:	e02d      	b.n	8004de0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d84:	4b1e      	ldr	r3, [pc, #120]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d86:	623b      	str	r3, [r7, #32]
      break;
 8004d88:	e02d      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	0c9b      	lsrs	r3, r3, #18
 8004d8e:	f003 030f 	and.w	r3, r3, #15
 8004d92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004d96:	4413      	add	r3, r2
 8004d98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004d9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d013      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0c5b      	lsrs	r3, r3, #17
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004db6:	4413      	add	r3, r2
 8004db8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004dbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004dc2:	fb02 f203 	mul.w	r2, r2, r3
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004dce:	e004      	b.n	8004dda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4a0c      	ldr	r2, [pc, #48]	; (8004e04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004dd4:	fb02 f303 	mul.w	r3, r2, r3
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	623b      	str	r3, [r7, #32]
      break;
 8004dde:	e002      	b.n	8004de6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004de0:	4b07      	ldr	r3, [pc, #28]	; (8004e00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004de2:	623b      	str	r3, [r7, #32]
      break;
 8004de4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004de6:	6a3b      	ldr	r3, [r7, #32]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3728      	adds	r7, #40	; 0x28
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc90      	pop	{r4, r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	08008e68 	.word	0x08008e68
 8004df8:	08008e78 	.word	0x08008e78
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	007a1200 	.word	0x007a1200
 8004e04:	003d0900 	.word	0x003d0900

08004e08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <RCC_Delay+0x34>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0a      	ldr	r2, [pc, #40]	; (8004e40 <RCC_Delay+0x38>)
 8004e16:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1a:	0a5b      	lsrs	r3, r3, #9
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e24:	bf00      	nop
  }
  while (Delay --);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1e5a      	subs	r2, r3, #1
 8004e2a:	60fa      	str	r2, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f9      	bne.n	8004e24 <RCC_Delay+0x1c>
}
 8004e30:	bf00      	nop
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bc80      	pop	{r7}
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20000000 	.word	0x20000000
 8004e40:	10624dd3 	.word	0x10624dd3

08004e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	613b      	str	r3, [r7, #16]
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d07d      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004e60:	2300      	movs	r3, #0
 8004e62:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e64:	4b4f      	ldr	r3, [pc, #316]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e66:	69db      	ldr	r3, [r3, #28]
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10d      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e70:	4b4c      	ldr	r3, [pc, #304]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4a4b      	ldr	r2, [pc, #300]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	61d3      	str	r3, [r2, #28]
 8004e7c:	4b49      	ldr	r3, [pc, #292]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e8c:	4b46      	ldr	r3, [pc, #280]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d118      	bne.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e98:	4b43      	ldr	r3, [pc, #268]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a42      	ldr	r2, [pc, #264]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ea4:	f7fe fa44 	bl	8003330 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eaa:	e008      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eac:	f7fe fa40 	bl	8003330 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b64      	cmp	r3, #100	; 0x64
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e06d      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ebe:	4b3a      	ldr	r3, [pc, #232]	; (8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eca:	4b36      	ldr	r3, [pc, #216]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d02e      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d027      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef2:	4b2e      	ldr	r3, [pc, #184]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef8:	4b2c      	ldr	r3, [pc, #176]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004efa:	2200      	movs	r2, #0
 8004efc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004efe:	4a29      	ldr	r2, [pc, #164]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fe fa0f 	bl	8003330 <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fe fa0b 	bl	8003330 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e036      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	4b1d      	ldr	r3, [pc, #116]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ee      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	4917      	ldr	r1, [pc, #92]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d105      	bne.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f50:	4b14      	ldr	r3, [pc, #80]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d008      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	490b      	ldr	r1, [pc, #44]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f76:	4313      	orrs	r3, r2
 8004f78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0310 	and.w	r3, r3, #16
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d008      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	4904      	ldr	r1, [pc, #16]	; (8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f94:	4313      	orrs	r3, r2
 8004f96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	40007000 	.word	0x40007000
 8004fac:	42420440 	.word	0x42420440

08004fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d101      	bne.n	8004fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e053      	b.n	800506a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fd fbfd 	bl	80027dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685a      	ldr	r2, [r3, #4]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	431a      	orrs	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800501e:	431a      	orrs	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	69db      	ldr	r3, [r3, #28]
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	ea42 0103 	orr.w	r1, r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	699b      	ldr	r3, [r3, #24]
 800503e:	0c1a      	lsrs	r2, r3, #16
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f002 0204 	and.w	r2, r2, #4
 8005048:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69da      	ldr	r2, [r3, #28]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005058:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e01d      	b.n	80050c0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fd fbe9 	bl	8002870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3304      	adds	r3, #4
 80050ae:	4619      	mov	r1, r3
 80050b0:	4610      	mov	r0, r2
 80050b2:	f000 fa39 	bl	8005528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050be:	2300      	movs	r3, #0
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3708      	adds	r7, #8
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	f003 0307 	and.w	r3, r3, #7
 80050ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b06      	cmp	r3, #6
 80050f0:	d007      	beq.n	8005102 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0201 	orr.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	bc80      	pop	{r7}
 800510c:	4770      	bx	lr

0800510e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800510e:	b480      	push	{r7}
 8005110:	b083      	sub	sp, #12
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0201 	bic.w	r2, r2, #1
 8005124:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6a1a      	ldr	r2, [r3, #32]
 800512c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005130:	4013      	ands	r3, r2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10f      	bne.n	8005156 <HAL_TIM_Base_Stop_IT+0x48>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f240 4344 	movw	r3, #1092	; 0x444
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d107      	bne.n	8005156 <HAL_TIM_Base_Stop_IT+0x48>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 0201 	bic.w	r2, r2, #1
 8005154:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b082      	sub	sp, #8
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0302 	and.w	r3, r3, #2
 8005174:	2b02      	cmp	r3, #2
 8005176:	d122      	bne.n	80051be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b02      	cmp	r3, #2
 8005184:	d11b      	bne.n	80051be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f06f 0202 	mvn.w	r2, #2
 800518e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d003      	beq.n	80051ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f9a4 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 80051aa:	e005      	b.n	80051b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f997 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f9a6 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d122      	bne.n	8005212 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68db      	ldr	r3, [r3, #12]
 80051d2:	f003 0304 	and.w	r3, r3, #4
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d11b      	bne.n	8005212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f06f 0204 	mvn.w	r2, #4
 80051e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f97a 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 80051fe:	e005      	b.n	800520c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f96d 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f000 f97c 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b08      	cmp	r3, #8
 800521e:	d122      	bne.n	8005266 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d11b      	bne.n	8005266 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f06f 0208 	mvn.w	r2, #8
 8005236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2204      	movs	r2, #4
 800523c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d003      	beq.n	8005254 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f000 f950 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 8005252:	e005      	b.n	8005260 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 f943 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 f952 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d122      	bne.n	80052ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d11b      	bne.n	80052ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f06f 0210 	mvn.w	r2, #16
 800528a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2208      	movs	r2, #8
 8005290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	69db      	ldr	r3, [r3, #28]
 8005298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f926 	bl	80054f2 <HAL_TIM_IC_CaptureCallback>
 80052a6:	e005      	b.n	80052b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f919 	bl	80054e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f928 	bl	8005504 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0201 	mvn.w	r2, #1
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7fd fbd3 	bl	8002a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f0:	2b80      	cmp	r3, #128	; 0x80
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa50 	bl	80057b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f8ec 	bl	8005516 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b20      	cmp	r3, #32
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b20      	cmp	r3, #32
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0220 	mvn.w	r2, #32
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 fa1b 	bl	80057a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b084      	sub	sp, #16
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005382:	2b01      	cmp	r3, #1
 8005384:	d101      	bne.n	800538a <HAL_TIM_ConfigClockSource+0x18>
 8005386:	2302      	movs	r3, #2
 8005388:	e0a6      	b.n	80054d8 <HAL_TIM_ConfigClockSource+0x166>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2201      	movs	r2, #1
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2202      	movs	r2, #2
 8005396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b40      	cmp	r3, #64	; 0x40
 80053c0:	d067      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x120>
 80053c2:	2b40      	cmp	r3, #64	; 0x40
 80053c4:	d80b      	bhi.n	80053de <HAL_TIM_ConfigClockSource+0x6c>
 80053c6:	2b10      	cmp	r3, #16
 80053c8:	d073      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x140>
 80053ca:	2b10      	cmp	r3, #16
 80053cc:	d802      	bhi.n	80053d4 <HAL_TIM_ConfigClockSource+0x62>
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d06f      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053d2:	e078      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d06c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x140>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d06a      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053dc:	e073      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053de:	2b70      	cmp	r3, #112	; 0x70
 80053e0:	d00d      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x8c>
 80053e2:	2b70      	cmp	r3, #112	; 0x70
 80053e4:	d804      	bhi.n	80053f0 <HAL_TIM_ConfigClockSource+0x7e>
 80053e6:	2b50      	cmp	r3, #80	; 0x50
 80053e8:	d033      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xe0>
 80053ea:	2b60      	cmp	r3, #96	; 0x60
 80053ec:	d041      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053ee:	e06a      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053f4:	d066      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x152>
 80053f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053fa:	d017      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053fc:	e063      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f000 f964 	bl	80056da <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005420:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e04c      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f000 f94d 	bl	80056da <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e039      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f000 f8c4 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	; 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f91b 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005470:	e029      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	f000 f8e2 	bl	8005648 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2160      	movs	r1, #96	; 0x60
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f90b 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 8005490:	e019      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 f8a4 	bl	80055ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f8fb 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80054b0:	e009      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f000 f8f2 	bl	80056a6 <TIM_ITRx_SetConfig>
      break;
 80054c2:	e000      	b.n	80054c6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3710      	adds	r7, #16
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00b      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005546:	d007      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a26      	ldr	r2, [pc, #152]	; (80055e4 <TIM_Base_SetConfig+0xbc>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d003      	beq.n	8005558 <TIM_Base_SetConfig+0x30>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <TIM_Base_SetConfig+0xc0>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d108      	bne.n	800556a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a19      	ldr	r2, [pc, #100]	; (80055e4 <TIM_Base_SetConfig+0xbc>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0x62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a18      	ldr	r2, [pc, #96]	; (80055e8 <TIM_Base_SetConfig+0xc0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <TIM_Base_SetConfig+0xb8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d103      	bne.n	80055d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	691a      	ldr	r2, [r3, #16]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	615a      	str	r2, [r3, #20]
}
 80055d6:	bf00      	nop
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40000400 	.word	0x40000400
 80055e8:	40000800 	.word	0x40000800

080055ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f023 0201 	bic.w	r2, r3, #1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 030a 	bic.w	r3, r3, #10
 8005628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	697a      	ldr	r2, [r7, #20]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr

08005648 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005648:	b480      	push	{r7}
 800564a:	b087      	sub	sp, #28
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f023 0210 	bic.w	r2, r3, #16
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005672:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	031b      	lsls	r3, r3, #12
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bc80      	pop	{r7}
 80056a4:	4770      	bx	lr

080056a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
 80056ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	f043 0307 	orr.w	r3, r3, #7
 80056c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	609a      	str	r2, [r3, #8]
}
 80056d0:	bf00      	nop
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bc80      	pop	{r7}
 80056d8:	4770      	bx	lr

080056da <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056da:	b480      	push	{r7}
 80056dc:	b087      	sub	sp, #28
 80056de:	af00      	add	r7, sp, #0
 80056e0:	60f8      	str	r0, [r7, #12]
 80056e2:	60b9      	str	r1, [r7, #8]
 80056e4:	607a      	str	r2, [r7, #4]
 80056e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	021a      	lsls	r2, r3, #8
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	4313      	orrs	r3, r2
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	609a      	str	r2, [r3, #8]
}
 800570e:	bf00      	nop
 8005710:	371c      	adds	r7, #28
 8005712:	46bd      	mov	sp, r7
 8005714:	bc80      	pop	{r7}
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005718:	b480      	push	{r7}
 800571a:	b085      	sub	sp, #20
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800572c:	2302      	movs	r3, #2
 800572e:	e032      	b.n	8005796 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2202      	movs	r2, #2
 800573c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005756:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4313      	orrs	r3, r2
 8005760:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005768:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	4313      	orrs	r3, r2
 8005772:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bc80      	pop	{r7}
 80057b0:	4770      	bx	lr

080057b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057b2:	b480      	push	{r7}
 80057b4:	b083      	sub	sp, #12
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr

080057c4 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80057c4:	b084      	sub	sp, #16
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
 80057ce:	f107 0014 	add.w	r0, r7, #20
 80057d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	370c      	adds	r7, #12
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	b004      	add	sp, #16
 80057e2:	4770      	bx	lr

080057e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80057ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80057f0:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80057f8:	b29a      	uxth	r2, r3
 80057fa:	89fb      	ldrh	r3, [r7, #14]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29a      	uxth	r2, r3
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	3714      	adds	r7, #20
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800581a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800581e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005826:	b29b      	uxth	r3, r3
 8005828:	b21a      	sxth	r2, r3
 800582a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800582e:	43db      	mvns	r3, r3
 8005830:	b21b      	sxth	r3, r3
 8005832:	4013      	ands	r3, r2
 8005834:	b21b      	sxth	r3, r3
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr

0800584a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	460b      	mov	r3, r1
 8005854:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	bc80      	pop	{r7}
 8005860:	4770      	bx	lr

08005862 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005862:	b084      	sub	sp, #16
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	f107 0014 	add.w	r0, r7, #20
 8005870:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ffa5 	bl	80057e4 <USB_EnableGlobalInt>

  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	3708      	adds	r7, #8
 80058a0:	46bd      	mov	sp, r7
 80058a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058a6:	b004      	add	sp, #16
 80058a8:	4770      	bx	lr
	...

080058ac <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80058ac:	b490      	push	{r4, r7}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	881b      	ldrh	r3, [r3, #0]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80058cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d0:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d819      	bhi.n	800590e <USB_ActivateEndpoint+0x62>
 80058da:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <USB_ActivateEndpoint+0x34>)
 80058dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e0:	080058f1 	.word	0x080058f1
 80058e4:	08005905 	.word	0x08005905
 80058e8:	08005915 	.word	0x08005915
 80058ec:	080058fb 	.word	0x080058fb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80058f0:	89bb      	ldrh	r3, [r7, #12]
 80058f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058f6:	81bb      	strh	r3, [r7, #12]
      break;
 80058f8:	e00d      	b.n	8005916 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80058fa:	89bb      	ldrh	r3, [r7, #12]
 80058fc:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005900:	81bb      	strh	r3, [r7, #12]
      break;
 8005902:	e008      	b.n	8005916 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005904:	89bb      	ldrh	r3, [r7, #12]
 8005906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800590a:	81bb      	strh	r3, [r7, #12]
      break;
 800590c:	e003      	b.n	8005916 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	73fb      	strb	r3, [r7, #15]
      break;
 8005912:	e000      	b.n	8005916 <USB_ActivateEndpoint+0x6a>
      break;
 8005914:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	89bb      	ldrh	r3, [r7, #12]
 8005922:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005926:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800592a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800592e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005932:	b29b      	uxth	r3, r3
 8005934:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	881b      	ldrh	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800594c:	b29a      	uxth	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b29b      	uxth	r3, r3
 8005954:	4313      	orrs	r3, r2
 8005956:	b29c      	uxth	r4, r3
 8005958:	687a      	ldr	r2, [r7, #4]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	441a      	add	r2, r3
 8005962:	4b8a      	ldr	r3, [pc, #552]	; (8005b8c <USB_ActivateEndpoint+0x2e0>)
 8005964:	4323      	orrs	r3, r4
 8005966:	b29b      	uxth	r3, r3
 8005968:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	7b1b      	ldrb	r3, [r3, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f040 8112 	bne.w	8005b98 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	785b      	ldrb	r3, [r3, #1]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d067      	beq.n	8005a4c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800597c:	687c      	ldr	r4, [r7, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005984:	b29b      	uxth	r3, r3
 8005986:	441c      	add	r4, r3
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	011b      	lsls	r3, r3, #4
 800598e:	4423      	add	r3, r4
 8005990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005994:	461c      	mov	r4, r3
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	88db      	ldrh	r3, [r3, #6]
 800599a:	085b      	lsrs	r3, r3, #1
 800599c:	b29b      	uxth	r3, r3
 800599e:	005b      	lsls	r3, r3, #1
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	881b      	ldrh	r3, [r3, #0]
 80059b0:	b29c      	uxth	r4, r3
 80059b2:	4623      	mov	r3, r4
 80059b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d014      	beq.n	80059e6 <USB_ActivateEndpoint+0x13a>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	b29c      	uxth	r4, r3
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	441a      	add	r2, r3
 80059de:	4b6c      	ldr	r3, [pc, #432]	; (8005b90 <USB_ActivateEndpoint+0x2e4>)
 80059e0:	4323      	orrs	r3, r4
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	78db      	ldrb	r3, [r3, #3]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d018      	beq.n	8005a20 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	881b      	ldrh	r3, [r3, #0]
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a04:	b29c      	uxth	r4, r3
 8005a06:	f084 0320 	eor.w	r3, r4, #32
 8005a0a:	b29c      	uxth	r4, r3
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	441a      	add	r2, r3
 8005a16:	4b5d      	ldr	r3, [pc, #372]	; (8005b8c <USB_ActivateEndpoint+0x2e0>)
 8005a18:	4323      	orrs	r3, r4
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	8013      	strh	r3, [r2, #0]
 8005a1e:	e22b      	b.n	8005e78 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	4413      	add	r3, r2
 8005a2a:	881b      	ldrh	r3, [r3, #0]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a36:	b29c      	uxth	r4, r3
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	441a      	add	r2, r3
 8005a42:	4b52      	ldr	r3, [pc, #328]	; (8005b8c <USB_ActivateEndpoint+0x2e0>)
 8005a44:	4323      	orrs	r3, r4
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	8013      	strh	r3, [r2, #0]
 8005a4a:	e215      	b.n	8005e78 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005a4c:	687c      	ldr	r4, [r7, #4]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	441c      	add	r4, r3
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	4423      	add	r3, r4
 8005a60:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a64:	461c      	mov	r4, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	88db      	ldrh	r3, [r3, #6]
 8005a6a:	085b      	lsrs	r3, r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005a74:	687c      	ldr	r4, [r7, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	441c      	add	r4, r3
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4423      	add	r3, r4
 8005a88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a8c:	461c      	mov	r4, r3
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10e      	bne.n	8005ab4 <USB_ActivateEndpoint+0x208>
 8005a96:	8823      	ldrh	r3, [r4, #0]
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	8023      	strh	r3, [r4, #0]
 8005aa2:	8823      	ldrh	r3, [r4, #0]
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	8023      	strh	r3, [r4, #0]
 8005ab2:	e02d      	b.n	8005b10 <USB_ActivateEndpoint+0x264>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aba:	d812      	bhi.n	8005ae2 <USB_ActivateEndpoint+0x236>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d002      	beq.n	8005ad6 <USB_ActivateEndpoint+0x22a>
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8023      	strh	r3, [r4, #0]
 8005ae0:	e016      	b.n	8005b10 <USB_ActivateEndpoint+0x264>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	60bb      	str	r3, [r7, #8]
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d102      	bne.n	8005afc <USB_ActivateEndpoint+0x250>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	029b      	lsls	r3, r3, #10
 8005b02:	b29b      	uxth	r3, r3
 8005b04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	009b      	lsls	r3, r3, #2
 8005b18:	4413      	add	r3, r2
 8005b1a:	881b      	ldrh	r3, [r3, #0]
 8005b1c:	b29c      	uxth	r4, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d014      	beq.n	8005b52 <USB_ActivateEndpoint+0x2a6>
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	b29c      	uxth	r4, r3
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	441a      	add	r2, r3
 8005b4a:	4b12      	ldr	r3, [pc, #72]	; (8005b94 <USB_ActivateEndpoint+0x2e8>)
 8005b4c:	4323      	orrs	r3, r4
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b68:	b29c      	uxth	r4, r3
 8005b6a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b6e:	b29c      	uxth	r4, r3
 8005b70:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b74:	b29c      	uxth	r4, r3
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	441a      	add	r2, r3
 8005b80:	4b02      	ldr	r3, [pc, #8]	; (8005b8c <USB_ActivateEndpoint+0x2e0>)
 8005b82:	4323      	orrs	r3, r4
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	8013      	strh	r3, [r2, #0]
 8005b88:	e176      	b.n	8005e78 <USB_ActivateEndpoint+0x5cc>
 8005b8a:	bf00      	nop
 8005b8c:	ffff8080 	.word	0xffff8080
 8005b90:	ffff80c0 	.word	0xffff80c0
 8005b94:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bae:	b29c      	uxth	r4, r3
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	441a      	add	r2, r3
 8005bba:	4b96      	ldr	r3, [pc, #600]	; (8005e14 <USB_ActivateEndpoint+0x568>)
 8005bbc:	4323      	orrs	r3, r4
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005bc2:	687c      	ldr	r4, [r7, #4]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	441c      	add	r4, r3
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	4423      	add	r3, r4
 8005bd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bda:	461c      	mov	r4, r3
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	891b      	ldrh	r3, [r3, #8]
 8005be0:	085b      	lsrs	r3, r3, #1
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8023      	strh	r3, [r4, #0]
 8005bea:	687c      	ldr	r4, [r7, #4]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	441c      	add	r4, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	4423      	add	r3, r4
 8005bfe:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005c02:	461c      	mov	r4, r3
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	895b      	ldrh	r3, [r3, #10]
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	785b      	ldrb	r3, [r3, #1]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 8088 	bne.w	8005d2c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	009b      	lsls	r3, r3, #2
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	b29c      	uxth	r4, r3
 8005c2a:	4623      	mov	r3, r4
 8005c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d014      	beq.n	8005c5e <USB_ActivateEndpoint+0x3b2>
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	881b      	ldrh	r3, [r3, #0]
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c4a:	b29c      	uxth	r4, r3
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	441a      	add	r2, r3
 8005c56:	4b70      	ldr	r3, [pc, #448]	; (8005e18 <USB_ActivateEndpoint+0x56c>)
 8005c58:	4323      	orrs	r3, r4
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	b29c      	uxth	r4, r3
 8005c6c:	4623      	mov	r3, r4
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d014      	beq.n	8005ca0 <USB_ActivateEndpoint+0x3f4>
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c8c:	b29c      	uxth	r4, r3
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	441a      	add	r2, r3
 8005c98:	4b60      	ldr	r3, [pc, #384]	; (8005e1c <USB_ActivateEndpoint+0x570>)
 8005c9a:	4323      	orrs	r3, r4
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	b29c      	uxth	r4, r3
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	441a      	add	r2, r3
 8005cc2:	4b56      	ldr	r3, [pc, #344]	; (8005e1c <USB_ActivateEndpoint+0x570>)
 8005cc4:	4323      	orrs	r3, r4
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ce0:	b29c      	uxth	r4, r3
 8005ce2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005ce6:	b29c      	uxth	r4, r3
 8005ce8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005cec:	b29c      	uxth	r4, r3
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	441a      	add	r2, r3
 8005cf8:	4b49      	ldr	r3, [pc, #292]	; (8005e20 <USB_ActivateEndpoint+0x574>)
 8005cfa:	4323      	orrs	r3, r4
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d16:	b29c      	uxth	r4, r3
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	441a      	add	r2, r3
 8005d22:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <USB_ActivateEndpoint+0x574>)
 8005d24:	4323      	orrs	r3, r4
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	8013      	strh	r3, [r2, #0]
 8005d2a:	e0a5      	b.n	8005e78 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	881b      	ldrh	r3, [r3, #0]
 8005d38:	b29c      	uxth	r4, r3
 8005d3a:	4623      	mov	r3, r4
 8005d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d014      	beq.n	8005d6e <USB_ActivateEndpoint+0x4c2>
 8005d44:	687a      	ldr	r2, [r7, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	881b      	ldrh	r3, [r3, #0]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5a:	b29c      	uxth	r4, r3
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	441a      	add	r2, r3
 8005d66:	4b2c      	ldr	r3, [pc, #176]	; (8005e18 <USB_ActivateEndpoint+0x56c>)
 8005d68:	4323      	orrs	r3, r4
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29c      	uxth	r4, r3
 8005d7c:	4623      	mov	r3, r4
 8005d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d014      	beq.n	8005db0 <USB_ActivateEndpoint+0x504>
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	b29c      	uxth	r4, r3
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <USB_ActivateEndpoint+0x570>)
 8005daa:	4323      	orrs	r3, r4
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4413      	add	r3, r2
 8005dba:	881b      	ldrh	r3, [r3, #0]
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc6:	b29c      	uxth	r4, r3
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	441a      	add	r2, r3
 8005dd2:	4b11      	ldr	r3, [pc, #68]	; (8005e18 <USB_ActivateEndpoint+0x56c>)
 8005dd4:	4323      	orrs	r3, r4
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	78db      	ldrb	r3, [r3, #3]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d020      	beq.n	8005e24 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	4413      	add	r3, r2
 8005dec:	881b      	ldrh	r3, [r3, #0]
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005df8:	b29c      	uxth	r4, r3
 8005dfa:	f084 0320 	eor.w	r3, r4, #32
 8005dfe:	b29c      	uxth	r4, r3
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	781b      	ldrb	r3, [r3, #0]
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	441a      	add	r2, r3
 8005e0a:	4b05      	ldr	r3, [pc, #20]	; (8005e20 <USB_ActivateEndpoint+0x574>)
 8005e0c:	4323      	orrs	r3, r4
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	8013      	strh	r3, [r2, #0]
 8005e12:	e01c      	b.n	8005e4e <USB_ActivateEndpoint+0x5a2>
 8005e14:	ffff8180 	.word	0xffff8180
 8005e18:	ffffc080 	.word	0xffffc080
 8005e1c:	ffff80c0 	.word	0xffff80c0
 8005e20:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	4413      	add	r3, r2
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e3a:	b29c      	uxth	r4, r3
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	441a      	add	r2, r3
 8005e46:	4b0f      	ldr	r3, [pc, #60]	; (8005e84 <USB_ActivateEndpoint+0x5d8>)
 8005e48:	4323      	orrs	r3, r4
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	4413      	add	r3, r2
 8005e58:	881b      	ldrh	r3, [r3, #0]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e64:	b29c      	uxth	r4, r3
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	441a      	add	r2, r3
 8005e70:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <USB_ActivateEndpoint+0x5d8>)
 8005e72:	4323      	orrs	r3, r4
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bc90      	pop	{r4, r7}
 8005e82:	4770      	bx	lr
 8005e84:	ffff8080 	.word	0xffff8080

08005e88 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e88:	b490      	push	{r4, r7}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	7b1b      	ldrb	r3, [r3, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d171      	bne.n	8005f7e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	785b      	ldrb	r3, [r3, #1]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d036      	beq.n	8005f10 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	881b      	ldrh	r3, [r3, #0]
 8005eae:	b29c      	uxth	r4, r3
 8005eb0:	4623      	mov	r3, r4
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d014      	beq.n	8005ee4 <USB_DeactivateEndpoint+0x5c>
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	881b      	ldrh	r3, [r3, #0]
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ecc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed0:	b29c      	uxth	r4, r3
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	441a      	add	r2, r3
 8005edc:	4b6b      	ldr	r3, [pc, #428]	; (800608c <USB_DeactivateEndpoint+0x204>)
 8005ede:	4323      	orrs	r3, r4
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	4413      	add	r3, r2
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005efa:	b29c      	uxth	r4, r3
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	441a      	add	r2, r3
 8005f06:	4b62      	ldr	r3, [pc, #392]	; (8006090 <USB_DeactivateEndpoint+0x208>)
 8005f08:	4323      	orrs	r3, r4
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	8013      	strh	r3, [r2, #0]
 8005f0e:	e144      	b.n	800619a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	881b      	ldrh	r3, [r3, #0]
 8005f1c:	b29c      	uxth	r4, r3
 8005f1e:	4623      	mov	r3, r4
 8005f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d014      	beq.n	8005f52 <USB_DeactivateEndpoint+0xca>
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	b29c      	uxth	r4, r3
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	4b52      	ldr	r3, [pc, #328]	; (8006094 <USB_DeactivateEndpoint+0x20c>)
 8005f4c:	4323      	orrs	r3, r4
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f68:	b29c      	uxth	r4, r3
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	441a      	add	r2, r3
 8005f74:	4b46      	ldr	r3, [pc, #280]	; (8006090 <USB_DeactivateEndpoint+0x208>)
 8005f76:	4323      	orrs	r3, r4
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
 8005f7c:	e10d      	b.n	800619a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f040 8088 	bne.w	8006098 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	b29c      	uxth	r4, r3
 8005f96:	4623      	mov	r3, r4
 8005f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d014      	beq.n	8005fca <USB_DeactivateEndpoint+0x142>
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	b29c      	uxth	r4, r3
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	441a      	add	r2, r3
 8005fc2:	4b34      	ldr	r3, [pc, #208]	; (8006094 <USB_DeactivateEndpoint+0x20c>)
 8005fc4:	4323      	orrs	r3, r4
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29c      	uxth	r4, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d014      	beq.n	800600c <USB_DeactivateEndpoint+0x184>
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	881b      	ldrh	r3, [r3, #0]
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff8:	b29c      	uxth	r4, r3
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	441a      	add	r2, r3
 8006004:	4b21      	ldr	r3, [pc, #132]	; (800608c <USB_DeactivateEndpoint+0x204>)
 8006006:	4323      	orrs	r3, r4
 8006008:	b29b      	uxth	r3, r3
 800600a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	b29b      	uxth	r3, r3
 800601a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800601e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006022:	b29c      	uxth	r4, r3
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	4b17      	ldr	r3, [pc, #92]	; (800608c <USB_DeactivateEndpoint+0x204>)
 8006030:	4323      	orrs	r3, r4
 8006032:	b29b      	uxth	r3, r3
 8006034:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800604c:	b29c      	uxth	r4, r3
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	4b0d      	ldr	r3, [pc, #52]	; (8006090 <USB_DeactivateEndpoint+0x208>)
 800605a:	4323      	orrs	r3, r4
 800605c:	b29b      	uxth	r3, r3
 800605e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	881b      	ldrh	r3, [r3, #0]
 800606c:	b29b      	uxth	r3, r3
 800606e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006076:	b29c      	uxth	r4, r3
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	441a      	add	r2, r3
 8006082:	4b03      	ldr	r3, [pc, #12]	; (8006090 <USB_DeactivateEndpoint+0x208>)
 8006084:	4323      	orrs	r3, r4
 8006086:	b29b      	uxth	r3, r3
 8006088:	8013      	strh	r3, [r2, #0]
 800608a:	e086      	b.n	800619a <USB_DeactivateEndpoint+0x312>
 800608c:	ffff80c0 	.word	0xffff80c0
 8006090:	ffff8080 	.word	0xffff8080
 8006094:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29c      	uxth	r4, r3
 80060a6:	4623      	mov	r3, r4
 80060a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d014      	beq.n	80060da <USB_DeactivateEndpoint+0x252>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c6:	b29c      	uxth	r4, r3
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	781b      	ldrb	r3, [r3, #0]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	441a      	add	r2, r3
 80060d2:	4b35      	ldr	r3, [pc, #212]	; (80061a8 <USB_DeactivateEndpoint+0x320>)
 80060d4:	4323      	orrs	r3, r4
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29c      	uxth	r4, r3
 80060e8:	4623      	mov	r3, r4
 80060ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d014      	beq.n	800611c <USB_DeactivateEndpoint+0x294>
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	b29c      	uxth	r4, r3
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	4b25      	ldr	r3, [pc, #148]	; (80061ac <USB_DeactivateEndpoint+0x324>)
 8006116:	4323      	orrs	r3, r4
 8006118:	b29b      	uxth	r3, r3
 800611a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	881b      	ldrh	r3, [r3, #0]
 8006128:	b29b      	uxth	r3, r3
 800612a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	b29c      	uxth	r4, r3
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	441a      	add	r2, r3
 800613e:	4b1a      	ldr	r3, [pc, #104]	; (80061a8 <USB_DeactivateEndpoint+0x320>)
 8006140:	4323      	orrs	r3, r4
 8006142:	b29b      	uxth	r3, r3
 8006144:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	881b      	ldrh	r3, [r3, #0]
 8006152:	b29b      	uxth	r3, r3
 8006154:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	b29c      	uxth	r4, r3
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	009b      	lsls	r3, r3, #2
 8006166:	441a      	add	r2, r3
 8006168:	4b11      	ldr	r3, [pc, #68]	; (80061b0 <USB_DeactivateEndpoint+0x328>)
 800616a:	4323      	orrs	r3, r4
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	4413      	add	r3, r2
 800617a:	881b      	ldrh	r3, [r3, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006186:	b29c      	uxth	r4, r3
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <USB_DeactivateEndpoint+0x328>)
 8006194:	4323      	orrs	r3, r4
 8006196:	b29b      	uxth	r3, r3
 8006198:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3708      	adds	r7, #8
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bc90      	pop	{r4, r7}
 80061a4:	4770      	bx	lr
 80061a6:	bf00      	nop
 80061a8:	ffffc080 	.word	0xffffc080
 80061ac:	ffff80c0 	.word	0xffff80c0
 80061b0:	ffff8080 	.word	0xffff8080

080061b4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80061b4:	b590      	push	{r4, r7, lr}
 80061b6:	b08d      	sub	sp, #52	; 0x34
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	785b      	ldrb	r3, [r3, #1]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	f040 8160 	bne.w	8006488 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699a      	ldr	r2, [r3, #24]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d909      	bls.n	80061e8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	699a      	ldr	r2, [r3, #24]
 80061de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e0:	1ad2      	subs	r2, r2, r3
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	619a      	str	r2, [r3, #24]
 80061e6:	e005      	b.n	80061f4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2200      	movs	r2, #0
 80061f2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	7b1b      	ldrb	r3, [r3, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d119      	bne.n	8006230 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	6959      	ldr	r1, [r3, #20]
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	88da      	ldrh	r2, [r3, #6]
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	b29b      	uxth	r3, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fba2 	bl	8006952 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800620e:	687c      	ldr	r4, [r7, #4]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006216:	b29b      	uxth	r3, r3
 8006218:	441c      	add	r4, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	011b      	lsls	r3, r3, #4
 8006220:	4423      	add	r3, r4
 8006222:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006226:	461c      	mov	r4, r3
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	b29b      	uxth	r3, r3
 800622c:	8023      	strh	r3, [r4, #0]
 800622e:	e10f      	b.n	8006450 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	4413      	add	r3, r2
 800623a:	881b      	ldrh	r3, [r3, #0]
 800623c:	b29b      	uxth	r3, r3
 800623e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006242:	2b00      	cmp	r3, #0
 8006244:	d065      	beq.n	8006312 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006246:	687c      	ldr	r4, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	785b      	ldrb	r3, [r3, #1]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d148      	bne.n	80062e2 <USB_EPStartXfer+0x12e>
 8006250:	687c      	ldr	r4, [r7, #4]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	441c      	add	r4, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	4423      	add	r3, r4
 8006264:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006268:	461c      	mov	r4, r3
 800626a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10e      	bne.n	800628e <USB_EPStartXfer+0xda>
 8006270:	8823      	ldrh	r3, [r4, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006278:	b29b      	uxth	r3, r3
 800627a:	8023      	strh	r3, [r4, #0]
 800627c:	8823      	ldrh	r3, [r4, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006288:	b29b      	uxth	r3, r3
 800628a:	8023      	strh	r3, [r4, #0]
 800628c:	e03d      	b.n	800630a <USB_EPStartXfer+0x156>
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b3e      	cmp	r3, #62	; 0x3e
 8006292:	d810      	bhi.n	80062b6 <USB_EPStartXfer+0x102>
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	627b      	str	r3, [r7, #36]	; 0x24
 800629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629c:	f003 0301 	and.w	r3, r3, #1
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <USB_EPStartXfer+0xf6>
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	8023      	strh	r3, [r4, #0]
 80062b4:	e029      	b.n	800630a <USB_EPStartXfer+0x156>
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	095b      	lsrs	r3, r3, #5
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062be:	f003 031f 	and.w	r3, r3, #31
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d102      	bne.n	80062cc <USB_EPStartXfer+0x118>
 80062c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c8:	3b01      	subs	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	029b      	lsls	r3, r3, #10
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29b      	uxth	r3, r3
 80062de:	8023      	strh	r3, [r4, #0]
 80062e0:	e013      	b.n	800630a <USB_EPStartXfer+0x156>
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d10f      	bne.n	800630a <USB_EPStartXfer+0x156>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	441c      	add	r4, r3
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	4423      	add	r3, r4
 80062fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006304:	b29a      	uxth	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	895b      	ldrh	r3, [r3, #10]
 800630e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006310:	e063      	b.n	80063da <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	785b      	ldrb	r3, [r3, #1]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d148      	bne.n	80063ac <USB_EPStartXfer+0x1f8>
 800631a:	687c      	ldr	r4, [r7, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006322:	b29b      	uxth	r3, r3
 8006324:	441c      	add	r4, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	011b      	lsls	r3, r3, #4
 800632c:	4423      	add	r3, r4
 800632e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006332:	461c      	mov	r4, r3
 8006334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10e      	bne.n	8006358 <USB_EPStartXfer+0x1a4>
 800633a:	8823      	ldrh	r3, [r4, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006342:	b29b      	uxth	r3, r3
 8006344:	8023      	strh	r3, [r4, #0]
 8006346:	8823      	ldrh	r3, [r4, #0]
 8006348:	b29b      	uxth	r3, r3
 800634a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800634e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006352:	b29b      	uxth	r3, r3
 8006354:	8023      	strh	r3, [r4, #0]
 8006356:	e03d      	b.n	80063d4 <USB_EPStartXfer+0x220>
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	2b3e      	cmp	r3, #62	; 0x3e
 800635c:	d810      	bhi.n	8006380 <USB_EPStartXfer+0x1cc>
 800635e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006360:	085b      	lsrs	r3, r3, #1
 8006362:	623b      	str	r3, [r7, #32]
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	f003 0301 	and.w	r3, r3, #1
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <USB_EPStartXfer+0x1c0>
 800636e:	6a3b      	ldr	r3, [r7, #32]
 8006370:	3301      	adds	r3, #1
 8006372:	623b      	str	r3, [r7, #32]
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	b29b      	uxth	r3, r3
 8006378:	029b      	lsls	r3, r3, #10
 800637a:	b29b      	uxth	r3, r3
 800637c:	8023      	strh	r3, [r4, #0]
 800637e:	e029      	b.n	80063d4 <USB_EPStartXfer+0x220>
 8006380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006388:	f003 031f 	and.w	r3, r3, #31
 800638c:	2b00      	cmp	r3, #0
 800638e:	d102      	bne.n	8006396 <USB_EPStartXfer+0x1e2>
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	3b01      	subs	r3, #1
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29b      	uxth	r3, r3
 800639e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8023      	strh	r3, [r4, #0]
 80063aa:	e013      	b.n	80063d4 <USB_EPStartXfer+0x220>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10f      	bne.n	80063d4 <USB_EPStartXfer+0x220>
 80063b4:	687c      	ldr	r4, [r7, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063bc:	b29b      	uxth	r3, r3
 80063be:	441c      	add	r4, r3
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	4423      	add	r3, r4
 80063c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063cc:	461c      	mov	r4, r3
 80063ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	891b      	ldrh	r3, [r3, #8]
 80063d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6959      	ldr	r1, [r3, #20]
 80063de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e0:	b29b      	uxth	r3, r3
 80063e2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fab4 	bl	8006952 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	785b      	ldrb	r3, [r3, #1]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d115      	bne.n	800641e <USB_EPStartXfer+0x26a>
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	b29c      	uxth	r4, r3
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	4b9a      	ldr	r3, [pc, #616]	; (8006680 <USB_EPStartXfer+0x4cc>)
 8006416:	4323      	orrs	r3, r4
 8006418:	b29b      	uxth	r3, r3
 800641a:	8013      	strh	r3, [r2, #0]
 800641c:	e018      	b.n	8006450 <USB_EPStartXfer+0x29c>
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	785b      	ldrb	r3, [r3, #1]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d114      	bne.n	8006450 <USB_EPStartXfer+0x29c>
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	b29c      	uxth	r4, r3
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	4b8e      	ldr	r3, [pc, #568]	; (8006684 <USB_EPStartXfer+0x4d0>)
 800644a:	4323      	orrs	r3, r4
 800644c:	b29b      	uxth	r3, r3
 800644e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	4413      	add	r3, r2
 800645a:	881b      	ldrh	r3, [r3, #0]
 800645c:	b29b      	uxth	r3, r3
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006466:	b29c      	uxth	r4, r3
 8006468:	f084 0310 	eor.w	r3, r4, #16
 800646c:	b29c      	uxth	r4, r3
 800646e:	f084 0320 	eor.w	r3, r4, #32
 8006472:	b29c      	uxth	r4, r3
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	781b      	ldrb	r3, [r3, #0]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	441a      	add	r2, r3
 800647e:	4b82      	ldr	r3, [pc, #520]	; (8006688 <USB_EPStartXfer+0x4d4>)
 8006480:	4323      	orrs	r3, r4
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]
 8006486:	e146      	b.n	8006716 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	429a      	cmp	r2, r3
 8006492:	d909      	bls.n	80064a8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691b      	ldr	r3, [r3, #16]
 8006498:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	699a      	ldr	r2, [r3, #24]
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	1ad2      	subs	r2, r2, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	619a      	str	r2, [r3, #24]
 80064a6:	e005      	b.n	80064b4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	2200      	movs	r2, #0
 80064b2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d148      	bne.n	800654e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80064bc:	687c      	ldr	r4, [r7, #4]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	441c      	add	r4, r3
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	4423      	add	r3, r4
 80064d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064d4:	461c      	mov	r4, r3
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d10e      	bne.n	80064fa <USB_EPStartXfer+0x346>
 80064dc:	8823      	ldrh	r3, [r4, #0]
 80064de:	b29b      	uxth	r3, r3
 80064e0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	8023      	strh	r3, [r4, #0]
 80064e8:	8823      	ldrh	r3, [r4, #0]
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	8023      	strh	r3, [r4, #0]
 80064f8:	e0f2      	b.n	80066e0 <USB_EPStartXfer+0x52c>
 80064fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fc:	2b3e      	cmp	r3, #62	; 0x3e
 80064fe:	d810      	bhi.n	8006522 <USB_EPStartXfer+0x36e>
 8006500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006502:	085b      	lsrs	r3, r3, #1
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <USB_EPStartXfer+0x362>
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	3301      	adds	r3, #1
 8006514:	61fb      	str	r3, [r7, #28]
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	b29b      	uxth	r3, r3
 800651a:	029b      	lsls	r3, r3, #10
 800651c:	b29b      	uxth	r3, r3
 800651e:	8023      	strh	r3, [r4, #0]
 8006520:	e0de      	b.n	80066e0 <USB_EPStartXfer+0x52c>
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <USB_EPStartXfer+0x384>
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	3b01      	subs	r3, #1
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	b29b      	uxth	r3, r3
 800653c:	029b      	lsls	r3, r3, #10
 800653e:	b29b      	uxth	r3, r3
 8006540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006548:	b29b      	uxth	r3, r3
 800654a:	8023      	strh	r3, [r4, #0]
 800654c:	e0c8      	b.n	80066e0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d148      	bne.n	80065e8 <USB_EPStartXfer+0x434>
 8006556:	687c      	ldr	r4, [r7, #4]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800655e:	b29b      	uxth	r3, r3
 8006560:	441c      	add	r4, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	011b      	lsls	r3, r3, #4
 8006568:	4423      	add	r3, r4
 800656a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800656e:	461c      	mov	r4, r3
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10e      	bne.n	8006594 <USB_EPStartXfer+0x3e0>
 8006576:	8823      	ldrh	r3, [r4, #0]
 8006578:	b29b      	uxth	r3, r3
 800657a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800657e:	b29b      	uxth	r3, r3
 8006580:	8023      	strh	r3, [r4, #0]
 8006582:	8823      	ldrh	r3, [r4, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658e:	b29b      	uxth	r3, r3
 8006590:	8023      	strh	r3, [r4, #0]
 8006592:	e03d      	b.n	8006610 <USB_EPStartXfer+0x45c>
 8006594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006596:	2b3e      	cmp	r3, #62	; 0x3e
 8006598:	d810      	bhi.n	80065bc <USB_EPStartXfer+0x408>
 800659a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659c:	085b      	lsrs	r3, r3, #1
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <USB_EPStartXfer+0x3fc>
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	3301      	adds	r3, #1
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	029b      	lsls	r3, r3, #10
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	8023      	strh	r3, [r4, #0]
 80065ba:	e029      	b.n	8006610 <USB_EPStartXfer+0x45c>
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	095b      	lsrs	r3, r3, #5
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d102      	bne.n	80065d2 <USB_EPStartXfer+0x41e>
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	3b01      	subs	r3, #1
 80065d0:	61bb      	str	r3, [r7, #24]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	029b      	lsls	r3, r3, #10
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8023      	strh	r3, [r4, #0]
 80065e6:	e013      	b.n	8006610 <USB_EPStartXfer+0x45c>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	785b      	ldrb	r3, [r3, #1]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d10f      	bne.n	8006610 <USB_EPStartXfer+0x45c>
 80065f0:	687c      	ldr	r4, [r7, #4]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	441c      	add	r4, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	4423      	add	r3, r4
 8006604:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006608:	461c      	mov	r4, r3
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	b29b      	uxth	r3, r3
 800660e:	8023      	strh	r3, [r4, #0]
 8006610:	687c      	ldr	r4, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	785b      	ldrb	r3, [r3, #1]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d14e      	bne.n	80066b8 <USB_EPStartXfer+0x504>
 800661a:	687c      	ldr	r4, [r7, #4]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	441c      	add	r4, r3
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	4423      	add	r3, r4
 800662e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006632:	461c      	mov	r4, r3
 8006634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10e      	bne.n	8006658 <USB_EPStartXfer+0x4a4>
 800663a:	8823      	ldrh	r3, [r4, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006642:	b29b      	uxth	r3, r3
 8006644:	8023      	strh	r3, [r4, #0]
 8006646:	8823      	ldrh	r3, [r4, #0]
 8006648:	b29b      	uxth	r3, r3
 800664a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006652:	b29b      	uxth	r3, r3
 8006654:	8023      	strh	r3, [r4, #0]
 8006656:	e043      	b.n	80066e0 <USB_EPStartXfer+0x52c>
 8006658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665a:	2b3e      	cmp	r3, #62	; 0x3e
 800665c:	d816      	bhi.n	800668c <USB_EPStartXfer+0x4d8>
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <USB_EPStartXfer+0x4c0>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	3301      	adds	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	8023      	strh	r3, [r4, #0]
 800667e:	e02f      	b.n	80066e0 <USB_EPStartXfer+0x52c>
 8006680:	ffff80c0 	.word	0xffff80c0
 8006684:	ffffc080 	.word	0xffffc080
 8006688:	ffff8080 	.word	0xffff8080
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2b00      	cmp	r3, #0
 800669a:	d102      	bne.n	80066a2 <USB_EPStartXfer+0x4ee>
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	3b01      	subs	r3, #1
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	029b      	lsls	r3, r3, #10
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	8023      	strh	r3, [r4, #0]
 80066b6:	e013      	b.n	80066e0 <USB_EPStartXfer+0x52c>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	785b      	ldrb	r3, [r3, #1]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d10f      	bne.n	80066e0 <USB_EPStartXfer+0x52c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	441c      	add	r4, r3
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	4423      	add	r3, r4
 80066d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066da:	b29a      	uxth	r2, r3
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	781b      	ldrb	r3, [r3, #0]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4413      	add	r3, r2
 80066ea:	881b      	ldrh	r3, [r3, #0]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066f6:	b29c      	uxth	r4, r3
 80066f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80066fc:	b29c      	uxth	r4, r3
 80066fe:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006702:	b29c      	uxth	r4, r3
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	441a      	add	r2, r3
 800670e:	4b04      	ldr	r3, [pc, #16]	; (8006720 <USB_EPStartXfer+0x56c>)
 8006710:	4323      	orrs	r3, r4
 8006712:	b29b      	uxth	r3, r3
 8006714:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3734      	adds	r7, #52	; 0x34
 800671c:	46bd      	mov	sp, r7
 800671e:	bd90      	pop	{r4, r7, pc}
 8006720:	ffff8080 	.word	0xffff8080

08006724 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006724:	b490      	push	{r4, r7}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	785b      	ldrb	r3, [r3, #1]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d018      	beq.n	8006768 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	b29b      	uxth	r3, r3
 8006744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674c:	b29c      	uxth	r4, r3
 800674e:	f084 0310 	eor.w	r3, r4, #16
 8006752:	b29c      	uxth	r4, r3
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	4b11      	ldr	r3, [pc, #68]	; (80067a4 <USB_EPSetStall+0x80>)
 8006760:	4323      	orrs	r3, r4
 8006762:	b29b      	uxth	r3, r3
 8006764:	8013      	strh	r3, [r2, #0]
 8006766:	e017      	b.n	8006798 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	b29c      	uxth	r4, r3
 8006780:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006784:	b29c      	uxth	r4, r3
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	4b04      	ldr	r3, [pc, #16]	; (80067a4 <USB_EPSetStall+0x80>)
 8006792:	4323      	orrs	r3, r4
 8006794:	b29b      	uxth	r3, r3
 8006796:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bc90      	pop	{r4, r7}
 80067a2:	4770      	bx	lr
 80067a4:	ffff8080 	.word	0xffff8080

080067a8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067a8:	b490      	push	{r4, r7}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	7b1b      	ldrb	r3, [r3, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d17d      	bne.n	80068b6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d03d      	beq.n	800683e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	881b      	ldrh	r3, [r3, #0]
 80067ce:	b29c      	uxth	r4, r3
 80067d0:	4623      	mov	r3, r4
 80067d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <USB_EPClearStall+0x5c>
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	009b      	lsls	r3, r3, #2
 80067e2:	4413      	add	r3, r2
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067f0:	b29c      	uxth	r4, r3
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	441a      	add	r2, r3
 80067fc:	4b31      	ldr	r3, [pc, #196]	; (80068c4 <USB_EPClearStall+0x11c>)
 80067fe:	4323      	orrs	r3, r4
 8006800:	b29b      	uxth	r3, r3
 8006802:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	78db      	ldrb	r3, [r3, #3]
 8006808:	2b01      	cmp	r3, #1
 800680a:	d054      	beq.n	80068b6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	781b      	ldrb	r3, [r3, #0]
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006822:	b29c      	uxth	r4, r3
 8006824:	f084 0320 	eor.w	r3, r4, #32
 8006828:	b29c      	uxth	r4, r3
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	441a      	add	r2, r3
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <USB_EPClearStall+0x120>)
 8006836:	4323      	orrs	r3, r4
 8006838:	b29b      	uxth	r3, r3
 800683a:	8013      	strh	r3, [r2, #0]
 800683c:	e03b      	b.n	80068b6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	009b      	lsls	r3, r3, #2
 8006846:	4413      	add	r3, r2
 8006848:	881b      	ldrh	r3, [r3, #0]
 800684a:	b29c      	uxth	r4, r3
 800684c:	4623      	mov	r3, r4
 800684e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006852:	2b00      	cmp	r3, #0
 8006854:	d014      	beq.n	8006880 <USB_EPClearStall+0xd8>
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	881b      	ldrh	r3, [r3, #0]
 8006862:	b29b      	uxth	r3, r3
 8006864:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686c:	b29c      	uxth	r4, r3
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	441a      	add	r2, r3
 8006878:	4b14      	ldr	r3, [pc, #80]	; (80068cc <USB_EPClearStall+0x124>)
 800687a:	4323      	orrs	r3, r4
 800687c:	b29b      	uxth	r3, r3
 800687e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	b29c      	uxth	r4, r3
 8006898:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800689c:	b29c      	uxth	r4, r3
 800689e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80068a2:	b29c      	uxth	r4, r3
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	441a      	add	r2, r3
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <USB_EPClearStall+0x120>)
 80068b0:	4323      	orrs	r3, r4
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc90      	pop	{r4, r7}
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	ffff80c0 	.word	0xffff80c0
 80068c8:	ffff8080 	.word	0xffff8080
 80068cc:	ffffc080 	.word	0xffffc080

080068d0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	460b      	mov	r3, r1
 80068da:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80068dc:	78fb      	ldrb	r3, [r7, #3]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d103      	bne.n	80068ea <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2280      	movs	r2, #128	; 0x80
 80068e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr

080068f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	bc80      	pop	{r7}
 8006908:	4770      	bx	lr

0800690a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800690a:	b480      	push	{r7}
 800690c:	b083      	sub	sp, #12
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	bc80      	pop	{r7}
 800691c:	4770      	bx	lr

0800691e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800692c:	b29b      	uxth	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006930:	68fb      	ldr	r3, [r7, #12]
}
 8006932:	4618      	mov	r0, r3
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr

0800693c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	370c      	adds	r7, #12
 800694c:	46bd      	mov	sp, r7
 800694e:	bc80      	pop	{r7}
 8006950:	4770      	bx	lr

08006952 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006952:	b480      	push	{r7}
 8006954:	b08d      	sub	sp, #52	; 0x34
 8006956:	af00      	add	r7, sp, #0
 8006958:	60f8      	str	r0, [r7, #12]
 800695a:	60b9      	str	r1, [r7, #8]
 800695c:	4611      	mov	r1, r2
 800695e:	461a      	mov	r2, r3
 8006960:	460b      	mov	r3, r1
 8006962:	80fb      	strh	r3, [r7, #6]
 8006964:	4613      	mov	r3, r2
 8006966:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006968:	88bb      	ldrh	r3, [r7, #4]
 800696a:	3301      	adds	r3, #1
 800696c:	085b      	lsrs	r3, r3, #1
 800696e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006978:	88fb      	ldrh	r3, [r7, #6]
 800697a:	005a      	lsls	r2, r3, #1
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	4413      	add	r3, r2
 8006980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006984:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	62fb      	str	r3, [r7, #44]	; 0x2c
 800698a:	e01e      	b.n	80069ca <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	3301      	adds	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	b29b      	uxth	r3, r3
 800699e:	021b      	lsls	r3, r3, #8
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	461a      	mov	r2, r3
 80069a4:	69bb      	ldr	r3, [r7, #24]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b4:	3302      	adds	r3, #2
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	3302      	adds	r3, #2
 80069bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	3301      	adds	r3, #1
 80069c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80069c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c6:	3b01      	subs	r3, #1
 80069c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1dd      	bne.n	800698c <USB_WritePMA+0x3a>
  }
}
 80069d0:	bf00      	nop
 80069d2:	3734      	adds	r7, #52	; 0x34
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr

080069da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80069da:	b480      	push	{r7}
 80069dc:	b08b      	sub	sp, #44	; 0x2c
 80069de:	af00      	add	r7, sp, #0
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	4611      	mov	r1, r2
 80069e6:	461a      	mov	r2, r3
 80069e8:	460b      	mov	r3, r1
 80069ea:	80fb      	strh	r3, [r7, #6]
 80069ec:	4613      	mov	r3, r2
 80069ee:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80069f0:	88bb      	ldrh	r3, [r7, #4]
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a00:	88fb      	ldrh	r3, [r7, #6]
 8006a02:	005a      	lsls	r2, r3, #1
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	4413      	add	r3, r2
 8006a08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
 8006a12:	e01b      	b.n	8006a4c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	881b      	ldrh	r3, [r3, #0]
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	3302      	adds	r3, #2
 8006a20:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	0a1b      	lsrs	r3, r3, #8
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a40:	6a3b      	ldr	r3, [r7, #32]
 8006a42:	3302      	adds	r3, #2
 8006a44:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e0      	bne.n	8006a14 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a52:	88bb      	ldrh	r3, [r7, #4]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d007      	beq.n	8006a6e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006a5e:	6a3b      	ldr	r3, [r7, #32]
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	b2da      	uxtb	r2, r3
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	701a      	strb	r2, [r3, #0]
  }
}
 8006a6e:	bf00      	nop
 8006a70:	372c      	adds	r7, #44	; 0x2c
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bc80      	pop	{r7}
 8006a76:	4770      	bx	lr

08006a78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	7c1b      	ldrb	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d115      	bne.n	8006abc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a94:	2202      	movs	r2, #2
 8006a96:	2181      	movs	r1, #129	; 0x81
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 fe8a 	bl	80087b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006aa4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	2101      	movs	r1, #1
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fe80 	bl	80087b2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006aba:	e012      	b.n	8006ae2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006abc:	2340      	movs	r3, #64	; 0x40
 8006abe:	2202      	movs	r2, #2
 8006ac0:	2181      	movs	r1, #129	; 0x81
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 fe75 	bl	80087b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	2101      	movs	r1, #1
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fe6c 	bl	80087b2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006ae2:	2308      	movs	r3, #8
 8006ae4:	2203      	movs	r2, #3
 8006ae6:	2182      	movs	r1, #130	; 0x82
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f001 fe62 	bl	80087b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006af4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006af8:	f001 ff7c 	bl	80089f4 <USBD_static_malloc>
 8006afc:	4602      	mov	r2, r0
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d102      	bne.n	8006b14 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	73fb      	strb	r3, [r7, #15]
 8006b12:	e026      	b.n	8006b62 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	7c1b      	ldrb	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	2101      	movs	r1, #1
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f001 ff1b 	bl	8008986 <USBD_LL_PrepareReceive>
 8006b50:	e007      	b.n	8006b62 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f001 ff12 	bl	8008986 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	460b      	mov	r3, r1
 8006b76:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006b7c:	2181      	movs	r1, #129	; 0x81
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f001 fe3d 	bl	80087fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006b8a:	2101      	movs	r1, #1
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fe36 	bl	80087fe <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006b9a:	2182      	movs	r1, #130	; 0x82
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f001 fe2e 	bl	80087fe <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00e      	beq.n	8006bd0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f001 ff22 	bl	8008a0c <USBD_static_free>
    pdev->pClassData = NULL;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d039      	beq.n	8006c78 <USBD_CDC_Setup+0x9e>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d17c      	bne.n	8006d02 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	88db      	ldrh	r3, [r3, #6]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d029      	beq.n	8006c64 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	b25b      	sxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da11      	bge.n	8006c3e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	683a      	ldr	r2, [r7, #0]
 8006c24:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006c26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	88d2      	ldrh	r2, [r2, #6]
 8006c2c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c2e:	6939      	ldr	r1, [r7, #16]
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	88db      	ldrh	r3, [r3, #6]
 8006c34:	461a      	mov	r2, r3
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f001 f9f6 	bl	8008028 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006c3c:	e068      	b.n	8006d10 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	785a      	ldrb	r2, [r3, #1]
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	88db      	ldrh	r3, [r3, #6]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006c54:	6939      	ldr	r1, [r7, #16]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	88db      	ldrh	r3, [r3, #6]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f001 fa11 	bl	8008084 <USBD_CtlPrepareRx>
      break;
 8006c62:	e055      	b.n	8006d10 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	683a      	ldr	r2, [r7, #0]
 8006c6e:	7850      	ldrb	r0, [r2, #1]
 8006c70:	2200      	movs	r2, #0
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	4798      	blx	r3
      break;
 8006c76:	e04b      	b.n	8006d10 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	785b      	ldrb	r3, [r3, #1]
 8006c7c:	2b0a      	cmp	r3, #10
 8006c7e:	d017      	beq.n	8006cb0 <USBD_CDC_Setup+0xd6>
 8006c80:	2b0b      	cmp	r3, #11
 8006c82:	d029      	beq.n	8006cd8 <USBD_CDC_Setup+0xfe>
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d133      	bne.n	8006cf0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d107      	bne.n	8006ca2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006c92:	f107 030c 	add.w	r3, r7, #12
 8006c96:	2202      	movs	r2, #2
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f9c4 	bl	8008028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca0:	e02e      	b.n	8006d00 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 f955 	bl	8007f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006caa:	2302      	movs	r3, #2
 8006cac:	75fb      	strb	r3, [r7, #23]
          break;
 8006cae:	e027      	b.n	8006d00 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d107      	bne.n	8006cca <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006cba:	f107 030f 	add.w	r3, r7, #15
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f9b0 	bl	8008028 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cc8:	e01a      	b.n	8006d00 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006cca:	6839      	ldr	r1, [r7, #0]
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 f941 	bl	8007f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	75fb      	strb	r3, [r7, #23]
          break;
 8006cd6:	e013      	b.n	8006d00 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cde:	2b03      	cmp	r3, #3
 8006ce0:	d00d      	beq.n	8006cfe <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 f935 	bl	8007f54 <USBD_CtlError>
            ret = USBD_FAIL;
 8006cea:	2302      	movs	r3, #2
 8006cec:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006cee:	e006      	b.n	8006cfe <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 f92e 	bl	8007f54 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	75fb      	strb	r3, [r7, #23]
          break;
 8006cfc:	e000      	b.n	8006d00 <USBD_CDC_Setup+0x126>
          break;
 8006cfe:	bf00      	nop
      }
      break;
 8006d00:	e006      	b.n	8006d10 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f001 f925 	bl	8007f54 <USBD_CtlError>
      ret = USBD_FAIL;
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006d0e:	bf00      	nop
  }

  return ret;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3718      	adds	r7, #24
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b084      	sub	sp, #16
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d34:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d037      	beq.n	8006db0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006d40:	78fa      	ldrb	r2, [r7, #3]
 8006d42:	6879      	ldr	r1, [r7, #4]
 8006d44:	4613      	mov	r3, r2
 8006d46:	009b      	lsls	r3, r3, #2
 8006d48:	4413      	add	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	440b      	add	r3, r1
 8006d4e:	331c      	adds	r3, #28
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d026      	beq.n	8006da4 <USBD_CDC_DataIn+0x8a>
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	440b      	add	r3, r1
 8006d64:	331c      	adds	r3, #28
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	78fa      	ldrb	r2, [r7, #3]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	0152      	lsls	r2, r2, #5
 8006d6e:	440a      	add	r2, r1
 8006d70:	3238      	adds	r2, #56	; 0x38
 8006d72:	6812      	ldr	r2, [r2, #0]
 8006d74:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d78:	fb02 f201 	mul.w	r2, r2, r1
 8006d7c:	1a9b      	subs	r3, r3, r2
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d110      	bne.n	8006da4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006d82:	78fa      	ldrb	r2, [r7, #3]
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	440b      	add	r3, r1
 8006d90:	331c      	adds	r3, #28
 8006d92:	2200      	movs	r2, #0
 8006d94:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006d96:	78f9      	ldrb	r1, [r7, #3]
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 fdcf 	bl	8008940 <USBD_LL_Transmit>
 8006da2:	e003      	b.n	8006dac <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	e000      	b.n	8006db2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006db0:	2302      	movs	r3, #2
  }
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dcc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006dce:	78fb      	ldrb	r3, [r7, #3]
 8006dd0:	4619      	mov	r1, r3
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f001 fdfa 	bl	80089cc <USBD_LL_GetRxDataSize>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00d      	beq.n	8006e06 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4798      	blx	r3

    return USBD_OK;
 8006e02:	2300      	movs	r3, #0
 8006e04:	e000      	b.n	8006e08 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006e06:	2302      	movs	r3, #2
  }
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e1e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d015      	beq.n	8006e56 <USBD_CDC_EP0_RxReady+0x46>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006e30:	2bff      	cmp	r3, #255	; 0xff
 8006e32:	d010      	beq.n	8006e56 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006e42:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006e4a:	b292      	uxth	r2, r2
 8006e4c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	22ff      	movs	r2, #255	; 0xff
 8006e52:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006e56:	2300      	movs	r3, #0
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2243      	movs	r2, #67	; 0x43
 8006e6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	370c      	adds	r7, #12
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000098 	.word	0x20000098

08006e80 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2243      	movs	r2, #67	; 0x43
 8006e8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006e8e:	4b03      	ldr	r3, [pc, #12]	; (8006e9c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bc80      	pop	{r7}
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop
 8006e9c:	20000054 	.word	0x20000054

08006ea0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2243      	movs	r2, #67	; 0x43
 8006eac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006eae:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bc80      	pop	{r7}
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	200000dc 	.word	0x200000dc

08006ec0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	220a      	movs	r2, #10
 8006ecc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006ece:	4b03      	ldr	r3, [pc, #12]	; (8006edc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bc80      	pop	{r7}
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000010 	.word	0x20000010

08006ee0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006eea:	2302      	movs	r3, #2
 8006eec:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d005      	beq.n	8006f00 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	683a      	ldr	r2, [r7, #0]
 8006ef8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr

08006f0c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4613      	mov	r3, r2
 8006f18:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f20:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006f2a:	88fa      	ldrh	r2, [r7, #6]
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	371c      	adds	r7, #28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bc80      	pop	{r7}
 8006f3c:	4770      	bx	lr

08006f3e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006f3e:	b480      	push	{r7}
 8006f40:	b085      	sub	sp, #20
 8006f42:	af00      	add	r7, sp, #0
 8006f44:	6078      	str	r0, [r7, #4]
 8006f46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f4e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	683a      	ldr	r2, [r7, #0]
 8006f54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr

08006f64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b084      	sub	sp, #16
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d01c      	beq.n	8006fb8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d115      	bne.n	8006fb4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006fa6:	b29b      	uxth	r3, r3
 8006fa8:	2181      	movs	r1, #129	; 0x81
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f001 fcc8 	bl	8008940 <USBD_LL_Transmit>

      return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e002      	b.n	8006fba <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006fb8:	2302      	movs	r3, #2
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d017      	beq.n	800700c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	7c1b      	ldrb	r3, [r3, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d109      	bne.n	8006ff8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fee:	2101      	movs	r1, #1
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fcc8 	bl	8008986 <USBD_LL_PrepareReceive>
 8006ff6:	e007      	b.n	8007008 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	2101      	movs	r1, #1
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f001 fcbf 	bl	8008986 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	e000      	b.n	800700e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800700c:	2302      	movs	r3, #2
  }
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	60f8      	str	r0, [r7, #12]
 800701e:	60b9      	str	r1, [r7, #8]
 8007020:	4613      	mov	r3, r2
 8007022:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800702a:	2302      	movs	r3, #2
 800702c:	e01a      	b.n	8007064 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d003      	beq.n	8007040 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	79fa      	ldrb	r2, [r7, #7]
 800705a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f001 fb33 	bl	80086c8 <USBD_LL_Init>

  return USBD_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3710      	adds	r7, #16
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8007076:	2300      	movs	r3, #0
 8007078:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d006      	beq.n	800708e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8007088:	2300      	movs	r3, #0
 800708a:	73fb      	strb	r3, [r7, #15]
 800708c:	e001      	b.n	8007092 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800708e:	2302      	movs	r3, #2
 8007090:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007092:	7bfb      	ldrb	r3, [r7, #15]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	bc80      	pop	{r7}
 800709c:	4770      	bx	lr

0800709e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f001 fb68 	bl	800877c <USBD_LL_Start>

  return USBD_OK;
 80070ac:	2300      	movs	r3, #0
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	3708      	adds	r7, #8
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd80      	pop	{r7, pc}

080070b6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80070b6:	b480      	push	{r7}
 80070b8:	b083      	sub	sp, #12
 80070ba:	af00      	add	r7, sp, #0
 80070bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bc80      	pop	{r7}
 80070c8:	4770      	bx	lr

080070ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b084      	sub	sp, #16
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00c      	beq.n	80070fe <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	78fa      	ldrb	r2, [r7, #3]
 80070ee:	4611      	mov	r1, r2
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80070fa:	2300      	movs	r3, #0
 80070fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80070fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	78fa      	ldrb	r2, [r7, #3]
 800711e:	4611      	mov	r1, r2
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	4798      	blx	r3

  return USBD_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800713e:	6839      	ldr	r1, [r7, #0]
 8007140:	4618      	mov	r0, r3
 8007142:	f000 fecb 	bl	8007edc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007154:	461a      	mov	r2, r3
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007162:	f003 031f 	and.w	r3, r3, #31
 8007166:	2b01      	cmp	r3, #1
 8007168:	d00c      	beq.n	8007184 <USBD_LL_SetupStage+0x56>
 800716a:	2b01      	cmp	r3, #1
 800716c:	d302      	bcc.n	8007174 <USBD_LL_SetupStage+0x46>
 800716e:	2b02      	cmp	r3, #2
 8007170:	d010      	beq.n	8007194 <USBD_LL_SetupStage+0x66>
 8007172:	e017      	b.n	80071a4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800717a:	4619      	mov	r1, r3
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 f9cb 	bl	8007518 <USBD_StdDevReq>
      break;
 8007182:	e01a      	b.n	80071ba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fa2d 	bl	80075ec <USBD_StdItfReq>
      break;
 8007192:	e012      	b.n	80071ba <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fa6b 	bl	8007678 <USBD_StdEPReq>
      break;
 80071a2:	e00a      	b.n	80071ba <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80071aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	4619      	mov	r1, r3
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	f001 fb42 	bl	800883c <USBD_LL_StallEP>
      break;
 80071b8:	bf00      	nop
  }

  return USBD_OK;
 80071ba:	2300      	movs	r3, #0
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3708      	adds	r7, #8
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	460b      	mov	r3, r1
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d14b      	bne.n	8007270 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80071de:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071e6:	2b03      	cmp	r3, #3
 80071e8:	d134      	bne.n	8007254 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d919      	bls.n	800722a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	68da      	ldr	r2, [r3, #12]
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	68da      	ldr	r2, [r3, #12]
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800720c:	429a      	cmp	r2, r3
 800720e:	d203      	bcs.n	8007218 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007214:	b29b      	uxth	r3, r3
 8007216:	e002      	b.n	800721e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800721c:	b29b      	uxth	r3, r3
 800721e:	461a      	mov	r2, r3
 8007220:	6879      	ldr	r1, [r7, #4]
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 ff4c 	bl	80080c0 <USBD_CtlContinueRx>
 8007228:	e038      	b.n	800729c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007230:	691b      	ldr	r3, [r3, #16]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800723c:	2b03      	cmp	r3, #3
 800723e:	d105      	bne.n	800724c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007246:	691b      	ldr	r3, [r3, #16]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 ff49 	bl	80080e4 <USBD_CtlSendStatus>
 8007252:	e023      	b.n	800729c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800725a:	2b05      	cmp	r3, #5
 800725c:	d11e      	bne.n	800729c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007266:	2100      	movs	r1, #0
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f001 fae7 	bl	800883c <USBD_LL_StallEP>
 800726e:	e015      	b.n	800729c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00d      	beq.n	8007298 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007282:	2b03      	cmp	r3, #3
 8007284:	d108      	bne.n	8007298 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	7afa      	ldrb	r2, [r7, #11]
 8007290:	4611      	mov	r1, r2
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	4798      	blx	r3
 8007296:	e001      	b.n	800729c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007298:	2302      	movs	r3, #2
 800729a:	e000      	b.n	800729e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b086      	sub	sp, #24
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	460b      	mov	r3, r1
 80072b0:	607a      	str	r2, [r7, #4]
 80072b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80072b4:	7afb      	ldrb	r3, [r7, #11]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d17f      	bne.n	80073ba <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3314      	adds	r3, #20
 80072be:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d15c      	bne.n	8007384 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	68da      	ldr	r2, [r3, #12]
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d915      	bls.n	8007302 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	68da      	ldr	r2, [r3, #12]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	1ad2      	subs	r2, r2, r3
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	461a      	mov	r2, r3
 80072ec:	6879      	ldr	r1, [r7, #4]
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 feb6 	bl	8008060 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072f4:	2300      	movs	r3, #0
 80072f6:	2200      	movs	r2, #0
 80072f8:	2100      	movs	r1, #0
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f001 fb43 	bl	8008986 <USBD_LL_PrepareReceive>
 8007300:	e04e      	b.n	80073a0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	6912      	ldr	r2, [r2, #16]
 800730a:	fbb3 f1f2 	udiv	r1, r3, r2
 800730e:	fb02 f201 	mul.w	r2, r2, r1
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11c      	bne.n	8007352 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	689a      	ldr	r2, [r3, #8]
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007320:	429a      	cmp	r2, r3
 8007322:	d316      	bcc.n	8007352 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800732e:	429a      	cmp	r2, r3
 8007330:	d20f      	bcs.n	8007352 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007332:	2200      	movs	r2, #0
 8007334:	2100      	movs	r1, #0
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 fe92 	bl	8008060 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007344:	2300      	movs	r3, #0
 8007346:	2200      	movs	r2, #0
 8007348:	2100      	movs	r1, #0
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f001 fb1b 	bl	8008986 <USBD_LL_PrepareReceive>
 8007350:	e026      	b.n	80073a0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007364:	2b03      	cmp	r3, #3
 8007366:	d105      	bne.n	8007374 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68f8      	ldr	r0, [r7, #12]
 8007372:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007374:	2180      	movs	r1, #128	; 0x80
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f001 fa60 	bl	800883c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fec4 	bl	800810a <USBD_CtlReceiveStatus>
 8007382:	e00d      	b.n	80073a0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800738a:	2b04      	cmp	r3, #4
 800738c:	d004      	beq.n	8007398 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007394:	2b00      	cmp	r3, #0
 8007396:	d103      	bne.n	80073a0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007398:	2180      	movs	r1, #128	; 0x80
 800739a:	68f8      	ldr	r0, [r7, #12]
 800739c:	f001 fa4e 	bl	800883c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d11d      	bne.n	80073e6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80073aa:	68f8      	ldr	r0, [r7, #12]
 80073ac:	f7ff fe83 	bl	80070b6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80073b8:	e015      	b.n	80073e6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00d      	beq.n	80073e2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80073cc:	2b03      	cmp	r3, #3
 80073ce:	d108      	bne.n	80073e2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	7afa      	ldrb	r2, [r7, #11]
 80073da:	4611      	mov	r1, r2
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	4798      	blx	r3
 80073e0:	e001      	b.n	80073e6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80073e2:	2302      	movs	r3, #2
 80073e4:	e000      	b.n	80073e8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}

080073f0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073f8:	2340      	movs	r3, #64	; 0x40
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 f9d7 	bl	80087b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2240      	movs	r2, #64	; 0x40
 8007410:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	2200      	movs	r2, #0
 8007418:	2180      	movs	r1, #128	; 0x80
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 f9c9 	bl	80087b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2240      	movs	r2, #64	; 0x40
 800742a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d009      	beq.n	8007468 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6852      	ldr	r2, [r2, #4]
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	4611      	mov	r1, r2
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
  }

  return USBD_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007472:	b480      	push	{r7}
 8007474:	b083      	sub	sp, #12
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	78fa      	ldrb	r2, [r7, #3]
 8007482:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	370c      	adds	r7, #12
 800748a:	46bd      	mov	sp, r7
 800748c:	bc80      	pop	{r7}
 800748e:	4770      	bx	lr

08007490 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2204      	movs	r2, #4
 80074a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bc80      	pop	{r7}
 80074b6:	4770      	bx	lr

080074b8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c6:	2b04      	cmp	r3, #4
 80074c8:	d105      	bne.n	80074d6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	bc80      	pop	{r7}
 80074e0:	4770      	bx	lr

080074e2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b082      	sub	sp, #8
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f0:	2b03      	cmp	r3, #3
 80074f2:	d10b      	bne.n	800750c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074fa:	69db      	ldr	r3, [r3, #28]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d005      	beq.n	800750c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3708      	adds	r7, #8
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007522:	2300      	movs	r3, #0
 8007524:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800752e:	2b20      	cmp	r3, #32
 8007530:	d004      	beq.n	800753c <USBD_StdDevReq+0x24>
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d002      	beq.n	800753c <USBD_StdDevReq+0x24>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d008      	beq.n	800754c <USBD_StdDevReq+0x34>
 800753a:	e04c      	b.n	80075d6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	4798      	blx	r3
      break;
 800754a:	e049      	b.n	80075e0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	785b      	ldrb	r3, [r3, #1]
 8007550:	2b09      	cmp	r3, #9
 8007552:	d83a      	bhi.n	80075ca <USBD_StdDevReq+0xb2>
 8007554:	a201      	add	r2, pc, #4	; (adr r2, 800755c <USBD_StdDevReq+0x44>)
 8007556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755a:	bf00      	nop
 800755c:	080075ad 	.word	0x080075ad
 8007560:	080075c1 	.word	0x080075c1
 8007564:	080075cb 	.word	0x080075cb
 8007568:	080075b7 	.word	0x080075b7
 800756c:	080075cb 	.word	0x080075cb
 8007570:	0800758f 	.word	0x0800758f
 8007574:	08007585 	.word	0x08007585
 8007578:	080075cb 	.word	0x080075cb
 800757c:	080075a3 	.word	0x080075a3
 8007580:	08007599 	.word	0x08007599
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007584:	6839      	ldr	r1, [r7, #0]
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f9d4 	bl	8007934 <USBD_GetDescriptor>
          break;
 800758c:	e022      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fb37 	bl	8007c04 <USBD_SetAddress>
          break;
 8007596:	e01d      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007598:	6839      	ldr	r1, [r7, #0]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f000 fb74 	bl	8007c88 <USBD_SetConfig>
          break;
 80075a0:	e018      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80075a2:	6839      	ldr	r1, [r7, #0]
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fbfd 	bl	8007da4 <USBD_GetConfig>
          break;
 80075aa:	e013      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80075ac:	6839      	ldr	r1, [r7, #0]
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 fc2c 	bl	8007e0c <USBD_GetStatus>
          break;
 80075b4:	e00e      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80075b6:	6839      	ldr	r1, [r7, #0]
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fc5a 	bl	8007e72 <USBD_SetFeature>
          break;
 80075be:	e009      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fc69 	bl	8007e9a <USBD_ClrFeature>
          break;
 80075c8:	e004      	b.n	80075d4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fcc1 	bl	8007f54 <USBD_CtlError>
          break;
 80075d2:	bf00      	nop
      }
      break;
 80075d4:	e004      	b.n	80075e0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80075d6:	6839      	ldr	r1, [r7, #0]
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 fcbb 	bl	8007f54 <USBD_CtlError>
      break;
 80075de:	bf00      	nop
  }

  return ret;
 80075e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop

080075ec <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007602:	2b20      	cmp	r3, #32
 8007604:	d003      	beq.n	800760e <USBD_StdItfReq+0x22>
 8007606:	2b40      	cmp	r3, #64	; 0x40
 8007608:	d001      	beq.n	800760e <USBD_StdItfReq+0x22>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d12a      	bne.n	8007664 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007614:	3b01      	subs	r3, #1
 8007616:	2b02      	cmp	r3, #2
 8007618:	d81d      	bhi.n	8007656 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	889b      	ldrh	r3, [r3, #4]
 800761e:	b2db      	uxtb	r3, r3
 8007620:	2b01      	cmp	r3, #1
 8007622:	d813      	bhi.n	800764c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	6839      	ldr	r1, [r7, #0]
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
 8007632:	4603      	mov	r3, r0
 8007634:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	88db      	ldrh	r3, [r3, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d110      	bne.n	8007660 <USBD_StdItfReq+0x74>
 800763e:	7bfb      	ldrb	r3, [r7, #15]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10d      	bne.n	8007660 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fd4d 	bl	80080e4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800764a:	e009      	b.n	8007660 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fc80 	bl	8007f54 <USBD_CtlError>
          break;
 8007654:	e004      	b.n	8007660 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007656:	6839      	ldr	r1, [r7, #0]
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f000 fc7b 	bl	8007f54 <USBD_CtlError>
          break;
 800765e:	e000      	b.n	8007662 <USBD_StdItfReq+0x76>
          break;
 8007660:	bf00      	nop
      }
      break;
 8007662:	e004      	b.n	800766e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc74 	bl	8007f54 <USBD_CtlError>
      break;
 800766c:	bf00      	nop
  }

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007682:	2300      	movs	r3, #0
 8007684:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	889b      	ldrh	r3, [r3, #4]
 800768a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	781b      	ldrb	r3, [r3, #0]
 8007690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007694:	2b20      	cmp	r3, #32
 8007696:	d004      	beq.n	80076a2 <USBD_StdEPReq+0x2a>
 8007698:	2b40      	cmp	r3, #64	; 0x40
 800769a:	d002      	beq.n	80076a2 <USBD_StdEPReq+0x2a>
 800769c:	2b00      	cmp	r3, #0
 800769e:	d008      	beq.n	80076b2 <USBD_StdEPReq+0x3a>
 80076a0:	e13d      	b.n	800791e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	4798      	blx	r3
      break;
 80076b0:	e13a      	b.n	8007928 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ba:	2b20      	cmp	r3, #32
 80076bc:	d10a      	bne.n	80076d4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	4798      	blx	r3
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]

        return ret;
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	e12a      	b.n	800792a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	785b      	ldrb	r3, [r3, #1]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d03e      	beq.n	800775a <USBD_StdEPReq+0xe2>
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d002      	beq.n	80076e6 <USBD_StdEPReq+0x6e>
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d070      	beq.n	80077c6 <USBD_StdEPReq+0x14e>
 80076e4:	e115      	b.n	8007912 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d002      	beq.n	80076f6 <USBD_StdEPReq+0x7e>
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	d015      	beq.n	8007720 <USBD_StdEPReq+0xa8>
 80076f4:	e02b      	b.n	800774e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076f6:	7bbb      	ldrb	r3, [r7, #14]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <USBD_StdEPReq+0x9e>
 80076fc:	7bbb      	ldrb	r3, [r7, #14]
 80076fe:	2b80      	cmp	r3, #128	; 0x80
 8007700:	d009      	beq.n	8007716 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007702:	7bbb      	ldrb	r3, [r7, #14]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f001 f898 	bl	800883c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800770c:	2180      	movs	r1, #128	; 0x80
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f894 	bl	800883c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007714:	e020      	b.n	8007758 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc1b 	bl	8007f54 <USBD_CtlError>
              break;
 800771e:	e01b      	b.n	8007758 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	885b      	ldrh	r3, [r3, #2]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d10e      	bne.n	8007746 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007728:	7bbb      	ldrb	r3, [r7, #14]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00b      	beq.n	8007746 <USBD_StdEPReq+0xce>
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b80      	cmp	r3, #128	; 0x80
 8007732:	d008      	beq.n	8007746 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	88db      	ldrh	r3, [r3, #6]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d104      	bne.n	8007746 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 f87b 	bl	800883c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fccc 	bl	80080e4 <USBD_CtlSendStatus>

              break;
 800774c:	e004      	b.n	8007758 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fbff 	bl	8007f54 <USBD_CtlError>
              break;
 8007756:	bf00      	nop
          }
          break;
 8007758:	e0e0      	b.n	800791c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007760:	2b02      	cmp	r3, #2
 8007762:	d002      	beq.n	800776a <USBD_StdEPReq+0xf2>
 8007764:	2b03      	cmp	r3, #3
 8007766:	d015      	beq.n	8007794 <USBD_StdEPReq+0x11c>
 8007768:	e026      	b.n	80077b8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800776a:	7bbb      	ldrb	r3, [r7, #14]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00c      	beq.n	800778a <USBD_StdEPReq+0x112>
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	2b80      	cmp	r3, #128	; 0x80
 8007774:	d009      	beq.n	800778a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007776:	7bbb      	ldrb	r3, [r7, #14]
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 f85e 	bl	800883c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007780:	2180      	movs	r1, #128	; 0x80
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f85a 	bl	800883c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007788:	e01c      	b.n	80077c4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fbe1 	bl	8007f54 <USBD_CtlError>
              break;
 8007792:	e017      	b.n	80077c4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	885b      	ldrh	r3, [r3, #2]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d112      	bne.n	80077c2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d004      	beq.n	80077b0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f001 f865 	bl	800887a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 fc97 	bl	80080e4 <USBD_CtlSendStatus>
              }
              break;
 80077b6:	e004      	b.n	80077c2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80077b8:	6839      	ldr	r1, [r7, #0]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 fbca 	bl	8007f54 <USBD_CtlError>
              break;
 80077c0:	e000      	b.n	80077c4 <USBD_StdEPReq+0x14c>
              break;
 80077c2:	bf00      	nop
          }
          break;
 80077c4:	e0aa      	b.n	800791c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	d002      	beq.n	80077d6 <USBD_StdEPReq+0x15e>
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d032      	beq.n	800783a <USBD_StdEPReq+0x1c2>
 80077d4:	e097      	b.n	8007906 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077d6:	7bbb      	ldrb	r3, [r7, #14]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d007      	beq.n	80077ec <USBD_StdEPReq+0x174>
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b80      	cmp	r3, #128	; 0x80
 80077e0:	d004      	beq.n	80077ec <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fbb5 	bl	8007f54 <USBD_CtlError>
                break;
 80077ea:	e091      	b.n	8007910 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80077ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	da0b      	bge.n	800780c <USBD_StdEPReq+0x194>
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077fa:	4613      	mov	r3, r2
 80077fc:	009b      	lsls	r3, r3, #2
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	3310      	adds	r3, #16
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	4413      	add	r3, r2
 8007808:	3304      	adds	r3, #4
 800780a:	e00b      	b.n	8007824 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2202      	movs	r2, #2
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fbf8 	bl	8008028 <USBD_CtlSendData>
              break;
 8007838:	e06a      	b.n	8007910 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800783a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800783e:	2b00      	cmp	r3, #0
 8007840:	da11      	bge.n	8007866 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	f003 020f 	and.w	r2, r3, #15
 8007848:	6879      	ldr	r1, [r7, #4]
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	440b      	add	r3, r1
 8007854:	3318      	adds	r3, #24
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d117      	bne.n	800788c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fb78 	bl	8007f54 <USBD_CtlError>
                  break;
 8007864:	e054      	b.n	8007910 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007866:	7bbb      	ldrb	r3, [r7, #14]
 8007868:	f003 020f 	and.w	r2, r3, #15
 800786c:	6879      	ldr	r1, [r7, #4]
 800786e:	4613      	mov	r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	4413      	add	r3, r2
 8007874:	009b      	lsls	r3, r3, #2
 8007876:	440b      	add	r3, r1
 8007878:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d104      	bne.n	800788c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007882:	6839      	ldr	r1, [r7, #0]
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fb65 	bl	8007f54 <USBD_CtlError>
                  break;
 800788a:	e041      	b.n	8007910 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800788c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007890:	2b00      	cmp	r3, #0
 8007892:	da0b      	bge.n	80078ac <USBD_StdEPReq+0x234>
 8007894:	7bbb      	ldrb	r3, [r7, #14]
 8007896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	3310      	adds	r3, #16
 80078a4:	687a      	ldr	r2, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	3304      	adds	r3, #4
 80078aa:	e00b      	b.n	80078c4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	4413      	add	r3, r2
 80078c2:	3304      	adds	r3, #4
 80078c4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078c6:	7bbb      	ldrb	r3, [r7, #14]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <USBD_StdEPReq+0x25a>
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b80      	cmp	r3, #128	; 0x80
 80078d0:	d103      	bne.n	80078da <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
 80078d8:	e00e      	b.n	80078f8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	4619      	mov	r1, r3
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 ffea 	bl	80088b8 <USBD_LL_IsStallEP>
 80078e4:	4603      	mov	r3, r0
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2201      	movs	r2, #1
 80078ee:	601a      	str	r2, [r3, #0]
 80078f0:	e002      	b.n	80078f8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	2200      	movs	r2, #0
 80078f6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2202      	movs	r2, #2
 80078fc:	4619      	mov	r1, r3
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 fb92 	bl	8008028 <USBD_CtlSendData>
              break;
 8007904:	e004      	b.n	8007910 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007906:	6839      	ldr	r1, [r7, #0]
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fb23 	bl	8007f54 <USBD_CtlError>
              break;
 800790e:	bf00      	nop
          }
          break;
 8007910:	e004      	b.n	800791c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fb1d 	bl	8007f54 <USBD_CtlError>
          break;
 800791a:	bf00      	nop
      }
      break;
 800791c:	e004      	b.n	8007928 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 fb17 	bl	8007f54 <USBD_CtlError>
      break;
 8007926:	bf00      	nop
  }

  return ret;
 8007928:	7bfb      	ldrb	r3, [r7, #15]
}
 800792a:	4618      	mov	r0, r3
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
	...

08007934 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007942:	2300      	movs	r3, #0
 8007944:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	885b      	ldrh	r3, [r3, #2]
 800794e:	0a1b      	lsrs	r3, r3, #8
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	2b06      	cmp	r3, #6
 8007956:	f200 8128 	bhi.w	8007baa <USBD_GetDescriptor+0x276>
 800795a:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBD_GetDescriptor+0x2c>)
 800795c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007960:	0800797d 	.word	0x0800797d
 8007964:	08007995 	.word	0x08007995
 8007968:	080079d5 	.word	0x080079d5
 800796c:	08007bab 	.word	0x08007bab
 8007970:	08007bab 	.word	0x08007bab
 8007974:	08007b4b 	.word	0x08007b4b
 8007978:	08007b77 	.word	0x08007b77
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	687a      	ldr	r2, [r7, #4]
 8007986:	7c12      	ldrb	r2, [r2, #16]
 8007988:	f107 0108 	add.w	r1, r7, #8
 800798c:	4610      	mov	r0, r2
 800798e:	4798      	blx	r3
 8007990:	60f8      	str	r0, [r7, #12]
      break;
 8007992:	e112      	b.n	8007bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	7c1b      	ldrb	r3, [r3, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10d      	bne.n	80079b8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a4:	f107 0208 	add.w	r2, r7, #8
 80079a8:	4610      	mov	r0, r2
 80079aa:	4798      	blx	r3
 80079ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	3301      	adds	r3, #1
 80079b2:	2202      	movs	r2, #2
 80079b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079b6:	e100      	b.n	8007bba <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f107 0208 	add.w	r2, r7, #8
 80079c4:	4610      	mov	r0, r2
 80079c6:	4798      	blx	r3
 80079c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3301      	adds	r3, #1
 80079ce:	2202      	movs	r2, #2
 80079d0:	701a      	strb	r2, [r3, #0]
      break;
 80079d2:	e0f2      	b.n	8007bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	885b      	ldrh	r3, [r3, #2]
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b05      	cmp	r3, #5
 80079dc:	f200 80ac 	bhi.w	8007b38 <USBD_GetDescriptor+0x204>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <USBD_GetDescriptor+0xb4>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a01 	.word	0x08007a01
 80079ec:	08007a35 	.word	0x08007a35
 80079f0:	08007a69 	.word	0x08007a69
 80079f4:	08007a9d 	.word	0x08007a9d
 80079f8:	08007ad1 	.word	0x08007ad1
 80079fc:	08007b05 	.word	0x08007b05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d00b      	beq.n	8007a24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	7c12      	ldrb	r2, [r2, #16]
 8007a18:	f107 0108 	add.w	r1, r7, #8
 8007a1c:	4610      	mov	r0, r2
 8007a1e:	4798      	blx	r3
 8007a20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a22:	e091      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa94 	bl	8007f54 <USBD_CtlError>
            err++;
 8007a2c:	7afb      	ldrb	r3, [r7, #11]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	72fb      	strb	r3, [r7, #11]
          break;
 8007a32:	e089      	b.n	8007b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a3a:	689b      	ldr	r3, [r3, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00b      	beq.n	8007a58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	7c12      	ldrb	r2, [r2, #16]
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	4610      	mov	r0, r2
 8007a52:	4798      	blx	r3
 8007a54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a56:	e077      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a58:	6839      	ldr	r1, [r7, #0]
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa7a 	bl	8007f54 <USBD_CtlError>
            err++;
 8007a60:	7afb      	ldrb	r3, [r7, #11]
 8007a62:	3301      	adds	r3, #1
 8007a64:	72fb      	strb	r3, [r7, #11]
          break;
 8007a66:	e06f      	b.n	8007b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00b      	beq.n	8007a8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	7c12      	ldrb	r2, [r2, #16]
 8007a80:	f107 0108 	add.w	r1, r7, #8
 8007a84:	4610      	mov	r0, r2
 8007a86:	4798      	blx	r3
 8007a88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a8a:	e05d      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fa60 	bl	8007f54 <USBD_CtlError>
            err++;
 8007a94:	7afb      	ldrb	r3, [r7, #11]
 8007a96:	3301      	adds	r3, #1
 8007a98:	72fb      	strb	r3, [r7, #11]
          break;
 8007a9a:	e055      	b.n	8007b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00b      	beq.n	8007ac0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7c12      	ldrb	r2, [r2, #16]
 8007ab4:	f107 0108 	add.w	r1, r7, #8
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4798      	blx	r3
 8007abc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007abe:	e043      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fa46 	bl	8007f54 <USBD_CtlError>
            err++;
 8007ac8:	7afb      	ldrb	r3, [r7, #11]
 8007aca:	3301      	adds	r3, #1
 8007acc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ace:	e03b      	b.n	8007b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ad6:	695b      	ldr	r3, [r3, #20]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d00b      	beq.n	8007af4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007ae2:	695b      	ldr	r3, [r3, #20]
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	7c12      	ldrb	r2, [r2, #16]
 8007ae8:	f107 0108 	add.w	r1, r7, #8
 8007aec:	4610      	mov	r0, r2
 8007aee:	4798      	blx	r3
 8007af0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007af2:	e029      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007af4:	6839      	ldr	r1, [r7, #0]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa2c 	bl	8007f54 <USBD_CtlError>
            err++;
 8007afc:	7afb      	ldrb	r3, [r7, #11]
 8007afe:	3301      	adds	r3, #1
 8007b00:	72fb      	strb	r3, [r7, #11]
          break;
 8007b02:	e021      	b.n	8007b48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d00b      	beq.n	8007b28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007b16:	699b      	ldr	r3, [r3, #24]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b26:	e00f      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fa12 	bl	8007f54 <USBD_CtlError>
            err++;
 8007b30:	7afb      	ldrb	r3, [r7, #11]
 8007b32:	3301      	adds	r3, #1
 8007b34:	72fb      	strb	r3, [r7, #11]
          break;
 8007b36:	e007      	b.n	8007b48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007b38:	6839      	ldr	r1, [r7, #0]
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa0a 	bl	8007f54 <USBD_CtlError>
          err++;
 8007b40:	7afb      	ldrb	r3, [r7, #11]
 8007b42:	3301      	adds	r3, #1
 8007b44:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007b46:	e038      	b.n	8007bba <USBD_GetDescriptor+0x286>
 8007b48:	e037      	b.n	8007bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7c1b      	ldrb	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d109      	bne.n	8007b66 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b5a:	f107 0208 	add.w	r2, r7, #8
 8007b5e:	4610      	mov	r0, r2
 8007b60:	4798      	blx	r3
 8007b62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b64:	e029      	b.n	8007bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b66:	6839      	ldr	r1, [r7, #0]
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f9f3 	bl	8007f54 <USBD_CtlError>
        err++;
 8007b6e:	7afb      	ldrb	r3, [r7, #11]
 8007b70:	3301      	adds	r3, #1
 8007b72:	72fb      	strb	r3, [r7, #11]
      break;
 8007b74:	e021      	b.n	8007bba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	7c1b      	ldrb	r3, [r3, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10d      	bne.n	8007b9a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b86:	f107 0208 	add.w	r2, r7, #8
 8007b8a:	4610      	mov	r0, r2
 8007b8c:	4798      	blx	r3
 8007b8e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	3301      	adds	r3, #1
 8007b94:	2207      	movs	r2, #7
 8007b96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b98:	e00f      	b.n	8007bba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b9a:	6839      	ldr	r1, [r7, #0]
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 f9d9 	bl	8007f54 <USBD_CtlError>
        err++;
 8007ba2:	7afb      	ldrb	r3, [r7, #11]
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	72fb      	strb	r3, [r7, #11]
      break;
 8007ba8:	e007      	b.n	8007bba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f9d1 	bl	8007f54 <USBD_CtlError>
      err++;
 8007bb2:	7afb      	ldrb	r3, [r7, #11]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bb8:	bf00      	nop
  }

  if (err != 0U)
 8007bba:	7afb      	ldrb	r3, [r7, #11]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d11c      	bne.n	8007bfa <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007bc0:	893b      	ldrh	r3, [r7, #8]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d011      	beq.n	8007bea <USBD_GetDescriptor+0x2b6>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	88db      	ldrh	r3, [r3, #6]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00d      	beq.n	8007bea <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	88da      	ldrh	r2, [r3, #6]
 8007bd2:	893b      	ldrh	r3, [r7, #8]
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	bf28      	it	cs
 8007bd8:	4613      	movcs	r3, r2
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	461a      	mov	r2, r3
 8007be2:	68f9      	ldr	r1, [r7, #12]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fa1f 	bl	8008028 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	88db      	ldrh	r3, [r3, #6]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d104      	bne.n	8007bfc <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fa76 	bl	80080e4 <USBD_CtlSendStatus>
 8007bf8:	e000      	b.n	8007bfc <USBD_GetDescriptor+0x2c8>
    return;
 8007bfa:	bf00      	nop
    }
  }
}
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop

08007c04 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b084      	sub	sp, #16
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
 8007c0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	889b      	ldrh	r3, [r3, #4]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d130      	bne.n	8007c78 <USBD_SetAddress+0x74>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	88db      	ldrh	r3, [r3, #6]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d12c      	bne.n	8007c78 <USBD_SetAddress+0x74>
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	885b      	ldrh	r3, [r3, #2]
 8007c22:	2b7f      	cmp	r3, #127	; 0x7f
 8007c24:	d828      	bhi.n	8007c78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c38:	2b03      	cmp	r3, #3
 8007c3a:	d104      	bne.n	8007c46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f988 	bl	8007f54 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c44:	e01c      	b.n	8007c80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	7bfa      	ldrb	r2, [r7, #15]
 8007c4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	4619      	mov	r1, r3
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fe55 	bl	8008902 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 fa43 	bl	80080e4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d004      	beq.n	8007c6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2202      	movs	r2, #2
 8007c68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6c:	e008      	b.n	8007c80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c76:	e003      	b.n	8007c80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 f96a 	bl	8007f54 <USBD_CtlError>
  }
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	885b      	ldrh	r3, [r3, #2]
 8007c96:	b2da      	uxtb	r2, r3
 8007c98:	4b41      	ldr	r3, [pc, #260]	; (8007da0 <USBD_SetConfig+0x118>)
 8007c9a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c9c:	4b40      	ldr	r3, [pc, #256]	; (8007da0 <USBD_SetConfig+0x118>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d904      	bls.n	8007cae <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f954 	bl	8007f54 <USBD_CtlError>
 8007cac:	e075      	b.n	8007d9a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d002      	beq.n	8007cbe <USBD_SetConfig+0x36>
 8007cb8:	2b03      	cmp	r3, #3
 8007cba:	d023      	beq.n	8007d04 <USBD_SetConfig+0x7c>
 8007cbc:	e062      	b.n	8007d84 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007cbe:	4b38      	ldr	r3, [pc, #224]	; (8007da0 <USBD_SetConfig+0x118>)
 8007cc0:	781b      	ldrb	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d01a      	beq.n	8007cfc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007cc6:	4b36      	ldr	r3, [pc, #216]	; (8007da0 <USBD_SetConfig+0x118>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007cd8:	4b31      	ldr	r3, [pc, #196]	; (8007da0 <USBD_SetConfig+0x118>)
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7ff f9f3 	bl	80070ca <USBD_SetClassConfig>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d104      	bne.n	8007cf4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007cea:	6839      	ldr	r1, [r7, #0]
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f931 	bl	8007f54 <USBD_CtlError>
            return;
 8007cf2:	e052      	b.n	8007d9a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f9f5 	bl	80080e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007cfa:	e04e      	b.n	8007d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 f9f1 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007d02:	e04a      	b.n	8007d9a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007d04:	4b26      	ldr	r3, [pc, #152]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d112      	bne.n	8007d32 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007d14:	4b22      	ldr	r3, [pc, #136]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007d1e:	4b20      	ldr	r3, [pc, #128]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d20:	781b      	ldrb	r3, [r3, #0]
 8007d22:	4619      	mov	r1, r3
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff f9ef 	bl	8007108 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9da 	bl	80080e4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007d30:	e033      	b.n	8007d9a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007d32:	4b1b      	ldr	r3, [pc, #108]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	461a      	mov	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d01d      	beq.n	8007d7c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	4619      	mov	r1, r3
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff f9dd 	bl	8007108 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007d4e:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007d58:	4b11      	ldr	r3, [pc, #68]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7ff f9b3 	bl	80070ca <USBD_SetClassConfig>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d104      	bne.n	8007d74 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007d6a:	6839      	ldr	r1, [r7, #0]
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f8f1 	bl	8007f54 <USBD_CtlError>
            return;
 8007d72:	e012      	b.n	8007d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f9b5 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007d7a:	e00e      	b.n	8007d9a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f9b1 	bl	80080e4 <USBD_CtlSendStatus>
        break;
 8007d82:	e00a      	b.n	8007d9a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f8e4 	bl	8007f54 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007d8c:	4b04      	ldr	r3, [pc, #16]	; (8007da0 <USBD_SetConfig+0x118>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7ff f9b8 	bl	8007108 <USBD_ClrClassConfig>
        break;
 8007d98:	bf00      	nop
    }
  }
}
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000374 	.word	0x20000374

08007da4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b082      	sub	sp, #8
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d004      	beq.n	8007dc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007db6:	6839      	ldr	r1, [r7, #0]
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f000 f8cb 	bl	8007f54 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007dbe:	e021      	b.n	8007e04 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	db17      	blt.n	8007dfa <USBD_GetConfig+0x56>
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	dd02      	ble.n	8007dd4 <USBD_GetConfig+0x30>
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d00b      	beq.n	8007dea <USBD_GetConfig+0x46>
 8007dd2:	e012      	b.n	8007dfa <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	2201      	movs	r2, #1
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f920 	bl	8008028 <USBD_CtlSendData>
        break;
 8007de8:	e00c      	b.n	8007e04 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	3304      	adds	r3, #4
 8007dee:	2201      	movs	r2, #1
 8007df0:	4619      	mov	r1, r3
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 f918 	bl	8008028 <USBD_CtlSendData>
        break;
 8007df8:	e004      	b.n	8007e04 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007dfa:	6839      	ldr	r1, [r7, #0]
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f000 f8a9 	bl	8007f54 <USBD_CtlError>
        break;
 8007e02:	bf00      	nop
}
 8007e04:	bf00      	nop
 8007e06:	3708      	adds	r7, #8
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d81e      	bhi.n	8007e60 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	88db      	ldrh	r3, [r3, #6]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d004      	beq.n	8007e34 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007e2a:	6839      	ldr	r1, [r7, #0]
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f891 	bl	8007f54 <USBD_CtlError>
        break;
 8007e32:	e01a      	b.n	8007e6a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d005      	beq.n	8007e50 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f043 0202 	orr.w	r2, r3, #2
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	330c      	adds	r3, #12
 8007e54:	2202      	movs	r2, #2
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f8e5 	bl	8008028 <USBD_CtlSendData>
      break;
 8007e5e:	e004      	b.n	8007e6a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f876 	bl	8007f54 <USBD_CtlError>
      break;
 8007e68:	bf00      	nop
  }
}
 8007e6a:	bf00      	nop
 8007e6c:	3708      	adds	r7, #8
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e72:	b580      	push	{r7, lr}
 8007e74:	b082      	sub	sp, #8
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	885b      	ldrh	r3, [r3, #2]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d106      	bne.n	8007e92 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f000 f929 	bl	80080e4 <USBD_CtlSendStatus>
  }
}
 8007e92:	bf00      	nop
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b082      	sub	sp, #8
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d80b      	bhi.n	8007ec8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	885b      	ldrh	r3, [r3, #2]
 8007eb4:	2b01      	cmp	r3, #1
 8007eb6:	d10c      	bne.n	8007ed2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f90f 	bl	80080e4 <USBD_CtlSendStatus>
      }
      break;
 8007ec6:	e004      	b.n	8007ed2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007ec8:	6839      	ldr	r1, [r7, #0]
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 f842 	bl	8007f54 <USBD_CtlError>
      break;
 8007ed0:	e000      	b.n	8007ed4 <USBD_ClrFeature+0x3a>
      break;
 8007ed2:	bf00      	nop
  }
}
 8007ed4:	bf00      	nop
 8007ed6:	3708      	adds	r7, #8
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007edc:	b480      	push	{r7}
 8007ede:	b083      	sub	sp, #12
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	781a      	ldrb	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	785a      	ldrb	r2, [r3, #1]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	3302      	adds	r3, #2
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	3303      	adds	r3, #3
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	021b      	lsls	r3, r3, #8
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	4413      	add	r3, r2
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	3304      	adds	r3, #4
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	b29a      	uxth	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	3305      	adds	r3, #5
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	021b      	lsls	r3, r3, #8
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	4413      	add	r3, r2
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	3306      	adds	r3, #6
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	3307      	adds	r3, #7
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	4413      	add	r3, r2
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	80da      	strh	r2, [r3, #6]

}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc6b 	bl	800883c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007f66:	2100      	movs	r1, #0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fc67 	bl	800883c <USBD_LL_StallEP>
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b086      	sub	sp, #24
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d032      	beq.n	8007ff2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007f8c:	68f8      	ldr	r0, [r7, #12]
 8007f8e:	f000 f834 	bl	8007ffa <USBD_GetLen>
 8007f92:	4603      	mov	r3, r0
 8007f94:	3301      	adds	r3, #1
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007fa0:	7dfb      	ldrb	r3, [r7, #23]
 8007fa2:	1c5a      	adds	r2, r3, #1
 8007fa4:	75fa      	strb	r2, [r7, #23]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	4413      	add	r3, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	7812      	ldrb	r2, [r2, #0]
 8007fb0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	1c5a      	adds	r2, r3, #1
 8007fb6:	75fa      	strb	r2, [r7, #23]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	2203      	movs	r2, #3
 8007fc0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007fc2:	e012      	b.n	8007fea <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	1c5a      	adds	r2, r3, #1
 8007fc8:	60fa      	str	r2, [r7, #12]
 8007fca:	7dfa      	ldrb	r2, [r7, #23]
 8007fcc:	1c51      	adds	r1, r2, #1
 8007fce:	75f9      	strb	r1, [r7, #23]
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007fda:	7dfb      	ldrb	r3, [r7, #23]
 8007fdc:	1c5a      	adds	r2, r3, #1
 8007fde:	75fa      	strb	r2, [r7, #23]
 8007fe0:	461a      	mov	r2, r3
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1e8      	bne.n	8007fc4 <USBD_GetString+0x4e>
    }
  }
}
 8007ff2:	bf00      	nop
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ffa:	b480      	push	{r7}
 8007ffc:	b085      	sub	sp, #20
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008006:	e005      	b.n	8008014 <USBD_GetLen+0x1a>
  {
    len++;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	3301      	adds	r3, #1
 800800c:	73fb      	strb	r3, [r7, #15]
    buf++;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3301      	adds	r3, #1
 8008012:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d1f5      	bne.n	8008008 <USBD_GetLen+0xe>
  }

  return len;
 800801c:	7bfb      	ldrb	r3, [r7, #15]
}
 800801e:	4618      	mov	r0, r3
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	4613      	mov	r3, r2
 8008034:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2202      	movs	r2, #2
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800803e:	88fa      	ldrh	r2, [r7, #6]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008044:	88fa      	ldrh	r2, [r7, #6]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800804a:	88fb      	ldrh	r3, [r7, #6]
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	2100      	movs	r1, #0
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f000 fc75 	bl	8008940 <USBD_LL_Transmit>

  return USBD_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3710      	adds	r7, #16
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	4613      	mov	r3, r2
 800806c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800806e:	88fb      	ldrh	r3, [r7, #6]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	2100      	movs	r1, #0
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fc63 	bl	8008940 <USBD_LL_Transmit>

  return USBD_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	4613      	mov	r3, r2
 8008090:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2203      	movs	r2, #3
 8008096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800809a:	88fa      	ldrh	r2, [r7, #6]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80080a2:	88fa      	ldrh	r2, [r7, #6]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080aa:	88fb      	ldrh	r3, [r7, #6]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	2100      	movs	r1, #0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f000 fc68 	bl	8008986 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	4613      	mov	r3, r2
 80080cc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	2100      	movs	r1, #0
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f000 fc56 	bl	8008986 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80080da:	2300      	movs	r3, #0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3710      	adds	r7, #16
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80080f4:	2300      	movs	r3, #0
 80080f6:	2200      	movs	r2, #0
 80080f8:	2100      	movs	r1, #0
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 fc20 	bl	8008940 <USBD_LL_Transmit>

  return USBD_OK;
 8008100:	2300      	movs	r3, #0
}
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800810a:	b580      	push	{r7, lr}
 800810c:	b082      	sub	sp, #8
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2205      	movs	r2, #5
 8008116:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fc30 	bl	8008986 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008126:	2300      	movs	r3, #0
}
 8008128:	4618      	mov	r0, r3
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}

08008130 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008134:	2200      	movs	r2, #0
 8008136:	4912      	ldr	r1, [pc, #72]	; (8008180 <MX_USB_DEVICE_Init+0x50>)
 8008138:	4812      	ldr	r0, [pc, #72]	; (8008184 <MX_USB_DEVICE_Init+0x54>)
 800813a:	f7fe ff6c 	bl	8007016 <USBD_Init>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008144:	f7fa faf4 	bl	8002730 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008148:	490f      	ldr	r1, [pc, #60]	; (8008188 <MX_USB_DEVICE_Init+0x58>)
 800814a:	480e      	ldr	r0, [pc, #56]	; (8008184 <MX_USB_DEVICE_Init+0x54>)
 800814c:	f7fe ff8e 	bl	800706c <USBD_RegisterClass>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008156:	f7fa faeb 	bl	8002730 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800815a:	490c      	ldr	r1, [pc, #48]	; (800818c <MX_USB_DEVICE_Init+0x5c>)
 800815c:	4809      	ldr	r0, [pc, #36]	; (8008184 <MX_USB_DEVICE_Init+0x54>)
 800815e:	f7fe febf 	bl	8006ee0 <USBD_CDC_RegisterInterface>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008168:	f7fa fae2 	bl	8002730 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800816c:	4805      	ldr	r0, [pc, #20]	; (8008184 <MX_USB_DEVICE_Init+0x54>)
 800816e:	f7fe ff96 	bl	800709e <USBD_Start>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008178:	f7fa fada 	bl	8002730 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800817c:	bf00      	nop
 800817e:	bd80      	pop	{r7, pc}
 8008180:	20000130 	.word	0x20000130
 8008184:	20000740 	.word	0x20000740
 8008188:	2000001c 	.word	0x2000001c
 800818c:	20000120 	.word	0x20000120

08008190 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008194:	2200      	movs	r2, #0
 8008196:	4905      	ldr	r1, [pc, #20]	; (80081ac <CDC_Init_FS+0x1c>)
 8008198:	4805      	ldr	r0, [pc, #20]	; (80081b0 <CDC_Init_FS+0x20>)
 800819a:	f7fe feb7 	bl	8006f0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800819e:	4905      	ldr	r1, [pc, #20]	; (80081b4 <CDC_Init_FS+0x24>)
 80081a0:	4803      	ldr	r0, [pc, #12]	; (80081b0 <CDC_Init_FS+0x20>)
 80081a2:	f7fe fecc 	bl	8006f3e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80081a6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	bd80      	pop	{r7, pc}
 80081ac:	20000dec 	.word	0x20000dec
 80081b0:	20000740 	.word	0x20000740
 80081b4:	20000a04 	.word	0x20000a04

080081b8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80081bc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80081be:	4618      	mov	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bc80      	pop	{r7}
 80081c4:	4770      	bx	lr
	...

080081c8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	6039      	str	r1, [r7, #0]
 80081d2:	71fb      	strb	r3, [r7, #7]
 80081d4:	4613      	mov	r3, r2
 80081d6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80081d8:	79fb      	ldrb	r3, [r7, #7]
 80081da:	2b23      	cmp	r3, #35	; 0x23
 80081dc:	d84a      	bhi.n	8008274 <CDC_Control_FS+0xac>
 80081de:	a201      	add	r2, pc, #4	; (adr r2, 80081e4 <CDC_Control_FS+0x1c>)
 80081e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e4:	08008275 	.word	0x08008275
 80081e8:	08008275 	.word	0x08008275
 80081ec:	08008275 	.word	0x08008275
 80081f0:	08008275 	.word	0x08008275
 80081f4:	08008275 	.word	0x08008275
 80081f8:	08008275 	.word	0x08008275
 80081fc:	08008275 	.word	0x08008275
 8008200:	08008275 	.word	0x08008275
 8008204:	08008275 	.word	0x08008275
 8008208:	08008275 	.word	0x08008275
 800820c:	08008275 	.word	0x08008275
 8008210:	08008275 	.word	0x08008275
 8008214:	08008275 	.word	0x08008275
 8008218:	08008275 	.word	0x08008275
 800821c:	08008275 	.word	0x08008275
 8008220:	08008275 	.word	0x08008275
 8008224:	08008275 	.word	0x08008275
 8008228:	08008275 	.word	0x08008275
 800822c:	08008275 	.word	0x08008275
 8008230:	08008275 	.word	0x08008275
 8008234:	08008275 	.word	0x08008275
 8008238:	08008275 	.word	0x08008275
 800823c:	08008275 	.word	0x08008275
 8008240:	08008275 	.word	0x08008275
 8008244:	08008275 	.word	0x08008275
 8008248:	08008275 	.word	0x08008275
 800824c:	08008275 	.word	0x08008275
 8008250:	08008275 	.word	0x08008275
 8008254:	08008275 	.word	0x08008275
 8008258:	08008275 	.word	0x08008275
 800825c:	08008275 	.word	0x08008275
 8008260:	08008275 	.word	0x08008275
 8008264:	08008275 	.word	0x08008275
 8008268:	08008275 	.word	0x08008275
 800826c:	08008275 	.word	0x08008275
 8008270:	08008275 	.word	0x08008275
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008274:	bf00      	nop
  }

  return (USBD_OK);
 8008276:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008278:	4618      	mov	r0, r3
 800827a:	370c      	adds	r7, #12
 800827c:	46bd      	mov	sp, r7
 800827e:	bc80      	pop	{r7}
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop

08008284 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4810      	ldr	r0, [pc, #64]	; (80082d4 <CDC_Receive_FS+0x50>)
 8008292:	f7fe fe54 	bl	8006f3e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008296:	480f      	ldr	r0, [pc, #60]	; (80082d4 <CDC_Receive_FS+0x50>)
 8008298:	f7fe fe93 	bl	8006fc2 <USBD_CDC_ReceivePacket>
  memcpy(rxBuffer, Buf, (*Len) + 1);
 800829c:	4b0e      	ldr	r3, [pc, #56]	; (80082d8 <CDC_Receive_FS+0x54>)
 800829e:	6818      	ldr	r0, [r3, #0]
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	461a      	mov	r2, r3
 80082a8:	6879      	ldr	r1, [r7, #4]
 80082aa:	f000 fc41 	bl	8008b30 <memcpy>
  incomingMessageFlag=1;
 80082ae:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <CDC_Receive_FS+0x58>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80082b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082b8:	4809      	ldr	r0, [pc, #36]	; (80082e0 <CDC_Receive_FS+0x5c>)
 80082ba:	f7fb fadf 	bl	800387c <HAL_GPIO_TogglePin>
  sizeOfMessage=*Len;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	b2da      	uxtb	r2, r3
 80082c4:	4b07      	ldr	r3, [pc, #28]	; (80082e4 <CDC_Receive_FS+0x60>)
 80082c6:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 80082c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	20000740 	.word	0x20000740
 80082d8:	200006a0 	.word	0x200006a0
 80082dc:	20000375 	.word	0x20000375
 80082e0:	40011000 	.word	0x40011000
 80082e4:	20000698 	.word	0x20000698

080082e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80082f8:	4b0d      	ldr	r3, [pc, #52]	; (8008330 <CDC_Transmit_FS+0x48>)
 80082fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008306:	2b00      	cmp	r3, #0
 8008308:	d001      	beq.n	800830e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800830a:	2301      	movs	r3, #1
 800830c:	e00b      	b.n	8008326 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800830e:	887b      	ldrh	r3, [r7, #2]
 8008310:	461a      	mov	r2, r3
 8008312:	6879      	ldr	r1, [r7, #4]
 8008314:	4806      	ldr	r0, [pc, #24]	; (8008330 <CDC_Transmit_FS+0x48>)
 8008316:	f7fe fdf9 	bl	8006f0c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800831a:	4805      	ldr	r0, [pc, #20]	; (8008330 <CDC_Transmit_FS+0x48>)
 800831c:	f7fe fe22 	bl	8006f64 <USBD_CDC_TransmitPacket>
 8008320:	4603      	mov	r3, r0
 8008322:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008324:	7bfb      	ldrb	r3, [r7, #15]
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000740 	.word	0x20000740

08008334 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	4603      	mov	r3, r0
 800833c:	6039      	str	r1, [r7, #0]
 800833e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2212      	movs	r2, #18
 8008344:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	bc80      	pop	{r7}
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	2000014c 	.word	0x2000014c

08008358 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	4603      	mov	r3, r0
 8008360:	6039      	str	r1, [r7, #0]
 8008362:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2204      	movs	r2, #4
 8008368:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800836a:	4b03      	ldr	r3, [pc, #12]	; (8008378 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bc80      	pop	{r7}
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	20000160 	.word	0x20000160

0800837c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	6039      	str	r1, [r7, #0]
 8008386:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d105      	bne.n	800839a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	4907      	ldr	r1, [pc, #28]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008392:	4808      	ldr	r0, [pc, #32]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008394:	f7ff fdef 	bl	8007f76 <USBD_GetString>
 8008398:	e004      	b.n	80083a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800839a:	683a      	ldr	r2, [r7, #0]
 800839c:	4904      	ldr	r1, [pc, #16]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <USBD_FS_ProductStrDescriptor+0x38>)
 80083a0:	f7ff fde9 	bl	8007f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083a4:	4b02      	ldr	r3, [pc, #8]	; (80083b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	3708      	adds	r7, #8
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200011d4 	.word	0x200011d4
 80083b4:	08008e7c 	.word	0x08008e7c

080083b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	6039      	str	r1, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	4904      	ldr	r1, [pc, #16]	; (80083d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80083c8:	4804      	ldr	r0, [pc, #16]	; (80083dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80083ca:	f7ff fdd4 	bl	8007f76 <USBD_GetString>
  return USBD_StrDesc;
 80083ce:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	200011d4 	.word	0x200011d4
 80083dc:	08008e7c 	.word	0x08008e7c

080083e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	4603      	mov	r3, r0
 80083e8:	6039      	str	r1, [r7, #0]
 80083ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	221a      	movs	r2, #26
 80083f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083f2:	f000 f843 	bl	800847c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083f6:	4b02      	ldr	r3, [pc, #8]	; (8008400 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	20000164 	.word	0x20000164

08008404 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008410:	79fb      	ldrb	r3, [r7, #7]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008416:	683a      	ldr	r2, [r7, #0]
 8008418:	4907      	ldr	r1, [pc, #28]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
 800841a:	4808      	ldr	r0, [pc, #32]	; (800843c <USBD_FS_ConfigStrDescriptor+0x38>)
 800841c:	f7ff fdab 	bl	8007f76 <USBD_GetString>
 8008420:	e004      	b.n	800842c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008422:	683a      	ldr	r2, [r7, #0]
 8008424:	4904      	ldr	r1, [pc, #16]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008426:	4805      	ldr	r0, [pc, #20]	; (800843c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008428:	f7ff fda5 	bl	8007f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 800842c:	4b02      	ldr	r3, [pc, #8]	; (8008438 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800842e:	4618      	mov	r0, r3
 8008430:	3708      	adds	r7, #8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200011d4 	.word	0x200011d4
 800843c:	08008e88 	.word	0x08008e88

08008440 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	4603      	mov	r3, r0
 8008448:	6039      	str	r1, [r7, #0]
 800844a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800844c:	79fb      	ldrb	r3, [r7, #7]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d105      	bne.n	800845e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	4907      	ldr	r1, [pc, #28]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008456:	4808      	ldr	r0, [pc, #32]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008458:	f7ff fd8d 	bl	8007f76 <USBD_GetString>
 800845c:	e004      	b.n	8008468 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800845e:	683a      	ldr	r2, [r7, #0]
 8008460:	4904      	ldr	r1, [pc, #16]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008462:	4805      	ldr	r0, [pc, #20]	; (8008478 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008464:	f7ff fd87 	bl	8007f76 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800846a:	4618      	mov	r0, r3
 800846c:	3708      	adds	r7, #8
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	200011d4 	.word	0x200011d4
 8008478:	08008e94 	.word	0x08008e94

0800847c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <Get_SerialNum+0x44>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008488:	4b0e      	ldr	r3, [pc, #56]	; (80084c4 <Get_SerialNum+0x48>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800848e:	4b0e      	ldr	r3, [pc, #56]	; (80084c8 <Get_SerialNum+0x4c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4413      	add	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d009      	beq.n	80084b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80084a2:	2208      	movs	r2, #8
 80084a4:	4909      	ldr	r1, [pc, #36]	; (80084cc <Get_SerialNum+0x50>)
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 f814 	bl	80084d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80084ac:	2204      	movs	r2, #4
 80084ae:	4908      	ldr	r1, [pc, #32]	; (80084d0 <Get_SerialNum+0x54>)
 80084b0:	68b8      	ldr	r0, [r7, #8]
 80084b2:	f000 f80f 	bl	80084d4 <IntToUnicode>
  }
}
 80084b6:	bf00      	nop
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	1ffff7e8 	.word	0x1ffff7e8
 80084c4:	1ffff7ec 	.word	0x1ffff7ec
 80084c8:	1ffff7f0 	.word	0x1ffff7f0
 80084cc:	20000166 	.word	0x20000166
 80084d0:	20000176 	.word	0x20000176

080084d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	60b9      	str	r1, [r7, #8]
 80084de:	4613      	mov	r3, r2
 80084e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084e2:	2300      	movs	r3, #0
 80084e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
 80084ea:	e027      	b.n	800853c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	0f1b      	lsrs	r3, r3, #28
 80084f0:	2b09      	cmp	r3, #9
 80084f2:	d80b      	bhi.n	800850c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	0f1b      	lsrs	r3, r3, #28
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	4619      	mov	r1, r3
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	440b      	add	r3, r1
 8008504:	3230      	adds	r2, #48	; 0x30
 8008506:	b2d2      	uxtb	r2, r2
 8008508:	701a      	strb	r2, [r3, #0]
 800850a:	e00a      	b.n	8008522 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	0f1b      	lsrs	r3, r3, #28
 8008510:	b2da      	uxtb	r2, r3
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	005b      	lsls	r3, r3, #1
 8008516:	4619      	mov	r1, r3
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	440b      	add	r3, r1
 800851c:	3237      	adds	r2, #55	; 0x37
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008528:	7dfb      	ldrb	r3, [r7, #23]
 800852a:	005b      	lsls	r3, r3, #1
 800852c:	3301      	adds	r3, #1
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4413      	add	r3, r2
 8008532:	2200      	movs	r2, #0
 8008534:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008536:	7dfb      	ldrb	r3, [r7, #23]
 8008538:	3301      	adds	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
 800853c:	7dfa      	ldrb	r2, [r7, #23]
 800853e:	79fb      	ldrb	r3, [r7, #7]
 8008540:	429a      	cmp	r2, r3
 8008542:	d3d3      	bcc.n	80084ec <IntToUnicode+0x18>
  }
}
 8008544:	bf00      	nop
 8008546:	371c      	adds	r7, #28
 8008548:	46bd      	mov	sp, r7
 800854a:	bc80      	pop	{r7}
 800854c:	4770      	bx	lr
	...

08008550 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a0d      	ldr	r2, [pc, #52]	; (8008594 <HAL_PCD_MspInit+0x44>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d113      	bne.n	800858a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008562:	4b0d      	ldr	r3, [pc, #52]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008564:	69db      	ldr	r3, [r3, #28]
 8008566:	4a0c      	ldr	r2, [pc, #48]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800856c:	61d3      	str	r3, [r2, #28]
 800856e:	4b0a      	ldr	r3, [pc, #40]	; (8008598 <HAL_PCD_MspInit+0x48>)
 8008570:	69db      	ldr	r3, [r3, #28]
 8008572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800857a:	2200      	movs	r2, #0
 800857c:	2100      	movs	r1, #0
 800857e:	2014      	movs	r0, #20
 8008580:	f7fa ffb7 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008584:	2014      	movs	r0, #20
 8008586:	f7fa ffd0 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40005c00 	.word	0x40005c00
 8008598:	40021000 	.word	0x40021000

0800859c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fdbb 	bl	800712e <USBD_LL_SetupStage>
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}

080085c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	460b      	mov	r3, r1
 80085ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80085d2:	78fb      	ldrb	r3, [r7, #3]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	015b      	lsls	r3, r3, #5
 80085d8:	4413      	add	r3, r2
 80085da:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	78fb      	ldrb	r3, [r7, #3]
 80085e2:	4619      	mov	r1, r3
 80085e4:	f7fe fdee 	bl	80071c4 <USBD_LL_DataOutStage>
}
 80085e8:	bf00      	nop
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	015b      	lsls	r3, r3, #5
 8008608:	4413      	add	r3, r2
 800860a:	333c      	adds	r3, #60	; 0x3c
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	78fb      	ldrb	r3, [r7, #3]
 8008610:	4619      	mov	r1, r3
 8008612:	f7fe fe48 	bl	80072a6 <USBD_LL_DataInStage>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b082      	sub	sp, #8
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800862c:	4618      	mov	r0, r3
 800862e:	f7fe ff58 	bl	80074e2 <USBD_LL_SOF>
}
 8008632:	bf00      	nop
 8008634:	3708      	adds	r7, #8
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800863a:	b580      	push	{r7, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008642:	2301      	movs	r3, #1
 8008644:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	689b      	ldr	r3, [r3, #8]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d001      	beq.n	8008652 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800864e:	f7fa f86f 	bl	8002730 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008658:	7bfa      	ldrb	r2, [r7, #15]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fe ff08 	bl	8007472 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008668:	4618      	mov	r0, r3
 800866a:	f7fe fec1 	bl	80073f0 <USBD_LL_Reset>
}
 800866e:	bf00      	nop
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
	...

08008678 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe ff02 	bl	8007490 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <HAL_PCD_SuspendCallback+0x30>)
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	4a03      	ldr	r2, [pc, #12]	; (80086a8 <HAL_PCD_SuspendCallback+0x30>)
 800869a:	f043 0306 	orr.w	r3, r3, #6
 800869e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed00 	.word	0xe000ed00

080086ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fefc 	bl	80074b8 <USBD_LL_Resume>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80086d0:	4a28      	ldr	r2, [pc, #160]	; (8008774 <USBD_LL_Init+0xac>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4a26      	ldr	r2, [pc, #152]	; (8008774 <USBD_LL_Init+0xac>)
 80086dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80086e0:	4b24      	ldr	r3, [pc, #144]	; (8008774 <USBD_LL_Init+0xac>)
 80086e2:	4a25      	ldr	r2, [pc, #148]	; (8008778 <USBD_LL_Init+0xb0>)
 80086e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80086e6:	4b23      	ldr	r3, [pc, #140]	; (8008774 <USBD_LL_Init+0xac>)
 80086e8:	2208      	movs	r2, #8
 80086ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80086ec:	4b21      	ldr	r3, [pc, #132]	; (8008774 <USBD_LL_Init+0xac>)
 80086ee:	2202      	movs	r2, #2
 80086f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80086f2:	4b20      	ldr	r3, [pc, #128]	; (8008774 <USBD_LL_Init+0xac>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80086f8:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <USBD_LL_Init+0xac>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80086fe:	4b1d      	ldr	r3, [pc, #116]	; (8008774 <USBD_LL_Init+0xac>)
 8008700:	2200      	movs	r2, #0
 8008702:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008704:	481b      	ldr	r0, [pc, #108]	; (8008774 <USBD_LL_Init+0xac>)
 8008706:	f7fb f8d1 	bl	80038ac <HAL_PCD_Init>
 800870a:	4603      	mov	r3, r0
 800870c:	2b00      	cmp	r3, #0
 800870e:	d001      	beq.n	8008714 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008710:	f7fa f80e 	bl	8002730 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800871a:	2318      	movs	r3, #24
 800871c:	2200      	movs	r2, #0
 800871e:	2100      	movs	r1, #0
 8008720:	f7fb ff6a 	bl	80045f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800872a:	2358      	movs	r3, #88	; 0x58
 800872c:	2200      	movs	r2, #0
 800872e:	2180      	movs	r1, #128	; 0x80
 8008730:	f7fb ff62 	bl	80045f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800873a:	23c0      	movs	r3, #192	; 0xc0
 800873c:	2200      	movs	r2, #0
 800873e:	2181      	movs	r1, #129	; 0x81
 8008740:	f7fb ff5a 	bl	80045f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800874a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800874e:	2200      	movs	r2, #0
 8008750:	2101      	movs	r1, #1
 8008752:	f7fb ff51 	bl	80045f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800875c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008760:	2200      	movs	r2, #0
 8008762:	2182      	movs	r1, #130	; 0x82
 8008764:	f7fb ff48 	bl	80045f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3708      	adds	r7, #8
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	200013d4 	.word	0x200013d4
 8008778:	40005c00 	.word	0x40005c00

0800877c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b084      	sub	sp, #16
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008788:	2300      	movs	r3, #0
 800878a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008792:	4618      	mov	r0, r3
 8008794:	f7fb f96b 	bl	8003a6e <HAL_PCD_Start>
 8008798:	4603      	mov	r3, r0
 800879a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800879c:	7bfb      	ldrb	r3, [r7, #15]
 800879e:	4618      	mov	r0, r3
 80087a0:	f000 f948 	bl	8008a34 <USBD_Get_USB_Status>
 80087a4:	4603      	mov	r3, r0
 80087a6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80087a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b084      	sub	sp, #16
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	4608      	mov	r0, r1
 80087bc:	4611      	mov	r1, r2
 80087be:	461a      	mov	r2, r3
 80087c0:	4603      	mov	r3, r0
 80087c2:	70fb      	strb	r3, [r7, #3]
 80087c4:	460b      	mov	r3, r1
 80087c6:	70bb      	strb	r3, [r7, #2]
 80087c8:	4613      	mov	r3, r2
 80087ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087cc:	2300      	movs	r3, #0
 80087ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087da:	78bb      	ldrb	r3, [r7, #2]
 80087dc:	883a      	ldrh	r2, [r7, #0]
 80087de:	78f9      	ldrb	r1, [r7, #3]
 80087e0:	f7fb fa9e 	bl	8003d20 <HAL_PCD_EP_Open>
 80087e4:	4603      	mov	r3, r0
 80087e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	4618      	mov	r0, r3
 80087ec:	f000 f922 	bl	8008a34 <USBD_Get_USB_Status>
 80087f0:	4603      	mov	r3, r0
 80087f2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80087f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b084      	sub	sp, #16
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800880e:	2300      	movs	r3, #0
 8008810:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	4611      	mov	r1, r2
 800881c:	4618      	mov	r0, r3
 800881e:	f7fb fadf 	bl	8003de0 <HAL_PCD_EP_Close>
 8008822:	4603      	mov	r3, r0
 8008824:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008826:	7bfb      	ldrb	r3, [r7, #15]
 8008828:	4618      	mov	r0, r3
 800882a:	f000 f903 	bl	8008a34 <USBD_Get_USB_Status>
 800882e:	4603      	mov	r3, r0
 8008830:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008832:	7bbb      	ldrb	r3, [r7, #14]
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800884c:	2300      	movs	r3, #0
 800884e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008856:	78fa      	ldrb	r2, [r7, #3]
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7fb fb89 	bl	8003f72 <HAL_PCD_EP_SetStall>
 8008860:	4603      	mov	r3, r0
 8008862:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008864:	7bfb      	ldrb	r3, [r7, #15]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 f8e4 	bl	8008a34 <USBD_Get_USB_Status>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008870:	7bbb      	ldrb	r3, [r7, #14]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3710      	adds	r7, #16
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
 8008882:	460b      	mov	r3, r1
 8008884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008886:	2300      	movs	r3, #0
 8008888:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800888a:	2300      	movs	r3, #0
 800888c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008894:	78fa      	ldrb	r2, [r7, #3]
 8008896:	4611      	mov	r1, r2
 8008898:	4618      	mov	r0, r3
 800889a:	f7fb fbc4 	bl	8004026 <HAL_PCD_EP_ClrStall>
 800889e:	4603      	mov	r3, r0
 80088a0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	4618      	mov	r0, r3
 80088a6:	f000 f8c5 	bl	8008a34 <USBD_Get_USB_Status>
 80088aa:	4603      	mov	r3, r0
 80088ac:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	460b      	mov	r3, r1
 80088c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088ca:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80088cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	da08      	bge.n	80088e6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	015b      	lsls	r3, r3, #5
 80088de:	4413      	add	r3, r2
 80088e0:	332a      	adds	r3, #42	; 0x2a
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	e008      	b.n	80088f8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	015b      	lsls	r3, r3, #5
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80088f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bc80      	pop	{r7}
 8008900:	4770      	bx	lr

08008902 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	460b      	mov	r3, r1
 800890c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800890e:	2300      	movs	r3, #0
 8008910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800891c:	78fa      	ldrb	r2, [r7, #3]
 800891e:	4611      	mov	r1, r2
 8008920:	4618      	mov	r0, r3
 8008922:	f7fb f9d8 	bl	8003cd6 <HAL_PCD_SetAddress>
 8008926:	4603      	mov	r3, r0
 8008928:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	4618      	mov	r0, r3
 800892e:	f000 f881 	bl	8008a34 <USBD_Get_USB_Status>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008936:	7bbb      	ldrb	r3, [r7, #14]
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	607a      	str	r2, [r7, #4]
 800894a:	461a      	mov	r2, r3
 800894c:	460b      	mov	r3, r1
 800894e:	72fb      	strb	r3, [r7, #11]
 8008950:	4613      	mov	r3, r2
 8008952:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008954:	2300      	movs	r3, #0
 8008956:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008958:	2300      	movs	r3, #0
 800895a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008962:	893b      	ldrh	r3, [r7, #8]
 8008964:	7af9      	ldrb	r1, [r7, #11]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	f7fb faca 	bl	8003f00 <HAL_PCD_EP_Transmit>
 800896c:	4603      	mov	r3, r0
 800896e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008970:	7dfb      	ldrb	r3, [r7, #23]
 8008972:	4618      	mov	r0, r3
 8008974:	f000 f85e 	bl	8008a34 <USBD_Get_USB_Status>
 8008978:	4603      	mov	r3, r0
 800897a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800897c:	7dbb      	ldrb	r3, [r7, #22]
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008986:	b580      	push	{r7, lr}
 8008988:	b086      	sub	sp, #24
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	607a      	str	r2, [r7, #4]
 8008990:	461a      	mov	r2, r3
 8008992:	460b      	mov	r3, r1
 8008994:	72fb      	strb	r3, [r7, #11]
 8008996:	4613      	mov	r3, r2
 8008998:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800899e:	2300      	movs	r3, #0
 80089a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089a8:	893b      	ldrh	r3, [r7, #8]
 80089aa:	7af9      	ldrb	r1, [r7, #11]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	f7fb fa59 	bl	8003e64 <HAL_PCD_EP_Receive>
 80089b2:	4603      	mov	r3, r0
 80089b4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80089b6:	7dfb      	ldrb	r3, [r7, #23]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f83b 	bl	8008a34 <USBD_Get_USB_Status>
 80089be:	4603      	mov	r3, r0
 80089c0:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 80089c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3718      	adds	r7, #24
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b082      	sub	sp, #8
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089de:	78fa      	ldrb	r2, [r7, #3]
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7fb fa78 	bl	8003ed8 <HAL_PCD_EP_GetRxCount>
 80089e8:	4603      	mov	r3, r0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

080089f4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80089fc:	4b02      	ldr	r3, [pc, #8]	; (8008a08 <USBD_static_malloc+0x14>)
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bc80      	pop	{r7}
 8008a06:	4770      	bx	lr
 8008a08:	20000378 	.word	0x20000378

08008a0c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b083      	sub	sp, #12
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]

}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bc80      	pop	{r7}
 8008a1c:	4770      	bx	lr

08008a1e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b083      	sub	sp, #12
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008a2a:	bf00      	nop
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bc80      	pop	{r7}
 8008a32:	4770      	bx	lr

08008a34 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b085      	sub	sp, #20
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d817      	bhi.n	8008a78 <USBD_Get_USB_Status+0x44>
 8008a48:	a201      	add	r2, pc, #4	; (adr r2, 8008a50 <USBD_Get_USB_Status+0x1c>)
 8008a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4e:	bf00      	nop
 8008a50:	08008a61 	.word	0x08008a61
 8008a54:	08008a67 	.word	0x08008a67
 8008a58:	08008a6d 	.word	0x08008a6d
 8008a5c:	08008a73 	.word	0x08008a73
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008a60:	2300      	movs	r3, #0
 8008a62:	73fb      	strb	r3, [r7, #15]
    break;
 8008a64:	e00b      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008a66:	2302      	movs	r3, #2
 8008a68:	73fb      	strb	r3, [r7, #15]
    break;
 8008a6a:	e008      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008a70:	e005      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008a72:	2302      	movs	r3, #2
 8008a74:	73fb      	strb	r3, [r7, #15]
    break;
 8008a76:	e002      	b.n	8008a7e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008a78:	2302      	movs	r3, #2
 8008a7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a7c:	bf00      	nop
  }
  return usb_status;
 8008a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3714      	adds	r7, #20
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bc80      	pop	{r7}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop

08008a8c <__errno>:
 8008a8c:	4b01      	ldr	r3, [pc, #4]	; (8008a94 <__errno+0x8>)
 8008a8e:	6818      	ldr	r0, [r3, #0]
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	20000180 	.word	0x20000180

08008a98 <__libc_init_array>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	4e0c      	ldr	r6, [pc, #48]	; (8008ad0 <__libc_init_array+0x38>)
 8008a9e:	4c0d      	ldr	r4, [pc, #52]	; (8008ad4 <__libc_init_array+0x3c>)
 8008aa0:	1ba4      	subs	r4, r4, r6
 8008aa2:	10a4      	asrs	r4, r4, #2
 8008aa4:	42a5      	cmp	r5, r4
 8008aa6:	d109      	bne.n	8008abc <__libc_init_array+0x24>
 8008aa8:	f000 f9d2 	bl	8008e50 <_init>
 8008aac:	2500      	movs	r5, #0
 8008aae:	4e0a      	ldr	r6, [pc, #40]	; (8008ad8 <__libc_init_array+0x40>)
 8008ab0:	4c0a      	ldr	r4, [pc, #40]	; (8008adc <__libc_init_array+0x44>)
 8008ab2:	1ba4      	subs	r4, r4, r6
 8008ab4:	10a4      	asrs	r4, r4, #2
 8008ab6:	42a5      	cmp	r5, r4
 8008ab8:	d105      	bne.n	8008ac6 <__libc_init_array+0x2e>
 8008aba:	bd70      	pop	{r4, r5, r6, pc}
 8008abc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ac0:	4798      	blx	r3
 8008ac2:	3501      	adds	r5, #1
 8008ac4:	e7ee      	b.n	8008aa4 <__libc_init_array+0xc>
 8008ac6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008aca:	4798      	blx	r3
 8008acc:	3501      	adds	r5, #1
 8008ace:	e7f2      	b.n	8008ab6 <__libc_init_array+0x1e>
 8008ad0:	08008fc4 	.word	0x08008fc4
 8008ad4:	08008fc4 	.word	0x08008fc4
 8008ad8:	08008fc4 	.word	0x08008fc4
 8008adc:	08008fc8 	.word	0x08008fc8

08008ae0 <__locale_ctype_ptr>:
 8008ae0:	4b04      	ldr	r3, [pc, #16]	; (8008af4 <__locale_ctype_ptr+0x14>)
 8008ae2:	4a05      	ldr	r2, [pc, #20]	; (8008af8 <__locale_ctype_ptr+0x18>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	bf08      	it	eq
 8008aec:	4613      	moveq	r3, r2
 8008aee:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008af2:	4770      	bx	lr
 8008af4:	20000180 	.word	0x20000180
 8008af8:	200001e4 	.word	0x200001e4

08008afc <malloc>:
 8008afc:	4b02      	ldr	r3, [pc, #8]	; (8008b08 <malloc+0xc>)
 8008afe:	4601      	mov	r1, r0
 8008b00:	6818      	ldr	r0, [r3, #0]
 8008b02:	f000 b829 	b.w	8008b58 <_malloc_r>
 8008b06:	bf00      	nop
 8008b08:	20000180 	.word	0x20000180

08008b0c <__ascii_mbtowc>:
 8008b0c:	b082      	sub	sp, #8
 8008b0e:	b901      	cbnz	r1, 8008b12 <__ascii_mbtowc+0x6>
 8008b10:	a901      	add	r1, sp, #4
 8008b12:	b142      	cbz	r2, 8008b26 <__ascii_mbtowc+0x1a>
 8008b14:	b14b      	cbz	r3, 8008b2a <__ascii_mbtowc+0x1e>
 8008b16:	7813      	ldrb	r3, [r2, #0]
 8008b18:	600b      	str	r3, [r1, #0]
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	1c10      	adds	r0, r2, #0
 8008b1e:	bf18      	it	ne
 8008b20:	2001      	movne	r0, #1
 8008b22:	b002      	add	sp, #8
 8008b24:	4770      	bx	lr
 8008b26:	4610      	mov	r0, r2
 8008b28:	e7fb      	b.n	8008b22 <__ascii_mbtowc+0x16>
 8008b2a:	f06f 0001 	mvn.w	r0, #1
 8008b2e:	e7f8      	b.n	8008b22 <__ascii_mbtowc+0x16>

08008b30 <memcpy>:
 8008b30:	b510      	push	{r4, lr}
 8008b32:	1e43      	subs	r3, r0, #1
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	d100      	bne.n	8008b3c <memcpy+0xc>
 8008b3a:	bd10      	pop	{r4, pc}
 8008b3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b44:	e7f7      	b.n	8008b36 <memcpy+0x6>

08008b46 <memset>:
 8008b46:	4603      	mov	r3, r0
 8008b48:	4402      	add	r2, r0
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d100      	bne.n	8008b50 <memset+0xa>
 8008b4e:	4770      	bx	lr
 8008b50:	f803 1b01 	strb.w	r1, [r3], #1
 8008b54:	e7f9      	b.n	8008b4a <memset+0x4>
	...

08008b58 <_malloc_r>:
 8008b58:	b570      	push	{r4, r5, r6, lr}
 8008b5a:	1ccd      	adds	r5, r1, #3
 8008b5c:	f025 0503 	bic.w	r5, r5, #3
 8008b60:	3508      	adds	r5, #8
 8008b62:	2d0c      	cmp	r5, #12
 8008b64:	bf38      	it	cc
 8008b66:	250c      	movcc	r5, #12
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	db01      	blt.n	8008b72 <_malloc_r+0x1a>
 8008b6e:	42a9      	cmp	r1, r5
 8008b70:	d903      	bls.n	8008b7a <_malloc_r+0x22>
 8008b72:	230c      	movs	r3, #12
 8008b74:	6033      	str	r3, [r6, #0]
 8008b76:	2000      	movs	r0, #0
 8008b78:	bd70      	pop	{r4, r5, r6, pc}
 8008b7a:	f000 f864 	bl	8008c46 <__malloc_lock>
 8008b7e:	4a21      	ldr	r2, [pc, #132]	; (8008c04 <_malloc_r+0xac>)
 8008b80:	6814      	ldr	r4, [r2, #0]
 8008b82:	4621      	mov	r1, r4
 8008b84:	b991      	cbnz	r1, 8008bac <_malloc_r+0x54>
 8008b86:	4c20      	ldr	r4, [pc, #128]	; (8008c08 <_malloc_r+0xb0>)
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	b91b      	cbnz	r3, 8008b94 <_malloc_r+0x3c>
 8008b8c:	4630      	mov	r0, r6
 8008b8e:	f000 f83d 	bl	8008c0c <_sbrk_r>
 8008b92:	6020      	str	r0, [r4, #0]
 8008b94:	4629      	mov	r1, r5
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 f838 	bl	8008c0c <_sbrk_r>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d124      	bne.n	8008bea <_malloc_r+0x92>
 8008ba0:	230c      	movs	r3, #12
 8008ba2:	4630      	mov	r0, r6
 8008ba4:	6033      	str	r3, [r6, #0]
 8008ba6:	f000 f84f 	bl	8008c48 <__malloc_unlock>
 8008baa:	e7e4      	b.n	8008b76 <_malloc_r+0x1e>
 8008bac:	680b      	ldr	r3, [r1, #0]
 8008bae:	1b5b      	subs	r3, r3, r5
 8008bb0:	d418      	bmi.n	8008be4 <_malloc_r+0x8c>
 8008bb2:	2b0b      	cmp	r3, #11
 8008bb4:	d90f      	bls.n	8008bd6 <_malloc_r+0x7e>
 8008bb6:	600b      	str	r3, [r1, #0]
 8008bb8:	18cc      	adds	r4, r1, r3
 8008bba:	50cd      	str	r5, [r1, r3]
 8008bbc:	4630      	mov	r0, r6
 8008bbe:	f000 f843 	bl	8008c48 <__malloc_unlock>
 8008bc2:	f104 000b 	add.w	r0, r4, #11
 8008bc6:	1d23      	adds	r3, r4, #4
 8008bc8:	f020 0007 	bic.w	r0, r0, #7
 8008bcc:	1ac3      	subs	r3, r0, r3
 8008bce:	d0d3      	beq.n	8008b78 <_malloc_r+0x20>
 8008bd0:	425a      	negs	r2, r3
 8008bd2:	50e2      	str	r2, [r4, r3]
 8008bd4:	e7d0      	b.n	8008b78 <_malloc_r+0x20>
 8008bd6:	684b      	ldr	r3, [r1, #4]
 8008bd8:	428c      	cmp	r4, r1
 8008bda:	bf16      	itet	ne
 8008bdc:	6063      	strne	r3, [r4, #4]
 8008bde:	6013      	streq	r3, [r2, #0]
 8008be0:	460c      	movne	r4, r1
 8008be2:	e7eb      	b.n	8008bbc <_malloc_r+0x64>
 8008be4:	460c      	mov	r4, r1
 8008be6:	6849      	ldr	r1, [r1, #4]
 8008be8:	e7cc      	b.n	8008b84 <_malloc_r+0x2c>
 8008bea:	1cc4      	adds	r4, r0, #3
 8008bec:	f024 0403 	bic.w	r4, r4, #3
 8008bf0:	42a0      	cmp	r0, r4
 8008bf2:	d005      	beq.n	8008c00 <_malloc_r+0xa8>
 8008bf4:	1a21      	subs	r1, r4, r0
 8008bf6:	4630      	mov	r0, r6
 8008bf8:	f000 f808 	bl	8008c0c <_sbrk_r>
 8008bfc:	3001      	adds	r0, #1
 8008bfe:	d0cf      	beq.n	8008ba0 <_malloc_r+0x48>
 8008c00:	6025      	str	r5, [r4, #0]
 8008c02:	e7db      	b.n	8008bbc <_malloc_r+0x64>
 8008c04:	20000598 	.word	0x20000598
 8008c08:	2000059c 	.word	0x2000059c

08008c0c <_sbrk_r>:
 8008c0c:	b538      	push	{r3, r4, r5, lr}
 8008c0e:	2300      	movs	r3, #0
 8008c10:	4c05      	ldr	r4, [pc, #20]	; (8008c28 <_sbrk_r+0x1c>)
 8008c12:	4605      	mov	r5, r0
 8008c14:	4608      	mov	r0, r1
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	f7f9 fed8 	bl	80029cc <_sbrk>
 8008c1c:	1c43      	adds	r3, r0, #1
 8008c1e:	d102      	bne.n	8008c26 <_sbrk_r+0x1a>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	b103      	cbz	r3, 8008c26 <_sbrk_r+0x1a>
 8008c24:	602b      	str	r3, [r5, #0]
 8008c26:	bd38      	pop	{r3, r4, r5, pc}
 8008c28:	20001640 	.word	0x20001640

08008c2c <__ascii_wctomb>:
 8008c2c:	b149      	cbz	r1, 8008c42 <__ascii_wctomb+0x16>
 8008c2e:	2aff      	cmp	r2, #255	; 0xff
 8008c30:	bf8b      	itete	hi
 8008c32:	238a      	movhi	r3, #138	; 0x8a
 8008c34:	700a      	strbls	r2, [r1, #0]
 8008c36:	6003      	strhi	r3, [r0, #0]
 8008c38:	2001      	movls	r0, #1
 8008c3a:	bf88      	it	hi
 8008c3c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008c40:	4770      	bx	lr
 8008c42:	4608      	mov	r0, r1
 8008c44:	4770      	bx	lr

08008c46 <__malloc_lock>:
 8008c46:	4770      	bx	lr

08008c48 <__malloc_unlock>:
 8008c48:	4770      	bx	lr
	...

08008c4c <sqrt>:
 8008c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c50:	b08b      	sub	sp, #44	; 0x2c
 8008c52:	4604      	mov	r4, r0
 8008c54:	460d      	mov	r5, r1
 8008c56:	f000 f84d 	bl	8008cf4 <__ieee754_sqrt>
 8008c5a:	4b24      	ldr	r3, [pc, #144]	; (8008cec <sqrt+0xa0>)
 8008c5c:	4680      	mov	r8, r0
 8008c5e:	f993 a000 	ldrsb.w	sl, [r3]
 8008c62:	4689      	mov	r9, r1
 8008c64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008c68:	d02b      	beq.n	8008cc2 <sqrt+0x76>
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 fec3 	bl	80009fc <__aeabi_dcmpun>
 8008c76:	4683      	mov	fp, r0
 8008c78:	bb18      	cbnz	r0, 8008cc2 <sqrt+0x76>
 8008c7a:	2600      	movs	r6, #0
 8008c7c:	2700      	movs	r7, #0
 8008c7e:	4632      	mov	r2, r6
 8008c80:	463b      	mov	r3, r7
 8008c82:	4620      	mov	r0, r4
 8008c84:	4629      	mov	r1, r5
 8008c86:	f7f7 fe91 	bl	80009ac <__aeabi_dcmplt>
 8008c8a:	b1d0      	cbz	r0, 8008cc2 <sqrt+0x76>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	4b17      	ldr	r3, [pc, #92]	; (8008cf0 <sqrt+0xa4>)
 8008c92:	f8cd b020 	str.w	fp, [sp, #32]
 8008c96:	9301      	str	r3, [sp, #4]
 8008c98:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008c9c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008ca0:	f1ba 0f00 	cmp.w	sl, #0
 8008ca4:	d112      	bne.n	8008ccc <sqrt+0x80>
 8008ca6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008caa:	4668      	mov	r0, sp
 8008cac:	f000 f8ce 	bl	8008e4c <matherr>
 8008cb0:	b1b8      	cbz	r0, 8008ce2 <sqrt+0x96>
 8008cb2:	9b08      	ldr	r3, [sp, #32]
 8008cb4:	b11b      	cbz	r3, 8008cbe <sqrt+0x72>
 8008cb6:	f7ff fee9 	bl	8008a8c <__errno>
 8008cba:	9b08      	ldr	r3, [sp, #32]
 8008cbc:	6003      	str	r3, [r0, #0]
 8008cbe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008cc2:	4640      	mov	r0, r8
 8008cc4:	4649      	mov	r1, r9
 8008cc6:	b00b      	add	sp, #44	; 0x2c
 8008cc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ccc:	4632      	mov	r2, r6
 8008cce:	463b      	mov	r3, r7
 8008cd0:	4630      	mov	r0, r6
 8008cd2:	4639      	mov	r1, r7
 8008cd4:	f7f7 fd22 	bl	800071c <__aeabi_ddiv>
 8008cd8:	f1ba 0f02 	cmp.w	sl, #2
 8008cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ce0:	d1e3      	bne.n	8008caa <sqrt+0x5e>
 8008ce2:	f7ff fed3 	bl	8008a8c <__errno>
 8008ce6:	2321      	movs	r3, #33	; 0x21
 8008ce8:	6003      	str	r3, [r0, #0]
 8008cea:	e7e2      	b.n	8008cb2 <sqrt+0x66>
 8008cec:	20000350 	.word	0x20000350
 8008cf0:	08008fbf 	.word	0x08008fbf

08008cf4 <__ieee754_sqrt>:
 8008cf4:	4b54      	ldr	r3, [pc, #336]	; (8008e48 <__ieee754_sqrt+0x154>)
 8008cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cfa:	438b      	bics	r3, r1
 8008cfc:	4606      	mov	r6, r0
 8008cfe:	460d      	mov	r5, r1
 8008d00:	460a      	mov	r2, r1
 8008d02:	460c      	mov	r4, r1
 8008d04:	d10f      	bne.n	8008d26 <__ieee754_sqrt+0x32>
 8008d06:	4602      	mov	r2, r0
 8008d08:	460b      	mov	r3, r1
 8008d0a:	f7f7 fbdd 	bl	80004c8 <__aeabi_dmul>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4630      	mov	r0, r6
 8008d14:	4629      	mov	r1, r5
 8008d16:	f7f7 fa21 	bl	800015c <__adddf3>
 8008d1a:	4606      	mov	r6, r0
 8008d1c:	460d      	mov	r5, r1
 8008d1e:	4630      	mov	r0, r6
 8008d20:	4629      	mov	r1, r5
 8008d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d26:	2900      	cmp	r1, #0
 8008d28:	4607      	mov	r7, r0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	dc0e      	bgt.n	8008d4c <__ieee754_sqrt+0x58>
 8008d2e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008d32:	ea5c 0707 	orrs.w	r7, ip, r7
 8008d36:	d0f2      	beq.n	8008d1e <__ieee754_sqrt+0x2a>
 8008d38:	b141      	cbz	r1, 8008d4c <__ieee754_sqrt+0x58>
 8008d3a:	4602      	mov	r2, r0
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	f7f7 fa0b 	bl	8000158 <__aeabi_dsub>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	f7f7 fce9 	bl	800071c <__aeabi_ddiv>
 8008d4a:	e7e6      	b.n	8008d1a <__ieee754_sqrt+0x26>
 8008d4c:	1512      	asrs	r2, r2, #20
 8008d4e:	d074      	beq.n	8008e3a <__ieee754_sqrt+0x146>
 8008d50:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008d54:	07d5      	lsls	r5, r2, #31
 8008d56:	f04f 0500 	mov.w	r5, #0
 8008d5a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d5e:	bf48      	it	mi
 8008d60:	0fd9      	lsrmi	r1, r3, #31
 8008d62:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008d66:	bf44      	itt	mi
 8008d68:	005b      	lslmi	r3, r3, #1
 8008d6a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008d6e:	1051      	asrs	r1, r2, #1
 8008d70:	0fda      	lsrs	r2, r3, #31
 8008d72:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008d76:	4628      	mov	r0, r5
 8008d78:	2216      	movs	r2, #22
 8008d7a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	1987      	adds	r7, r0, r6
 8008d82:	42a7      	cmp	r7, r4
 8008d84:	bfde      	ittt	le
 8008d86:	19b8      	addle	r0, r7, r6
 8008d88:	1be4      	suble	r4, r4, r7
 8008d8a:	19ad      	addle	r5, r5, r6
 8008d8c:	0fdf      	lsrs	r7, r3, #31
 8008d8e:	3a01      	subs	r2, #1
 8008d90:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008d94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008d98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008d9c:	d1f0      	bne.n	8008d80 <__ieee754_sqrt+0x8c>
 8008d9e:	f04f 0c20 	mov.w	ip, #32
 8008da2:	4696      	mov	lr, r2
 8008da4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008da8:	4284      	cmp	r4, r0
 8008daa:	eb06 070e 	add.w	r7, r6, lr
 8008dae:	dc02      	bgt.n	8008db6 <__ieee754_sqrt+0xc2>
 8008db0:	d112      	bne.n	8008dd8 <__ieee754_sqrt+0xe4>
 8008db2:	429f      	cmp	r7, r3
 8008db4:	d810      	bhi.n	8008dd8 <__ieee754_sqrt+0xe4>
 8008db6:	2f00      	cmp	r7, #0
 8008db8:	eb07 0e06 	add.w	lr, r7, r6
 8008dbc:	da42      	bge.n	8008e44 <__ieee754_sqrt+0x150>
 8008dbe:	f1be 0f00 	cmp.w	lr, #0
 8008dc2:	db3f      	blt.n	8008e44 <__ieee754_sqrt+0x150>
 8008dc4:	f100 0801 	add.w	r8, r0, #1
 8008dc8:	1a24      	subs	r4, r4, r0
 8008dca:	4640      	mov	r0, r8
 8008dcc:	429f      	cmp	r7, r3
 8008dce:	bf88      	it	hi
 8008dd0:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008dd4:	1bdb      	subs	r3, r3, r7
 8008dd6:	4432      	add	r2, r6
 8008dd8:	0064      	lsls	r4, r4, #1
 8008dda:	f1bc 0c01 	subs.w	ip, ip, #1
 8008dde:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008de2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008de6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dea:	d1dd      	bne.n	8008da8 <__ieee754_sqrt+0xb4>
 8008dec:	4323      	orrs	r3, r4
 8008dee:	d006      	beq.n	8008dfe <__ieee754_sqrt+0x10a>
 8008df0:	1c54      	adds	r4, r2, #1
 8008df2:	bf0b      	itete	eq
 8008df4:	4662      	moveq	r2, ip
 8008df6:	3201      	addne	r2, #1
 8008df8:	3501      	addeq	r5, #1
 8008dfa:	f022 0201 	bicne.w	r2, r2, #1
 8008dfe:	106b      	asrs	r3, r5, #1
 8008e00:	0852      	lsrs	r2, r2, #1
 8008e02:	07e8      	lsls	r0, r5, #31
 8008e04:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008e08:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008e0c:	bf48      	it	mi
 8008e0e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008e12:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008e16:	4616      	mov	r6, r2
 8008e18:	e781      	b.n	8008d1e <__ieee754_sqrt+0x2a>
 8008e1a:	0adc      	lsrs	r4, r3, #11
 8008e1c:	3915      	subs	r1, #21
 8008e1e:	055b      	lsls	r3, r3, #21
 8008e20:	2c00      	cmp	r4, #0
 8008e22:	d0fa      	beq.n	8008e1a <__ieee754_sqrt+0x126>
 8008e24:	02e6      	lsls	r6, r4, #11
 8008e26:	d50a      	bpl.n	8008e3e <__ieee754_sqrt+0x14a>
 8008e28:	f1c2 0020 	rsb	r0, r2, #32
 8008e2c:	fa23 f000 	lsr.w	r0, r3, r0
 8008e30:	1e55      	subs	r5, r2, #1
 8008e32:	4093      	lsls	r3, r2
 8008e34:	4304      	orrs	r4, r0
 8008e36:	1b4a      	subs	r2, r1, r5
 8008e38:	e78a      	b.n	8008d50 <__ieee754_sqrt+0x5c>
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	e7f0      	b.n	8008e20 <__ieee754_sqrt+0x12c>
 8008e3e:	0064      	lsls	r4, r4, #1
 8008e40:	3201      	adds	r2, #1
 8008e42:	e7ef      	b.n	8008e24 <__ieee754_sqrt+0x130>
 8008e44:	4680      	mov	r8, r0
 8008e46:	e7bf      	b.n	8008dc8 <__ieee754_sqrt+0xd4>
 8008e48:	7ff00000 	.word	0x7ff00000

08008e4c <matherr>:
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	4770      	bx	lr

08008e50 <_init>:
 8008e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e52:	bf00      	nop
 8008e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e56:	bc08      	pop	{r3}
 8008e58:	469e      	mov	lr, r3
 8008e5a:	4770      	bx	lr

08008e5c <_fini>:
 8008e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5e:	bf00      	nop
 8008e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e62:	bc08      	pop	{r3}
 8008e64:	469e      	mov	lr, r3
 8008e66:	4770      	bx	lr
