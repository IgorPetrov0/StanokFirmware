
stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b18  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008c28  08008c28  00018c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d84  08008d84  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08008d84  08008d84  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008d84  08008d84  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d88  08008d88  00018d88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08008d8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000354  080090e0  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  080090e0  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aad2  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e0b  00000000  00000000  0003ae4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003ff78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d27  00000000  00000000  000410b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011fd0  00000000  00000000  00059ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007814c  00000000  00000000  0006bdaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3efb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e0  00000000  00000000  000e3f78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c10 	.word	0x08008c10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	08008c10 	.word	0x08008c10

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <parseCodeString>:
 */

#include "GParser.h"


void parseCodeString(char *array, char len){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	switch(array[2]){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b47      	cmp	r3, #71	; 0x47
 8001160:	d002      	beq.n	8001168 <parseCodeString+0x1c>
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d00a      	beq.n	800117c <parseCodeString+0x30>
			parseMCode(array+3,len-1);
			break;
		}
		default:{

			break;
 8001166:	e013      	b.n	8001190 <parseCodeString+0x44>
			parseGCode(array+3,len-1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1cda      	adds	r2, r3, #3
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 f80f 	bl	8001198 <parseGCode>
			break;
 800117a:	e009      	b.n	8001190 <parseCodeString+0x44>
			parseMCode(array+3,len-1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1cda      	adds	r2, r3, #3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3b01      	subs	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 f9c7 	bl	800151c <parseMCode>
			break;
 800118e:	bf00      	nop
		}
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <parseGCode>:
//////////////////////////////////////////////////////////////////////
void parseGCode(char *array, char len){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	//в массиве строка в коде ASCII. первые 2 байта команда G, далее аргументы через пробелы

	struct driversComand comand;
	comand.GCode=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
	comand.posX=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	comand.posY=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	comand.posZ=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	comand.F=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	comand.R=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	comand.valid=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	char ok=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73fb      	strb	r3, [r7, #15]
	float result=0;
 80011c6:	f04f 0300 	mov.w	r3, #0
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
	int pos=-1;
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38

	//читаем номер команды
	int tmp=(int)(array[0]);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 80011d8:	f007 fb62 	bl	80088a0 <__locale_ctype_ptr>
 80011dc:	4602      	mov	r2, r0
 80011de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e0:	3301      	adds	r3, #1
 80011e2:	4413      	add	r3, r2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8192 	beq.w	8001514 <parseGCode+0x37c>
		comand.GCode=(char)(stringToInt(array,2,&ok)/100);
 80011f0:	f107 030f 	add.w	r3, r7, #15
 80011f4:	461a      	mov	r2, r3
 80011f6:	2102      	movs	r1, #2
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 f9bd 	bl	8001578 <stringToInt>
 80011fe:	4603      	mov	r3, r0
 8001200:	4ab7      	ldr	r2, [pc, #732]	; (80014e0 <parseGCode+0x348>)
 8001202:	fb82 1203 	smull	r1, r2, r2, r3
 8001206:	1152      	asrs	r2, r2, #5
 8001208:	17db      	asrs	r3, r3, #31
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	b2db      	uxtb	r3, r3
 800120e:	743b      	strb	r3, [r7, #16]
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}

	//читаем координату Х
	pos = findInString(array,'X',len);
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	461a      	mov	r2, r3
 8001214:	2158      	movs	r1, #88	; 0x58
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f000 faad 	bl	8001776 <findInString>
 800121c:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 800121e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001224:	d027      	beq.n	8001276 <parseGCode+0xde>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	3301      	adds	r3, #1
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	18d0      	adds	r0, r2, r3
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	b2db      	uxtb	r3, r3
 8001232:	78fa      	ldrb	r2, [r7, #3]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b2db      	uxtb	r3, r3
 8001238:	f107 020f 	add.w	r2, r7, #15
 800123c:	4619      	mov	r1, r3
 800123e:	f000 f99b 	bl	8001578 <stringToInt>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fd21 	bl	8000c8c <__aeabi_i2f>
 800124a:	4603      	mov	r3, r0
 800124c:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d010      	beq.n	8001276 <parseGCode+0xde>
			comand.posX = result/10;
 8001254:	49a3      	ldr	r1, [pc, #652]	; (80014e4 <parseGCode+0x34c>)
 8001256:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001258:	f7ff fe20 	bl	8000e9c <__aeabi_fdiv>
 800125c:	4603      	mov	r3, r0
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff ff2e 	bl	80010c0 <__aeabi_f2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	617b      	str	r3, [r7, #20]
			comand.valid |= (1<<0);
 8001268:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800126c:	f043 0301 	orr.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Y
	pos = findInString(array,'Y',len);
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	461a      	mov	r2, r3
 800127a:	2159      	movs	r1, #89	; 0x59
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 fa7a 	bl	8001776 <findInString>
 8001282:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128a:	d027      	beq.n	80012dc <parseGCode+0x144>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	3301      	adds	r3, #1
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	18d0      	adds	r0, r2, r3
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	b2db      	uxtb	r3, r3
 8001298:	78fa      	ldrb	r2, [r7, #3]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f107 020f 	add.w	r2, r7, #15
 80012a2:	4619      	mov	r1, r3
 80012a4:	f000 f968 	bl	8001578 <stringToInt>
 80012a8:	4603      	mov	r3, r0
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fcee 	bl	8000c8c <__aeabi_i2f>
 80012b0:	4603      	mov	r3, r0
 80012b2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d010      	beq.n	80012dc <parseGCode+0x144>
			comand.posY = result/10;
 80012ba:	498a      	ldr	r1, [pc, #552]	; (80014e4 <parseGCode+0x34c>)
 80012bc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012be:	f7ff fded 	bl	8000e9c <__aeabi_fdiv>
 80012c2:	4603      	mov	r3, r0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fefb 	bl	80010c0 <__aeabi_f2iz>
 80012ca:	4603      	mov	r3, r0
 80012cc:	61bb      	str	r3, [r7, #24]
			comand.valid |= (1<<1);
 80012ce:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012d2:	f043 0302 	orr.w	r3, r3, #2
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Z
	pos = findInString(array,'Z',len);
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	461a      	mov	r2, r3
 80012e0:	215a      	movs	r1, #90	; 0x5a
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fa47 	bl	8001776 <findInString>
 80012e8:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80012ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f0:	d027      	beq.n	8001342 <parseGCode+0x1aa>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	3301      	adds	r3, #1
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	18d0      	adds	r0, r2, r3
 80012fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	78fa      	ldrb	r2, [r7, #3]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	b2db      	uxtb	r3, r3
 8001304:	f107 020f 	add.w	r2, r7, #15
 8001308:	4619      	mov	r1, r3
 800130a:	f000 f935 	bl	8001578 <stringToInt>
 800130e:	4603      	mov	r3, r0
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fcbb 	bl	8000c8c <__aeabi_i2f>
 8001316:	4603      	mov	r3, r0
 8001318:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d010      	beq.n	8001342 <parseGCode+0x1aa>
			comand.posZ = result/10;
 8001320:	4970      	ldr	r1, [pc, #448]	; (80014e4 <parseGCode+0x34c>)
 8001322:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001324:	f7ff fdba 	bl	8000e9c <__aeabi_fdiv>
 8001328:	4603      	mov	r3, r0
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fec8 	bl	80010c0 <__aeabi_f2iz>
 8001330:	4603      	mov	r3, r0
 8001332:	61fb      	str	r3, [r7, #28]
			comand.valid |= (1<<2);
 8001334:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем F
	pos = findInString(array,'F',len);
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	461a      	mov	r2, r3
 8001346:	2146      	movs	r1, #70	; 0x46
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fa14 	bl	8001776 <findInString>
 800134e:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001356:	d022      	beq.n	800139e <parseGCode+0x206>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	3301      	adds	r3, #1
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	18d0      	adds	r0, r2, r3
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	b2db      	uxtb	r3, r3
 8001364:	78fa      	ldrb	r2, [r7, #3]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	f107 020f 	add.w	r2, r7, #15
 800136e:	4619      	mov	r1, r3
 8001370:	f000 f902 	bl	8001578 <stringToInt>
 8001374:	4603      	mov	r3, r0
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc88 	bl	8000c8c <__aeabi_i2f>
 800137c:	4603      	mov	r3, r0
 800137e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <parseGCode+0x206>
			comand.F = result;
 8001386:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001388:	f7ff fe9a 	bl	80010c0 <__aeabi_f2iz>
 800138c:	4603      	mov	r3, r0
 800138e:	623b      	str	r3, [r7, #32]
			comand.valid |= (1<<3);
 8001390:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем R
	pos = findInString(array,'R',len);
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	461a      	mov	r2, r3
 80013a2:	2152      	movs	r1, #82	; 0x52
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 f9e6 	bl	8001776 <findInString>
 80013aa:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80013ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b2:	d036      	beq.n	8001422 <parseGCode+0x28a>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	3301      	adds	r3, #1
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	18d0      	adds	r0, r2, r3
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	78fa      	ldrb	r2, [r7, #3]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f107 020f 	add.w	r2, r7, #15
 80013ca:	4619      	mov	r1, r3
 80013cc:	f000 f8d4 	bl	8001578 <stringToInt>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc5a 	bl	8000c8c <__aeabi_i2f>
 80013d8:	4603      	mov	r3, r0
 80013da:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01f      	beq.n	8001422 <parseGCode+0x28a>
			if(result < 0){//радиус не может быть отрицательным
 80013e2:	f04f 0100 	mov.w	r1, #0
 80013e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013e8:	f7ff fe42 	bl	8001070 <__aeabi_fcmplt>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <parseGCode+0x268>
				result = 0 - result;
 80013f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013f4:	f04f 0000 	mov.w	r0, #0
 80013f8:	f7ff fb92 	bl	8000b20 <__aeabi_fsub>
 80013fc:	4603      	mov	r3, r0
 80013fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			comand.R = result/10;
 8001400:	4938      	ldr	r1, [pc, #224]	; (80014e4 <parseGCode+0x34c>)
 8001402:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001404:	f7ff fd4a 	bl	8000e9c <__aeabi_fdiv>
 8001408:	4603      	mov	r3, r0
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe58 	bl	80010c0 <__aeabi_f2iz>
 8001410:	4603      	mov	r3, r0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
			comand.valid |= (1<<4);
 8001414:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001418:	f043 0310 	orr.w	r3, r3, #16
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем I
	pos = findInString(array,'I',len);
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	461a      	mov	r2, r3
 8001426:	2149      	movs	r1, #73	; 0x49
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f9a4 	bl	8001776 <findInString>
 800142e:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001436:	d027      	beq.n	8001488 <parseGCode+0x2f0>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800143a:	3301      	adds	r3, #1
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	18d0      	adds	r0, r2, r3
 8001440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001442:	b2db      	uxtb	r3, r3
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f107 020f 	add.w	r2, r7, #15
 800144e:	4619      	mov	r1, r3
 8001450:	f000 f892 	bl	8001578 <stringToInt>
 8001454:	4603      	mov	r3, r0
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff fc18 	bl	8000c8c <__aeabi_i2f>
 800145c:	4603      	mov	r3, r0
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <parseGCode+0x2f0>
			comand.I = result/10;
 8001466:	491f      	ldr	r1, [pc, #124]	; (80014e4 <parseGCode+0x34c>)
 8001468:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800146a:	f7ff fd17 	bl	8000e9c <__aeabi_fdiv>
 800146e:	4603      	mov	r3, r0
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe25 	bl	80010c0 <__aeabi_f2iz>
 8001476:	4603      	mov	r3, r0
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
			comand.valid |= (1<<5);
 800147a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800147e:	f043 0320 	orr.w	r3, r3, #32
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем J
	pos = findInString(array,'J',len);
 8001488:	78fb      	ldrb	r3, [r7, #3]
 800148a:	461a      	mov	r2, r3
 800148c:	214a      	movs	r1, #74	; 0x4a
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 f971 	bl	8001776 <findInString>
 8001494:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800149c:	d02d      	beq.n	80014fa <parseGCode+0x362>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800149e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a0:	3301      	adds	r3, #1
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	18d0      	adds	r0, r2, r3
 80014a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	78fa      	ldrb	r2, [r7, #3]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f107 020f 	add.w	r2, r7, #15
 80014b4:	4619      	mov	r1, r3
 80014b6:	f000 f85f 	bl	8001578 <stringToInt>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fbe5 	bl	8000c8c <__aeabi_i2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d016      	beq.n	80014fa <parseGCode+0x362>
			comand.J = result/10;
 80014cc:	4905      	ldr	r1, [pc, #20]	; (80014e4 <parseGCode+0x34c>)
 80014ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014d0:	f7ff fce4 	bl	8000e9c <__aeabi_fdiv>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fdf2 	bl	80010c0 <__aeabi_f2iz>
 80014dc:	e004      	b.n	80014e8 <parseGCode+0x350>
 80014de:	bf00      	nop
 80014e0:	51eb851f 	.word	0x51eb851f
 80014e4:	41200000 	.word	0x41200000
 80014e8:	4603      	mov	r3, r0
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			comand.valid |= (1<<6);
 80014ec:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	}




	executeGComand(comand);
 80014fa:	466d      	mov	r5, sp
 80014fc:	f107 0420 	add.w	r4, r7, #32
 8001500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	602b      	str	r3, [r5, #0]
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800150e:	f000 f98d 	bl	800182c <executeGComand>
 8001512:	e000      	b.n	8001516 <parseGCode+0x37e>
		return;
 8001514:	bf00      	nop
}
 8001516:	3740      	adds	r7, #64	; 0x40
 8001518:	46bd      	mov	sp, r7
 800151a:	bdb0      	pop	{r4, r5, r7, pc}

0800151c <parseMCode>:
////////////////////////////////////////////////////////////////////////
void parseMCode(char *array, char len){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
	struct MComand comand;
	char ok=0;
 8001528:	2300      	movs	r3, #0
 800152a:	73fb      	strb	r3, [r7, #15]

	//читаем номер команды
	int tmp=(int)(array[0]);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	617b      	str	r3, [r7, #20]
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 8001532:	f007 f9b5 	bl	80088a0 <__locale_ctype_ptr>
 8001536:	4602      	mov	r2, r0
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <parseMCode+0x52>
		comand.MCode=(char)(stringToInt(array,2,&ok)/100);
 8001548:	f107 030f 	add.w	r3, r7, #15
 800154c:	461a      	mov	r2, r3
 800154e:	2102      	movs	r1, #2
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f000 f811 	bl	8001578 <stringToInt>
 8001556:	4603      	mov	r3, r0
 8001558:	4a06      	ldr	r2, [pc, #24]	; (8001574 <parseMCode+0x58>)
 800155a:	fb82 1203 	smull	r1, r2, r2, r3
 800155e:	1152      	asrs	r2, r2, #5
 8001560:	17db      	asrs	r3, r3, #31
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	b2db      	uxtb	r3, r3
 8001566:	743b      	strb	r3, [r7, #16]
		executeMComand(comand);
 8001568:	7c38      	ldrb	r0, [r7, #16]
 800156a:	f000 fb0f 	bl	8001b8c <executeMComand>
	}
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}
}
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	51eb851f 	.word	0x51eb851f

08001578 <stringToInt>:
//////////////////////////////////////////////////////////////////////////
int stringToInt(char *string, char len, char *ok){
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b08d      	sub	sp, #52	; 0x34
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	460b      	mov	r3, r1
 8001582:	607a      	str	r2, [r7, #4]
 8001584:	72fb      	strb	r3, [r7, #11]
	int endPos=0;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pointPos=len;
 800158a:	7afb      	ldrb	r3, [r7, #11]
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
	int result=0;
 800158e:	2300      	movs	r3, #0
 8001590:	627b      	str	r3, [r7, #36]	; 0x24
	char minus=0;
 8001592:	2300      	movs	r3, #0
 8001594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 8001598:	e042      	b.n	8001620 <stringToInt+0xa8>
		if(isByteDigit(string[endPos]) == 0){
 800159a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f8d4 	bl	8001750 <isByteDigit>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d135      	bne.n	800161a <stringToInt+0xa2>
			if(string[endPos] == 46){//проверяем на десятичную точку (46 - ASCII код точки)
 80015ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b2e      	cmp	r3, #46	; 0x2e
 80015b8:	d10b      	bne.n	80015d2 <stringToInt+0x5a>
				if(pointPos == len){//если раньше точка не встречалась
 80015ba:	7afb      	ldrb	r3, [r7, #11]
 80015bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015be:	429a      	cmp	r2, r3
 80015c0:	d102      	bne.n	80015c8 <stringToInt+0x50>
					pointPos=endPos;//то запоминаем позицию
 80015c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c6:	e028      	b.n	800161a <stringToInt+0xa2>
				}
				else{//если на точку уже натыкались, то в строке ошибка
					*ok=0;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
					return 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e0b1      	b.n	8001736 <stringToInt+0x1be>
				}
			}
			else if(string[endPos] == 45){//если минус (45 - ASCII код минуса)
 80015d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b2d      	cmp	r3, #45	; 0x2d
 80015dc:	d10c      	bne.n	80015f8 <stringToInt+0x80>
				if(minus != 0){//если минус уже встречался, то в строке ошибка
 80015de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d004      	beq.n	80015f0 <stringToInt+0x78>
					*ok=0;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
					return 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e0a2      	b.n	8001736 <stringToInt+0x1be>
				}
				minus=1;
 80015f0:	2301      	movs	r3, #1
 80015f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80015f6:	e010      	b.n	800161a <stringToInt+0xa2>
			}
			else if(string[endPos] == 32){//если пробел (32 - ASCII код пробела)
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b20      	cmp	r3, #32
 8001602:	d012      	beq.n	800162a <stringToInt+0xb2>
				break;//то прерываемся
			}
			else if(string[endPos] == 10){//если конец строки (10 - ASCII код конца строки)
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b0a      	cmp	r3, #10
 800160e:	d00e      	beq.n	800162e <stringToInt+0xb6>
				break;//то прерываемся
			}
			else{//если символ не цифра и не точка, то в строке ошибка
				*ok=0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
				return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e08d      	b.n	8001736 <stringToInt+0x1be>
	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	3301      	adds	r3, #1
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001620:	7afb      	ldrb	r3, [r7, #11]
 8001622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001624:	429a      	cmp	r2, r3
 8001626:	d1b8      	bne.n	800159a <stringToInt+0x22>
 8001628:	e002      	b.n	8001630 <stringToInt+0xb8>
				break;//то прерываемся
 800162a:	bf00      	nop
 800162c:	e000      	b.n	8001630 <stringToInt+0xb8>
				break;//то прерываемся
 800162e:	bf00      	nop
			}
		}
	}
	if(pointPos==len){//точка в строке так и не встретилась,
 8001630:	7afb      	ldrb	r3, [r7, #11]
 8001632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001634:	429a      	cmp	r2, r3
 8001636:	d101      	bne.n	800163c <stringToInt+0xc4>
		pointPos=endPos;//то её позиция в конце числа
 8001638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163a:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(endPos!=0){
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d069      	beq.n	8001716 <stringToInt+0x19e>
		float multiplier=100;
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <stringToInt+0x1d0>)
 8001644:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	61bb      	str	r3, [r7, #24]
 800164a:	e025      	b.n	8001698 <stringToInt+0x120>
			result += (string[n-1]-48)*multiplier;
 800164c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800164e:	f7ff fb1d 	bl	8000c8c <__aeabi_i2f>
 8001652:	4604      	mov	r4, r0
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	3b01      	subs	r3, #1
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	3b30      	subs	r3, #48	; 0x30
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fb13 	bl	8000c8c <__aeabi_i2f>
 8001666:	4603      	mov	r3, r0
 8001668:	69f9      	ldr	r1, [r7, #28]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fb62 	bl	8000d34 <__aeabi_fmul>
 8001670:	4603      	mov	r3, r0
 8001672:	4619      	mov	r1, r3
 8001674:	4620      	mov	r0, r4
 8001676:	f7ff fa55 	bl	8000b24 <__addsf3>
 800167a:	4603      	mov	r3, r0
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fd1f 	bl	80010c0 <__aeabi_f2iz>
 8001682:	4603      	mov	r3, r0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=10;
 8001686:	4931      	ldr	r1, [pc, #196]	; (800174c <stringToInt+0x1d4>)
 8001688:	69f8      	ldr	r0, [r7, #28]
 800168a:	f7ff fb53 	bl	8000d34 <__aeabi_fmul>
 800168e:	4603      	mov	r3, r0
 8001690:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	3b01      	subs	r3, #1
 8001696:	61bb      	str	r3, [r7, #24]
 8001698:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d1d4      	bne.n	800164c <stringToInt+0xd4>
		}

		multiplier=10;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <stringToInt+0x1d4>)
 80016a4:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 80016a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a8:	3301      	adds	r3, #1
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e02e      	b.n	800170c <stringToInt+0x194>
			result += (string[n]-48)*multiplier;
 80016ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016b0:	f7ff faec 	bl	8000c8c <__aeabi_i2f>
 80016b4:	4604      	mov	r4, r0
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	3b30      	subs	r3, #48	; 0x30
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fae3 	bl	8000c8c <__aeabi_i2f>
 80016c6:	4603      	mov	r3, r0
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff fb32 	bl	8000d34 <__aeabi_fmul>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4619      	mov	r1, r3
 80016d4:	4620      	mov	r0, r4
 80016d6:	f7ff fa25 	bl	8000b24 <__addsf3>
 80016da:	4603      	mov	r3, r0
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fcef 	bl	80010c0 <__aeabi_f2iz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=0.1;
 80016e6:	69f8      	ldr	r0, [r7, #28]
 80016e8:	f7fe fe96 	bl	8000418 <__aeabi_f2d>
 80016ec:	a314      	add	r3, pc, #80	; (adr r3, 8001740 <stringToInt+0x1c8>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	f7fe fee9 	bl	80004c8 <__aeabi_dmul>
 80016f6:	4603      	mov	r3, r0
 80016f8:	460c      	mov	r4, r1
 80016fa:	4618      	mov	r0, r3
 80016fc:	4621      	mov	r1, r4
 80016fe:	f7ff f9bb 	bl	8000a78 <__aeabi_d2f>
 8001702:	4603      	mov	r3, r0
 8001704:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	3301      	adds	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697a      	ldr	r2, [r7, #20]
 800170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001710:	429a      	cmp	r2, r3
 8001712:	dbcc      	blt.n	80016ae <stringToInt+0x136>
 8001714:	e004      	b.n	8001720 <stringToInt+0x1a8>
		}
	}
	else{
		*ok=0;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
		return 0;
 800171c:	2300      	movs	r3, #0
 800171e:	e00a      	b.n	8001736 <stringToInt+0x1be>
	}
	if(minus != 0){
 8001720:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <stringToInt+0x1b6>
		result = 0 - result;
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	425b      	negs	r3, r3
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*ok=1;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
	return result;
 8001734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001736:	4618      	mov	r0, r3
 8001738:	3734      	adds	r7, #52	; 0x34
 800173a:	46bd      	mov	sp, r7
 800173c:	bd90      	pop	{r4, r7, pc}
 800173e:	bf00      	nop
 8001740:	9999999a 	.word	0x9999999a
 8001744:	3fb99999 	.word	0x3fb99999
 8001748:	42c80000 	.word	0x42c80000
 800174c:	41200000 	.word	0x41200000

08001750 <isByteDigit>:
//////////////////////////////////////////////////////////////////////////////////
char isByteDigit(char byte){
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	if((byte >=48) && (byte<=57)){
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b2f      	cmp	r3, #47	; 0x2f
 800175e:	d904      	bls.n	800176a <isByteDigit+0x1a>
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b39      	cmp	r3, #57	; 0x39
 8001764:	d801      	bhi.n	800176a <isByteDigit+0x1a>
		return 1;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <isByteDigit+0x1c>
	}
	return 0;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <findInString>:
////////////////////////////////////////////////////////////////////////////////////
int findInString(char *string, char symbol, char len){
 8001776:	b480      	push	{r7}
 8001778:	b085      	sub	sp, #20
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
 8001782:	4613      	mov	r3, r2
 8001784:	70bb      	strb	r3, [r7, #2]
	for(int n=0; n!=len; n++){
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e00b      	b.n	80017a4 <findInString+0x2e>
		if(string[n] == symbol){
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	78fa      	ldrb	r2, [r7, #3]
 8001796:	429a      	cmp	r2, r3
 8001798:	d101      	bne.n	800179e <findInString+0x28>
			return n;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	e008      	b.n	80017b0 <findInString+0x3a>
	for(int n=0; n!=len; n++){
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3301      	adds	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	78bb      	ldrb	r3, [r7, #2]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1ef      	bne.n	800178c <findInString+0x16>
		}
	}
	return -1;
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3714      	adds	r7, #20
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bc80      	pop	{r7}
 80017b8:	4770      	bx	lr
	...

080017bc <initDrives>:


#include "drive.h"


void initDrives(){
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
	positionX=0;
 80017c0:	4b10      	ldr	r3, [pc, #64]	; (8001804 <initDrives+0x48>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
	positionY=0;
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <initDrives+0x4c>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
	positionZ=0;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	; (800180c <initDrives+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]

	stepsCounterX=0;
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <initDrives+0x54>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
	stepsCounterY=0;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <initDrives+0x58>)
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	stepsCounterZ=0;
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <initDrives+0x5c>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
	timerDivider=0;
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <initDrives+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

	zeroPointX=0;
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <initDrives+0x64>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
	zeroPointY=0;
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <initDrives+0x68>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]

	lastF=0;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <initDrives+0x6c>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	200005ac 	.word	0x200005ac
 8001808:	200005cc 	.word	0x200005cc
 800180c:	200005a8 	.word	0x200005a8
 8001810:	200005a4 	.word	0x200005a4
 8001814:	200005c4 	.word	0x200005c4
 8001818:	200005b8 	.word	0x200005b8
 800181c:	200005bc 	.word	0x200005bc
 8001820:	200005b4 	.word	0x200005b4
 8001824:	200005f4 	.word	0x200005f4
 8001828:	200005c0 	.word	0x200005c0

0800182c <executeGComand>:
//////////////////////////////////////////////////////////////////////////////////////
void executeGComand(struct driversComand comand){
 800182c:	b084      	sub	sp, #16
 800182e:	b5b0      	push	{r4, r5, r7, lr}
 8001830:	b08c      	sub	sp, #48	; 0x30
 8001832:	af00      	add	r7, sp, #0
 8001834:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8001838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	currentComand = comand;
 800183c:	4b99      	ldr	r3, [pc, #612]	; (8001aa4 <executeGComand+0x278>)
 800183e:	461c      	mov	r4, r3
 8001840:	f107 0540 	add.w	r5, r7, #64	; 0x40
 8001844:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001848:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800184a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	6023      	str	r3, [r4, #0]

	if(comand.valid & (1<<3)){//если подача валидна,
 8001850:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	2b00      	cmp	r3, #0
 800185a:	d002      	beq.n	8001862 <executeGComand+0x36>
		lastF = comand.F;//то запоминаем её. В следующей команде подачи может не быть
 800185c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800185e:	4a92      	ldr	r2, [pc, #584]	; (8001aa8 <executeGComand+0x27c>)
 8001860:	6013      	str	r3, [r2, #0]
	}
	//одно прерывание таймера = 0.000 025 С
	float F=(float)lastF/100;
 8001862:	4b91      	ldr	r3, [pc, #580]	; (8001aa8 <executeGComand+0x27c>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fa10 	bl	8000c8c <__aeabi_i2f>
 800186c:	4603      	mov	r3, r0
 800186e:	498f      	ldr	r1, [pc, #572]	; (8001aac <executeGComand+0x280>)
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fb13 	bl	8000e9c <__aeabi_fdiv>
 8001876:	4603      	mov	r3, r0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
	float periodPerStep=1/(1/F/200);
 800187a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800187c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001880:	f7ff fb0c 	bl	8000e9c <__aeabi_fdiv>
 8001884:	4603      	mov	r3, r0
 8001886:	498a      	ldr	r1, [pc, #552]	; (8001ab0 <executeGComand+0x284>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb07 	bl	8000e9c <__aeabi_fdiv>
 800188e:	4603      	mov	r3, r0
 8001890:	4619      	mov	r1, r3
 8001892:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001896:	f7ff fb01 	bl	8000e9c <__aeabi_fdiv>
 800189a:	4603      	mov	r3, r0
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
	timerDivider=40000/periodPerStep;
 800189e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a0:	4884      	ldr	r0, [pc, #528]	; (8001ab4 <executeGComand+0x288>)
 80018a2:	f7ff fafb 	bl	8000e9c <__aeabi_fdiv>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fc2f 	bl	800110c <__aeabi_f2uiz>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <executeGComand+0x28c>)
 80018b2:	601a      	str	r2, [r3, #0]

	switch(comand.GCode){
 80018b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d060      	beq.n	800197e <executeGComand+0x152>
 80018bc:	2b02      	cmp	r3, #2
 80018be:	dc04      	bgt.n	80018ca <executeGComand+0x9e>
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <executeGComand+0xac>
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d02f      	beq.n	8001928 <executeGComand+0xfc>
			positionY=0;
			positionZ=0;
			break;
		}
	}
}
 80018c8:	e0e4      	b.n	8001a94 <executeGComand+0x268>
	switch(comand.GCode){
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	f000 80a7 	beq.w	8001a1e <executeGComand+0x1f2>
 80018d0:	2b5c      	cmp	r3, #92	; 0x5c
 80018d2:	f000 80d4 	beq.w	8001a7e <executeGComand+0x252>
}
 80018d6:	e0dd      	b.n	8001a94 <executeGComand+0x268>
			if(comand.valid & (1<<1)){
 80018d8:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <executeGComand+0xc4>
				stepsCounterX = comand.posX - positionX;
 80018e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018e6:	4b75      	ldr	r3, [pc, #468]	; (8001abc <executeGComand+0x290>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a74      	ldr	r2, [pc, #464]	; (8001ac0 <executeGComand+0x294>)
 80018ee:	6013      	str	r3, [r2, #0]
			if(comand.valid & (1<<2)){
 80018f0:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d005      	beq.n	8001908 <executeGComand+0xdc>
				stepsCounterY = comand.posY - positionY;
 80018fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018fe:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <executeGComand+0x298>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	4a70      	ldr	r2, [pc, #448]	; (8001ac8 <executeGComand+0x29c>)
 8001906:	6013      	str	r3, [r2, #0]
			if(comand.valid & (1<<3)){
 8001908:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800190c:	f003 0308 	and.w	r3, r3, #8
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <executeGComand+0xf4>
				stepsCounterZ = comand.posZ - positionZ;
 8001914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001916:	4b6d      	ldr	r3, [pc, #436]	; (8001acc <executeGComand+0x2a0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	4a6c      	ldr	r2, [pc, #432]	; (8001ad0 <executeGComand+0x2a4>)
 800191e:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001920:	486c      	ldr	r0, [pc, #432]	; (8001ad4 <executeGComand+0x2a8>)
 8001922:	f003 faad 	bl	8004e80 <HAL_TIM_Base_Start_IT>
			break;
 8001926:	e0b5      	b.n	8001a94 <executeGComand+0x268>
			if(comand.valid & (1<<2)){//если Z валидна,
 8001928:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00c      	beq.n	800194e <executeGComand+0x122>
				int difZ=positionZ-comand.posZ;//то задаем для нее количество шагов
 8001934:	4b65      	ldr	r3, [pc, #404]	; (8001acc <executeGComand+0x2a0>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	603b      	str	r3, [r7, #0]
				stepsCounterZ=difZ*10;
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	461a      	mov	r2, r3
 800194a:	4b61      	ldr	r3, [pc, #388]	; (8001ad0 <executeGComand+0x2a4>)
 800194c:	601a      	str	r2, [r3, #0]
			if((comand.valid & (1<<0)) || (comand.valid & (1<<1))){//если х или у валидны
 800194e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d106      	bne.n	8001968 <executeGComand+0x13c>
 800195a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 8095 	beq.w	8001a92 <executeGComand+0x266>
					zeroPointX = positionX;
 8001968:	4b54      	ldr	r3, [pc, #336]	; (8001abc <executeGComand+0x290>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <executeGComand+0x2ac>)
 800196e:	6013      	str	r3, [r2, #0]
					zeroPointY = positionY;
 8001970:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <executeGComand+0x298>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a59      	ldr	r2, [pc, #356]	; (8001adc <executeGComand+0x2b0>)
 8001976:	6013      	str	r3, [r2, #0]
					calcInterpolation();//считаем интерполяцию
 8001978:	f000 f8b6 	bl	8001ae8 <calcInterpolation>
			break;
 800197c:	e089      	b.n	8001a92 <executeGComand+0x266>
			if(comand.valid & (1<<4)){//если строим через радиус
 800197e:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	2b00      	cmp	r3, #0
			int dX = positionX - comand.posX;
 8001988:	4b4c      	ldr	r3, [pc, #304]	; (8001abc <executeGComand+0x290>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	61bb      	str	r3, [r7, #24]
			int dY = positionY - comand.posY;
 8001992:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <executeGComand+0x298>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
			int hX = dX / 2;
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	0fda      	lsrs	r2, r3, #31
 80019a0:	4413      	add	r3, r2
 80019a2:	105b      	asrs	r3, r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
			int hY = dY / 2;
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	0fda      	lsrs	r2, r3, #31
 80019aa:	4413      	add	r3, r2
 80019ac:	105b      	asrs	r3, r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
			int d = sqrt((dX * dX) + (dY * dY));
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	fb02 f203 	mul.w	r2, r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	6979      	ldr	r1, [r7, #20]
 80019bc:	fb01 f303 	mul.w	r3, r1, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fd16 	bl	80003f4 <__aeabi_i2d>
 80019c8:	4603      	mov	r3, r0
 80019ca:	460c      	mov	r4, r1
 80019cc:	4618      	mov	r0, r3
 80019ce:	4621      	mov	r1, r4
 80019d0:	f007 f81c 	bl	8008a0c <sqrt>
 80019d4:	4603      	mov	r3, r0
 80019d6:	460c      	mov	r4, r1
 80019d8:	4618      	mov	r0, r3
 80019da:	4621      	mov	r1, r4
 80019dc:	f7ff f824 	bl	8000a28 <__aeabi_d2iz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60bb      	str	r3, [r7, #8]
			int n = sqrt((comand.R * comand.R) + (d * d));
 80019e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019e8:	fb02 f203 	mul.w	r2, r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	68b9      	ldr	r1, [r7, #8]
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fcfc 	bl	80003f4 <__aeabi_i2d>
 80019fc:	4603      	mov	r3, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	4618      	mov	r0, r3
 8001a02:	4621      	mov	r1, r4
 8001a04:	f007 f802 	bl	8008a0c <sqrt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	460c      	mov	r4, r1
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	4621      	mov	r1, r4
 8001a10:	f7ff f80a 	bl	8000a28 <__aeabi_d2iz>
 8001a14:	4603      	mov	r3, r0
 8001a16:	607b      	str	r3, [r7, #4]
			calcInterpolation();
 8001a18:	f000 f866 	bl	8001ae8 <calcInterpolation>
			break;
 8001a1c:	e03a      	b.n	8001a94 <executeGComand+0x268>
			int a = positionX - comand.posX;
 8001a1e:	4b27      	ldr	r3, [pc, #156]	; (8001abc <executeGComand+0x290>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
			int b = positionY - comand.posY;
 8001a28:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <executeGComand+0x298>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	623b      	str	r3, [r7, #32]
			int d = abs(sqrt((a * a) + (b * b)));
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a36:	fb02 f203 	mul.w	r2, r2, r3
 8001a3a:	6a3b      	ldr	r3, [r7, #32]
 8001a3c:	6a39      	ldr	r1, [r7, #32]
 8001a3e:	fb01 f303 	mul.w	r3, r1, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fcd5 	bl	80003f4 <__aeabi_i2d>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	460c      	mov	r4, r1
 8001a4e:	4618      	mov	r0, r3
 8001a50:	4621      	mov	r1, r4
 8001a52:	f006 ffdb 	bl	8008a0c <sqrt>
 8001a56:	4603      	mov	r3, r0
 8001a58:	460c      	mov	r4, r1
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	f006 fef1 	bl	8008844 <abs>
 8001a62:	61f8      	str	r0, [r7, #28]
			vPosX=0;
 8001a64:	4b1e      	ldr	r3, [pc, #120]	; (8001ae0 <executeGComand+0x2b4>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
			vPosY=d/2;//половина хорды
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	0fda      	lsrs	r2, r3, #31
 8001a6e:	4413      	add	r3, r2
 8001a70:	105b      	asrs	r3, r3, #1
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <executeGComand+0x2b8>)
 8001a76:	601a      	str	r2, [r3, #0]
			calcInterpolation();
 8001a78:	f000 f836 	bl	8001ae8 <calcInterpolation>
			break;
 8001a7c:	e00a      	b.n	8001a94 <executeGComand+0x268>
			positionX=0;
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <executeGComand+0x290>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
			positionY=0;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <executeGComand+0x298>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
			positionZ=0;
 8001a8a:	4b10      	ldr	r3, [pc, #64]	; (8001acc <executeGComand+0x2a0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
			break;
 8001a90:	e000      	b.n	8001a94 <executeGComand+0x268>
			break;
 8001a92:	bf00      	nop
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001a9e:	b004      	add	sp, #16
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	200005d0 	.word	0x200005d0
 8001aa8:	200005c0 	.word	0x200005c0
 8001aac:	42c80000 	.word	0x42c80000
 8001ab0:	43480000 	.word	0x43480000
 8001ab4:	471c4000 	.word	0x471c4000
 8001ab8:	200005bc 	.word	0x200005bc
 8001abc:	200005ac 	.word	0x200005ac
 8001ac0:	200005a4 	.word	0x200005a4
 8001ac4:	200005cc 	.word	0x200005cc
 8001ac8:	200005c4 	.word	0x200005c4
 8001acc:	200005a8 	.word	0x200005a8
 8001ad0:	200005b8 	.word	0x200005b8
 8001ad4:	200006f8 	.word	0x200006f8
 8001ad8:	200005b4 	.word	0x200005b4
 8001adc:	200005f4 	.word	0x200005f4
 8001ae0:	200005b0 	.word	0x200005b0
 8001ae4:	200005c8 	.word	0x200005c8

08001ae8 <calcInterpolation>:
////////////////////////////////////////////////////////////////////////////////////////
void calcInterpolation(){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
	int tmpX=positionX;
 8001aee:	4b21      	ldr	r3, [pc, #132]	; (8001b74 <calcInterpolation+0x8c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	607b      	str	r3, [r7, #4]
	int tmpY=positionY;
 8001af4:	4b20      	ldr	r3, [pc, #128]	; (8001b78 <calcInterpolation+0x90>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	603b      	str	r3, [r7, #0]
	if(!(currentComand.valid & (1<<0))){//если X не валидна
 8001afa:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <calcInterpolation+0x94>)
 8001afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <calcInterpolation+0x26>
		tmpX = currentComand.posX;//то не сравниваем
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <calcInterpolation+0x94>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	607b      	str	r3, [r7, #4]
	}
	if(!(currentComand.valid & (1<<1))){//если Y не валидна
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <calcInterpolation+0x94>)
 8001b10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <calcInterpolation+0x3a>
		tmpY = currentComand.posY;//то не сравниваем
 8001b1c:	4b17      	ldr	r3, [pc, #92]	; (8001b7c <calcInterpolation+0x94>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	603b      	str	r3, [r7, #0]
	}

	if((tmpX == currentComand.posX) && (tmpY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <calcInterpolation+0x94>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d10b      	bne.n	8001b44 <calcInterpolation+0x5c>
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <calcInterpolation+0x94>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d106      	bne.n	8001b44 <calcInterpolation+0x5c>
		vPosX=0;
 8001b36:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <calcInterpolation+0x98>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
		vPosY=0;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <calcInterpolation+0x9c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
		return;
 8001b42:	e014      	b.n	8001b6e <calcInterpolation+0x86>
	}

	switch(currentComand.GCode){
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <calcInterpolation+0x94>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d007      	beq.n	8001b5c <calcInterpolation+0x74>
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d008      	beq.n	8001b62 <calcInterpolation+0x7a>
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d000      	beq.n	8001b56 <calcInterpolation+0x6e>
		case(3):{//круговая интерполяция против часосвой стрелки
			ccwCicleInterpolation();
			break;
		}
		default:{
			return;//todo потом сделать обработку ошибки
 8001b54:	e00b      	b.n	8001b6e <calcInterpolation+0x86>
			lineInterpolacion();
 8001b56:	f000 f86f 	bl	8001c38 <lineInterpolacion>
			break;
 8001b5a:	e005      	b.n	8001b68 <calcInterpolation+0x80>
			cwCicleInterpolation();
 8001b5c:	f000 f928 	bl	8001db0 <cwCicleInterpolation>
			break;
 8001b60:	e002      	b.n	8001b68 <calcInterpolation+0x80>
			ccwCicleInterpolation();
 8001b62:	f000 fa07 	bl	8001f74 <ccwCicleInterpolation>
			break;
 8001b66:	bf00      	nop
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 8001b68:	4807      	ldr	r0, [pc, #28]	; (8001b88 <calcInterpolation+0xa0>)
 8001b6a:	f003 f989 	bl	8004e80 <HAL_TIM_Base_Start_IT>
}
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	200005ac 	.word	0x200005ac
 8001b78:	200005cc 	.word	0x200005cc
 8001b7c:	200005d0 	.word	0x200005d0
 8001b80:	200005b0 	.word	0x200005b0
 8001b84:	200005c8 	.word	0x200005c8
 8001b88:	200006f8 	.word	0x200006f8

08001b8c <executeMComand>:
////////////////////////////////////////////////////////////////////////////////////
void executeMComand(struct MComand comand){
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	7138      	strb	r0, [r7, #4]
	switch(comand.MCode){
 8001b94:	793b      	ldrb	r3, [r7, #4]
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d000      	beq.n	8001b9c <executeMComand+0x10>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
			break;
		}
	}
}
 8001b9a:	e044      	b.n	8001c26 <executeMComand+0x9a>
			HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba2:	4823      	ldr	r0, [pc, #140]	; (8001c30 <executeMComand+0xa4>)
 8001ba4:	f001 fd2e 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bae:	4820      	ldr	r0, [pc, #128]	; (8001c30 <executeMComand+0xa4>)
 8001bb0:	f001 fd28 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bba:	481d      	ldr	r0, [pc, #116]	; (8001c30 <executeMComand+0xa4>)
 8001bbc:	f001 fd22 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bc6:	481a      	ldr	r0, [pc, #104]	; (8001c30 <executeMComand+0xa4>)
 8001bc8:	f001 fd1c 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2140      	movs	r1, #64	; 0x40
 8001bd0:	4817      	ldr	r0, [pc, #92]	; (8001c30 <executeMComand+0xa4>)
 8001bd2:	f001 fd17 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bdc:	4815      	ldr	r0, [pc, #84]	; (8001c34 <executeMComand+0xa8>)
 8001bde:	f001 fd11 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2110      	movs	r1, #16
 8001be6:	4812      	ldr	r0, [pc, #72]	; (8001c30 <executeMComand+0xa4>)
 8001be8:	f001 fd0c 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2108      	movs	r1, #8
 8001bf0:	480f      	ldr	r0, [pc, #60]	; (8001c30 <executeMComand+0xa4>)
 8001bf2:	f001 fd07 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bfc:	480d      	ldr	r0, [pc, #52]	; (8001c34 <executeMComand+0xa8>)
 8001bfe:	f001 fd01 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <executeMComand+0xa8>)
 8001c0a:	f001 fcfb 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2180      	movs	r1, #128	; 0x80
 8001c12:	4807      	ldr	r0, [pc, #28]	; (8001c30 <executeMComand+0xa4>)
 8001c14:	f001 fcf6 	bl	8003604 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <executeMComand+0xa8>)
 8001c20:	f001 fcf0 	bl	8003604 <HAL_GPIO_WritePin>
			break;
 8001c24:	bf00      	nop
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010c00 	.word	0x40010c00
 8001c34:	40010800 	.word	0x40010800

08001c38 <lineInterpolacion>:
////////////////////////////////////////////////////////////////////////////////////
void lineInterpolacion(){
 8001c38:	b480      	push	{r7}
 8001c3a:	b087      	sub	sp, #28
 8001c3c:	af00      	add	r7, sp, #0
	int offsetX = zeroPointX - positionX;
 8001c3e:	4b55      	ldr	r3, [pc, #340]	; (8001d94 <lineInterpolacion+0x15c>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	4b55      	ldr	r3, [pc, #340]	; (8001d98 <lineInterpolacion+0x160>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001c4a:	4b54      	ldr	r3, [pc, #336]	; (8001d9c <lineInterpolacion+0x164>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b54      	ldr	r3, [pc, #336]	; (8001da0 <lineInterpolacion+0x168>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	613b      	str	r3, [r7, #16]
	int vectorX = currentComand.posX - positionX;
 8001c56:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <lineInterpolacion+0x16c>)
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	; (8001d98 <lineInterpolacion+0x160>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	60fb      	str	r3, [r7, #12]
	int vectorY = currentComand.posY - positionY;
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <lineInterpolacion+0x16c>)
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	4b4e      	ldr	r3, [pc, #312]	; (8001da0 <lineInterpolacion+0x168>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	60bb      	str	r3, [r7, #8]

	int F = (abs(offsetY) * abs(vectorX) - (abs(offsetX) * abs(vectorY)));//оценочная функция
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	bfb8      	it	lt
 8001c74:	425b      	neglt	r3, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	2a00      	cmp	r2, #0
 8001c7a:	bfb8      	it	lt
 8001c7c:	4252      	neglt	r2, r2
 8001c7e:	fb02 f203 	mul.w	r2, r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bfb8      	it	lt
 8001c88:	425b      	neglt	r3, r3
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	2900      	cmp	r1, #0
 8001c8e:	bfb8      	it	lt
 8001c90:	4249      	neglt	r1, r1
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	607b      	str	r3, [r7, #4]
	if(F == 0){
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d124      	bne.n	8001cea <lineInterpolacion+0xb2>
		if(vectorX > 0){
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	dd03      	ble.n	8001cae <lineInterpolacion+0x76>
			stepsCounterX = 1;
 8001ca6:	4b40      	ldr	r3, [pc, #256]	; (8001da8 <lineInterpolacion+0x170>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	e00a      	b.n	8001cc4 <lineInterpolacion+0x8c>
		}
		else if(vectorX < 0){
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	da04      	bge.n	8001cbe <lineInterpolacion+0x86>
			stepsCounterX = -1;
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <lineInterpolacion+0x170>)
 8001cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e002      	b.n	8001cc4 <lineInterpolacion+0x8c>
		}
		else{
			stepsCounterX = 0;
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <lineInterpolacion+0x170>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
		}
		if(vectorY > 0){
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	dd03      	ble.n	8001cd2 <lineInterpolacion+0x9a>
			stepsCounterY = 1;
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <lineInterpolacion+0x174>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
			else{
				stepsCounterX = 0;
			}
		}
	}
}
 8001cd0:	e05a      	b.n	8001d88 <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da04      	bge.n	8001ce2 <lineInterpolacion+0xaa>
			stepsCounterY = -1;
 8001cd8:	4b34      	ldr	r3, [pc, #208]	; (8001dac <lineInterpolacion+0x174>)
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	e052      	b.n	8001d88 <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001ce2:	4b32      	ldr	r3, [pc, #200]	; (8001dac <lineInterpolacion+0x174>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
}
 8001ce8:	e04e      	b.n	8001d88 <lineInterpolacion+0x150>
	else if(F > 0){
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	dd24      	ble.n	8001d3a <lineInterpolacion+0x102>
		if(vectorX > 0){
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	dd03      	ble.n	8001cfe <lineInterpolacion+0xc6>
			stepsCounterX = 1;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <lineInterpolacion+0x170>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]
}
 8001cfc:	e044      	b.n	8001d88 <lineInterpolacion+0x150>
		else if(vectorX < 0){
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	da04      	bge.n	8001d0e <lineInterpolacion+0xd6>
			stepsCounterX = -1;
 8001d04:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <lineInterpolacion+0x170>)
 8001d06:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	e03c      	b.n	8001d88 <lineInterpolacion+0x150>
			stepsCounterX = 0;
 8001d0e:	4b26      	ldr	r3, [pc, #152]	; (8001da8 <lineInterpolacion+0x170>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
			if(vectorY > 0){
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dd03      	ble.n	8001d22 <lineInterpolacion+0xea>
				stepsCounterY = 1;
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <lineInterpolacion+0x174>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	e032      	b.n	8001d88 <lineInterpolacion+0x150>
			else if(vectorY < 0){
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da04      	bge.n	8001d32 <lineInterpolacion+0xfa>
				stepsCounterY = -1;
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <lineInterpolacion+0x174>)
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	e02a      	b.n	8001d88 <lineInterpolacion+0x150>
				stepsCounterY = 0;
 8001d32:	4b1e      	ldr	r3, [pc, #120]	; (8001dac <lineInterpolacion+0x174>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	e026      	b.n	8001d88 <lineInterpolacion+0x150>
	else if(F < 0){
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	da23      	bge.n	8001d88 <lineInterpolacion+0x150>
		if(vectorY > 0){
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	dd03      	ble.n	8001d4e <lineInterpolacion+0x116>
			stepsCounterY = 1;
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <lineInterpolacion+0x174>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
}
 8001d4c:	e01c      	b.n	8001d88 <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da04      	bge.n	8001d5e <lineInterpolacion+0x126>
			stepsCounterY = -1;
 8001d54:	4b15      	ldr	r3, [pc, #84]	; (8001dac <lineInterpolacion+0x174>)
 8001d56:	f04f 32ff 	mov.w	r2, #4294967295
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	e014      	b.n	8001d88 <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001d5e:	4b13      	ldr	r3, [pc, #76]	; (8001dac <lineInterpolacion+0x174>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
			if(vectorX > 0){
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	dd03      	ble.n	8001d72 <lineInterpolacion+0x13a>
				stepsCounterX = 1;
 8001d6a:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <lineInterpolacion+0x170>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
}
 8001d70:	e00a      	b.n	8001d88 <lineInterpolacion+0x150>
			else if(vectorX < 0){
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	da04      	bge.n	8001d82 <lineInterpolacion+0x14a>
				stepsCounterX = -1;
 8001d78:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <lineInterpolacion+0x170>)
 8001d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7e:	601a      	str	r2, [r3, #0]
}
 8001d80:	e002      	b.n	8001d88 <lineInterpolacion+0x150>
				stepsCounterX = 0;
 8001d82:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <lineInterpolacion+0x170>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	371c      	adds	r7, #28
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bc80      	pop	{r7}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200005b4 	.word	0x200005b4
 8001d98:	200005ac 	.word	0x200005ac
 8001d9c:	200005f4 	.word	0x200005f4
 8001da0:	200005cc 	.word	0x200005cc
 8001da4:	200005d0 	.word	0x200005d0
 8001da8:	200005a4 	.word	0x200005a4
 8001dac:	200005c4 	.word	0x200005c4

08001db0 <cwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void cwCicleInterpolation(){
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001db6:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a69      	ldr	r2, [pc, #420]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	fb02 f203 	mul.w	r2, r2, r3
 8001dc2:	4b68      	ldr	r3, [pc, #416]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4967      	ldr	r1, [pc, #412]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001dc8:	6809      	ldr	r1, [r1, #0]
 8001dca:	fb01 f303 	mul.w	r3, r1, r3
 8001dce:	441a      	add	r2, r3
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <cwCicleInterpolation+0x1b8>)
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	4964      	ldr	r1, [pc, #400]	; (8001f68 <cwCicleInterpolation+0x1b8>)
 8001dd6:	6949      	ldr	r1, [r1, #20]
 8001dd8:	fb01 f303 	mul.w	r3, r1, r3
 8001ddc:	1ad3      	subs	r3, r2, r3
 8001dde:	607b      	str	r3, [r7, #4]
																		//контролируется на этапе парсинга
	if(F >= 0){//если на окружности или за ней
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	db53      	blt.n	8001e8e <cwCicleInterpolation+0xde>

		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001de6:	4b5e      	ldr	r3, [pc, #376]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	dd07      	ble.n	8001dfe <cwCicleInterpolation+0x4e>
 8001dee:	4b5d      	ldr	r3, [pc, #372]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	dd03      	ble.n	8001dfe <cwCicleInterpolation+0x4e>
			stepsCounterY = 1;
 8001df6:	4b5d      	ldr	r3, [pc, #372]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	e09d      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001dfe:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dd08      	ble.n	8001e18 <cwCicleInterpolation+0x68>
 8001e06:	4b57      	ldr	r3, [pc, #348]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da04      	bge.n	8001e18 <cwCicleInterpolation+0x68>
			stepsCounterX = -1;
 8001e0e:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e090      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001e18:	4b51      	ldr	r3, [pc, #324]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	da08      	bge.n	8001e32 <cwCicleInterpolation+0x82>
 8001e20:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da04      	bge.n	8001e32 <cwCicleInterpolation+0x82>
			stepsCounterY = -1;
 8001e28:	4b50      	ldr	r3, [pc, #320]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001e2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	e083      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001e32:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da07      	bge.n	8001e4a <cwCicleInterpolation+0x9a>
 8001e3a:	4b4a      	ldr	r3, [pc, #296]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	dd03      	ble.n	8001e4a <cwCicleInterpolation+0x9a>
			stepsCounterX = 1;
 8001e42:	4b4b      	ldr	r3, [pc, #300]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e077      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001e4a:	4b46      	ldr	r3, [pc, #280]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	dd03      	ble.n	8001e5a <cwCicleInterpolation+0xaa>
				stepsCounterY = 1;//должен быть -, но инвертировано для привода
 8001e52:	4b46      	ldr	r3, [pc, #280]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	e06f      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da04      	bge.n	8001e6c <cwCicleInterpolation+0xbc>
				stepsCounterY = -1;
 8001e62:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	e066      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 8001e6c:	4b3c      	ldr	r3, [pc, #240]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd04      	ble.n	8001e7e <cwCicleInterpolation+0xce>
				stepsCounterX = -1;
 8001e74:	4b3e      	ldr	r3, [pc, #248]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001e76:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e05d      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8001e7e:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	da59      	bge.n	8001f3a <cwCicleInterpolation+0x18a>
				stepsCounterX = 1;
 8001e86:	4b3a      	ldr	r3, [pc, #232]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e055      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
		}
	}
	else if(F < 0){//если внутри окружности
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	da52      	bge.n	8001f3a <cwCicleInterpolation+0x18a>
		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	dd07      	ble.n	8001eac <cwCicleInterpolation+0xfc>
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	dd03      	ble.n	8001eac <cwCicleInterpolation+0xfc>
			stepsCounterX = 1;
 8001ea4:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e046      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001eac:	4b2c      	ldr	r3, [pc, #176]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	dd07      	ble.n	8001ec4 <cwCicleInterpolation+0x114>
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da03      	bge.n	8001ec4 <cwCicleInterpolation+0x114>
			stepsCounterY = 1;
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e03a      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	da08      	bge.n	8001ede <cwCicleInterpolation+0x12e>
 8001ecc:	4b25      	ldr	r3, [pc, #148]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	da04      	bge.n	8001ede <cwCicleInterpolation+0x12e>
			stepsCounterX = -1;
 8001ed4:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e02d      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	da08      	bge.n	8001ef8 <cwCicleInterpolation+0x148>
 8001ee6:	4b1f      	ldr	r3, [pc, #124]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	dd04      	ble.n	8001ef8 <cwCicleInterpolation+0x148>
			stepsCounterY = -1;
 8001eee:	4b1f      	ldr	r3, [pc, #124]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e020      	b.n	8001f3a <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	dd03      	ble.n	8001f08 <cwCicleInterpolation+0x158>
				stepsCounterX = 1;
 8001f00:	4b1b      	ldr	r3, [pc, #108]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001f02:	2201      	movs	r2, #1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e018      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 8001f08:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	da04      	bge.n	8001f1a <cwCicleInterpolation+0x16a>
				stepsCounterX = -1;
 8001f10:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001f12:	f04f 32ff 	mov.w	r2, #4294967295
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	e00f      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	dd03      	ble.n	8001f2a <cwCicleInterpolation+0x17a>
				stepsCounterY = 1;
 8001f22:	4b12      	ldr	r3, [pc, #72]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e007      	b.n	8001f3a <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da03      	bge.n	8001f3a <cwCicleInterpolation+0x18a>
				stepsCounterY = -1;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001f34:	f04f 32ff 	mov.w	r2, #4294967295
 8001f38:	601a      	str	r2, [r3, #0]
			}
		}
	}

	vPosX+=stepsCounterX;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <cwCicleInterpolation+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a06      	ldr	r2, [pc, #24]	; (8001f60 <cwCicleInterpolation+0x1b0>)
 8001f46:	6013      	str	r3, [r2, #0]
	vPosY-=stepsCounterY;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <cwCicleInterpolation+0x1bc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <cwCicleInterpolation+0x1b4>)
 8001f54:	6013      	str	r3, [r2, #0]
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	200005b0 	.word	0x200005b0
 8001f64:	200005c8 	.word	0x200005c8
 8001f68:	200005d0 	.word	0x200005d0
 8001f6c:	200005c4 	.word	0x200005c4
 8001f70:	200005a4 	.word	0x200005a4

08001f74 <ccwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void ccwCicleInterpolation(){
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
	int offsetX = zeroPointX - positionX + currentComand.R;//доворачиваеем систему координат, чтобы начальная точка лежала на оси X
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <ccwCicleInterpolation+0xf4>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4b3b      	ldr	r3, [pc, #236]	; (800206c <ccwCicleInterpolation+0xf8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	1ad2      	subs	r2, r2, r3
 8001f84:	4b3a      	ldr	r3, [pc, #232]	; (8002070 <ccwCicleInterpolation+0xfc>)
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	4413      	add	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <ccwCicleInterpolation+0x100>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <ccwCicleInterpolation+0x104>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	613b      	str	r3, [r7, #16]

	int absOffsetX = abs(offsetX);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	bfb8      	it	lt
 8001f9e:	425b      	neglt	r3, r3
 8001fa0:	60fb      	str	r3, [r7, #12]
	int absOffsetY = abs(offsetY);
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	bfb8      	it	lt
 8001fa8:	425b      	neglt	r3, r3
 8001faa:	60bb      	str	r3, [r7, #8]
	int F = ((absOffsetX*absOffsetX) + (absOffsetY*absOffsetY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	fb02 f203 	mul.w	r2, r2, r3
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	68b9      	ldr	r1, [r7, #8]
 8001fb8:	fb01 f303 	mul.w	r3, r1, r3
 8001fbc:	441a      	add	r2, r3
 8001fbe:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <ccwCicleInterpolation+0xfc>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	492b      	ldr	r1, [pc, #172]	; (8002070 <ccwCicleInterpolation+0xfc>)
 8001fc4:	6949      	ldr	r1, [r1, #20]
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	607b      	str	r3, [r7, #4]
																									//контролируется на этапе парсинга

	if((offsetX > 0) && (offsetY > 0)){//1 квадрант
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dd0e      	ble.n	8001ff2 <ccwCicleInterpolation+0x7e>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	dd0b      	ble.n	8001ff2 <ccwCicleInterpolation+0x7e>
		if(F >= 0){
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	db04      	blt.n	8001fea <ccwCicleInterpolation+0x76>
			stepsCounterX = -1;//шаг влево
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <ccwCicleInterpolation+0x108>)
 8001fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe6:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 8001fe8:	e038      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
		else{
			stepsCounterY = 1;//шаг вверх
 8001fea:	4b25      	ldr	r3, [pc, #148]	; (8002080 <ccwCicleInterpolation+0x10c>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 8001ff0:	e034      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
	}
	else if((offsetX > 0) && (offsetY < 0)){//2 квадрант
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	dd0d      	ble.n	8002014 <ccwCicleInterpolation+0xa0>
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da0a      	bge.n	8002014 <ccwCicleInterpolation+0xa0>
		if(F >= 0){
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	db03      	blt.n	800200c <ccwCicleInterpolation+0x98>
			stepsCounterX = 1;//шаг вправо
 8002004:	4b1d      	ldr	r3, [pc, #116]	; (800207c <ccwCicleInterpolation+0x108>)
 8002006:	2201      	movs	r2, #1
 8002008:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 800200a:	e027      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
		else{
			stepsCounterY = 1;//шаг вверх
 800200c:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <ccwCicleInterpolation+0x10c>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 8002012:	e023      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
	}
	else if((offsetX < 0) && (offsetY > 0)){//3 квадрант
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b00      	cmp	r3, #0
 8002018:	da0d      	bge.n	8002036 <ccwCicleInterpolation+0xc2>
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	dd0a      	ble.n	8002036 <ccwCicleInterpolation+0xc2>
		if(F >= 0){
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db03      	blt.n	800202e <ccwCicleInterpolation+0xba>
			stepsCounterX = 1;//шаг вправо
 8002026:	4b15      	ldr	r3, [pc, #84]	; (800207c <ccwCicleInterpolation+0x108>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 800202c:	e016      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
		else{
			stepsCounterY = 1;//шаг вниз
 800202e:	4b14      	ldr	r3, [pc, #80]	; (8002080 <ccwCicleInterpolation+0x10c>)
 8002030:	2201      	movs	r2, #1
 8002032:	601a      	str	r2, [r3, #0]
		if(F >= 0){
 8002034:	e012      	b.n	800205c <ccwCicleInterpolation+0xe8>
		}
	}
	else if((offsetX < 0) && (offsetY > 0)){//4 квадрант
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2b00      	cmp	r3, #0
 800203a:	da0f      	bge.n	800205c <ccwCicleInterpolation+0xe8>
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	2b00      	cmp	r3, #0
 8002040:	dd0c      	ble.n	800205c <ccwCicleInterpolation+0xe8>
		if(F >= 0){
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db04      	blt.n	8002052 <ccwCicleInterpolation+0xde>
			stepsCounterX = -1;//шаг влево
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <ccwCicleInterpolation+0x108>)
 800204a:	f04f 32ff 	mov.w	r2, #4294967295
 800204e:	601a      	str	r2, [r3, #0]
		}
		else{
			stepsCounterY = -1;//шаг вниз
		}
	}
}
 8002050:	e004      	b.n	800205c <ccwCicleInterpolation+0xe8>
			stepsCounterY = -1;//шаг вниз
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <ccwCicleInterpolation+0x10c>)
 8002054:	f04f 32ff 	mov.w	r2, #4294967295
 8002058:	601a      	str	r2, [r3, #0]
}
 800205a:	e7ff      	b.n	800205c <ccwCicleInterpolation+0xe8>
 800205c:	bf00      	nop
 800205e:	371c      	adds	r7, #28
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200005b4 	.word	0x200005b4
 800206c:	200005ac 	.word	0x200005ac
 8002070:	200005d0 	.word	0x200005d0
 8002074:	200005f4 	.word	0x200005f4
 8002078:	200005cc 	.word	0x200005cc
 800207c:	200005a4 	.word	0x200005a4
 8002080:	200005c4 	.word	0x200005c4

08002084 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002088:	f000 ffd6 	bl	8003038 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800208c:	f000 f81c 	bl	80020c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002090:	f000 f9a4 	bl	80023dc <MX_GPIO_Init>
  MX_SPI1_Init();
 8002094:	f000 f888 	bl	80021a8 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002098:	f000 f8bc 	bl	8002214 <MX_TIM2_Init>
  MX_TIM3_Init();
 800209c:	f000 f906 	bl	80022ac <MX_TIM3_Init>
  MX_TIM4_Init();
 80020a0:	f000 f950 	bl	8002344 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80020a4:	f005 ff20 	bl	8007ee8 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 80020a8:	f000 f86a 	bl	8002180 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  initDrives();
 80020ac:	f7ff fb86 	bl	80017bc <initDrives>
  usbInit();
 80020b0:	f000 fe3c 	bl	8002d2c <usbInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(incomingMessageFlag==1){
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <main+0x40>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d1fb      	bne.n	80020b4 <main+0x30>
		  readMessage();
 80020bc:	f000 fe4c 	bl	8002d58 <readMessage>
	  if(incomingMessageFlag==1){
 80020c0:	e7f8      	b.n	80020b4 <main+0x30>
 80020c2:	bf00      	nop
 80020c4:	20000379 	.word	0x20000379

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	; 0x50
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020d2:	2228      	movs	r2, #40	; 0x28
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f006 fc15 	bl	8008906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 0314 	add.w	r3, r7, #20
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80020fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002100:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002102:	2300      	movs	r3, #0
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002106:	2301      	movs	r3, #1
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800210a:	2302      	movs	r3, #2
 800210c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800210e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8002114:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800211e:	4618      	mov	r0, r3
 8002120:	f002 f982 	bl	8004428 <HAL_RCC_OscConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800212a:	f000 f9e9 	bl	8002500 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212e:	230f      	movs	r3, #15
 8002130:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002132:	2302      	movs	r3, #2
 8002134:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800213a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800213e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	2101      	movs	r1, #1
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fbec 	bl	8004928 <HAL_RCC_ClockConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002156:	f000 f9d3 	bl	8002500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800215a:	2310      	movs	r3, #16
 800215c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800215e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002162:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002164:	1d3b      	adds	r3, r7, #4
 8002166:	4618      	mov	r0, r3
 8002168:	f002 fd48 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002172:	f000 f9c5 	bl	8002500 <Error_Handler>
  }
}
 8002176:	bf00      	nop
 8002178:	3750      	adds	r7, #80	; 0x50
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_CRC_Init+0x20>)
 8002186:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <MX_CRC_Init+0x24>)
 8002188:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_CRC_Init+0x20>)
 800218c:	f001 f8c3 	bl	8003316 <HAL_CRC_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002196:	f000 f9b3 	bl	8002500 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000638 	.word	0x20000638
 80021a4:	40023000 	.word	0x40023000

080021a8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <MX_SPI1_Init+0x64>)
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <MX_SPI1_Init+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_SPI1_Init+0x64>)
 80021b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021b8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021ba:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_SPI1_Init+0x64>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <MX_SPI1_Init+0x64>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021c6:	4b11      	ldr	r3, [pc, #68]	; (800220c <MX_SPI1_Init+0x64>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <MX_SPI1_Init+0x64>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <MX_SPI1_Init+0x64>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <MX_SPI1_Init+0x64>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <MX_SPI1_Init+0x64>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <MX_SPI1_Init+0x64>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <MX_SPI1_Init+0x64>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80021f0:	4b06      	ldr	r3, [pc, #24]	; (800220c <MX_SPI1_Init+0x64>)
 80021f2:	220a      	movs	r2, #10
 80021f4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f6:	4805      	ldr	r0, [pc, #20]	; (800220c <MX_SPI1_Init+0x64>)
 80021f8:	f002 fdb6 	bl	8004d68 <HAL_SPI_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 8002202:	f000 f97d 	bl	8002500 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200006a0 	.word	0x200006a0
 8002210:	40013000 	.word	0x40013000

08002214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002228:	463b      	mov	r3, r7
 800222a:	2200      	movs	r2, #0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002230:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002232:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002238:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_TIM2_Init+0x94>)
 800223a:	2277      	movs	r2, #119	; 0x77
 800223c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002244:	4b18      	ldr	r3, [pc, #96]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002246:	2209      	movs	r2, #9
 8002248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224a:	4b17      	ldr	r3, [pc, #92]	; (80022a8 <MX_TIM2_Init+0x94>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002252:	2280      	movs	r2, #128	; 0x80
 8002254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002258:	f002 fde7 	bl	8004e2a <HAL_TIM_Base_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8002262:	f000 f94d 	bl	8002500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800226a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800226c:	f107 0308 	add.w	r3, r7, #8
 8002270:	4619      	mov	r1, r3
 8002272:	480d      	ldr	r0, [pc, #52]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002274:	f002 ff59 	bl	800512a <HAL_TIM_ConfigClockSource>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800227e:	f000 f93f 	bl	8002500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002282:	2300      	movs	r3, #0
 8002284:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800228a:	463b      	mov	r3, r7
 800228c:	4619      	mov	r1, r3
 800228e:	4806      	ldr	r0, [pc, #24]	; (80022a8 <MX_TIM2_Init+0x94>)
 8002290:	f003 f91e 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800229a:	f000 f931 	bl	8002500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800229e:	bf00      	nop
 80022a0:	3718      	adds	r7, #24
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	200006f8 	.word	0x200006f8

080022ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_TIM3_Init+0x90>)
 80022ca:	4a1d      	ldr	r2, [pc, #116]	; (8002340 <MX_TIM3_Init+0x94>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MX_TIM3_Init+0x90>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <MX_TIM3_Init+0x90>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80022da:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_TIM3_Init+0x90>)
 80022dc:	2200      	movs	r2, #0
 80022de:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e0:	4b16      	ldr	r3, [pc, #88]	; (800233c <MX_TIM3_Init+0x90>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_TIM3_Init+0x90>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022ec:	4813      	ldr	r0, [pc, #76]	; (800233c <MX_TIM3_Init+0x90>)
 80022ee:	f002 fd9c 	bl	8004e2a <HAL_TIM_Base_Init>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80022f8:	f000 f902 	bl	8002500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	4619      	mov	r1, r3
 8002308:	480c      	ldr	r0, [pc, #48]	; (800233c <MX_TIM3_Init+0x90>)
 800230a:	f002 ff0e 	bl	800512a <HAL_TIM_ConfigClockSource>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002314:	f000 f8f4 	bl	8002500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002318:	2300      	movs	r3, #0
 800231a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002320:	463b      	mov	r3, r7
 8002322:	4619      	mov	r1, r3
 8002324:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_TIM3_Init+0x90>)
 8002326:	f003 f8d3 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002330:	f000 f8e6 	bl	8002500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002334:	bf00      	nop
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000644 	.word	0x20000644
 8002340:	40000400 	.word	0x40000400

08002344 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <MX_TIM4_Init+0x90>)
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <MX_TIM4_Init+0x94>)
 8002364:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002366:	4b1b      	ldr	r3, [pc, #108]	; (80023d4 <MX_TIM4_Init+0x90>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b19      	ldr	r3, [pc, #100]	; (80023d4 <MX_TIM4_Init+0x90>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <MX_TIM4_Init+0x90>)
 8002374:	2200      	movs	r2, #0
 8002376:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002378:	4b16      	ldr	r3, [pc, #88]	; (80023d4 <MX_TIM4_Init+0x90>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM4_Init+0x90>)
 8002380:	2200      	movs	r2, #0
 8002382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002384:	4813      	ldr	r0, [pc, #76]	; (80023d4 <MX_TIM4_Init+0x90>)
 8002386:	f002 fd50 	bl	8004e2a <HAL_TIM_Base_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002390:	f000 f8b6 	bl	8002500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800239a:	f107 0308 	add.w	r3, r7, #8
 800239e:	4619      	mov	r1, r3
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <MX_TIM4_Init+0x90>)
 80023a2:	f002 fec2 	bl	800512a <HAL_TIM_ConfigClockSource>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 80023ac:	f000 f8a8 	bl	8002500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b0:	2300      	movs	r3, #0
 80023b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023b8:	463b      	mov	r3, r7
 80023ba:	4619      	mov	r1, r3
 80023bc:	4805      	ldr	r0, [pc, #20]	; (80023d4 <MX_TIM4_Init+0x90>)
 80023be:	f003 f887 	bl	80054d0 <HAL_TIMEx_MasterConfigSynchronization>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80023c8:	f000 f89a 	bl	8002500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023cc:	bf00      	nop
 80023ce:	3718      	adds	r7, #24
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	200005f8 	.word	0x200005f8
 80023d8:	40000800 	.word	0x40000800

080023dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b088      	sub	sp, #32
 80023e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e2:	f107 0310 	add.w	r3, r7, #16
 80023e6:	2200      	movs	r2, #0
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	605a      	str	r2, [r3, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <MX_GPIO_Init+0x114>)
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	4a3e      	ldr	r2, [pc, #248]	; (80024f0 <MX_GPIO_Init+0x114>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	6193      	str	r3, [r2, #24]
 80023fc:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <MX_GPIO_Init+0x114>)
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <MX_GPIO_Init+0x114>)
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <MX_GPIO_Init+0x114>)
 800240e:	f043 0320 	orr.w	r3, r3, #32
 8002412:	6193      	str	r3, [r2, #24]
 8002414:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <MX_GPIO_Init+0x114>)
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0320 	and.w	r3, r3, #32
 800241c:	60bb      	str	r3, [r7, #8]
 800241e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002420:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <MX_GPIO_Init+0x114>)
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	4a32      	ldr	r2, [pc, #200]	; (80024f0 <MX_GPIO_Init+0x114>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6193      	str	r3, [r2, #24]
 800242c:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <MX_GPIO_Init+0x114>)
 800242e:	699b      	ldr	r3, [r3, #24]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <MX_GPIO_Init+0x114>)
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	4a2c      	ldr	r2, [pc, #176]	; (80024f0 <MX_GPIO_Init+0x114>)
 800243e:	f043 0308 	orr.w	r3, r3, #8
 8002442:	6193      	str	r3, [r2, #24]
 8002444:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <MX_GPIO_Init+0x114>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	f003 0308 	and.w	r3, r3, #8
 800244c:	603b      	str	r3, [r7, #0]
 800244e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8002450:	2201      	movs	r2, #1
 8002452:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002456:	4827      	ldr	r0, [pc, #156]	; (80024f4 <MX_GPIO_Init+0x118>)
 8002458:	f001 f8d4 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 800245c:	2200      	movs	r2, #0
 800245e:	f24f 01d8 	movw	r1, #61656	; 0xf0d8
 8002462:	4825      	ldr	r0, [pc, #148]	; (80024f8 <MX_GPIO_Init+0x11c>)
 8002464:	f001 f8ce 	bl	8003604 <HAL_GPIO_WritePin>
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800246e:	4823      	ldr	r0, [pc, #140]	; (80024fc <MX_GPIO_Init+0x120>)
 8002470:	f001 f8c8 	bl	8003604 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002474:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	2301      	movs	r3, #1
 800247c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2302      	movs	r3, #2
 8002484:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	4619      	mov	r1, r3
 800248c:	4819      	ldr	r0, [pc, #100]	; (80024f4 <MX_GPIO_Init+0x118>)
 800248e:	f000 ff5f 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_A_Pin X_B_Pin X_C_Pin X_D_Pin 
                           Z_C_Pin Z_D_Pin Y_D_Pin Z_A_Pin */
  GPIO_InitStruct.Pin = X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 8002492:	f24f 03d8 	movw	r3, #61656	; 0xf0d8
 8002496:	613b      	str	r3, [r7, #16]
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002498:	2301      	movs	r3, #1
 800249a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249c:	2300      	movs	r3, #0
 800249e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a0:	2302      	movs	r3, #2
 80024a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4619      	mov	r1, r3
 80024aa:	4813      	ldr	r0, [pc, #76]	; (80024f8 <MX_GPIO_Init+0x11c>)
 80024ac:	f000 ff50 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_A_Pin Y_B_Pin Y_C_Pin Z_B_Pin */
  GPIO_InitStruct.Pin = Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin;
 80024b0:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80024b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024b6:	2301      	movs	r3, #1
 80024b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024be:	2302      	movs	r3, #2
 80024c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	4619      	mov	r1, r3
 80024c8:	480c      	ldr	r0, [pc, #48]	; (80024fc <MX_GPIO_Init+0x120>)
 80024ca:	f000 ff41 	bl	8003350 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 80024ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	4805      	ldr	r0, [pc, #20]	; (80024f8 <MX_GPIO_Init+0x11c>)
 80024e4:	f000 ff34 	bl	8003350 <HAL_GPIO_Init>

}
 80024e8:	bf00      	nop
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40010c00 	.word	0x40010c00
 80024fc:	40010800 	.word	0x40010800

08002500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	bc80      	pop	{r7}
 800250a:	4770      	bx	lr

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <HAL_MspInit+0x5c>)
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_MspInit+0x5c>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6193      	str	r3, [r2, #24]
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <HAL_MspInit+0x5c>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <HAL_MspInit+0x5c>)
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	4a0e      	ldr	r2, [pc, #56]	; (8002568 <HAL_MspInit+0x5c>)
 8002530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002534:	61d3      	str	r3, [r2, #28]
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_MspInit+0x5c>)
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <HAL_MspInit+0x60>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <HAL_MspInit+0x60>)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800255e:	bf00      	nop
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	40021000 	.word	0x40021000
 800256c:	40010000 	.word	0x40010000

08002570 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_CRC_MspInit+0x34>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d10b      	bne.n	800259a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002582:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_CRC_MspInit+0x38>)
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4a08      	ldr	r2, [pc, #32]	; (80025a8 <HAL_CRC_MspInit+0x38>)
 8002588:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800258c:	6153      	str	r3, [r2, #20]
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_CRC_MspInit+0x38>)
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr
 80025a4:	40023000 	.word	0x40023000
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a1b      	ldr	r2, [pc, #108]	; (8002634 <HAL_SPI_MspInit+0x88>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d12f      	bne.n	800262c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025cc:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025ce:	699b      	ldr	r3, [r3, #24]
 80025d0:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d6:	6193      	str	r3, [r2, #24]
 80025d8:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a13      	ldr	r2, [pc, #76]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025ea:	f043 0304 	orr.w	r3, r3, #4
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_SPI_MspInit+0x8c>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80025fc:	2350      	movs	r3, #80	; 0x50
 80025fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002600:	2300      	movs	r3, #0
 8002602:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002608:	f107 0310 	add.w	r3, r7, #16
 800260c:	4619      	mov	r1, r3
 800260e:	480b      	ldr	r0, [pc, #44]	; (800263c <HAL_SPI_MspInit+0x90>)
 8002610:	f000 fe9e 	bl	8003350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0310 	add.w	r3, r7, #16
 8002624:	4619      	mov	r1, r3
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <HAL_SPI_MspInit+0x90>)
 8002628:	f000 fe92 	bl	8003350 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800262c:	bf00      	nop
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40013000 	.word	0x40013000
 8002638:	40021000 	.word	0x40021000
 800263c:	40010800 	.word	0x40010800

08002640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002650:	d114      	bne.n	800267c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002652:	4b26      	ldr	r3, [pc, #152]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	4a25      	ldr	r2, [pc, #148]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	61d3      	str	r3, [r2, #28]
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	201c      	movs	r0, #28
 8002670:	f000 fe1b 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002674:	201c      	movs	r0, #28
 8002676:	f000 fe34 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800267a:	e032      	b.n	80026e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a1b      	ldr	r2, [pc, #108]	; (80026f0 <HAL_TIM_Base_MspInit+0xb0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d114      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002686:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4a18      	ldr	r2, [pc, #96]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 800268c:	f043 0302 	orr.w	r3, r3, #2
 8002690:	61d3      	str	r3, [r2, #28]
 8002692:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	201d      	movs	r0, #29
 80026a4:	f000 fe01 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026a8:	201d      	movs	r0, #29
 80026aa:	f000 fe1a 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 80026ae:	e018      	b.n	80026e2 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0f      	ldr	r2, [pc, #60]	; (80026f4 <HAL_TIM_Base_MspInit+0xb4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d113      	bne.n	80026e2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026ba:	4b0c      	ldr	r3, [pc, #48]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4a0b      	ldr	r2, [pc, #44]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	61d3      	str	r3, [r2, #28]
 80026c6:	4b09      	ldr	r3, [pc, #36]	; (80026ec <HAL_TIM_Base_MspInit+0xac>)
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	201e      	movs	r0, #30
 80026d8:	f000 fde7 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026dc:	201e      	movs	r0, #30
 80026de:	f000 fe00 	bl	80032e2 <HAL_NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40000400 	.word	0x40000400
 80026f4:	40000800 	.word	0x40000800

080026f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80026fc:	bf00      	nop
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr

08002704 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002708:	e7fe      	b.n	8002708 <HardFault_Handler+0x4>

0800270a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800270a:	b480      	push	{r7}
 800270c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270e:	e7fe      	b.n	800270e <MemManage_Handler+0x4>

08002710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002714:	e7fe      	b.n	8002714 <BusFault_Handler+0x4>

08002716 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800271a:	e7fe      	b.n	800271a <UsageFault_Handler+0x4>

0800271c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002720:	bf00      	nop
 8002722:	46bd      	mov	sp, r7
 8002724:	bc80      	pop	{r7}
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr

08002734 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002738:	bf00      	nop
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr

08002740 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002744:	f000 fcbe 	bl	80030c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002748:	bf00      	nop
 800274a:	bd80      	pop	{r7, pc}

0800274c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002750:	4802      	ldr	r0, [pc, #8]	; (800275c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002752:	f001 f88e 	bl	8003872 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	200013d0 	.word	0x200013d0

08002760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002764:	4802      	ldr	r0, [pc, #8]	; (8002770 <TIM2_IRQHandler+0x10>)
 8002766:	f002 fbd8 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200006f8 	.word	0x200006f8

08002774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <TIM3_IRQHandler+0x10>)
 800277a:	f002 fbce 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000644 	.word	0x20000644

08002788 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800278c:	4802      	ldr	r0, [pc, #8]	; (8002798 <TIM4_IRQHandler+0x10>)
 800278e:	f002 fbc4 	bl	8004f1a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200005f8 	.word	0x200005f8

0800279c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <_sbrk+0x50>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <_sbrk+0x16>
		heap_end = &end;
 80027ac:	4b0f      	ldr	r3, [pc, #60]	; (80027ec <_sbrk+0x50>)
 80027ae:	4a10      	ldr	r2, [pc, #64]	; (80027f0 <_sbrk+0x54>)
 80027b0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80027b2:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <_sbrk+0x50>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80027b8:	4b0c      	ldr	r3, [pc, #48]	; (80027ec <_sbrk+0x50>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4413      	add	r3, r2
 80027c0:	466a      	mov	r2, sp
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d907      	bls.n	80027d6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80027c6:	f006 f841 	bl	800884c <__errno>
 80027ca:	4602      	mov	r2, r0
 80027cc:	230c      	movs	r3, #12
 80027ce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80027d0:	f04f 33ff 	mov.w	r3, #4294967295
 80027d4:	e006      	b.n	80027e4 <_sbrk+0x48>
	}

	heap_end += incr;
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <_sbrk+0x50>)
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4413      	add	r3, r2
 80027de:	4a03      	ldr	r2, [pc, #12]	; (80027ec <_sbrk+0x50>)
 80027e0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	20000370 	.word	0x20000370
 80027f0:	20001640 	.word	0x20001640

080027f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027f8:	4b15      	ldr	r3, [pc, #84]	; (8002850 <SystemInit+0x5c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a14      	ldr	r2, [pc, #80]	; (8002850 <SystemInit+0x5c>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <SystemInit+0x5c>)
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	4911      	ldr	r1, [pc, #68]	; (8002850 <SystemInit+0x5c>)
 800280a:	4b12      	ldr	r3, [pc, #72]	; (8002854 <SystemInit+0x60>)
 800280c:	4013      	ands	r3, r2
 800280e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <SystemInit+0x5c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0e      	ldr	r2, [pc, #56]	; (8002850 <SystemInit+0x5c>)
 8002816:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <SystemInit+0x5c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0a      	ldr	r2, [pc, #40]	; (8002850 <SystemInit+0x5c>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <SystemInit+0x5c>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a07      	ldr	r2, [pc, #28]	; (8002850 <SystemInit+0x5c>)
 8002832:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002836:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <SystemInit+0x5c>)
 800283a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800283e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SystemInit+0x64>)
 8002842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002846:	609a      	str	r2, [r3, #8]
#endif 
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40021000 	.word	0x40021000
 8002854:	f8ff0000 	.word	0xf8ff0000
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Игорь
 */
#include "timers.h"

////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
	static int counter=0;

	if(htim->Instance==TIM2){
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d126      	bne.n	80028bc <HAL_TIM_PeriodElapsedCallback+0x60>

		counter++;
 800286e:	4b15      	ldr	r3, [pc, #84]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	4a13      	ldr	r2, [pc, #76]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002876:	6013      	str	r3, [r2, #0]
		if(counter>=timerDivider){
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	461a      	mov	r2, r3
 800287e:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	429a      	cmp	r2, r3
 8002884:	d31a      	bcc.n	80028bc <HAL_TIM_PeriodElapsedCallback+0x60>

			if((stepsCounterX==0) && (stepsCounterY==0) && (stepsCounterZ==0)){
 8002886:	4b11      	ldr	r3, [pc, #68]	; (80028cc <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x4e>
 800288e:	4b10      	ldr	r3, [pc, #64]	; (80028d0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d109      	bne.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002896:	4b0f      	ldr	r3, [pc, #60]	; (80028d4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d105      	bne.n	80028aa <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_TIM_Base_Stop_IT(&htim2);
 800289e:	480e      	ldr	r0, [pc, #56]	; (80028d8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80028a0:	f002 fb11 	bl	8004ec6 <HAL_TIM_Base_Stop_IT>
				calcInterpolation();//пересчитываем следующий шаг интерполяции
 80028a4:	f7ff f920 	bl	8001ae8 <calcInterpolation>
				return;
 80028a8:	e008      	b.n	80028bc <HAL_TIM_PeriodElapsedCallback+0x60>
			}

			moveDirX();
 80028aa:	f000 f817 	bl	80028dc <moveDirX>
			moveDirY();
 80028ae:	f000 f8d1 	bl	8002a54 <moveDirY>
			moveDirZ();
 80028b2:	f000 f981 	bl	8002bb8 <moveDirZ>
			counter=0;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000374 	.word	0x20000374
 80028c8:	200005bc 	.word	0x200005bc
 80028cc:	200005a4 	.word	0x200005a4
 80028d0:	200005c4 	.word	0x200005c4
 80028d4:	200005b8 	.word	0x200005b8
 80028d8:	200006f8 	.word	0x200006f8

080028dc <moveDirX>:
/////////////////////////////////////////////////////////////////////////////
void moveDirX(){
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
	static char stepX=1;

	if(stepsCounterX!=0){
 80028e0:	4b58      	ldr	r3, [pc, #352]	; (8002a44 <moveDirX+0x168>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 80ab 	beq.w	8002a40 <moveDirX+0x164>
		if(stepsCounterX>0){
 80028ea:	4b56      	ldr	r3, [pc, #344]	; (8002a44 <moveDirX+0x168>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	dd17      	ble.n	8002922 <moveDirX+0x46>
			stepX++;
 80028f2:	4b55      	ldr	r3, [pc, #340]	; (8002a48 <moveDirX+0x16c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b53      	ldr	r3, [pc, #332]	; (8002a48 <moveDirX+0x16c>)
 80028fc:	701a      	strb	r2, [r3, #0]
			if(stepX == 5)stepX = 1;
 80028fe:	4b52      	ldr	r3, [pc, #328]	; (8002a48 <moveDirX+0x16c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b05      	cmp	r3, #5
 8002904:	d102      	bne.n	800290c <moveDirX+0x30>
 8002906:	4b50      	ldr	r3, [pc, #320]	; (8002a48 <moveDirX+0x16c>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
			positionX+=1;
 800290c:	4b4f      	ldr	r3, [pc, #316]	; (8002a4c <moveDirX+0x170>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	4a4e      	ldr	r2, [pc, #312]	; (8002a4c <moveDirX+0x170>)
 8002914:	6013      	str	r3, [r2, #0]
			stepsCounterX--;
 8002916:	4b4b      	ldr	r3, [pc, #300]	; (8002a44 <moveDirX+0x168>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3b01      	subs	r3, #1
 800291c:	4a49      	ldr	r2, [pc, #292]	; (8002a44 <moveDirX+0x168>)
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e01a      	b.n	8002958 <moveDirX+0x7c>
		}
		else if(stepsCounterX<0){
 8002922:	4b48      	ldr	r3, [pc, #288]	; (8002a44 <moveDirX+0x168>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	da16      	bge.n	8002958 <moveDirX+0x7c>
			stepX--;
 800292a:	4b47      	ldr	r3, [pc, #284]	; (8002a48 <moveDirX+0x16c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b45      	ldr	r3, [pc, #276]	; (8002a48 <moveDirX+0x16c>)
 8002934:	701a      	strb	r2, [r3, #0]
			if(stepX==0)stepX = 4;
 8002936:	4b44      	ldr	r3, [pc, #272]	; (8002a48 <moveDirX+0x16c>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d102      	bne.n	8002944 <moveDirX+0x68>
 800293e:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <moveDirX+0x16c>)
 8002940:	2204      	movs	r2, #4
 8002942:	701a      	strb	r2, [r3, #0]
			positionX-=1;
 8002944:	4b41      	ldr	r3, [pc, #260]	; (8002a4c <moveDirX+0x170>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3b01      	subs	r3, #1
 800294a:	4a40      	ldr	r2, [pc, #256]	; (8002a4c <moveDirX+0x170>)
 800294c:	6013      	str	r3, [r2, #0]
			stepsCounterX++;
 800294e:	4b3d      	ldr	r3, [pc, #244]	; (8002a44 <moveDirX+0x168>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3301      	adds	r3, #1
 8002954:	4a3b      	ldr	r2, [pc, #236]	; (8002a44 <moveDirX+0x168>)
 8002956:	6013      	str	r3, [r2, #0]
		}
		switch(stepX){
 8002958:	4b3b      	ldr	r3, [pc, #236]	; (8002a48 <moveDirX+0x16c>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	3b01      	subs	r3, #1
 800295e:	2b03      	cmp	r3, #3
 8002960:	d86e      	bhi.n	8002a40 <moveDirX+0x164>
 8002962:	a201      	add	r2, pc, #4	; (adr r2, 8002968 <moveDirX+0x8c>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	08002979 	.word	0x08002979
 800296c:	080029ab 	.word	0x080029ab
 8002970:	080029dd 	.word	0x080029dd
 8002974:	08002a0f 	.word	0x08002a0f
			case(1):{
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002978:	2200      	movs	r2, #0
 800297a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800297e:	4834      	ldr	r0, [pc, #208]	; (8002a50 <moveDirX+0x174>)
 8002980:	f000 fe40 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800298a:	4831      	ldr	r0, [pc, #196]	; (8002a50 <moveDirX+0x174>)
 800298c:	f000 fe3a 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	482e      	ldr	r0, [pc, #184]	; (8002a50 <moveDirX+0x174>)
 8002998:	f000 fe34 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_A,GPIO_PIN_SET);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a2:	482b      	ldr	r0, [pc, #172]	; (8002a50 <moveDirX+0x174>)
 80029a4:	f000 fe2e 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 80029a8:	e04a      	b.n	8002a40 <moveDirX+0x164>
			}
			case(2):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029b0:	4827      	ldr	r0, [pc, #156]	; (8002a50 <moveDirX+0x174>)
 80029b2:	f000 fe27 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029bc:	4824      	ldr	r0, [pc, #144]	; (8002a50 <moveDirX+0x174>)
 80029be:	f000 fe21 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 80029c2:	2200      	movs	r2, #0
 80029c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029c8:	4821      	ldr	r0, [pc, #132]	; (8002a50 <moveDirX+0x174>)
 80029ca:	f000 fe1b 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_SET);
 80029ce:	2201      	movs	r2, #1
 80029d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d4:	481e      	ldr	r0, [pc, #120]	; (8002a50 <moveDirX+0x174>)
 80029d6:	f000 fe15 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 80029da:	e031      	b.n	8002a40 <moveDirX+0x164>
			}
			case(3):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 80029dc:	2200      	movs	r2, #0
 80029de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029e2:	481b      	ldr	r0, [pc, #108]	; (8002a50 <moveDirX+0x174>)
 80029e4:	f000 fe0e 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 80029e8:	2200      	movs	r2, #0
 80029ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029ee:	4818      	ldr	r0, [pc, #96]	; (8002a50 <moveDirX+0x174>)
 80029f0:	f000 fe08 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fa:	4815      	ldr	r0, [pc, #84]	; (8002a50 <moveDirX+0x174>)
 80029fc:	f000 fe02 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_SET);
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a06:	4812      	ldr	r0, [pc, #72]	; (8002a50 <moveDirX+0x174>)
 8002a08:	f000 fdfc 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002a0c:	e018      	b.n	8002a40 <moveDirX+0x164>
			}
			case(4):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a14:	480e      	ldr	r0, [pc, #56]	; (8002a50 <moveDirX+0x174>)
 8002a16:	f000 fdf5 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a20:	480b      	ldr	r0, [pc, #44]	; (8002a50 <moveDirX+0x174>)
 8002a22:	f000 fdef 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002a26:	2200      	movs	r2, #0
 8002a28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a2c:	4808      	ldr	r0, [pc, #32]	; (8002a50 <moveDirX+0x174>)
 8002a2e:	f000 fde9 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_SET);
 8002a32:	2201      	movs	r2, #1
 8002a34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a38:	4805      	ldr	r0, [pc, #20]	; (8002a50 <moveDirX+0x174>)
 8002a3a:	f000 fde3 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002a3e:	bf00      	nop
			}
		}
	}
}
 8002a40:	bf00      	nop
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	200005a4 	.word	0x200005a4
 8002a48:	20000004 	.word	0x20000004
 8002a4c:	200005ac 	.word	0x200005ac
 8002a50:	40010c00 	.word	0x40010c00

08002a54 <moveDirY>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirY(){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	static char stepY=1;

	if(stepsCounterY!=0){
 8002a58:	4b52      	ldr	r3, [pc, #328]	; (8002ba4 <moveDirY+0x150>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 809f 	beq.w	8002ba0 <moveDirY+0x14c>
		if(stepsCounterY>0){
 8002a62:	4b50      	ldr	r3, [pc, #320]	; (8002ba4 <moveDirY+0x150>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	dd17      	ble.n	8002a9a <moveDirY+0x46>
			stepY++;
 8002a6a:	4b4f      	ldr	r3, [pc, #316]	; (8002ba8 <moveDirY+0x154>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	b2da      	uxtb	r2, r3
 8002a72:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <moveDirY+0x154>)
 8002a74:	701a      	strb	r2, [r3, #0]
			if(stepY == 5)stepY = 1;
 8002a76:	4b4c      	ldr	r3, [pc, #304]	; (8002ba8 <moveDirY+0x154>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b05      	cmp	r3, #5
 8002a7c:	d102      	bne.n	8002a84 <moveDirY+0x30>
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <moveDirY+0x154>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
			positionY+=1;
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <moveDirY+0x158>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	4a48      	ldr	r2, [pc, #288]	; (8002bac <moveDirY+0x158>)
 8002a8c:	6013      	str	r3, [r2, #0]
			stepsCounterY--;
 8002a8e:	4b45      	ldr	r3, [pc, #276]	; (8002ba4 <moveDirY+0x150>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3b01      	subs	r3, #1
 8002a94:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <moveDirY+0x150>)
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e01a      	b.n	8002ad0 <moveDirY+0x7c>
		}
		else if(stepsCounterY<0){
 8002a9a:	4b42      	ldr	r3, [pc, #264]	; (8002ba4 <moveDirY+0x150>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	da16      	bge.n	8002ad0 <moveDirY+0x7c>
			stepY--;
 8002aa2:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <moveDirY+0x154>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <moveDirY+0x154>)
 8002aac:	701a      	strb	r2, [r3, #0]
			if(stepY == 0)stepY = 4;
 8002aae:	4b3e      	ldr	r3, [pc, #248]	; (8002ba8 <moveDirY+0x154>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d102      	bne.n	8002abc <moveDirY+0x68>
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <moveDirY+0x154>)
 8002ab8:	2204      	movs	r2, #4
 8002aba:	701a      	strb	r2, [r3, #0]
			positionY-=1;
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <moveDirY+0x158>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	4a3a      	ldr	r2, [pc, #232]	; (8002bac <moveDirY+0x158>)
 8002ac4:	6013      	str	r3, [r2, #0]
			stepsCounterY++;
 8002ac6:	4b37      	ldr	r3, [pc, #220]	; (8002ba4 <moveDirY+0x150>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	3301      	adds	r3, #1
 8002acc:	4a35      	ldr	r2, [pc, #212]	; (8002ba4 <moveDirY+0x150>)
 8002ace:	6013      	str	r3, [r2, #0]
		}
		switch(stepY){
 8002ad0:	4b35      	ldr	r3, [pc, #212]	; (8002ba8 <moveDirY+0x154>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d862      	bhi.n	8002ba0 <moveDirY+0x14c>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <moveDirY+0x8c>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002b1d 	.word	0x08002b1d
 8002ae8:	08002b49 	.word	0x08002b49
 8002aec:	08002b75 	.word	0x08002b75
			case(1):{
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002af0:	2200      	movs	r2, #0
 8002af2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002af6:	482e      	ldr	r0, [pc, #184]	; (8002bb0 <moveDirY+0x15c>)
 8002af8:	f000 fd84 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2108      	movs	r1, #8
 8002b00:	482c      	ldr	r0, [pc, #176]	; (8002bb4 <moveDirY+0x160>)
 8002b02:	f000 fd7f 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_SET);
 8002b06:	2201      	movs	r2, #1
 8002b08:	2110      	movs	r1, #16
 8002b0a:	482a      	ldr	r0, [pc, #168]	; (8002bb4 <moveDirY+0x160>)
 8002b0c:	f000 fd7a 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002b10:	2200      	movs	r2, #0
 8002b12:	2140      	movs	r1, #64	; 0x40
 8002b14:	4827      	ldr	r0, [pc, #156]	; (8002bb4 <moveDirY+0x160>)
 8002b16:	f000 fd75 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002b1a:	e041      	b.n	8002ba0 <moveDirY+0x14c>
			}
			case(2):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	4824      	ldr	r0, [pc, #144]	; (8002bb4 <moveDirY+0x160>)
 8002b22:	f000 fd6f 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_SET);
 8002b26:	2201      	movs	r2, #1
 8002b28:	2108      	movs	r1, #8
 8002b2a:	4822      	ldr	r0, [pc, #136]	; (8002bb4 <moveDirY+0x160>)
 8002b2c:	f000 fd6a 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002b30:	2200      	movs	r2, #0
 8002b32:	2110      	movs	r1, #16
 8002b34:	481f      	ldr	r0, [pc, #124]	; (8002bb4 <moveDirY+0x160>)
 8002b36:	f000 fd65 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b40:	481b      	ldr	r0, [pc, #108]	; (8002bb0 <moveDirY+0x15c>)
 8002b42:	f000 fd5f 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002b46:	e02b      	b.n	8002ba0 <moveDirY+0x14c>
			}
			case(3):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2140      	movs	r1, #64	; 0x40
 8002b4c:	4819      	ldr	r0, [pc, #100]	; (8002bb4 <moveDirY+0x160>)
 8002b4e:	f000 fd59 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_SET);
 8002b52:	2201      	movs	r2, #1
 8002b54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b58:	4815      	ldr	r0, [pc, #84]	; (8002bb0 <moveDirY+0x15c>)
 8002b5a:	f000 fd53 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2110      	movs	r1, #16
 8002b62:	4814      	ldr	r0, [pc, #80]	; (8002bb4 <moveDirY+0x160>)
 8002b64:	f000 fd4e 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	4811      	ldr	r0, [pc, #68]	; (8002bb4 <moveDirY+0x160>)
 8002b6e:	f000 fd49 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002b72:	e015      	b.n	8002ba0 <moveDirY+0x14c>
			}
			case(4):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	2140      	movs	r1, #64	; 0x40
 8002b78:	480e      	ldr	r0, [pc, #56]	; (8002bb4 <moveDirY+0x160>)
 8002b7a:	f000 fd43 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b84:	480a      	ldr	r0, [pc, #40]	; (8002bb0 <moveDirY+0x15c>)
 8002b86:	f000 fd3d 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	2108      	movs	r1, #8
 8002b8e:	4809      	ldr	r0, [pc, #36]	; (8002bb4 <moveDirY+0x160>)
 8002b90:	f000 fd38 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002b94:	2200      	movs	r2, #0
 8002b96:	2110      	movs	r1, #16
 8002b98:	4806      	ldr	r0, [pc, #24]	; (8002bb4 <moveDirY+0x160>)
 8002b9a:	f000 fd33 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002b9e:	bf00      	nop
			}
		}
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	200005c4 	.word	0x200005c4
 8002ba8:	20000005 	.word	0x20000005
 8002bac:	200005cc 	.word	0x200005cc
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40010c00 	.word	0x40010c00

08002bb8 <moveDirZ>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirZ(){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	static char stepZ=1;

	if(stepsCounterZ!=0){
 8002bbc:	4b56      	ldr	r3, [pc, #344]	; (8002d18 <moveDirZ+0x160>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 80a7 	beq.w	8002d14 <moveDirZ+0x15c>
			if(stepsCounterZ>0){
 8002bc6:	4b54      	ldr	r3, [pc, #336]	; (8002d18 <moveDirZ+0x160>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	dd17      	ble.n	8002bfe <moveDirZ+0x46>
				stepZ++;
 8002bce:	4b53      	ldr	r3, [pc, #332]	; (8002d1c <moveDirZ+0x164>)
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	b2da      	uxtb	r2, r3
 8002bd6:	4b51      	ldr	r3, [pc, #324]	; (8002d1c <moveDirZ+0x164>)
 8002bd8:	701a      	strb	r2, [r3, #0]
				if(stepZ == 5)stepZ = 1;
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <moveDirZ+0x164>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d102      	bne.n	8002be8 <moveDirZ+0x30>
 8002be2:	4b4e      	ldr	r3, [pc, #312]	; (8002d1c <moveDirZ+0x164>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	701a      	strb	r2, [r3, #0]
				positionZ+=1;
 8002be8:	4b4d      	ldr	r3, [pc, #308]	; (8002d20 <moveDirZ+0x168>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	3301      	adds	r3, #1
 8002bee:	4a4c      	ldr	r2, [pc, #304]	; (8002d20 <moveDirZ+0x168>)
 8002bf0:	6013      	str	r3, [r2, #0]
				stepsCounterZ--;
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <moveDirZ+0x160>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	4a47      	ldr	r2, [pc, #284]	; (8002d18 <moveDirZ+0x160>)
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	e01a      	b.n	8002c34 <moveDirZ+0x7c>
			}
			else if(stepsCounterZ<0){
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <moveDirZ+0x160>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	da16      	bge.n	8002c34 <moveDirZ+0x7c>
				stepZ--;
 8002c06:	4b45      	ldr	r3, [pc, #276]	; (8002d1c <moveDirZ+0x164>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b2da      	uxtb	r2, r3
 8002c0e:	4b43      	ldr	r3, [pc, #268]	; (8002d1c <moveDirZ+0x164>)
 8002c10:	701a      	strb	r2, [r3, #0]
				if(stepZ == 0)stepZ = 4;
 8002c12:	4b42      	ldr	r3, [pc, #264]	; (8002d1c <moveDirZ+0x164>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d102      	bne.n	8002c20 <moveDirZ+0x68>
 8002c1a:	4b40      	ldr	r3, [pc, #256]	; (8002d1c <moveDirZ+0x164>)
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	701a      	strb	r2, [r3, #0]
				positionZ-=1;
 8002c20:	4b3f      	ldr	r3, [pc, #252]	; (8002d20 <moveDirZ+0x168>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	3b01      	subs	r3, #1
 8002c26:	4a3e      	ldr	r2, [pc, #248]	; (8002d20 <moveDirZ+0x168>)
 8002c28:	6013      	str	r3, [r2, #0]
				stepsCounterZ++;
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <moveDirZ+0x160>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4a39      	ldr	r2, [pc, #228]	; (8002d18 <moveDirZ+0x160>)
 8002c32:	6013      	str	r3, [r2, #0]
			}
		switch(stepZ){
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <moveDirZ+0x164>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d86a      	bhi.n	8002d14 <moveDirZ+0x15c>
 8002c3e:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <moveDirZ+0x8c>)
 8002c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c44:	08002c55 	.word	0x08002c55
 8002c48:	08002c85 	.word	0x08002c85
 8002c4c:	08002cb5 	.word	0x08002cb5
 8002c50:	08002ce5 	.word	0x08002ce5
			case(1):{
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002c54:	2200      	movs	r2, #0
 8002c56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c5a:	4832      	ldr	r0, [pc, #200]	; (8002d24 <moveDirZ+0x16c>)
 8002c5c:	f000 fcd2 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002c60:	2200      	movs	r2, #0
 8002c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c66:	482f      	ldr	r0, [pc, #188]	; (8002d24 <moveDirZ+0x16c>)
 8002c68:	f000 fccc 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	; 0x80
 8002c70:	482d      	ldr	r0, [pc, #180]	; (8002d28 <moveDirZ+0x170>)
 8002c72:	f000 fcc7 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_SET);
 8002c76:	2201      	movs	r2, #1
 8002c78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c7c:	4829      	ldr	r0, [pc, #164]	; (8002d24 <moveDirZ+0x16c>)
 8002c7e:	f000 fcc1 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002c82:	e047      	b.n	8002d14 <moveDirZ+0x15c>
			}
			case(2):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c8a:	4826      	ldr	r0, [pc, #152]	; (8002d24 <moveDirZ+0x16c>)
 8002c8c:	f000 fcba 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002c90:	2200      	movs	r2, #0
 8002c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c96:	4823      	ldr	r0, [pc, #140]	; (8002d24 <moveDirZ+0x16c>)
 8002c98:	f000 fcb4 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	4821      	ldr	r0, [pc, #132]	; (8002d28 <moveDirZ+0x170>)
 8002ca2:	f000 fcaf 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_SET);
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cac:	481d      	ldr	r0, [pc, #116]	; (8002d24 <moveDirZ+0x16c>)
 8002cae:	f000 fca9 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002cb2:	e02f      	b.n	8002d14 <moveDirZ+0x15c>
			}
			case(3):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cba:	481a      	ldr	r0, [pc, #104]	; (8002d24 <moveDirZ+0x16c>)
 8002cbc:	f000 fca2 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc6:	4817      	ldr	r0, [pc, #92]	; (8002d24 <moveDirZ+0x16c>)
 8002cc8:	f000 fc9c 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	; 0x80
 8002cd0:	4815      	ldr	r0, [pc, #84]	; (8002d28 <moveDirZ+0x170>)
 8002cd2:	f000 fc97 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_SET);
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cdc:	4811      	ldr	r0, [pc, #68]	; (8002d24 <moveDirZ+0x16c>)
 8002cde:	f000 fc91 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002ce2:	e017      	b.n	8002d14 <moveDirZ+0x15c>
			}
			case(4):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cea:	480e      	ldr	r0, [pc, #56]	; (8002d24 <moveDirZ+0x16c>)
 8002cec:	f000 fc8a 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf6:	480b      	ldr	r0, [pc, #44]	; (8002d24 <moveDirZ+0x16c>)
 8002cf8:	f000 fc84 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d02:	4808      	ldr	r0, [pc, #32]	; (8002d24 <moveDirZ+0x16c>)
 8002d04:	f000 fc7e 	bl	8003604 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_SET);
 8002d08:	2201      	movs	r2, #1
 8002d0a:	2180      	movs	r1, #128	; 0x80
 8002d0c:	4806      	ldr	r0, [pc, #24]	; (8002d28 <moveDirZ+0x170>)
 8002d0e:	f000 fc79 	bl	8003604 <HAL_GPIO_WritePin>
				break;
 8002d12:	bf00      	nop
			}
		}
	}
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	200005b8 	.word	0x200005b8
 8002d1c:	20000006 	.word	0x20000006
 8002d20:	200005a8 	.word	0x200005a8
 8002d24:	40010800 	.word	0x40010800
 8002d28:	40010c00 	.word	0x40010c00

08002d2c <usbInit>:
 */


#include "usb.h"

void usbInit(){
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
	if(rxBuffer==NULL){
 8002d30:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <usbInit+0x24>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <usbInit+0x1a>
		rxBuffer=malloc(50);
 8002d38:	2032      	movs	r0, #50	; 0x32
 8002d3a:	f005 fdbf 	bl	80088bc <malloc>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <usbInit+0x24>)
 8002d44:	601a      	str	r2, [r3, #0]
	}
	sizeOfMessage=0;
 8002d46:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <usbInit+0x28>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000069c 	.word	0x2000069c
 8002d54:	20000698 	.word	0x20000698

08002d58 <readMessage>:
///////////////////////////////////////////////////////////////
void readMessage(){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b082      	sub	sp, #8
 8002d5c:	af00      	add	r7, sp, #0

	incomingMessageFlag=0;
 8002d5e:	4b24      	ldr	r3, [pc, #144]	; (8002df0 <readMessage+0x98>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]
	unsigned short crc=0;
 8002d64:	2300      	movs	r3, #0
 8002d66:	80bb      	strh	r3, [r7, #4]
	unsigned short crc2=0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	80fb      	strh	r3, [r7, #6]
	memcpy(&crc,&rxBuffer[sizeOfMessage-2],2);
 8002d6c:	4b21      	ldr	r3, [pc, #132]	; (8002df4 <readMessage+0x9c>)
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <readMessage+0xa0>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	3b02      	subs	r3, #2
 8002d76:	4413      	add	r3, r2
 8002d78:	881b      	ldrh	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	80bb      	strh	r3, [r7, #4]
	crc2=Crc16(rxBuffer,sizeOfMessage-2);
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <readMessage+0x9c>)
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <readMessage+0xa0>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b02      	subs	r3, #2
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 f834 	bl	8002dfc <Crc16>
 8002d94:	4603      	mov	r3, r0
 8002d96:	80fb      	strh	r3, [r7, #6]
	if(crc==crc2){
 8002d98:	88bb      	ldrh	r3, [r7, #4]
 8002d9a:	88fa      	ldrh	r2, [r7, #6]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d122      	bne.n	8002de6 <readMessage+0x8e>
		switch(rxBuffer[1]){
 8002da0:	4b14      	ldr	r3, [pc, #80]	; (8002df4 <readMessage+0x9c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <readMessage+0x5a>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d003      	beq.n	8002db8 <readMessage+0x60>
				break;
			}
		}
	}

}
 8002db0:	e019      	b.n	8002de6 <readMessage+0x8e>
				sendStatus();
 8002db2:	f000 f85f 	bl	8002e74 <sendStatus>
				break;
 8002db6:	e016      	b.n	8002de6 <readMessage+0x8e>
				parseCodeString(rxBuffer+2,sizeOfMessage-4);
 8002db8:	4b0e      	ldr	r3, [pc, #56]	; (8002df4 <readMessage+0x9c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <readMessage+0xa0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3b04      	subs	r3, #4
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f7fe f9bf 	bl	800114c <parseCodeString>
				sendAcknolege(MESSAGE_G_CODE,rxBuffer+2,sizeOfMessage-4);
 8002dce:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <readMessage+0x9c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	1c99      	adds	r1, r3, #2
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <readMessage+0xa0>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	3b04      	subs	r3, #4
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2001      	movs	r0, #1
 8002de0:	f000 f8aa 	bl	8002f38 <sendAcknolege>
				break;
 8002de4:	bf00      	nop
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000379 	.word	0x20000379
 8002df4:	2000069c 	.word	0x2000069c
 8002df8:	20000698 	.word	0x20000698

08002dfc <Crc16>:
////////////////////////////////////////////////////////////////
unsigned short Crc16(char *pcBlock, unsigned short len){
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8002e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0c:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--){
 8002e0e:	e025      	b.n	8002e5c <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	1c5a      	adds	r2, r3, #1
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	021b      	lsls	r3, r3, #8
 8002e1a:	b21a      	sxth	r2, r3
 8002e1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e20:	4053      	eors	r3, r2
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8002e26:	2300      	movs	r3, #0
 8002e28:	737b      	strb	r3, [r7, #13]
 8002e2a:	e014      	b.n	8002e56 <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8002e2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	da09      	bge.n	8002e48 <Crc16+0x4c>
 8002e34:	89fb      	ldrh	r3, [r7, #14]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	b21b      	sxth	r3, r3
 8002e3a:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002e3e:	f083 0301 	eor.w	r3, r3, #1
 8002e42:	b21b      	sxth	r3, r3
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	e002      	b.n	8002e4e <Crc16+0x52>
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8002e50:	7b7b      	ldrb	r3, [r7, #13]
 8002e52:	3301      	adds	r3, #1
 8002e54:	737b      	strb	r3, [r7, #13]
 8002e56:	7b7b      	ldrb	r3, [r7, #13]
 8002e58:	2b07      	cmp	r3, #7
 8002e5a:	d9e7      	bls.n	8002e2c <Crc16+0x30>
    while (len--){
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	1e5a      	subs	r2, r3, #1
 8002e60:	807a      	strh	r2, [r7, #2]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1d4      	bne.n	8002e10 <Crc16+0x14>
        }
    }
    return crc;
 8002e66:	89fb      	ldrh	r3, [r7, #14]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr
	...

08002e74 <sendStatus>:
////////////////////////////////////////////////////////////////////////
void sendStatus(){
 8002e74:	b5b0      	push	{r4, r5, r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	466b      	mov	r3, sp
 8002e7c:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2;//размер,тип,3 флоата,CRC
 8002e7e:	2310      	movs	r3, #16
 8002e80:	73fb      	strb	r3, [r7, #15]
	unsigned char dataToSend[size];
 8002e82:	7bf8      	ldrb	r0, [r7, #15]
 8002e84:	4603      	mov	r3, r0
 8002e86:	3b01      	subs	r3, #1
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	b2c1      	uxtb	r1, r0
 8002e8c:	f04f 0200 	mov.w	r2, #0
 8002e90:	f04f 0300 	mov.w	r3, #0
 8002e94:	f04f 0400 	mov.w	r4, #0
 8002e98:	00d4      	lsls	r4, r2, #3
 8002e9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002e9e:	00cb      	lsls	r3, r1, #3
 8002ea0:	b2c1      	uxtb	r1, r0
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	f04f 0300 	mov.w	r3, #0
 8002eaa:	f04f 0400 	mov.w	r4, #0
 8002eae:	00d4      	lsls	r4, r2, #3
 8002eb0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002eb4:	00cb      	lsls	r3, r1, #3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	3307      	adds	r3, #7
 8002eba:	08db      	lsrs	r3, r3, #3
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	ebad 0d03 	sub.w	sp, sp, r3
 8002ec2:	466b      	mov	r3, sp
 8002ec4:	3300      	adds	r3, #0
 8002ec6:	607b      	str	r3, [r7, #4]

	dataToSend[0]=size;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	7bfa      	ldrb	r2, [r7, #15]
 8002ecc:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=MESSAGE_STATUS;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	705a      	strb	r2, [r3, #1]
	//отправляем позицию X. Разбираем float на char
	memcpy(dataToSend+2,&positionX,sizeof(int));
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3302      	adds	r3, #2
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <sendStatus+0xb8>)
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	601a      	str	r2, [r3, #0]
	//отправляем позицию Y. Разбираем float на char
	memcpy(dataToSend+2+sizeof(int),&positionY,sizeof(int));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3306      	adds	r3, #6
 8002ee2:	4a13      	ldr	r2, [pc, #76]	; (8002f30 <sendStatus+0xbc>)
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	601a      	str	r2, [r3, #0]
	//отправляем позицию X. Разбираем float на char
	memcpy(dataToSend+2+sizeof(int)*2,&positionZ,sizeof(int));
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	330a      	adds	r3, #10
 8002eec:	4a11      	ldr	r2, [pc, #68]	; (8002f34 <sendStatus+0xc0>)
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	601a      	str	r2, [r3, #0]

	unsigned short crc = Crc16(dataToSend,size-2);
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	7bfb      	ldrb	r3, [r7, #15]
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b02      	subs	r3, #2
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	4610      	mov	r0, r2
 8002f00:	f7ff ff7c 	bl	8002dfc <Crc16>
 8002f04:	4603      	mov	r3, r0
 8002f06:	807b      	strh	r3, [r7, #2]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	3b02      	subs	r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	887a      	ldrh	r2, [r7, #2]
 8002f12:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7bfa      	ldrb	r2, [r7, #15]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f005 f8c0 	bl	80080a0 <CDC_Transmit_FS>
 8002f20:	46ad      	mov	sp, r5

}
 8002f22:	bf00      	nop
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bdb0      	pop	{r4, r5, r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	200005ac 	.word	0x200005ac
 8002f30:	200005cc 	.word	0x200005cc
 8002f34:	200005a8 	.word	0x200005a8

08002f38 <sendAcknolege>:
/////////////////////////////////////////////////////////////////////////
void sendAcknolege(enum messageType mess, char *array, char arrSize){
 8002f38:	b5b0      	push	{r4, r5, r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	71fb      	strb	r3, [r7, #7]
 8002f44:	4613      	mov	r3, r2
 8002f46:	71bb      	strb	r3, [r7, #6]
 8002f48:	466b      	mov	r3, sp
 8002f4a:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2+arrSize;//размер,тип,3 флоата,CRC, размер массива
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	3310      	adds	r3, #16
 8002f50:	75fb      	strb	r3, [r7, #23]
	unsigned char dataToSend[size];
 8002f52:	7df8      	ldrb	r0, [r7, #23]
 8002f54:	4603      	mov	r3, r0
 8002f56:	3b01      	subs	r3, #1
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	b2c1      	uxtb	r1, r0
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	f04f 0400 	mov.w	r4, #0
 8002f68:	00d4      	lsls	r4, r2, #3
 8002f6a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f6e:	00cb      	lsls	r3, r1, #3
 8002f70:	b2c1      	uxtb	r1, r0
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	f04f 0400 	mov.w	r4, #0
 8002f7e:	00d4      	lsls	r4, r2, #3
 8002f80:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f84:	00cb      	lsls	r3, r1, #3
 8002f86:	4603      	mov	r3, r0
 8002f88:	3307      	adds	r3, #7
 8002f8a:	08db      	lsrs	r3, r3, #3
 8002f8c:	00db      	lsls	r3, r3, #3
 8002f8e:	ebad 0d03 	sub.w	sp, sp, r3
 8002f92:	466b      	mov	r3, sp
 8002f94:	3300      	adds	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

	dataToSend[0]=size;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	7dfa      	ldrb	r2, [r7, #23]
 8002f9c:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=mess;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	79fa      	ldrb	r2, [r7, #7]
 8002fa2:	705a      	strb	r2, [r3, #1]
	memcpy(array,dataToSend+2,arrSize);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3302      	adds	r3, #2
 8002fa8:	79ba      	ldrb	r2, [r7, #6]
 8002faa:	4619      	mov	r1, r3
 8002fac:	6838      	ldr	r0, [r7, #0]
 8002fae:	f005 fc9f 	bl	80088f0 <memcpy>
	unsigned short crc = Crc16(dataToSend,size-2);
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b02      	subs	r3, #2
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	f7ff ff1c 	bl	8002dfc <Crc16>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	817b      	strh	r3, [r7, #10]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	3b02      	subs	r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	897a      	ldrh	r2, [r7, #10]
 8002fd2:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	7dfa      	ldrb	r2, [r7, #23]
 8002fd8:	4611      	mov	r1, r2
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f005 f860 	bl	80080a0 <CDC_Transmit_FS>
 8002fe0:	46ad      	mov	sp, r5
}
 8002fe2:	bf00      	nop
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002fec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002fec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002fee:	e003      	b.n	8002ff8 <LoopCopyDataInit>

08002ff0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002ff2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002ff4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002ff6:	3104      	adds	r1, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002ff8:	480a      	ldr	r0, [pc, #40]	; (8003024 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002ffa:	4b0b      	ldr	r3, [pc, #44]	; (8003028 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002ffc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002ffe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003000:	d3f6      	bcc.n	8002ff0 <CopyDataInit>
  ldr r2, =_sbss
 8003002:	4a0a      	ldr	r2, [pc, #40]	; (800302c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003004:	e002      	b.n	800300c <LoopFillZerobss>

08003006 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003006:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003008:	f842 3b04 	str.w	r3, [r2], #4

0800300c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800300e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003010:	d3f9      	bcc.n	8003006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003012:	f7ff fbef 	bl	80027f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003016:	f005 fc1f 	bl	8008858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800301a:	f7ff f833 	bl	8002084 <main>
  bx lr
 800301e:	4770      	bx	lr
  ldr r3, =_sidata
 8003020:	08008d8c 	.word	0x08008d8c
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003028:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 800302c:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 8003030:	20001640 	.word	0x20001640

08003034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003034:	e7fe      	b.n	8003034 <ADC1_2_IRQHandler>
	...

08003038 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_Init+0x28>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_Init+0x28>)
 8003042:	f043 0310 	orr.w	r3, r3, #16
 8003046:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 f923 	bl	8003294 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304e:	2000      	movs	r0, #0
 8003050:	f000 f808 	bl	8003064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003054:	f7ff fa5a 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40022000 	.word	0x40022000

08003064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_InitTick+0x54>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_InitTick+0x58>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307a:	fbb3 f3f1 	udiv	r3, r3, r1
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f93b 	bl	80032fe <HAL_SYSTICK_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00e      	b.n	80030b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d80a      	bhi.n	80030ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003098:	2200      	movs	r2, #0
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f000 f903 	bl	80032aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <HAL_InitTick+0x5c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000000 	.word	0x20000000
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	20000008 	.word	0x20000008

080030c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c8:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_IncTick+0x1c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_IncTick+0x20>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	4a03      	ldr	r2, [pc, #12]	; (80030e4 <HAL_IncTick+0x20>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	2000000c 	.word	0x2000000c
 80030e4:	20000738 	.word	0x20000738

080030e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return uwTick;
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <HAL_GetTick+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr
 80030f8:	20000738 	.word	0x20000738

080030fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800310c:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003118:	4013      	ands	r3, r2
 800311a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003124:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800312c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800312e:	4a04      	ldr	r2, [pc, #16]	; (8003140 <__NVIC_SetPriorityGrouping+0x44>)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	60d3      	str	r3, [r2, #12]
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003148:	4b04      	ldr	r3, [pc, #16]	; (800315c <__NVIC_GetPriorityGrouping+0x18>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	0a1b      	lsrs	r3, r3, #8
 800314e:	f003 0307 	and.w	r3, r3, #7
}
 8003152:	4618      	mov	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	e000ed00 	.word	0xe000ed00

08003160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	2b00      	cmp	r3, #0
 8003170:	db0b      	blt.n	800318a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003172:	79fb      	ldrb	r3, [r7, #7]
 8003174:	f003 021f 	and.w	r2, r3, #31
 8003178:	4906      	ldr	r1, [pc, #24]	; (8003194 <__NVIC_EnableIRQ+0x34>)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	095b      	lsrs	r3, r3, #5
 8003180:	2001      	movs	r0, #1
 8003182:	fa00 f202 	lsl.w	r2, r0, r2
 8003186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr
 8003194:	e000e100 	.word	0xe000e100

08003198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	6039      	str	r1, [r7, #0]
 80031a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	db0a      	blt.n	80031c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	b2da      	uxtb	r2, r3
 80031b0:	490c      	ldr	r1, [pc, #48]	; (80031e4 <__NVIC_SetPriority+0x4c>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	0112      	lsls	r2, r2, #4
 80031b8:	b2d2      	uxtb	r2, r2
 80031ba:	440b      	add	r3, r1
 80031bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c0:	e00a      	b.n	80031d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	b2da      	uxtb	r2, r3
 80031c6:	4908      	ldr	r1, [pc, #32]	; (80031e8 <__NVIC_SetPriority+0x50>)
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	f003 030f 	and.w	r3, r3, #15
 80031ce:	3b04      	subs	r3, #4
 80031d0:	0112      	lsls	r2, r2, #4
 80031d2:	b2d2      	uxtb	r2, r2
 80031d4:	440b      	add	r3, r1
 80031d6:	761a      	strb	r2, [r3, #24]
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000e100 	.word	0xe000e100
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	; 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 0307 	and.w	r3, r3, #7
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	bf28      	it	cs
 800320a:	2304      	movcs	r3, #4
 800320c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3304      	adds	r3, #4
 8003212:	2b06      	cmp	r3, #6
 8003214:	d902      	bls.n	800321c <NVIC_EncodePriority+0x30>
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3b03      	subs	r3, #3
 800321a:	e000      	b.n	800321e <NVIC_EncodePriority+0x32>
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	f04f 32ff 	mov.w	r2, #4294967295
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43da      	mvns	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	401a      	ands	r2, r3
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003234:	f04f 31ff 	mov.w	r1, #4294967295
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	fa01 f303 	lsl.w	r3, r1, r3
 800323e:	43d9      	mvns	r1, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003244:	4313      	orrs	r3, r2
         );
}
 8003246:	4618      	mov	r0, r3
 8003248:	3724      	adds	r7, #36	; 0x24
 800324a:	46bd      	mov	sp, r7
 800324c:	bc80      	pop	{r7}
 800324e:	4770      	bx	lr

08003250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b082      	sub	sp, #8
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	3b01      	subs	r3, #1
 800325c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003260:	d301      	bcc.n	8003266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003262:	2301      	movs	r3, #1
 8003264:	e00f      	b.n	8003286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003266:	4a0a      	ldr	r2, [pc, #40]	; (8003290 <SysTick_Config+0x40>)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3b01      	subs	r3, #1
 800326c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326e:	210f      	movs	r1, #15
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	f7ff ff90 	bl	8003198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <SysTick_Config+0x40>)
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327e:	4b04      	ldr	r3, [pc, #16]	; (8003290 <SysTick_Config+0x40>)
 8003280:	2207      	movs	r2, #7
 8003282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	e000e010 	.word	0xe000e010

08003294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7ff ff2d 	bl	80030fc <__NVIC_SetPriorityGrouping>
}
 80032a2:	bf00      	nop
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b086      	sub	sp, #24
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	4603      	mov	r3, r0
 80032b2:	60b9      	str	r1, [r7, #8]
 80032b4:	607a      	str	r2, [r7, #4]
 80032b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032bc:	f7ff ff42 	bl	8003144 <__NVIC_GetPriorityGrouping>
 80032c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	6978      	ldr	r0, [r7, #20]
 80032c8:	f7ff ff90 	bl	80031ec <NVIC_EncodePriority>
 80032cc:	4602      	mov	r2, r0
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff5f 	bl	8003198 <__NVIC_SetPriority>
}
 80032da:	bf00      	nop
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b082      	sub	sp, #8
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff ff35 	bl	8003160 <__NVIC_EnableIRQ>
}
 80032f6:	bf00      	nop
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}

080032fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b082      	sub	sp, #8
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff ffa2 	bl	8003250 <SysTick_Config>
 800330c:	4603      	mov	r3, r0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b082      	sub	sp, #8
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e00e      	b.n	8003346 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	795b      	ldrb	r3, [r3, #5]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d105      	bne.n	800333e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff f919 	bl	8002570 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003344:	2300      	movs	r3, #0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003350:	b480      	push	{r7}
 8003352:	b08b      	sub	sp, #44	; 0x2c
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800335e:	2300      	movs	r3, #0
 8003360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003362:	e127      	b.n	80035b4 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003364:	2201      	movs	r2, #1
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69fa      	ldr	r2, [r7, #28]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	429a      	cmp	r2, r3
 800337e:	f040 8116 	bne.w	80035ae <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b12      	cmp	r3, #18
 8003388:	d034      	beq.n	80033f4 <HAL_GPIO_Init+0xa4>
 800338a:	2b12      	cmp	r3, #18
 800338c:	d80d      	bhi.n	80033aa <HAL_GPIO_Init+0x5a>
 800338e:	2b02      	cmp	r3, #2
 8003390:	d02b      	beq.n	80033ea <HAL_GPIO_Init+0x9a>
 8003392:	2b02      	cmp	r3, #2
 8003394:	d804      	bhi.n	80033a0 <HAL_GPIO_Init+0x50>
 8003396:	2b00      	cmp	r3, #0
 8003398:	d031      	beq.n	80033fe <HAL_GPIO_Init+0xae>
 800339a:	2b01      	cmp	r3, #1
 800339c:	d01c      	beq.n	80033d8 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800339e:	e048      	b.n	8003432 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d043      	beq.n	800342c <HAL_GPIO_Init+0xdc>
 80033a4:	2b11      	cmp	r3, #17
 80033a6:	d01b      	beq.n	80033e0 <HAL_GPIO_Init+0x90>
          break;
 80033a8:	e043      	b.n	8003432 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033aa:	4a89      	ldr	r2, [pc, #548]	; (80035d0 <HAL_GPIO_Init+0x280>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d026      	beq.n	80033fe <HAL_GPIO_Init+0xae>
 80033b0:	4a87      	ldr	r2, [pc, #540]	; (80035d0 <HAL_GPIO_Init+0x280>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d806      	bhi.n	80033c4 <HAL_GPIO_Init+0x74>
 80033b6:	4a87      	ldr	r2, [pc, #540]	; (80035d4 <HAL_GPIO_Init+0x284>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d020      	beq.n	80033fe <HAL_GPIO_Init+0xae>
 80033bc:	4a86      	ldr	r2, [pc, #536]	; (80035d8 <HAL_GPIO_Init+0x288>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <HAL_GPIO_Init+0xae>
          break;
 80033c2:	e036      	b.n	8003432 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80033c4:	4a85      	ldr	r2, [pc, #532]	; (80035dc <HAL_GPIO_Init+0x28c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0xae>
 80033ca:	4a85      	ldr	r2, [pc, #532]	; (80035e0 <HAL_GPIO_Init+0x290>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d016      	beq.n	80033fe <HAL_GPIO_Init+0xae>
 80033d0:	4a84      	ldr	r2, [pc, #528]	; (80035e4 <HAL_GPIO_Init+0x294>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_GPIO_Init+0xae>
          break;
 80033d6:	e02c      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	623b      	str	r3, [r7, #32]
          break;
 80033de:	e028      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	3304      	adds	r3, #4
 80033e6:	623b      	str	r3, [r7, #32]
          break;
 80033e8:	e023      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	3308      	adds	r3, #8
 80033f0:	623b      	str	r3, [r7, #32]
          break;
 80033f2:	e01e      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	330c      	adds	r3, #12
 80033fa:	623b      	str	r3, [r7, #32]
          break;
 80033fc:	e019      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003406:	2304      	movs	r3, #4
 8003408:	623b      	str	r3, [r7, #32]
          break;
 800340a:	e012      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003414:	2308      	movs	r3, #8
 8003416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	611a      	str	r2, [r3, #16]
          break;
 800341e:	e008      	b.n	8003432 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003420:	2308      	movs	r3, #8
 8003422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69fa      	ldr	r2, [r7, #28]
 8003428:	615a      	str	r2, [r3, #20]
          break;
 800342a:	e002      	b.n	8003432 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800342c:	2300      	movs	r3, #0
 800342e:	623b      	str	r3, [r7, #32]
          break;
 8003430:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2bff      	cmp	r3, #255	; 0xff
 8003436:	d801      	bhi.n	800343c <HAL_GPIO_Init+0xec>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	e001      	b.n	8003440 <HAL_GPIO_Init+0xf0>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3304      	adds	r3, #4
 8003440:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2bff      	cmp	r3, #255	; 0xff
 8003446:	d802      	bhi.n	800344e <HAL_GPIO_Init+0xfe>
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	e002      	b.n	8003454 <HAL_GPIO_Init+0x104>
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	3b08      	subs	r3, #8
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	210f      	movs	r1, #15
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	fa01 f303 	lsl.w	r3, r1, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	401a      	ands	r2, r3
 8003466:	6a39      	ldr	r1, [r7, #32]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	fa01 f303 	lsl.w	r3, r1, r3
 800346e:	431a      	orrs	r2, r3
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 8096 	beq.w	80035ae <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_GPIO_Init+0x298>)
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_GPIO_Init+0x298>)
 8003488:	f043 0301 	orr.w	r3, r3, #1
 800348c:	6193      	str	r3, [r2, #24]
 800348e:	4b56      	ldr	r3, [pc, #344]	; (80035e8 <HAL_GPIO_Init+0x298>)
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	60bb      	str	r3, [r7, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800349a:	4a54      	ldr	r2, [pc, #336]	; (80035ec <HAL_GPIO_Init+0x29c>)
 800349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4013      	ands	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4b      	ldr	r2, [pc, #300]	; (80035f0 <HAL_GPIO_Init+0x2a0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <HAL_GPIO_Init+0x19e>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4a      	ldr	r2, [pc, #296]	; (80035f4 <HAL_GPIO_Init+0x2a4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00d      	beq.n	80034ea <HAL_GPIO_Init+0x19a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a49      	ldr	r2, [pc, #292]	; (80035f8 <HAL_GPIO_Init+0x2a8>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d007      	beq.n	80034e6 <HAL_GPIO_Init+0x196>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a48      	ldr	r2, [pc, #288]	; (80035fc <HAL_GPIO_Init+0x2ac>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_GPIO_Init+0x192>
 80034de:	2303      	movs	r3, #3
 80034e0:	e006      	b.n	80034f0 <HAL_GPIO_Init+0x1a0>
 80034e2:	2304      	movs	r3, #4
 80034e4:	e004      	b.n	80034f0 <HAL_GPIO_Init+0x1a0>
 80034e6:	2302      	movs	r3, #2
 80034e8:	e002      	b.n	80034f0 <HAL_GPIO_Init+0x1a0>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_GPIO_Init+0x1a0>
 80034ee:	2300      	movs	r3, #0
 80034f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f2:	f002 0203 	and.w	r2, r2, #3
 80034f6:	0092      	lsls	r2, r2, #2
 80034f8:	4093      	lsls	r3, r2
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003500:	493a      	ldr	r1, [pc, #232]	; (80035ec <HAL_GPIO_Init+0x29c>)
 8003502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003504:	089b      	lsrs	r3, r3, #2
 8003506:	3302      	adds	r3, #2
 8003508:	68fa      	ldr	r2, [r7, #12]
 800350a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d006      	beq.n	8003528 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800351a:	4b39      	ldr	r3, [pc, #228]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4938      	ldr	r1, [pc, #224]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	e006      	b.n	8003536 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	43db      	mvns	r3, r3
 8003530:	4933      	ldr	r1, [pc, #204]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003532:	4013      	ands	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003542:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	492e      	ldr	r1, [pc, #184]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
 800354e:	e006      	b.n	800355e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003550:	4b2b      	ldr	r3, [pc, #172]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	43db      	mvns	r3, r3
 8003558:	4929      	ldr	r1, [pc, #164]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 800355a:	4013      	ands	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800356a:	4b25      	ldr	r3, [pc, #148]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	4924      	ldr	r1, [pc, #144]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	608b      	str	r3, [r1, #8]
 8003576:	e006      	b.n	8003586 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003578:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	43db      	mvns	r3, r3
 8003580:	491f      	ldr	r1, [pc, #124]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003582:	4013      	ands	r3, r2
 8003584:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	491a      	ldr	r1, [pc, #104]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	60cb      	str	r3, [r1, #12]
 800359e:	e006      	b.n	80035ae <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035a0:	4b17      	ldr	r3, [pc, #92]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	4915      	ldr	r1, [pc, #84]	; (8003600 <HAL_GPIO_Init+0x2b0>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	3301      	adds	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	fa22 f303 	lsr.w	r3, r2, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f47f aed0 	bne.w	8003364 <HAL_GPIO_Init+0x14>
  }
}
 80035c4:	bf00      	nop
 80035c6:	372c      	adds	r7, #44	; 0x2c
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bc80      	pop	{r7}
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	10210000 	.word	0x10210000
 80035d4:	10110000 	.word	0x10110000
 80035d8:	10120000 	.word	0x10120000
 80035dc:	10310000 	.word	0x10310000
 80035e0:	10320000 	.word	0x10320000
 80035e4:	10220000 	.word	0x10220000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40010800 	.word	0x40010800
 80035f4:	40010c00 	.word	0x40010c00
 80035f8:	40011000 	.word	0x40011000
 80035fc:	40011400 	.word	0x40011400
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	807b      	strh	r3, [r7, #2]
 8003610:	4613      	mov	r3, r2
 8003612:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003614:	787b      	ldrb	r3, [r7, #1]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800361a:	887a      	ldrh	r2, [r7, #2]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003620:	e003      	b.n	800362a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003622:	887b      	ldrh	r3, [r7, #2]
 8003624:	041a      	lsls	r2, r3, #16
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	611a      	str	r2, [r3, #16]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	887b      	ldrh	r3, [r7, #2]
 8003646:	4013      	ands	r3, r2
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800364c:	887a      	ldrh	r2, [r7, #2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003652:	e002      	b.n	800365a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003654:	887a      	ldrh	r2, [r7, #2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	611a      	str	r2, [r3, #16]
}
 800365a:	bf00      	nop
 800365c:	370c      	adds	r7, #12
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	b08b      	sub	sp, #44	; 0x2c
 8003668:	af06      	add	r7, sp, #24
 800366a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0d3      	b.n	800381e <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f004 fe3c 	bl	8008308 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4618      	mov	r0, r3
 800369e:	f001 ff94 	bl	80055ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	687e      	ldr	r6, [r7, #4]
 80036aa:	466d      	mov	r5, sp
 80036ac:	f106 0410 	add.w	r4, r6, #16
 80036b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	602b      	str	r3, [r5, #0]
 80036b8:	1d33      	adds	r3, r6, #4
 80036ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036bc:	6838      	ldr	r0, [r7, #0]
 80036be:	f001 ff5d 	bl	800557c <USB_CoreInit>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d005      	beq.n	80036d4 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0a4      	b.n	800381e <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2100      	movs	r1, #0
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 ff91 	bl	8005602 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
 80036e4:	e035      	b.n	8003752 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036e6:	7bfb      	ldrb	r3, [r7, #15]
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	015b      	lsls	r3, r3, #5
 80036ec:	4413      	add	r3, r2
 80036ee:	3329      	adds	r3, #41	; 0x29
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	015b      	lsls	r3, r3, #5
 80036fa:	4413      	add	r3, r2
 80036fc:	3328      	adds	r3, #40	; 0x28
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	7bfa      	ldrb	r2, [r7, #15]
 8003706:	b291      	uxth	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	015b      	lsls	r3, r3, #5
 800370c:	4413      	add	r3, r2
 800370e:	3336      	adds	r3, #54	; 0x36
 8003710:	460a      	mov	r2, r1
 8003712:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	015b      	lsls	r3, r3, #5
 800371a:	4413      	add	r3, r2
 800371c:	332b      	adds	r3, #43	; 0x2b
 800371e:	2200      	movs	r2, #0
 8003720:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	015b      	lsls	r3, r3, #5
 8003728:	4413      	add	r3, r2
 800372a:	3338      	adds	r3, #56	; 0x38
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003730:	7bfb      	ldrb	r3, [r7, #15]
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	015b      	lsls	r3, r3, #5
 8003736:	4413      	add	r3, r2
 8003738:	333c      	adds	r3, #60	; 0x3c
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	3302      	adds	r3, #2
 8003744:	015b      	lsls	r3, r3, #5
 8003746:	4413      	add	r3, r2
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	3301      	adds	r3, #1
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	429a      	cmp	r2, r3
 800375a:	d3c4      	bcc.n	80036e6 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e031      	b.n	80037c6 <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003762:	7bfb      	ldrb	r3, [r7, #15]
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	015b      	lsls	r3, r3, #5
 8003768:	4413      	add	r3, r2
 800376a:	f203 1329 	addw	r3, r3, #297	; 0x129
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	015b      	lsls	r3, r3, #5
 8003778:	4413      	add	r3, r2
 800377a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003782:	7bfb      	ldrb	r3, [r7, #15]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	015b      	lsls	r3, r3, #5
 8003788:	4413      	add	r3, r2
 800378a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4413      	add	r3, r2
 800379a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	015b      	lsls	r3, r3, #5
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	330a      	adds	r3, #10
 80037b8:	015b      	lsls	r3, r3, #5
 80037ba:	4413      	add	r3, r2
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
 80037c2:	3301      	adds	r3, #1
 80037c4:	73fb      	strb	r3, [r7, #15]
 80037c6:	7bfa      	ldrb	r2, [r7, #15]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d3c8      	bcc.n	8003762 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	603b      	str	r3, [r7, #0]
 80037d6:	687e      	ldr	r6, [r7, #4]
 80037d8:	466d      	mov	r5, sp
 80037da:	f106 0410 	add.w	r4, r6, #16
 80037de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e2:	6823      	ldr	r3, [r4, #0]
 80037e4:	602b      	str	r3, [r5, #0]
 80037e6:	1d33      	adds	r3, r6, #4
 80037e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ea:	6838      	ldr	r0, [r7, #0]
 80037ec:	f001 ff15 	bl	800561a <USB_DevInit>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2202      	movs	r2, #2
 80037fa:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e00d      	b.n	800381e <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f002 ff53 	bl	80066c2 <USB_DevDisconnect>

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003826 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_PCD_Start+0x16>
 8003838:	2302      	movs	r3, #2
 800383a:	e016      	b.n	800386a <HAL_PCD_Start+0x44>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003844:	2101      	movs	r1, #1
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f004 ffc5 	bl	80087d6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4618      	mov	r0, r3
 8003852:	f002 ff2c 	bl	80066ae <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f001 fe9e 	bl	800559c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4618      	mov	r0, r3
 8003880:	f002 ff29 	bl	80066d6 <USB_ReadInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800388a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800388e:	d102      	bne.n	8003896 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 faf3 	bl	8003e7c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f002 ff1b 	bl	80066d6 <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038aa:	d112      	bne.n	80038d2 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038b4:	b29a      	uxth	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038be:	b292      	uxth	r2, r2
 80038c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f004 fd94 	bl	80083f2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f8de 	bl	8003a8e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f002 fefd 	bl	80066d6 <USB_ReadInterrupts>
 80038dc:	4603      	mov	r3, r0
 80038de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038e6:	d10b      	bne.n	8003900 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80038f0:	b29a      	uxth	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80038fa:	b292      	uxth	r2, r2
 80038fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f002 fee6 	bl	80066d6 <USB_ReadInterrupts>
 800390a:	4603      	mov	r3, r0
 800390c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003914:	d10b      	bne.n	800392e <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800391e:	b29a      	uxth	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003928:	b292      	uxth	r2, r2
 800392a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f002 fecf 	bl	80066d6 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003942:	d126      	bne.n	8003992 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0204 	bic.w	r2, r2, #4
 8003956:	b292      	uxth	r2, r2
 8003958:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003964:	b29a      	uxth	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0208 	bic.w	r2, r2, #8
 800396e:	b292      	uxth	r2, r2
 8003970:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f004 fd75 	bl	8008464 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003982:	b29a      	uxth	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398c:	b292      	uxth	r2, r2
 800398e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4618      	mov	r0, r3
 8003998:	f002 fe9d 	bl	80066d6 <USB_ReadInterrupts>
 800399c:	4603      	mov	r3, r0
 800399e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a6:	d13d      	bne.n	8003a24 <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	b292      	uxth	r2, r2
 80039bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d2:	b292      	uxth	r2, r2
 80039d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0204 	orr.w	r2, r2, #4
 80039ea:	b292      	uxth	r2, r2
 80039ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f002 fe6e 	bl	80066d6 <USB_ReadInterrupts>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a04:	d10b      	bne.n	8003a1e <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a18:	b292      	uxth	r2, r2
 8003a1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f004 fd06 	bl	8008430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f002 fe54 	bl	80066d6 <USB_ReadInterrupts>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a38:	d10e      	bne.n	8003a58 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a4c:	b292      	uxth	r2, r2
 8003a4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f004 fcbf 	bl	80083d6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f002 fe3a 	bl	80066d6 <USB_ReadInterrupts>
 8003a62:	4603      	mov	r3, r0
 8003a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a6c:	d10b      	bne.n	8003a86 <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a80:	b292      	uxth	r2, r2
 8003a82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}

08003a8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003a8e:	b580      	push	{r7, lr}
 8003a90:	b082      	sub	sp, #8
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	460b      	mov	r3, r1
 8003a98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_PCD_SetAddress+0x1a>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e013      	b.n	8003ad0 <HAL_PCD_SetAddress+0x42>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	4611      	mov	r1, r2
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f002 fde1 	bl	8006688 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003ace:	2300      	movs	r3, #0
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	3708      	adds	r7, #8
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	70fb      	strb	r3, [r7, #3]
 8003aea:	460b      	mov	r3, r1
 8003aec:	803b      	strh	r3, [r7, #0]
 8003aee:	4613      	mov	r3, r2
 8003af0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003af2:	2300      	movs	r3, #0
 8003af4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003af6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	da0b      	bge.n	8003b16 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	015b      	lsls	r3, r3, #5
 8003b06:	3328      	adds	r3, #40	; 0x28
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2201      	movs	r2, #1
 8003b12:	705a      	strb	r2, [r3, #1]
 8003b14:	e00b      	b.n	8003b2e <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b16:	78fb      	ldrb	r3, [r7, #3]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	015b      	lsls	r3, r3, #5
 8003b1e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4413      	add	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b2e:	78fb      	ldrb	r3, [r7, #3]
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b3a:	883a      	ldrh	r2, [r7, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	78ba      	ldrb	r2, [r7, #2]
 8003b44:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d004      	beq.n	8003b58 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003b58:	78bb      	ldrb	r3, [r7, #2]
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d102      	bne.n	8003b64 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_PCD_EP_Open+0x9a>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e00e      	b.n	8003b90 <HAL_PCD_EP_Open+0xb8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f001 fd6f 	bl	8005664 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ba4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da0b      	bge.n	8003bc4 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	f003 0307 	and.w	r3, r3, #7
 8003bb2:	015b      	lsls	r3, r3, #5
 8003bb4:	3328      	adds	r3, #40	; 0x28
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	4413      	add	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	705a      	strb	r2, [r3, #1]
 8003bc2:	e00b      	b.n	8003bdc <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003bdc:	78fb      	ldrb	r3, [r7, #3]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d101      	bne.n	8003bf6 <HAL_PCD_EP_Close+0x5e>
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	e00e      	b.n	8003c14 <HAL_PCD_EP_Close+0x7c>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68f9      	ldr	r1, [r7, #12]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 f81b 	bl	8005c40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c2c:	7afb      	ldrb	r3, [r7, #11]
 8003c2e:	f003 0307 	and.w	r3, r3, #7
 8003c32:	015b      	lsls	r3, r3, #5
 8003c34:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c56:	7afb      	ldrb	r3, [r7, #11]
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	b2da      	uxtb	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c62:	7afb      	ldrb	r3, [r7, #11]
 8003c64:	f003 0307 	and.w	r3, r3, #7
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d106      	bne.n	8003c7a <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6979      	ldr	r1, [r7, #20]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f002 f97a 	bl	8005f6c <USB_EPStartXfer>
 8003c78:	e005      	b.n	8003c86 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f002 f973 	bl	8005f6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3718      	adds	r7, #24
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003c9c:	78fb      	ldrb	r3, [r7, #3]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	330a      	adds	r3, #10
 8003ca6:	015b      	lsls	r3, r3, #5
 8003ca8:	4413      	add	r3, r2
 8003caa:	3304      	adds	r3, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	607a      	str	r2, [r7, #4]
 8003cc2:	603b      	str	r3, [r7, #0]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cc8:	7afb      	ldrb	r3, [r7, #11]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	015b      	lsls	r3, r3, #5
 8003cd0:	3328      	adds	r3, #40	; 0x28
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2201      	movs	r2, #1
 8003cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6979      	ldr	r1, [r7, #20]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f002 f92d 	bl	8005f6c <USB_EPStartXfer>
 8003d12:	e005      	b.n	8003d20 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6979      	ldr	r1, [r7, #20]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 f926 	bl	8005f6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b084      	sub	sp, #16
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	460b      	mov	r3, r1
 8003d34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003d36:	78fb      	ldrb	r3, [r7, #3]
 8003d38:	f003 0207 	and.w	r2, r3, #7
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d901      	bls.n	8003d48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e046      	b.n	8003dd6 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	da0b      	bge.n	8003d68 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	015b      	lsls	r3, r3, #5
 8003d58:	3328      	adds	r3, #40	; 0x28
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	705a      	strb	r2, [r3, #1]
 8003d66:	e009      	b.n	8003d7c <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	015b      	lsls	r3, r3, #5
 8003d6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_PCD_EP_SetStall+0x72>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e01c      	b.n	8003dd6 <HAL_PCD_EP_SetStall+0xac>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68f9      	ldr	r1, [r7, #12]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f002 fb96 	bl	80064dc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003db0:	78fb      	ldrb	r3, [r7, #3]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d108      	bne.n	8003dcc <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	f002 fc94 	bl	80066f4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 020f 	and.w	r2, r3, #15
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d901      	bls.n	8003dfc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e03a      	b.n	8003e72 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da0b      	bge.n	8003e1c <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 0307 	and.w	r3, r3, #7
 8003e0a:	015b      	lsls	r3, r3, #5
 8003e0c:	3328      	adds	r3, #40	; 0x28
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	705a      	strb	r2, [r3, #1]
 8003e1a:	e00b      	b.n	8003e34 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	015b      	lsls	r3, r3, #5
 8003e24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e3a:	78fb      	ldrb	r3, [r7, #3]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	b2da      	uxtb	r2, r3
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d101      	bne.n	8003e54 <HAL_PCD_EP_ClrStall+0x76>
 8003e50:	2302      	movs	r3, #2
 8003e52:	e00e      	b.n	8003e72 <HAL_PCD_EP_ClrStall+0x94>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68f9      	ldr	r1, [r7, #12]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f002 fb7c 	bl	8006560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
	...

08003e7c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e84:	e282      	b.n	800438c <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e8e:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e90:	8afb      	ldrh	r3, [r7, #22]
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	f003 030f 	and.w	r3, r3, #15
 8003e98:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003e9a:	7d7b      	ldrb	r3, [r7, #21]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f040 8142 	bne.w	8004126 <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d151      	bne.n	8003f50 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebc:	b29c      	uxth	r4, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003ec6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3328      	adds	r3, #40	; 0x28
 8003ed2:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	461a      	mov	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3302      	adds	r3, #2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ef6:	881b      	ldrh	r3, [r3, #0]
 8003ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	69db      	ldr	r3, [r3, #28]
 8003f08:	441a      	add	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f004 fa49 	bl	80083a8 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 8234 	beq.w	800438c <PCD_EP_ISR_Handler+0x510>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 822f 	bne.w	800438c <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b292      	uxth	r2, r2
 8003f42:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003f4e:	e21d      	b.n	800438c <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003f56:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f60:	8a7b      	ldrh	r3, [r7, #18]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d033      	beq.n	8003fd2 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3306      	adds	r3, #6
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6812      	ldr	r2, [r2, #0]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6818      	ldr	r0, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	f002 fbf2 	bl	8006792 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fba:	4013      	ands	r3, r2
 8003fbc:	b29c      	uxth	r4, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003fc6:	b292      	uxth	r2, r2
 8003fc8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f004 f9c2 	bl	8008354 <HAL_PCD_SetupStageCallback>
 8003fd0:	e1dc      	b.n	800438c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f280 81d8 	bge.w	800438c <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	881b      	ldrh	r3, [r3, #0]
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003fe8:	4013      	ands	r3, r2
 8003fea:	b29c      	uxth	r4, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004000:	b29b      	uxth	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	4413      	add	r3, r2
 800400c:	3306      	adds	r3, #6
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	4413      	add	r3, r2
 8004016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	69db      	ldr	r3, [r3, #28]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d019      	beq.n	8004060 <PCD_EP_ISR_Handler+0x1e4>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d015      	beq.n	8004060 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6959      	ldr	r1, [r3, #20]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004044:	b29b      	uxth	r3, r3
 8004046:	f002 fba4 	bl	8006792 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	69db      	ldr	r3, [r3, #28]
 8004052:	441a      	add	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004058:	2100      	movs	r1, #0
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f004 f98c 	bl	8008378 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	461c      	mov	r4, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800406e:	b29b      	uxth	r3, r3
 8004070:	441c      	add	r4, r3
 8004072:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 8004076:	461c      	mov	r4, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10e      	bne.n	800409e <PCD_EP_ISR_Handler+0x222>
 8004080:	8823      	ldrh	r3, [r4, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004088:	b29b      	uxth	r3, r3
 800408a:	8023      	strh	r3, [r4, #0]
 800408c:	8823      	ldrh	r3, [r4, #0]
 800408e:	b29b      	uxth	r3, r3
 8004090:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004094:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004098:	b29b      	uxth	r3, r3
 800409a:	8023      	strh	r3, [r4, #0]
 800409c:	e02d      	b.n	80040fa <PCD_EP_ISR_Handler+0x27e>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	2b3e      	cmp	r3, #62	; 0x3e
 80040a4:	d812      	bhi.n	80040cc <PCD_EP_ISR_Handler+0x250>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	085b      	lsrs	r3, r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <PCD_EP_ISR_Handler+0x244>
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	3301      	adds	r3, #1
 80040be:	61bb      	str	r3, [r7, #24]
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	029b      	lsls	r3, r3, #10
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8023      	strh	r3, [r4, #0]
 80040ca:	e016      	b.n	80040fa <PCD_EP_ISR_Handler+0x27e>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	691b      	ldr	r3, [r3, #16]
 80040d0:	095b      	lsrs	r3, r3, #5
 80040d2:	61bb      	str	r3, [r7, #24]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d102      	bne.n	80040e6 <PCD_EP_ISR_Handler+0x26a>
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	3b01      	subs	r3, #1
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	029b      	lsls	r3, r3, #10
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	b29c      	uxth	r4, r3
 800410c:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004110:	b29c      	uxth	r4, r3
 8004112:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8004116:	b29c      	uxth	r4, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	4ba2      	ldr	r3, [pc, #648]	; (80043a8 <PCD_EP_ISR_Handler+0x52c>)
 800411e:	4323      	orrs	r3, r4
 8004120:	b29b      	uxth	r3, r3
 8004122:	8013      	strh	r3, [r2, #0]
 8004124:	e132      	b.n	800438c <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	7d7b      	ldrb	r3, [r7, #21]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	881b      	ldrh	r3, [r3, #0]
 8004134:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004136:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800413a:	2b00      	cmp	r3, #0
 800413c:	f280 80d1 	bge.w	80042e2 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	7d7b      	ldrb	r3, [r7, #21]
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	4413      	add	r3, r2
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	b29a      	uxth	r2, r3
 8004150:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004154:	4013      	ands	r3, r2
 8004156:	b29c      	uxth	r4, r3
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	7d7b      	ldrb	r3, [r7, #21]
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004168:	b292      	uxth	r2, r2
 800416a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800416c:	7d7b      	ldrb	r3, [r7, #21]
 800416e:	015b      	lsls	r3, r3, #5
 8004170:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	4413      	add	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	7b1b      	ldrb	r3, [r3, #12]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d121      	bne.n	80041c6 <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800418a:	b29b      	uxth	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	00db      	lsls	r3, r3, #3
 8004194:	4413      	add	r3, r2
 8004196:	3306      	adds	r3, #6
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041aa:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80041ac:	8bfb      	ldrh	r3, [r7, #30]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d072      	beq.n	8004298 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6959      	ldr	r1, [r3, #20]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	88da      	ldrh	r2, [r3, #6]
 80041be:	8bfb      	ldrh	r3, [r7, #30]
 80041c0:	f002 fae7 	bl	8006792 <USB_ReadPMA>
 80041c4:	e068      	b.n	8004298 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d021      	beq.n	8004224 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	461a      	mov	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	3302      	adds	r3, #2
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6812      	ldr	r2, [r2, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004202:	881b      	ldrh	r3, [r3, #0]
 8004204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004208:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800420a:	8bfb      	ldrh	r3, [r7, #30]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d02a      	beq.n	8004266 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6959      	ldr	r1, [r3, #20]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	891a      	ldrh	r2, [r3, #8]
 800421c:	8bfb      	ldrh	r3, [r7, #30]
 800421e:	f002 fab8 	bl	8006792 <USB_ReadPMA>
 8004222:	e020      	b.n	8004266 <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800422c:	b29b      	uxth	r3, r3
 800422e:	461a      	mov	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	00db      	lsls	r3, r3, #3
 8004236:	4413      	add	r3, r2
 8004238:	3306      	adds	r3, #6
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800424c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800424e:	8bfb      	ldrh	r3, [r7, #30]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6959      	ldr	r1, [r3, #20]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	895a      	ldrh	r2, [r3, #10]
 8004260:	8bfb      	ldrh	r3, [r7, #30]
 8004262:	f002 fa96 	bl	8006792 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004280:	b29c      	uxth	r4, r3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	441a      	add	r2, r3
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <PCD_EP_ISR_Handler+0x530>)
 8004292:	4323      	orrs	r3, r4
 8004294:	b29b      	uxth	r3, r3
 8004296:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	69da      	ldr	r2, [r3, #28]
 800429c:	8bfb      	ldrh	r3, [r7, #30]
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	695a      	ldr	r2, [r3, #20]
 80042a8:	8bfb      	ldrh	r3, [r7, #30]
 80042aa:	441a      	add	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d004      	beq.n	80042c2 <PCD_EP_ISR_Handler+0x446>
 80042b8:	8bfa      	ldrh	r2, [r7, #30]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d206      	bcs.n	80042d0 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f004 f855 	bl	8008378 <HAL_PCD_DataOutStageCallback>
 80042ce:	e008      	b.n	80042e2 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	7819      	ldrb	r1, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff fc9d 	bl	8003c1c <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80042e2:	8a7b      	ldrh	r3, [r7, #18]
 80042e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d04f      	beq.n	800438c <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 80042ec:	7d7b      	ldrb	r3, [r7, #21]
 80042ee:	015b      	lsls	r3, r3, #5
 80042f0:	3328      	adds	r3, #40	; 0x28
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	461a      	mov	r2, r3
 80042fe:	7d7b      	ldrb	r3, [r7, #21]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	881b      	ldrh	r3, [r3, #0]
 8004306:	b29b      	uxth	r3, r3
 8004308:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800430c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004310:	b29c      	uxth	r4, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	461a      	mov	r2, r3
 8004318:	7d7b      	ldrb	r3, [r7, #21]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	441a      	add	r2, r3
 800431e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8004322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004326:	b29b      	uxth	r3, r3
 8004328:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004332:	b29b      	uxth	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	4413      	add	r3, r2
 800433e:	3302      	adds	r3, #2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	6812      	ldr	r2, [r2, #0]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	695a      	ldr	r2, [r3, #20]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	441a      	add	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d106      	bne.n	800437a <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f004 f818 	bl	80083a8 <HAL_PCD_DataInStageCallback>
 8004378:	e008      	b.n	800438c <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	7819      	ldrb	r1, [r3, #0]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7ff fc96 	bl	8003cb8 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004394:	b29b      	uxth	r3, r3
 8004396:	b21b      	sxth	r3, r3
 8004398:	2b00      	cmp	r3, #0
 800439a:	f6ff ad74 	blt.w	8003e86 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3724      	adds	r7, #36	; 0x24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd90      	pop	{r4, r7, pc}
 80043a8:	ffff8080 	.word	0xffff8080
 80043ac:	ffff80c0 	.word	0xffff80c0

080043b0 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607b      	str	r3, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	817b      	strh	r3, [r7, #10]
 80043be:	4613      	mov	r3, r2
 80043c0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80043c2:	897b      	ldrh	r3, [r7, #10]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d008      	beq.n	80043e0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ce:	897b      	ldrh	r3, [r7, #10]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	015b      	lsls	r3, r3, #5
 80043d6:	3328      	adds	r3, #40	; 0x28
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4413      	add	r3, r2
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	e006      	b.n	80043ee <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043e0:	897b      	ldrh	r3, [r7, #10]
 80043e2:	015b      	lsls	r3, r3, #5
 80043e4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80043ee:	893b      	ldrh	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d107      	bne.n	8004404 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	80da      	strh	r2, [r3, #6]
 8004402:	e00b      	b.n	800441c <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2201      	movs	r2, #1
 8004408:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	b29a      	uxth	r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	0c1b      	lsrs	r3, r3, #16
 8004416:	b29a      	uxth	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e26c      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8087 	beq.w	8004556 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004448:	4b92      	ldr	r3, [pc, #584]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b04      	cmp	r3, #4
 8004452:	d00c      	beq.n	800446e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004454:	4b8f      	ldr	r3, [pc, #572]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f003 030c 	and.w	r3, r3, #12
 800445c:	2b08      	cmp	r3, #8
 800445e:	d112      	bne.n	8004486 <HAL_RCC_OscConfig+0x5e>
 8004460:	4b8c      	ldr	r3, [pc, #560]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446c:	d10b      	bne.n	8004486 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800446e:	4b89      	ldr	r3, [pc, #548]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d06c      	beq.n	8004554 <HAL_RCC_OscConfig+0x12c>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d168      	bne.n	8004554 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e246      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800448e:	d106      	bne.n	800449e <HAL_RCC_OscConfig+0x76>
 8004490:	4b80      	ldr	r3, [pc, #512]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a7f      	ldr	r2, [pc, #508]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004496:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	e02e      	b.n	80044fc <HAL_RCC_OscConfig+0xd4>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10c      	bne.n	80044c0 <HAL_RCC_OscConfig+0x98>
 80044a6:	4b7b      	ldr	r3, [pc, #492]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a7a      	ldr	r2, [pc, #488]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	4b78      	ldr	r3, [pc, #480]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a77      	ldr	r2, [pc, #476]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xd4>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0xbc>
 80044ca:	4b72      	ldr	r3, [pc, #456]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a71      	ldr	r2, [pc, #452]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b6f      	ldr	r3, [pc, #444]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6e      	ldr	r2, [pc, #440]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xd4>
 80044e4:	4b6b      	ldr	r3, [pc, #428]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a6a      	ldr	r2, [pc, #424]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b68      	ldr	r3, [pc, #416]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a67      	ldr	r2, [pc, #412]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fe fdf0 	bl	80030e8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe fdec 	bl	80030e8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1fa      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b5d      	ldr	r3, [pc, #372]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xe4>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fe fddc 	bl	80030e8 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004534:	f7fe fdd8 	bl	80030e8 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1e6      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b53      	ldr	r3, [pc, #332]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0x10c>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004562:	4b4c      	ldr	r3, [pc, #304]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800456e:	4b49      	ldr	r3, [pc, #292]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b08      	cmp	r3, #8
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x18c>
 800457a:	4b46      	ldr	r3, [pc, #280]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x176>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1ba      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b3d      	ldr	r3, [pc, #244]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	695b      	ldr	r3, [r3, #20]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4939      	ldr	r1, [pc, #228]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e03a      	b.n	800462a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b36      	ldr	r3, [pc, #216]	; (8004698 <HAL_RCC_OscConfig+0x270>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045c2:	f7fe fd91 	bl	80030e8 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fe fd8d 	bl	80030e8 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e19b      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b2d      	ldr	r3, [pc, #180]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4927      	ldr	r1, [pc, #156]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b26      	ldr	r3, [pc, #152]	; (8004698 <HAL_RCC_OscConfig+0x270>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe fd70 	bl	80030e8 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800460c:	f7fe fd6c 	bl	80030e8 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e17a      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d03a      	beq.n	80046ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d019      	beq.n	8004672 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b17      	ldr	r3, [pc, #92]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004644:	f7fe fd50 	bl	80030e8 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464c:	f7fe fd4c 	bl	80030e8 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e15a      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	4b0d      	ldr	r3, [pc, #52]	; (8004694 <HAL_RCC_OscConfig+0x26c>)
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800466a:	2001      	movs	r0, #1
 800466c:	f000 faa8 	bl	8004bc0 <RCC_Delay>
 8004670:	e01c      	b.n	80046ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fe fd36 	bl	80030e8 <HAL_GetTick>
 800467c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800467e:	e00f      	b.n	80046a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004680:	f7fe fd32 	bl	80030e8 <HAL_GetTick>
 8004684:	4602      	mov	r2, r0
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	2b02      	cmp	r3, #2
 800468c:	d908      	bls.n	80046a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	e140      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000
 8004698:	42420000 	.word	0x42420000
 800469c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a0:	4b9e      	ldr	r3, [pc, #632]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	f003 0302 	and.w	r3, r3, #2
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1e9      	bne.n	8004680 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 80a6 	beq.w	8004806 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ba:	2300      	movs	r3, #0
 80046bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046be:	4b97      	ldr	r3, [pc, #604]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10d      	bne.n	80046e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046ca:	4b94      	ldr	r3, [pc, #592]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	4a93      	ldr	r2, [pc, #588]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80046d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d4:	61d3      	str	r3, [r2, #28]
 80046d6:	4b91      	ldr	r3, [pc, #580]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046de:	60bb      	str	r3, [r7, #8]
 80046e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046e2:	2301      	movs	r3, #1
 80046e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e6:	4b8e      	ldr	r3, [pc, #568]	; (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046f2:	4b8b      	ldr	r3, [pc, #556]	; (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a8a      	ldr	r2, [pc, #552]	; (8004920 <HAL_RCC_OscConfig+0x4f8>)
 80046f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fe:	f7fe fcf3 	bl	80030e8 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004706:	f7fe fcef 	bl	80030e8 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e0fd      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	4b81      	ldr	r3, [pc, #516]	; (8004920 <HAL_RCC_OscConfig+0x4f8>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d106      	bne.n	800473a <HAL_RCC_OscConfig+0x312>
 800472c:	4b7b      	ldr	r3, [pc, #492]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	4a7a      	ldr	r2, [pc, #488]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	6213      	str	r3, [r2, #32]
 8004738:	e02d      	b.n	8004796 <HAL_RCC_OscConfig+0x36e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10c      	bne.n	800475c <HAL_RCC_OscConfig+0x334>
 8004742:	4b76      	ldr	r3, [pc, #472]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	4a75      	ldr	r2, [pc, #468]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004748:	f023 0301 	bic.w	r3, r3, #1
 800474c:	6213      	str	r3, [r2, #32]
 800474e:	4b73      	ldr	r3, [pc, #460]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	4a72      	ldr	r2, [pc, #456]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004754:	f023 0304 	bic.w	r3, r3, #4
 8004758:	6213      	str	r3, [r2, #32]
 800475a:	e01c      	b.n	8004796 <HAL_RCC_OscConfig+0x36e>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d10c      	bne.n	800477e <HAL_RCC_OscConfig+0x356>
 8004764:	4b6d      	ldr	r3, [pc, #436]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	4a6c      	ldr	r2, [pc, #432]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 800476a:	f043 0304 	orr.w	r3, r3, #4
 800476e:	6213      	str	r3, [r2, #32]
 8004770:	4b6a      	ldr	r3, [pc, #424]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	4a69      	ldr	r2, [pc, #420]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004776:	f043 0301 	orr.w	r3, r3, #1
 800477a:	6213      	str	r3, [r2, #32]
 800477c:	e00b      	b.n	8004796 <HAL_RCC_OscConfig+0x36e>
 800477e:	4b67      	ldr	r3, [pc, #412]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	4a66      	ldr	r2, [pc, #408]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6213      	str	r3, [r2, #32]
 800478a:	4b64      	ldr	r3, [pc, #400]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	4a63      	ldr	r2, [pc, #396]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004790:	f023 0304 	bic.w	r3, r3, #4
 8004794:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d015      	beq.n	80047ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800479e:	f7fe fca3 	bl	80030e8 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe fc9f 	bl	80030e8 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e0ab      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047bc:	4b57      	ldr	r3, [pc, #348]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ee      	beq.n	80047a6 <HAL_RCC_OscConfig+0x37e>
 80047c8:	e014      	b.n	80047f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047ca:	f7fe fc8d 	bl	80030e8 <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d0:	e00a      	b.n	80047e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d2:	f7fe fc89 	bl	80030e8 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d901      	bls.n	80047e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e095      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047e8:	4b4c      	ldr	r3, [pc, #304]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d1ee      	bne.n	80047d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80047f4:	7dfb      	ldrb	r3, [r7, #23]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d105      	bne.n	8004806 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047fa:	4b48      	ldr	r3, [pc, #288]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4a47      	ldr	r2, [pc, #284]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004800:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004804:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 8081 	beq.w	8004912 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004810:	4b42      	ldr	r3, [pc, #264]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d061      	beq.n	80048e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	69db      	ldr	r3, [r3, #28]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d146      	bne.n	80048b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004824:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <HAL_RCC_OscConfig+0x4fc>)
 8004826:	2200      	movs	r2, #0
 8004828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fe fc5d 	bl	80030e8 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004830:	e008      	b.n	8004844 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004832:	f7fe fc59 	bl	80030e8 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e067      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004844:	4b35      	ldr	r3, [pc, #212]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1f0      	bne.n	8004832 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d108      	bne.n	800486c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800485a:	4b30      	ldr	r3, [pc, #192]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	492d      	ldr	r1, [pc, #180]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800486c:	4b2b      	ldr	r3, [pc, #172]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a19      	ldr	r1, [r3, #32]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	430b      	orrs	r3, r1
 800487e:	4927      	ldr	r1, [pc, #156]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 8004880:	4313      	orrs	r3, r2
 8004882:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004884:	4b27      	ldr	r3, [pc, #156]	; (8004924 <HAL_RCC_OscConfig+0x4fc>)
 8004886:	2201      	movs	r2, #1
 8004888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800488a:	f7fe fc2d 	bl	80030e8 <HAL_GetTick>
 800488e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004890:	e008      	b.n	80048a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004892:	f7fe fc29 	bl	80030e8 <HAL_GetTick>
 8004896:	4602      	mov	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	2b02      	cmp	r3, #2
 800489e:	d901      	bls.n	80048a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e037      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80048a4:	4b1d      	ldr	r3, [pc, #116]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d0f0      	beq.n	8004892 <HAL_RCC_OscConfig+0x46a>
 80048b0:	e02f      	b.n	8004912 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048b2:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <HAL_RCC_OscConfig+0x4fc>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b8:	f7fe fc16 	bl	80030e8 <HAL_GetTick>
 80048bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048c0:	f7fe fc12 	bl	80030e8 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e020      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048d2:	4b12      	ldr	r3, [pc, #72]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d1f0      	bne.n	80048c0 <HAL_RCC_OscConfig+0x498>
 80048de:	e018      	b.n	8004912 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e013      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048ec:	4b0b      	ldr	r3, [pc, #44]	; (800491c <HAL_RCC_OscConfig+0x4f4>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d106      	bne.n	800490e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800490a:	429a      	cmp	r2, r3
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3718      	adds	r7, #24
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	40007000 	.word	0x40007000
 8004924:	42420060 	.word	0x42420060

08004928 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e0d0      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800493c:	4b6a      	ldr	r3, [pc, #424]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d910      	bls.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494a:	4b67      	ldr	r3, [pc, #412]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f023 0207 	bic.w	r2, r3, #7
 8004952:	4965      	ldr	r1, [pc, #404]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b63      	ldr	r3, [pc, #396]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0b8      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d020      	beq.n	80049ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b59      	ldr	r3, [pc, #356]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	4a58      	ldr	r2, [pc, #352]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 800498a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800498e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d005      	beq.n	80049a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800499c:	4b53      	ldr	r3, [pc, #332]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	4a52      	ldr	r2, [pc, #328]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80049a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049a8:	4b50      	ldr	r3, [pc, #320]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	494d      	ldr	r1, [pc, #308]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d040      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b47      	ldr	r3, [pc, #284]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d115      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e07f      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d107      	bne.n	80049f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d109      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e073      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f6:	4b3d      	ldr	r3, [pc, #244]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e06b      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a06:	4b39      	ldr	r3, [pc, #228]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f023 0203 	bic.w	r2, r3, #3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	4936      	ldr	r1, [pc, #216]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a18:	f7fe fb66 	bl	80030e8 <HAL_GetTick>
 8004a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a1e:	e00a      	b.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a20:	f7fe fb62 	bl	80030e8 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e053      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a36:	4b2d      	ldr	r3, [pc, #180]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f003 020c 	and.w	r2, r3, #12
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d1eb      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0307 	and.w	r3, r3, #7
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d210      	bcs.n	8004a78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 0207 	bic.w	r2, r3, #7
 8004a5e:	4922      	ldr	r1, [pc, #136]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <HAL_RCC_ClockConfig+0x1c0>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e032      	b.n	8004ade <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d008      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0308 	and.w	r3, r3, #8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004aa2:	4b12      	ldr	r3, [pc, #72]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	490e      	ldr	r1, [pc, #56]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ab6:	f000 f821 	bl	8004afc <HAL_RCC_GetSysClockFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b0b      	ldr	r3, [pc, #44]	; (8004aec <HAL_RCC_ClockConfig+0x1c4>)
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	4a0a      	ldr	r2, [pc, #40]	; (8004af0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac8:	5cd3      	ldrb	r3, [r2, r3]
 8004aca:	fa21 f303 	lsr.w	r3, r1, r3
 8004ace:	4a09      	ldr	r2, [pc, #36]	; (8004af4 <HAL_RCC_ClockConfig+0x1cc>)
 8004ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_ClockConfig+0x1d0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fac4 	bl	8003064 <HAL_InitTick>

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	40022000 	.word	0x40022000
 8004aec:	40021000 	.word	0x40021000
 8004af0:	08008c64 	.word	0x08008c64
 8004af4:	20000000 	.word	0x20000000
 8004af8:	20000008 	.word	0x20000008

08004afc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004afc:	b490      	push	{r4, r7}
 8004afe:	b08a      	sub	sp, #40	; 0x28
 8004b00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b02:	4b2a      	ldr	r3, [pc, #168]	; (8004bac <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b04:	1d3c      	adds	r4, r7, #4
 8004b06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b0c:	4b28      	ldr	r3, [pc, #160]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b0e:	881b      	ldrh	r3, [r3, #0]
 8004b10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	61fb      	str	r3, [r7, #28]
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004b22:	2300      	movs	r3, #0
 8004b24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004b26:	4b23      	ldr	r3, [pc, #140]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	d002      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x40>
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x46>
 8004b3a:	e02d      	b.n	8004b98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b3c:	4b1e      	ldr	r3, [pc, #120]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b3e:	623b      	str	r3, [r7, #32]
      break;
 8004b40:	e02d      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	0c9b      	lsrs	r3, r3, #18
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b4e:	4413      	add	r3, r2
 8004b50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004b54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d013      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b60:	4b14      	ldr	r3, [pc, #80]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	0c5b      	lsrs	r3, r3, #17
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004b6e:	4413      	add	r3, r2
 8004b70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004b74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	4a0f      	ldr	r2, [pc, #60]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b7a:	fb02 f203 	mul.w	r2, r2, r3
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
 8004b86:	e004      	b.n	8004b92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	4a0c      	ldr	r2, [pc, #48]	; (8004bbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004b8c:	fb02 f303 	mul.w	r3, r2, r3
 8004b90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	623b      	str	r3, [r7, #32]
      break;
 8004b96:	e002      	b.n	8004b9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b07      	ldr	r3, [pc, #28]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b9a:	623b      	str	r3, [r7, #32]
      break;
 8004b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bc90      	pop	{r4, r7}
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	08008c28 	.word	0x08008c28
 8004bb0:	08008c38 	.word	0x08008c38
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	007a1200 	.word	0x007a1200
 8004bbc:	003d0900 	.word	0x003d0900

08004bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	; (8004bf4 <RCC_Delay+0x34>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a0a      	ldr	r2, [pc, #40]	; (8004bf8 <RCC_Delay+0x38>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0a5b      	lsrs	r3, r3, #9
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	fb02 f303 	mul.w	r3, r2, r3
 8004bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004bdc:	bf00      	nop
  }
  while (Delay --);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1e5a      	subs	r2, r3, #1
 8004be2:	60fa      	str	r2, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f9      	bne.n	8004bdc <RCC_Delay+0x1c>
}
 8004be8:	bf00      	nop
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20000000 	.word	0x20000000
 8004bf8:	10624dd3 	.word	0x10624dd3

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d07d      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c1c:	4b4f      	ldr	r3, [pc, #316]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10d      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c28:	4b4c      	ldr	r3, [pc, #304]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	4a4b      	ldr	r2, [pc, #300]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c32:	61d3      	str	r3, [r2, #28]
 8004c34:	4b49      	ldr	r3, [pc, #292]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c36:	69db      	ldr	r3, [r3, #28]
 8004c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c40:	2301      	movs	r3, #1
 8004c42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	4b46      	ldr	r3, [pc, #280]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d118      	bne.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c50:	4b43      	ldr	r3, [pc, #268]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a42      	ldr	r2, [pc, #264]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fa44 	bl	80030e8 <HAL_GetTick>
 8004c60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c62:	e008      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c64:	f7fe fa40 	bl	80030e8 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	2b64      	cmp	r3, #100	; 0x64
 8004c70:	d901      	bls.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004c72:	2303      	movs	r3, #3
 8004c74:	e06d      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c76:	4b3a      	ldr	r3, [pc, #232]	; (8004d60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d0f0      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c82:	4b36      	ldr	r3, [pc, #216]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d02e      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d027      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ca0:	4b2e      	ldr	r3, [pc, #184]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ca8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004caa:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004cb0:	4b2c      	ldr	r3, [pc, #176]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004cb6:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d014      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc6:	f7fe fa0f 	bl	80030e8 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ccc:	e00a      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cce:	f7fe fa0b 	bl	80030e8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e036      	b.n	8004d52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ce4:	4b1d      	ldr	r3, [pc, #116]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0ee      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf2:	6a1b      	ldr	r3, [r3, #32]
 8004cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	4917      	ldr	r1, [pc, #92]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d02:	7dfb      	ldrb	r3, [r7, #23]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d20:	4b0e      	ldr	r3, [pc, #56]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	490b      	ldr	r1, [pc, #44]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0310 	and.w	r3, r3, #16
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d008      	beq.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	4904      	ldr	r1, [pc, #16]	; (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40007000 	.word	0x40007000
 8004d64:	42420440 	.word	0x42420440

08004d68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e053      	b.n	8004e22 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d106      	bne.n	8004d9a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f7fd fc09 	bl	80025ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004db0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	ea42 0103 	orr.w	r1, r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	0c1a      	lsrs	r2, r3, #16
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f002 0204 	and.w	r2, r2, #4
 8004e00:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e10:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e20:	2300      	movs	r3, #0
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	3708      	adds	r7, #8
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b082      	sub	sp, #8
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e01d      	b.n	8004e78 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d106      	bne.n	8004e56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7fd fbf5 	bl	8002640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2202      	movs	r2, #2
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3304      	adds	r3, #4
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f000 fa39 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0201 	orr.w	r2, r2, #1
 8004e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b06      	cmp	r3, #6
 8004ea8:	d007      	beq.n	8004eba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0201 	orr.w	r2, r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr

08004ec6 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b083      	sub	sp, #12
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	68da      	ldr	r2, [r3, #12]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0201 	bic.w	r2, r2, #1
 8004edc:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6a1a      	ldr	r2, [r3, #32]
 8004ee4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <HAL_TIM_Base_Stop_IT+0x48>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	6a1a      	ldr	r2, [r3, #32]
 8004ef4:	f240 4344 	movw	r3, #1092	; 0x444
 8004ef8:	4013      	ands	r3, r2
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d107      	bne.n	8004f0e <HAL_TIM_Base_Stop_IT+0x48>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0201 	bic.w	r2, r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	370c      	adds	r7, #12
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bc80      	pop	{r7}
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b082      	sub	sp, #8
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d122      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d11b      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0202 	mvn.w	r2, #2
 8004f46:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f9a4 	bl	80052aa <HAL_TIM_IC_CaptureCallback>
 8004f62:	e005      	b.n	8004f70 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f997 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9a6 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0304 	and.w	r3, r3, #4
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d122      	bne.n	8004fca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0304 	and.w	r3, r3, #4
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d11b      	bne.n	8004fca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0204 	mvn.w	r2, #4
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2202      	movs	r2, #2
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f97a 	bl	80052aa <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f96d 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f97c 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b08      	cmp	r3, #8
 8004fd6:	d122      	bne.n	800501e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d11b      	bne.n	800501e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0208 	mvn.w	r2, #8
 8004fee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69db      	ldr	r3, [r3, #28]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f950 	bl	80052aa <HAL_TIM_IC_CaptureCallback>
 800500a:	e005      	b.n	8005018 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 f943 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f952 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b10      	cmp	r3, #16
 800502a:	d122      	bne.n	8005072 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b10      	cmp	r3, #16
 8005038:	d11b      	bne.n	8005072 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f06f 0210 	mvn.w	r2, #16
 8005042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2208      	movs	r2, #8
 8005048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69db      	ldr	r3, [r3, #28]
 8005050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005054:	2b00      	cmp	r3, #0
 8005056:	d003      	beq.n	8005060 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f926 	bl	80052aa <HAL_TIM_IC_CaptureCallback>
 800505e:	e005      	b.n	800506c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f919 	bl	8005298 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f928 	bl	80052bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	f003 0301 	and.w	r3, r3, #1
 800507c:	2b01      	cmp	r3, #1
 800507e:	d10e      	bne.n	800509e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f06f 0201 	mvn.w	r2, #1
 8005096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fd fbdf 	bl	800285c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a8:	2b80      	cmp	r3, #128	; 0x80
 80050aa:	d10e      	bne.n	80050ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	2b80      	cmp	r3, #128	; 0x80
 80050b8:	d107      	bne.n	80050ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 fa50 	bl	800556a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d4:	2b40      	cmp	r3, #64	; 0x40
 80050d6:	d10e      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b40      	cmp	r3, #64	; 0x40
 80050e4:	d107      	bne.n	80050f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f000 f8ec 	bl	80052ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b20      	cmp	r3, #32
 8005102:	d10e      	bne.n	8005122 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b20      	cmp	r3, #32
 8005110:	d107      	bne.n	8005122 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f06f 0220 	mvn.w	r2, #32
 800511a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fa1b 	bl	8005558 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005122:	bf00      	nop
 8005124:	3708      	adds	r7, #8
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800513a:	2b01      	cmp	r3, #1
 800513c:	d101      	bne.n	8005142 <HAL_TIM_ConfigClockSource+0x18>
 800513e:	2302      	movs	r3, #2
 8005140:	e0a6      	b.n	8005290 <HAL_TIM_ConfigClockSource+0x166>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2202      	movs	r2, #2
 800514e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005160:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005168:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d067      	beq.n	800524a <HAL_TIM_ConfigClockSource+0x120>
 800517a:	2b40      	cmp	r3, #64	; 0x40
 800517c:	d80b      	bhi.n	8005196 <HAL_TIM_ConfigClockSource+0x6c>
 800517e:	2b10      	cmp	r3, #16
 8005180:	d073      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x140>
 8005182:	2b10      	cmp	r3, #16
 8005184:	d802      	bhi.n	800518c <HAL_TIM_ConfigClockSource+0x62>
 8005186:	2b00      	cmp	r3, #0
 8005188:	d06f      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800518a:	e078      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800518c:	2b20      	cmp	r3, #32
 800518e:	d06c      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x140>
 8005190:	2b30      	cmp	r3, #48	; 0x30
 8005192:	d06a      	beq.n	800526a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005194:	e073      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005196:	2b70      	cmp	r3, #112	; 0x70
 8005198:	d00d      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x8c>
 800519a:	2b70      	cmp	r3, #112	; 0x70
 800519c:	d804      	bhi.n	80051a8 <HAL_TIM_ConfigClockSource+0x7e>
 800519e:	2b50      	cmp	r3, #80	; 0x50
 80051a0:	d033      	beq.n	800520a <HAL_TIM_ConfigClockSource+0xe0>
 80051a2:	2b60      	cmp	r3, #96	; 0x60
 80051a4:	d041      	beq.n	800522a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80051a6:	e06a      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80051a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ac:	d066      	beq.n	800527c <HAL_TIM_ConfigClockSource+0x152>
 80051ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b2:	d017      	beq.n	80051e4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80051b4:	e063      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	f000 f964 	bl	8005492 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80051d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	609a      	str	r2, [r3, #8]
      break;
 80051e2:	e04c      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	6899      	ldr	r1, [r3, #8]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685a      	ldr	r2, [r3, #4]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f000 f94d 	bl	8005492 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005206:	609a      	str	r2, [r3, #8]
      break;
 8005208:	e039      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6818      	ldr	r0, [r3, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	6859      	ldr	r1, [r3, #4]
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	461a      	mov	r2, r3
 8005218:	f000 f8c4 	bl	80053a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2150      	movs	r1, #80	; 0x50
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f91b 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8005228:	e029      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6818      	ldr	r0, [r3, #0]
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	461a      	mov	r2, r3
 8005238:	f000 f8e2 	bl	8005400 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2160      	movs	r1, #96	; 0x60
 8005242:	4618      	mov	r0, r3
 8005244:	f000 f90b 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8005248:	e019      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	6859      	ldr	r1, [r3, #4]
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	461a      	mov	r2, r3
 8005258:	f000 f8a4 	bl	80053a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2140      	movs	r1, #64	; 0x40
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f8fb 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 8005268:	e009      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4619      	mov	r1, r3
 8005274:	4610      	mov	r0, r2
 8005276:	f000 f8f2 	bl	800545e <TIM_ITRx_SetConfig>
      break;
 800527a:	e000      	b.n	800527e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800527c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3710      	adds	r7, #16
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b083      	sub	sp, #12
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052b2:	bf00      	nop
 80052b4:	370c      	adds	r7, #12
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr

080052bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bc80      	pop	{r7}
 80052cc:	4770      	bx	lr

080052ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a29      	ldr	r2, [pc, #164]	; (8005398 <TIM_Base_SetConfig+0xb8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00b      	beq.n	8005310 <TIM_Base_SetConfig+0x30>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d007      	beq.n	8005310 <TIM_Base_SetConfig+0x30>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a26      	ldr	r2, [pc, #152]	; (800539c <TIM_Base_SetConfig+0xbc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_Base_SetConfig+0x30>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a25      	ldr	r2, [pc, #148]	; (80053a0 <TIM_Base_SetConfig+0xc0>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d108      	bne.n	8005322 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005316:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a1c      	ldr	r2, [pc, #112]	; (8005398 <TIM_Base_SetConfig+0xb8>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00b      	beq.n	8005342 <TIM_Base_SetConfig+0x62>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d007      	beq.n	8005342 <TIM_Base_SetConfig+0x62>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <TIM_Base_SetConfig+0xbc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_Base_SetConfig+0x62>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <TIM_Base_SetConfig+0xc0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d108      	bne.n	8005354 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4313      	orrs	r3, r2
 8005352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a07      	ldr	r2, [pc, #28]	; (8005398 <TIM_Base_SetConfig+0xb8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d103      	bne.n	8005388 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	615a      	str	r2, [r3, #20]
}
 800538e:	bf00      	nop
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40000400 	.word	0x40000400
 80053a0:	40000800 	.word	0x40000800

080053a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	011b      	lsls	r3, r3, #4
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f023 030a 	bic.w	r3, r3, #10
 80053e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	693a      	ldr	r2, [r7, #16]
 80053ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	621a      	str	r2, [r3, #32]
}
 80053f6:	bf00      	nop
 80053f8:	371c      	adds	r7, #28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr

08005400 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005400:	b480      	push	{r7}
 8005402:	b087      	sub	sp, #28
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0210 	bic.w	r2, r3, #16
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800542a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	031b      	lsls	r3, r3, #12
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	4313      	orrs	r3, r2
 8005434:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800543c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	621a      	str	r2, [r3, #32]
}
 8005454:	bf00      	nop
 8005456:	371c      	adds	r7, #28
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4313      	orrs	r3, r2
 800547c:	f043 0307 	orr.w	r3, r3, #7
 8005480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	609a      	str	r2, [r3, #8]
}
 8005488:	bf00      	nop
 800548a:	3714      	adds	r7, #20
 800548c:	46bd      	mov	sp, r7
 800548e:	bc80      	pop	{r7}
 8005490:	4770      	bx	lr

08005492 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005492:	b480      	push	{r7}
 8005494:	b087      	sub	sp, #28
 8005496:	af00      	add	r7, sp, #0
 8005498:	60f8      	str	r0, [r7, #12]
 800549a:	60b9      	str	r1, [r7, #8]
 800549c:	607a      	str	r2, [r7, #4]
 800549e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	431a      	orrs	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	609a      	str	r2, [r3, #8]
}
 80054c6:	bf00      	nop
 80054c8:	371c      	adds	r7, #28
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bc80      	pop	{r7}
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e032      	b.n	800554e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2202      	movs	r2, #2
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800550e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005520:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68ba      	ldr	r2, [r7, #8]
 8005528:	4313      	orrs	r3, r2
 800552a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005560:	bf00      	nop
 8005562:	370c      	adds	r7, #12
 8005564:	46bd      	mov	sp, r7
 8005566:	bc80      	pop	{r7}
 8005568:	4770      	bx	lr

0800556a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800556a:	b480      	push	{r7}
 800556c:	b083      	sub	sp, #12
 800556e:	af00      	add	r7, sp, #0
 8005570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800557c:	b084      	sub	sp, #16
 800557e:	b480      	push	{r7}
 8005580:	b083      	sub	sp, #12
 8005582:	af00      	add	r7, sp, #0
 8005584:	6078      	str	r0, [r7, #4]
 8005586:	f107 0014 	add.w	r0, r7, #20
 800558a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	b004      	add	sp, #16
 800559a:	4770      	bx	lr

0800559c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055a4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055a8:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	89fb      	ldrh	r3, [r7, #14]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055be:	2300      	movs	r3, #0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bc80      	pop	{r7}
 80055c8:	4770      	bx	lr

080055ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b085      	sub	sp, #20
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80055d2:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80055d6:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80055de:	b29b      	uxth	r3, r3
 80055e0:	b21a      	sxth	r2, r3
 80055e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80055e6:	43db      	mvns	r3, r3
 80055e8:	b21b      	sxth	r3, r3
 80055ea:	4013      	ands	r3, r2
 80055ec:	b21b      	sxth	r3, r3
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80055f6:	2300      	movs	r3, #0
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3714      	adds	r7, #20
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bc80      	pop	{r7}
 8005600:	4770      	bx	lr

08005602 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800561a:	b084      	sub	sp, #16
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	f107 0014 	add.w	r0, r7, #20
 8005628:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ffa5 	bl	800559c <USB_EnableGlobalInt>

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800565e:	b004      	add	sp, #16
 8005660:	4770      	bx	lr
	...

08005664 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005664:	b490      	push	{r4, r7}
 8005666:	b084      	sub	sp, #16
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800566e:	2300      	movs	r3, #0
 8005670:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	4413      	add	r3, r2
 800567c:	881b      	ldrh	r3, [r3, #0]
 800567e:	b29b      	uxth	r3, r3
 8005680:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005688:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	78db      	ldrb	r3, [r3, #3]
 800568e:	2b03      	cmp	r3, #3
 8005690:	d819      	bhi.n	80056c6 <USB_ActivateEndpoint+0x62>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <USB_ActivateEndpoint+0x34>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056a9 	.word	0x080056a9
 800569c:	080056bd 	.word	0x080056bd
 80056a0:	080056cd 	.word	0x080056cd
 80056a4:	080056b3 	.word	0x080056b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80056a8:	89bb      	ldrh	r3, [r7, #12]
 80056aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056ae:	81bb      	strh	r3, [r7, #12]
      break;
 80056b0:	e00d      	b.n	80056ce <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80056b2:	89bb      	ldrh	r3, [r7, #12]
 80056b4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80056b8:	81bb      	strh	r3, [r7, #12]
      break;
 80056ba:	e008      	b.n	80056ce <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80056bc:	89bb      	ldrh	r3, [r7, #12]
 80056be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056c2:	81bb      	strh	r3, [r7, #12]
      break;
 80056c4:	e003      	b.n	80056ce <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	73fb      	strb	r3, [r7, #15]
      break;
 80056ca:	e000      	b.n	80056ce <USB_ActivateEndpoint+0x6a>
      break;
 80056cc:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	441a      	add	r2, r3
 80056d8:	89bb      	ldrh	r3, [r7, #12]
 80056da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005704:	b29a      	uxth	r2, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b29c      	uxth	r4, r3
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	441a      	add	r2, r3
 800571a:	4b8a      	ldr	r3, [pc, #552]	; (8005944 <USB_ActivateEndpoint+0x2e0>)
 800571c:	4323      	orrs	r3, r4
 800571e:	b29b      	uxth	r3, r3
 8005720:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	7b1b      	ldrb	r3, [r3, #12]
 8005726:	2b00      	cmp	r3, #0
 8005728:	f040 8112 	bne.w	8005950 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d067      	beq.n	8005804 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005734:	687c      	ldr	r4, [r7, #4]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	441c      	add	r4, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	4423      	add	r3, r4
 8005748:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800574c:	461c      	mov	r4, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	88db      	ldrh	r3, [r3, #6]
 8005752:	085b      	lsrs	r3, r3, #1
 8005754:	b29b      	uxth	r3, r3
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	b29b      	uxth	r3, r3
 800575a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4413      	add	r3, r2
 8005766:	881b      	ldrh	r3, [r3, #0]
 8005768:	b29c      	uxth	r4, r3
 800576a:	4623      	mov	r3, r4
 800576c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005770:	2b00      	cmp	r3, #0
 8005772:	d014      	beq.n	800579e <USB_ActivateEndpoint+0x13a>
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	881b      	ldrh	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578a:	b29c      	uxth	r4, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	441a      	add	r2, r3
 8005796:	4b6c      	ldr	r3, [pc, #432]	; (8005948 <USB_ActivateEndpoint+0x2e4>)
 8005798:	4323      	orrs	r3, r4
 800579a:	b29b      	uxth	r3, r3
 800579c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	78db      	ldrb	r3, [r3, #3]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d018      	beq.n	80057d8 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	881b      	ldrh	r3, [r3, #0]
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057bc:	b29c      	uxth	r4, r3
 80057be:	f084 0320 	eor.w	r3, r4, #32
 80057c2:	b29c      	uxth	r4, r3
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	441a      	add	r2, r3
 80057ce:	4b5d      	ldr	r3, [pc, #372]	; (8005944 <USB_ActivateEndpoint+0x2e0>)
 80057d0:	4323      	orrs	r3, r4
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	8013      	strh	r3, [r2, #0]
 80057d6:	e22b      	b.n	8005c30 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ee:	b29c      	uxth	r4, r3
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	441a      	add	r2, r3
 80057fa:	4b52      	ldr	r3, [pc, #328]	; (8005944 <USB_ActivateEndpoint+0x2e0>)
 80057fc:	4323      	orrs	r3, r4
 80057fe:	b29b      	uxth	r3, r3
 8005800:	8013      	strh	r3, [r2, #0]
 8005802:	e215      	b.n	8005c30 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005804:	687c      	ldr	r4, [r7, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	441c      	add	r4, r3
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	4423      	add	r3, r4
 8005818:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800581c:	461c      	mov	r4, r3
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	88db      	ldrh	r3, [r3, #6]
 8005822:	085b      	lsrs	r3, r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	005b      	lsls	r3, r3, #1
 8005828:	b29b      	uxth	r3, r3
 800582a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800582c:	687c      	ldr	r4, [r7, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	441c      	add	r4, r3
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	4423      	add	r3, r4
 8005840:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005844:	461c      	mov	r4, r3
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10e      	bne.n	800586c <USB_ActivateEndpoint+0x208>
 800584e:	8823      	ldrh	r3, [r4, #0]
 8005850:	b29b      	uxth	r3, r3
 8005852:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005856:	b29b      	uxth	r3, r3
 8005858:	8023      	strh	r3, [r4, #0]
 800585a:	8823      	ldrh	r3, [r4, #0]
 800585c:	b29b      	uxth	r3, r3
 800585e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005866:	b29b      	uxth	r3, r3
 8005868:	8023      	strh	r3, [r4, #0]
 800586a:	e02d      	b.n	80058c8 <USB_ActivateEndpoint+0x264>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	2b3e      	cmp	r3, #62	; 0x3e
 8005872:	d812      	bhi.n	800589a <USB_ActivateEndpoint+0x236>
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <USB_ActivateEndpoint+0x22a>
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	3301      	adds	r3, #1
 800588c:	60bb      	str	r3, [r7, #8]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29b      	uxth	r3, r3
 8005896:	8023      	strh	r3, [r4, #0]
 8005898:	e016      	b.n	80058c8 <USB_ActivateEndpoint+0x264>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	095b      	lsrs	r3, r3, #5
 80058a0:	60bb      	str	r3, [r7, #8]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d102      	bne.n	80058b4 <USB_ActivateEndpoint+0x250>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	3b01      	subs	r3, #1
 80058b2:	60bb      	str	r3, [r7, #8]
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29c      	uxth	r4, r3
 80058d6:	4623      	mov	r3, r4
 80058d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d014      	beq.n	800590a <USB_ActivateEndpoint+0x2a6>
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	b29c      	uxth	r4, r3
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	4b12      	ldr	r3, [pc, #72]	; (800594c <USB_ActivateEndpoint+0x2e8>)
 8005904:	4323      	orrs	r3, r4
 8005906:	b29b      	uxth	r3, r3
 8005908:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	881b      	ldrh	r3, [r3, #0]
 8005916:	b29b      	uxth	r3, r3
 8005918:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800591c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005920:	b29c      	uxth	r4, r3
 8005922:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005926:	b29c      	uxth	r4, r3
 8005928:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800592c:	b29c      	uxth	r4, r3
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	683b      	ldr	r3, [r7, #0]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	441a      	add	r2, r3
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <USB_ActivateEndpoint+0x2e0>)
 800593a:	4323      	orrs	r3, r4
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]
 8005940:	e176      	b.n	8005c30 <USB_ActivateEndpoint+0x5cc>
 8005942:	bf00      	nop
 8005944:	ffff8080 	.word	0xffff8080
 8005948:	ffff80c0 	.word	0xffff80c0
 800594c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	b29c      	uxth	r4, r3
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	441a      	add	r2, r3
 8005972:	4b96      	ldr	r3, [pc, #600]	; (8005bcc <USB_ActivateEndpoint+0x568>)
 8005974:	4323      	orrs	r3, r4
 8005976:	b29b      	uxth	r3, r3
 8005978:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800597a:	687c      	ldr	r4, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005982:	b29b      	uxth	r3, r3
 8005984:	441c      	add	r4, r3
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	4423      	add	r3, r4
 800598e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005992:	461c      	mov	r4, r3
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	891b      	ldrh	r3, [r3, #8]
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	b29b      	uxth	r3, r3
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	8023      	strh	r3, [r4, #0]
 80059a2:	687c      	ldr	r4, [r7, #4]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059aa:	b29b      	uxth	r3, r3
 80059ac:	441c      	add	r4, r3
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	781b      	ldrb	r3, [r3, #0]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	4423      	add	r3, r4
 80059b6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80059ba:	461c      	mov	r4, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	895b      	ldrh	r3, [r3, #10]
 80059c0:	085b      	lsrs	r3, r3, #1
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	005b      	lsls	r3, r3, #1
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	785b      	ldrb	r3, [r3, #1]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f040 8088 	bne.w	8005ae4 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	881b      	ldrh	r3, [r3, #0]
 80059e0:	b29c      	uxth	r4, r3
 80059e2:	4623      	mov	r3, r4
 80059e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d014      	beq.n	8005a16 <USB_ActivateEndpoint+0x3b2>
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a02:	b29c      	uxth	r4, r3
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	4b70      	ldr	r3, [pc, #448]	; (8005bd0 <USB_ActivateEndpoint+0x56c>)
 8005a10:	4323      	orrs	r3, r4
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	b29c      	uxth	r4, r3
 8005a24:	4623      	mov	r3, r4
 8005a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d014      	beq.n	8005a58 <USB_ActivateEndpoint+0x3f4>
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a44:	b29c      	uxth	r4, r3
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	441a      	add	r2, r3
 8005a50:	4b60      	ldr	r3, [pc, #384]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005a52:	4323      	orrs	r3, r4
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	b29c      	uxth	r4, r3
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	4b56      	ldr	r3, [pc, #344]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005a7c:	4323      	orrs	r3, r4
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	881b      	ldrh	r3, [r3, #0]
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a98:	b29c      	uxth	r4, r3
 8005a9a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005a9e:	b29c      	uxth	r4, r3
 8005aa0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005aa4:	b29c      	uxth	r4, r3
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	4b49      	ldr	r3, [pc, #292]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005ab2:	4323      	orrs	r3, r4
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ace:	b29c      	uxth	r4, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	441a      	add	r2, r3
 8005ada:	4b3f      	ldr	r3, [pc, #252]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005adc:	4323      	orrs	r3, r4
 8005ade:	b29b      	uxth	r3, r3
 8005ae0:	8013      	strh	r3, [r2, #0]
 8005ae2:	e0a5      	b.n	8005c30 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	4413      	add	r3, r2
 8005aee:	881b      	ldrh	r3, [r3, #0]
 8005af0:	b29c      	uxth	r4, r3
 8005af2:	4623      	mov	r3, r4
 8005af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d014      	beq.n	8005b26 <USB_ActivateEndpoint+0x4c2>
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	881b      	ldrh	r3, [r3, #0]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	b29c      	uxth	r4, r3
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	; (8005bd0 <USB_ActivateEndpoint+0x56c>)
 8005b20:	4323      	orrs	r3, r4
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	881b      	ldrh	r3, [r3, #0]
 8005b32:	b29c      	uxth	r4, r3
 8005b34:	4623      	mov	r3, r4
 8005b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d014      	beq.n	8005b68 <USB_ActivateEndpoint+0x504>
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4413      	add	r3, r2
 8005b48:	881b      	ldrh	r3, [r3, #0]
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b54:	b29c      	uxth	r4, r3
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	4b1c      	ldr	r3, [pc, #112]	; (8005bd4 <USB_ActivateEndpoint+0x570>)
 8005b62:	4323      	orrs	r3, r4
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	009b      	lsls	r3, r3, #2
 8005b70:	4413      	add	r3, r2
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	b29c      	uxth	r4, r3
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	4b11      	ldr	r3, [pc, #68]	; (8005bd0 <USB_ActivateEndpoint+0x56c>)
 8005b8c:	4323      	orrs	r3, r4
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	78db      	ldrb	r3, [r3, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d020      	beq.n	8005bdc <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005b9a:	687a      	ldr	r2, [r7, #4]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	881b      	ldrh	r3, [r3, #0]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb0:	b29c      	uxth	r4, r3
 8005bb2:	f084 0320 	eor.w	r3, r4, #32
 8005bb6:	b29c      	uxth	r4, r3
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	441a      	add	r2, r3
 8005bc2:	4b05      	ldr	r3, [pc, #20]	; (8005bd8 <USB_ActivateEndpoint+0x574>)
 8005bc4:	4323      	orrs	r3, r4
 8005bc6:	b29b      	uxth	r3, r3
 8005bc8:	8013      	strh	r3, [r2, #0]
 8005bca:	e01c      	b.n	8005c06 <USB_ActivateEndpoint+0x5a2>
 8005bcc:	ffff8180 	.word	0xffff8180
 8005bd0:	ffffc080 	.word	0xffffc080
 8005bd4:	ffff80c0 	.word	0xffff80c0
 8005bd8:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4413      	add	r3, r2
 8005be6:	881b      	ldrh	r3, [r3, #0]
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bf2:	b29c      	uxth	r4, r3
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	441a      	add	r2, r3
 8005bfe:	4b0f      	ldr	r3, [pc, #60]	; (8005c3c <USB_ActivateEndpoint+0x5d8>)
 8005c00:	4323      	orrs	r3, r4
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	881b      	ldrh	r3, [r3, #0]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1c:	b29c      	uxth	r4, r3
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	4b04      	ldr	r3, [pc, #16]	; (8005c3c <USB_ActivateEndpoint+0x5d8>)
 8005c2a:	4323      	orrs	r3, r4
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005c30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3710      	adds	r7, #16
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bc90      	pop	{r4, r7}
 8005c3a:	4770      	bx	lr
 8005c3c:	ffff8080 	.word	0xffff8080

08005c40 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c40:	b490      	push	{r4, r7}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	7b1b      	ldrb	r3, [r3, #12]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d171      	bne.n	8005d36 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	785b      	ldrb	r3, [r3, #1]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d036      	beq.n	8005cc8 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	4413      	add	r3, r2
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29c      	uxth	r4, r3
 8005c68:	4623      	mov	r3, r4
 8005c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d014      	beq.n	8005c9c <USB_DeactivateEndpoint+0x5c>
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c88:	b29c      	uxth	r4, r3
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	441a      	add	r2, r3
 8005c94:	4b6b      	ldr	r3, [pc, #428]	; (8005e44 <USB_DeactivateEndpoint+0x204>)
 8005c96:	4323      	orrs	r3, r4
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	4413      	add	r3, r2
 8005ca6:	881b      	ldrh	r3, [r3, #0]
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	b29c      	uxth	r4, r3
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	441a      	add	r2, r3
 8005cbe:	4b62      	ldr	r3, [pc, #392]	; (8005e48 <USB_DeactivateEndpoint+0x208>)
 8005cc0:	4323      	orrs	r3, r4
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	8013      	strh	r3, [r2, #0]
 8005cc6:	e144      	b.n	8005f52 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	b29c      	uxth	r4, r3
 8005cd6:	4623      	mov	r3, r4
 8005cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d014      	beq.n	8005d0a <USB_DeactivateEndpoint+0xca>
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf6:	b29c      	uxth	r4, r3
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	441a      	add	r2, r3
 8005d02:	4b52      	ldr	r3, [pc, #328]	; (8005e4c <USB_DeactivateEndpoint+0x20c>)
 8005d04:	4323      	orrs	r3, r4
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d20:	b29c      	uxth	r4, r3
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	441a      	add	r2, r3
 8005d2c:	4b46      	ldr	r3, [pc, #280]	; (8005e48 <USB_DeactivateEndpoint+0x208>)
 8005d2e:	4323      	orrs	r3, r4
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	8013      	strh	r3, [r2, #0]
 8005d34:	e10d      	b.n	8005f52 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	785b      	ldrb	r3, [r3, #1]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f040 8088 	bne.w	8005e50 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29c      	uxth	r4, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d014      	beq.n	8005d82 <USB_DeactivateEndpoint+0x142>
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	881b      	ldrh	r3, [r3, #0]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6e:	b29c      	uxth	r4, r3
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	441a      	add	r2, r3
 8005d7a:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <USB_DeactivateEndpoint+0x20c>)
 8005d7c:	4323      	orrs	r3, r4
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29c      	uxth	r4, r3
 8005d90:	4623      	mov	r3, r4
 8005d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d014      	beq.n	8005dc4 <USB_DeactivateEndpoint+0x184>
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db0:	b29c      	uxth	r4, r3
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	441a      	add	r2, r3
 8005dbc:	4b21      	ldr	r3, [pc, #132]	; (8005e44 <USB_DeactivateEndpoint+0x204>)
 8005dbe:	4323      	orrs	r3, r4
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	b29c      	uxth	r4, r3
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	441a      	add	r2, r3
 8005de6:	4b17      	ldr	r3, [pc, #92]	; (8005e44 <USB_DeactivateEndpoint+0x204>)
 8005de8:	4323      	orrs	r3, r4
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e04:	b29c      	uxth	r4, r3
 8005e06:	687a      	ldr	r2, [r7, #4]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	781b      	ldrb	r3, [r3, #0]
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	441a      	add	r2, r3
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <USB_DeactivateEndpoint+0x208>)
 8005e12:	4323      	orrs	r3, r4
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	881b      	ldrh	r3, [r3, #0]
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e2e:	b29c      	uxth	r4, r3
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	441a      	add	r2, r3
 8005e3a:	4b03      	ldr	r3, [pc, #12]	; (8005e48 <USB_DeactivateEndpoint+0x208>)
 8005e3c:	4323      	orrs	r3, r4
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]
 8005e42:	e086      	b.n	8005f52 <USB_DeactivateEndpoint+0x312>
 8005e44:	ffff80c0 	.word	0xffff80c0
 8005e48:	ffff8080 	.word	0xffff8080
 8005e4c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	881b      	ldrh	r3, [r3, #0]
 8005e5c:	b29c      	uxth	r4, r3
 8005e5e:	4623      	mov	r3, r4
 8005e60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d014      	beq.n	8005e92 <USB_DeactivateEndpoint+0x252>
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e7e:	b29c      	uxth	r4, r3
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	441a      	add	r2, r3
 8005e8a:	4b35      	ldr	r3, [pc, #212]	; (8005f60 <USB_DeactivateEndpoint+0x320>)
 8005e8c:	4323      	orrs	r3, r4
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	4413      	add	r3, r2
 8005e9c:	881b      	ldrh	r3, [r3, #0]
 8005e9e:	b29c      	uxth	r4, r3
 8005ea0:	4623      	mov	r3, r4
 8005ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d014      	beq.n	8005ed4 <USB_DeactivateEndpoint+0x294>
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec0:	b29c      	uxth	r4, r3
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <USB_DeactivateEndpoint+0x324>)
 8005ece:	4323      	orrs	r3, r4
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	881b      	ldrh	r3, [r3, #0]
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eea:	b29c      	uxth	r4, r3
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	441a      	add	r2, r3
 8005ef6:	4b1a      	ldr	r3, [pc, #104]	; (8005f60 <USB_DeactivateEndpoint+0x320>)
 8005ef8:	4323      	orrs	r3, r4
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	881b      	ldrh	r3, [r3, #0]
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f14:	b29c      	uxth	r4, r3
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	441a      	add	r2, r3
 8005f20:	4b11      	ldr	r3, [pc, #68]	; (8005f68 <USB_DeactivateEndpoint+0x328>)
 8005f22:	4323      	orrs	r3, r4
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	881b      	ldrh	r3, [r3, #0]
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3e:	b29c      	uxth	r4, r3
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	4b07      	ldr	r3, [pc, #28]	; (8005f68 <USB_DeactivateEndpoint+0x328>)
 8005f4c:	4323      	orrs	r3, r4
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bc90      	pop	{r4, r7}
 8005f5c:	4770      	bx	lr
 8005f5e:	bf00      	nop
 8005f60:	ffffc080 	.word	0xffffc080
 8005f64:	ffff80c0 	.word	0xffff80c0
 8005f68:	ffff8080 	.word	0xffff8080

08005f6c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b08d      	sub	sp, #52	; 0x34
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	785b      	ldrb	r3, [r3, #1]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	f040 8160 	bne.w	8006240 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699a      	ldr	r2, [r3, #24]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d909      	bls.n	8005fa0 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f98:	1ad2      	subs	r2, r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	619a      	str	r2, [r3, #24]
 8005f9e:	e005      	b.n	8005fac <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	7b1b      	ldrb	r3, [r3, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d119      	bne.n	8005fe8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6959      	ldr	r1, [r3, #20]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	88da      	ldrh	r2, [r3, #6]
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fba2 	bl	800670a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005fc6:	687c      	ldr	r4, [r7, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	441c      	add	r4, r3
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4423      	add	r3, r4
 8005fda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fde:	461c      	mov	r4, r3
 8005fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	8023      	strh	r3, [r4, #0]
 8005fe6:	e10f      	b.n	8006208 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	881b      	ldrh	r3, [r3, #0]
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d065      	beq.n	80060ca <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005ffe:	687c      	ldr	r4, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	785b      	ldrb	r3, [r3, #1]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d148      	bne.n	800609a <USB_EPStartXfer+0x12e>
 8006008:	687c      	ldr	r4, [r7, #4]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	441c      	add	r4, r3
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4423      	add	r3, r4
 800601c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006020:	461c      	mov	r4, r3
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10e      	bne.n	8006046 <USB_EPStartXfer+0xda>
 8006028:	8823      	ldrh	r3, [r4, #0]
 800602a:	b29b      	uxth	r3, r3
 800602c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006030:	b29b      	uxth	r3, r3
 8006032:	8023      	strh	r3, [r4, #0]
 8006034:	8823      	ldrh	r3, [r4, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800603c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006040:	b29b      	uxth	r3, r3
 8006042:	8023      	strh	r3, [r4, #0]
 8006044:	e03d      	b.n	80060c2 <USB_EPStartXfer+0x156>
 8006046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006048:	2b3e      	cmp	r3, #62	; 0x3e
 800604a:	d810      	bhi.n	800606e <USB_EPStartXfer+0x102>
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	d002      	beq.n	8006062 <USB_EPStartXfer+0xf6>
 800605c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605e:	3301      	adds	r3, #1
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	8023      	strh	r3, [r4, #0]
 800606c:	e029      	b.n	80060c2 <USB_EPStartXfer+0x156>
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	627b      	str	r3, [r7, #36]	; 0x24
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2b00      	cmp	r3, #0
 800607c:	d102      	bne.n	8006084 <USB_EPStartXfer+0x118>
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	3b01      	subs	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	b29b      	uxth	r3, r3
 8006088:	029b      	lsls	r3, r3, #10
 800608a:	b29b      	uxth	r3, r3
 800608c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006094:	b29b      	uxth	r3, r3
 8006096:	8023      	strh	r3, [r4, #0]
 8006098:	e013      	b.n	80060c2 <USB_EPStartXfer+0x156>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	785b      	ldrb	r3, [r3, #1]
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10f      	bne.n	80060c2 <USB_EPStartXfer+0x156>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	441c      	add	r4, r3
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4423      	add	r3, r4
 80060b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060b8:	60fb      	str	r3, [r7, #12]
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	b29a      	uxth	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	895b      	ldrh	r3, [r3, #10]
 80060c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060c8:	e063      	b.n	8006192 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	785b      	ldrb	r3, [r3, #1]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d148      	bne.n	8006164 <USB_EPStartXfer+0x1f8>
 80060d2:	687c      	ldr	r4, [r7, #4]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060da:	b29b      	uxth	r3, r3
 80060dc:	441c      	add	r4, r3
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	4423      	add	r3, r4
 80060e6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80060ea:	461c      	mov	r4, r3
 80060ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <USB_EPStartXfer+0x1a4>
 80060f2:	8823      	ldrh	r3, [r4, #0]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	8023      	strh	r3, [r4, #0]
 80060fe:	8823      	ldrh	r3, [r4, #0]
 8006100:	b29b      	uxth	r3, r3
 8006102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800610a:	b29b      	uxth	r3, r3
 800610c:	8023      	strh	r3, [r4, #0]
 800610e:	e03d      	b.n	800618c <USB_EPStartXfer+0x220>
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	2b3e      	cmp	r3, #62	; 0x3e
 8006114:	d810      	bhi.n	8006138 <USB_EPStartXfer+0x1cc>
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	085b      	lsrs	r3, r3, #1
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d002      	beq.n	800612c <USB_EPStartXfer+0x1c0>
 8006126:	6a3b      	ldr	r3, [r7, #32]
 8006128:	3301      	adds	r3, #1
 800612a:	623b      	str	r3, [r7, #32]
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	b29b      	uxth	r3, r3
 8006130:	029b      	lsls	r3, r3, #10
 8006132:	b29b      	uxth	r3, r3
 8006134:	8023      	strh	r3, [r4, #0]
 8006136:	e029      	b.n	800618c <USB_EPStartXfer+0x220>
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	095b      	lsrs	r3, r3, #5
 800613c:	623b      	str	r3, [r7, #32]
 800613e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006140:	f003 031f 	and.w	r3, r3, #31
 8006144:	2b00      	cmp	r3, #0
 8006146:	d102      	bne.n	800614e <USB_EPStartXfer+0x1e2>
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	3b01      	subs	r3, #1
 800614c:	623b      	str	r3, [r7, #32]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	b29b      	uxth	r3, r3
 8006152:	029b      	lsls	r3, r3, #10
 8006154:	b29b      	uxth	r3, r3
 8006156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800615a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800615e:	b29b      	uxth	r3, r3
 8006160:	8023      	strh	r3, [r4, #0]
 8006162:	e013      	b.n	800618c <USB_EPStartXfer+0x220>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	785b      	ldrb	r3, [r3, #1]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d10f      	bne.n	800618c <USB_EPStartXfer+0x220>
 800616c:	687c      	ldr	r4, [r7, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006174:	b29b      	uxth	r3, r3
 8006176:	441c      	add	r4, r3
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	011b      	lsls	r3, r3, #4
 800617e:	4423      	add	r3, r4
 8006180:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006184:	461c      	mov	r4, r3
 8006186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006188:	b29b      	uxth	r3, r3
 800618a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	891b      	ldrh	r3, [r3, #8]
 8006190:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	6959      	ldr	r1, [r3, #20]
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	b29b      	uxth	r3, r3
 800619a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f000 fab4 	bl	800670a <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	785b      	ldrb	r3, [r3, #1]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d115      	bne.n	80061d6 <USB_EPStartXfer+0x26a>
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	881b      	ldrh	r3, [r3, #0]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061c0:	b29c      	uxth	r4, r3
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	441a      	add	r2, r3
 80061cc:	4b9a      	ldr	r3, [pc, #616]	; (8006438 <USB_EPStartXfer+0x4cc>)
 80061ce:	4323      	orrs	r3, r4
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	8013      	strh	r3, [r2, #0]
 80061d4:	e018      	b.n	8006208 <USB_EPStartXfer+0x29c>
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	785b      	ldrb	r3, [r3, #1]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d114      	bne.n	8006208 <USB_EPStartXfer+0x29c>
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	4413      	add	r3, r2
 80061e8:	881b      	ldrh	r3, [r3, #0]
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061f4:	b29c      	uxth	r4, r3
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	441a      	add	r2, r3
 8006200:	4b8e      	ldr	r3, [pc, #568]	; (800643c <USB_EPStartXfer+0x4d0>)
 8006202:	4323      	orrs	r3, r4
 8006204:	b29b      	uxth	r3, r3
 8006206:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	b29b      	uxth	r3, r3
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621e:	b29c      	uxth	r4, r3
 8006220:	f084 0310 	eor.w	r3, r4, #16
 8006224:	b29c      	uxth	r4, r3
 8006226:	f084 0320 	eor.w	r3, r4, #32
 800622a:	b29c      	uxth	r4, r3
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	441a      	add	r2, r3
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <USB_EPStartXfer+0x4d4>)
 8006238:	4323      	orrs	r3, r4
 800623a:	b29b      	uxth	r3, r3
 800623c:	8013      	strh	r3, [r2, #0]
 800623e:	e146      	b.n	80064ce <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	699a      	ldr	r2, [r3, #24]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	429a      	cmp	r2, r3
 800624a:	d909      	bls.n	8006260 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	1ad2      	subs	r2, r2, r3
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	619a      	str	r2, [r3, #24]
 800625e:	e005      	b.n	800626c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2200      	movs	r2, #0
 800626a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	7b1b      	ldrb	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d148      	bne.n	8006306 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006274:	687c      	ldr	r4, [r7, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800627c:	b29b      	uxth	r3, r3
 800627e:	441c      	add	r4, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	4423      	add	r3, r4
 8006288:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800628c:	461c      	mov	r4, r3
 800628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006290:	2b00      	cmp	r3, #0
 8006292:	d10e      	bne.n	80062b2 <USB_EPStartXfer+0x346>
 8006294:	8823      	ldrh	r3, [r4, #0]
 8006296:	b29b      	uxth	r3, r3
 8006298:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629c:	b29b      	uxth	r3, r3
 800629e:	8023      	strh	r3, [r4, #0]
 80062a0:	8823      	ldrh	r3, [r4, #0]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8023      	strh	r3, [r4, #0]
 80062b0:	e0f2      	b.n	8006498 <USB_EPStartXfer+0x52c>
 80062b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b4:	2b3e      	cmp	r3, #62	; 0x3e
 80062b6:	d810      	bhi.n	80062da <USB_EPStartXfer+0x36e>
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	085b      	lsrs	r3, r3, #1
 80062bc:	61fb      	str	r3, [r7, #28]
 80062be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <USB_EPStartXfer+0x362>
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	029b      	lsls	r3, r3, #10
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	8023      	strh	r3, [r4, #0]
 80062d8:	e0de      	b.n	8006498 <USB_EPStartXfer+0x52c>
 80062da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062dc:	095b      	lsrs	r3, r3, #5
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	f003 031f 	and.w	r3, r3, #31
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d102      	bne.n	80062f0 <USB_EPStartXfer+0x384>
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	029b      	lsls	r3, r3, #10
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006300:	b29b      	uxth	r3, r3
 8006302:	8023      	strh	r3, [r4, #0]
 8006304:	e0c8      	b.n	8006498 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	785b      	ldrb	r3, [r3, #1]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d148      	bne.n	80063a0 <USB_EPStartXfer+0x434>
 800630e:	687c      	ldr	r4, [r7, #4]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006316:	b29b      	uxth	r3, r3
 8006318:	441c      	add	r4, r3
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	011b      	lsls	r3, r3, #4
 8006320:	4423      	add	r3, r4
 8006322:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006326:	461c      	mov	r4, r3
 8006328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10e      	bne.n	800634c <USB_EPStartXfer+0x3e0>
 800632e:	8823      	ldrh	r3, [r4, #0]
 8006330:	b29b      	uxth	r3, r3
 8006332:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006336:	b29b      	uxth	r3, r3
 8006338:	8023      	strh	r3, [r4, #0]
 800633a:	8823      	ldrh	r3, [r4, #0]
 800633c:	b29b      	uxth	r3, r3
 800633e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006342:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006346:	b29b      	uxth	r3, r3
 8006348:	8023      	strh	r3, [r4, #0]
 800634a:	e03d      	b.n	80063c8 <USB_EPStartXfer+0x45c>
 800634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634e:	2b3e      	cmp	r3, #62	; 0x3e
 8006350:	d810      	bhi.n	8006374 <USB_EPStartXfer+0x408>
 8006352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635a:	f003 0301 	and.w	r3, r3, #1
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <USB_EPStartXfer+0x3fc>
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	3301      	adds	r3, #1
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	b29b      	uxth	r3, r3
 800636c:	029b      	lsls	r3, r3, #10
 800636e:	b29b      	uxth	r3, r3
 8006370:	8023      	strh	r3, [r4, #0]
 8006372:	e029      	b.n	80063c8 <USB_EPStartXfer+0x45c>
 8006374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	61bb      	str	r3, [r7, #24]
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	f003 031f 	and.w	r3, r3, #31
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <USB_EPStartXfer+0x41e>
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	3b01      	subs	r3, #1
 8006388:	61bb      	str	r3, [r7, #24]
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	b29b      	uxth	r3, r3
 800638e:	029b      	lsls	r3, r3, #10
 8006390:	b29b      	uxth	r3, r3
 8006392:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006396:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639a:	b29b      	uxth	r3, r3
 800639c:	8023      	strh	r3, [r4, #0]
 800639e:	e013      	b.n	80063c8 <USB_EPStartXfer+0x45c>
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	785b      	ldrb	r3, [r3, #1]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d10f      	bne.n	80063c8 <USB_EPStartXfer+0x45c>
 80063a8:	687c      	ldr	r4, [r7, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	441c      	add	r4, r3
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	011b      	lsls	r3, r3, #4
 80063ba:	4423      	add	r3, r4
 80063bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063c0:	461c      	mov	r4, r3
 80063c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	8023      	strh	r3, [r4, #0]
 80063c8:	687c      	ldr	r4, [r7, #4]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	785b      	ldrb	r3, [r3, #1]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d14e      	bne.n	8006470 <USB_EPStartXfer+0x504>
 80063d2:	687c      	ldr	r4, [r7, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	441c      	add	r4, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	4423      	add	r3, r4
 80063e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063ea:	461c      	mov	r4, r3
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10e      	bne.n	8006410 <USB_EPStartXfer+0x4a4>
 80063f2:	8823      	ldrh	r3, [r4, #0]
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	8023      	strh	r3, [r4, #0]
 80063fe:	8823      	ldrh	r3, [r4, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29b      	uxth	r3, r3
 800640c:	8023      	strh	r3, [r4, #0]
 800640e:	e043      	b.n	8006498 <USB_EPStartXfer+0x52c>
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	2b3e      	cmp	r3, #62	; 0x3e
 8006414:	d816      	bhi.n	8006444 <USB_EPStartXfer+0x4d8>
 8006416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006418:	085b      	lsrs	r3, r3, #1
 800641a:	617b      	str	r3, [r7, #20]
 800641c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d002      	beq.n	800642c <USB_EPStartXfer+0x4c0>
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	3301      	adds	r3, #1
 800642a:	617b      	str	r3, [r7, #20]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	b29b      	uxth	r3, r3
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	b29b      	uxth	r3, r3
 8006434:	8023      	strh	r3, [r4, #0]
 8006436:	e02f      	b.n	8006498 <USB_EPStartXfer+0x52c>
 8006438:	ffff80c0 	.word	0xffff80c0
 800643c:	ffffc080 	.word	0xffffc080
 8006440:	ffff8080 	.word	0xffff8080
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	095b      	lsrs	r3, r3, #5
 8006448:	617b      	str	r3, [r7, #20]
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	f003 031f 	and.w	r3, r3, #31
 8006450:	2b00      	cmp	r3, #0
 8006452:	d102      	bne.n	800645a <USB_EPStartXfer+0x4ee>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3b01      	subs	r3, #1
 8006458:	617b      	str	r3, [r7, #20]
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	b29b      	uxth	r3, r3
 800645e:	029b      	lsls	r3, r3, #10
 8006460:	b29b      	uxth	r3, r3
 8006462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800646a:	b29b      	uxth	r3, r3
 800646c:	8023      	strh	r3, [r4, #0]
 800646e:	e013      	b.n	8006498 <USB_EPStartXfer+0x52c>
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	785b      	ldrb	r3, [r3, #1]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d10f      	bne.n	8006498 <USB_EPStartXfer+0x52c>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800647e:	b29b      	uxth	r3, r3
 8006480:	441c      	add	r4, r3
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	4423      	add	r3, r4
 800648a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	b29a      	uxth	r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006498:	687a      	ldr	r2, [r7, #4]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	781b      	ldrb	r3, [r3, #0]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	881b      	ldrh	r3, [r3, #0]
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	b29c      	uxth	r4, r3
 80064b0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80064b4:	b29c      	uxth	r4, r3
 80064b6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80064ba:	b29c      	uxth	r4, r3
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	4b04      	ldr	r3, [pc, #16]	; (80064d8 <USB_EPStartXfer+0x56c>)
 80064c8:	4323      	orrs	r3, r4
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3734      	adds	r7, #52	; 0x34
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd90      	pop	{r4, r7, pc}
 80064d8:	ffff8080 	.word	0xffff8080

080064dc <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80064dc:	b490      	push	{r4, r7}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	785b      	ldrb	r3, [r3, #1]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d018      	beq.n	8006520 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	881b      	ldrh	r3, [r3, #0]
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006504:	b29c      	uxth	r4, r3
 8006506:	f084 0310 	eor.w	r3, r4, #16
 800650a:	b29c      	uxth	r4, r3
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	4b11      	ldr	r3, [pc, #68]	; (800655c <USB_EPSetStall+0x80>)
 8006518:	4323      	orrs	r3, r4
 800651a:	b29b      	uxth	r3, r3
 800651c:	8013      	strh	r3, [r2, #0]
 800651e:	e017      	b.n	8006550 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	b29c      	uxth	r4, r3
 8006538:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800653c:	b29c      	uxth	r4, r3
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	441a      	add	r2, r3
 8006548:	4b04      	ldr	r3, [pc, #16]	; (800655c <USB_EPSetStall+0x80>)
 800654a:	4323      	orrs	r3, r4
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bc90      	pop	{r4, r7}
 800655a:	4770      	bx	lr
 800655c:	ffff8080 	.word	0xffff8080

08006560 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006560:	b490      	push	{r4, r7}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	7b1b      	ldrb	r3, [r3, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d17d      	bne.n	800666e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	785b      	ldrb	r3, [r3, #1]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d03d      	beq.n	80065f6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	881b      	ldrh	r3, [r3, #0]
 8006586:	b29c      	uxth	r4, r3
 8006588:	4623      	mov	r3, r4
 800658a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800658e:	2b00      	cmp	r3, #0
 8006590:	d014      	beq.n	80065bc <USB_EPClearStall+0x5c>
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4413      	add	r3, r2
 800659c:	881b      	ldrh	r3, [r3, #0]
 800659e:	b29b      	uxth	r3, r3
 80065a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065a8:	b29c      	uxth	r4, r3
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	441a      	add	r2, r3
 80065b4:	4b31      	ldr	r3, [pc, #196]	; (800667c <USB_EPClearStall+0x11c>)
 80065b6:	4323      	orrs	r3, r4
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	78db      	ldrb	r3, [r3, #3]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d054      	beq.n	800666e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065da:	b29c      	uxth	r4, r3
 80065dc:	f084 0320 	eor.w	r3, r4, #32
 80065e0:	b29c      	uxth	r4, r3
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	441a      	add	r2, r3
 80065ec:	4b24      	ldr	r3, [pc, #144]	; (8006680 <USB_EPClearStall+0x120>)
 80065ee:	4323      	orrs	r3, r4
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	8013      	strh	r3, [r2, #0]
 80065f4:	e03b      	b.n	800666e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4413      	add	r3, r2
 8006600:	881b      	ldrh	r3, [r3, #0]
 8006602:	b29c      	uxth	r4, r3
 8006604:	4623      	mov	r3, r4
 8006606:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d014      	beq.n	8006638 <USB_EPClearStall+0xd8>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006624:	b29c      	uxth	r4, r3
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	441a      	add	r2, r3
 8006630:	4b14      	ldr	r3, [pc, #80]	; (8006684 <USB_EPClearStall+0x124>)
 8006632:	4323      	orrs	r3, r4
 8006634:	b29b      	uxth	r3, r3
 8006636:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4413      	add	r3, r2
 8006642:	881b      	ldrh	r3, [r3, #0]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800664a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800664e:	b29c      	uxth	r4, r3
 8006650:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006654:	b29c      	uxth	r4, r3
 8006656:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800665a:	b29c      	uxth	r4, r3
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	4b06      	ldr	r3, [pc, #24]	; (8006680 <USB_EPClearStall+0x120>)
 8006668:	4323      	orrs	r3, r4
 800666a:	b29b      	uxth	r3, r3
 800666c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3708      	adds	r7, #8
 8006674:	46bd      	mov	sp, r7
 8006676:	bc90      	pop	{r4, r7}
 8006678:	4770      	bx	lr
 800667a:	bf00      	nop
 800667c:	ffff80c0 	.word	0xffff80c0
 8006680:	ffff8080 	.word	0xffff8080
 8006684:	ffffc080 	.word	0xffffc080

08006688 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d103      	bne.n	80066a2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2280      	movs	r2, #128	; 0x80
 800669e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80066a2:	2300      	movs	r3, #0
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bc80      	pop	{r7}
 80066ac:	4770      	bx	lr

080066ae <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b083      	sub	sp, #12
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b085      	sub	sp, #20
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066e8:	68fb      	ldr	r3, [r7, #12]
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	bc80      	pop	{r7}
 8006708:	4770      	bx	lr

0800670a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800670a:	b480      	push	{r7}
 800670c:	b08d      	sub	sp, #52	; 0x34
 800670e:	af00      	add	r7, sp, #0
 8006710:	60f8      	str	r0, [r7, #12]
 8006712:	60b9      	str	r1, [r7, #8]
 8006714:	4611      	mov	r1, r2
 8006716:	461a      	mov	r2, r3
 8006718:	460b      	mov	r3, r1
 800671a:	80fb      	strh	r3, [r7, #6]
 800671c:	4613      	mov	r3, r2
 800671e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006720:	88bb      	ldrh	r3, [r7, #4]
 8006722:	3301      	adds	r3, #1
 8006724:	085b      	lsrs	r3, r3, #1
 8006726:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006730:	88fb      	ldrh	r3, [r7, #6]
 8006732:	005a      	lsls	r2, r3, #1
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	4413      	add	r3, r2
 8006738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006742:	e01e      	b.n	8006782 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800674a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800674c:	3301      	adds	r3, #1
 800674e:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	b29b      	uxth	r3, r3
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	b29b      	uxth	r3, r3
 800675a:	461a      	mov	r2, r3
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	4313      	orrs	r3, r2
 8006760:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	b29a      	uxth	r2, r3
 8006766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006768:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800676a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800676c:	3302      	adds	r3, #2
 800676e:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006772:	3302      	adds	r3, #2
 8006774:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	3301      	adds	r3, #1
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800677c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800677e:	3b01      	subs	r3, #1
 8006780:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1dd      	bne.n	8006744 <USB_WritePMA+0x3a>
  }
}
 8006788:	bf00      	nop
 800678a:	3734      	adds	r7, #52	; 0x34
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006792:	b480      	push	{r7}
 8006794:	b08b      	sub	sp, #44	; 0x2c
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	4611      	mov	r1, r2
 800679e:	461a      	mov	r2, r3
 80067a0:	460b      	mov	r3, r1
 80067a2:	80fb      	strh	r3, [r7, #6]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80067a8:	88bb      	ldrh	r3, [r7, #4]
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	b29b      	uxth	r3, r3
 80067ae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	005a      	lsls	r2, r3, #1
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067c4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
 80067ca:	e01b      	b.n	8006804 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	881b      	ldrh	r3, [r3, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	3302      	adds	r3, #2
 80067d8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	3301      	adds	r3, #1
 80067e6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	0a1b      	lsrs	r3, r3, #8
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	3301      	adds	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	3302      	adds	r3, #2
 80067fc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3b01      	subs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
 8006804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e0      	bne.n	80067cc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800680a:	88bb      	ldrh	r3, [r7, #4]
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	b29b      	uxth	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d007      	beq.n	8006826 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	881b      	ldrh	r3, [r3, #0]
 800681a:	b29b      	uxth	r3, r3
 800681c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	b2da      	uxtb	r2, r3
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	701a      	strb	r2, [r3, #0]
  }
}
 8006826:	bf00      	nop
 8006828:	372c      	adds	r7, #44	; 0x2c
 800682a:	46bd      	mov	sp, r7
 800682c:	bc80      	pop	{r7}
 800682e:	4770      	bx	lr

08006830 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7c1b      	ldrb	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d115      	bne.n	8006874 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800684c:	2202      	movs	r2, #2
 800684e:	2181      	movs	r1, #129	; 0x81
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 fe8a 	bl	800856a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800685c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006860:	2202      	movs	r2, #2
 8006862:	2101      	movs	r1, #1
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f001 fe80 	bl	800856a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2201      	movs	r2, #1
 800686e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006872:	e012      	b.n	800689a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	2202      	movs	r2, #2
 8006878:	2181      	movs	r1, #129	; 0x81
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f001 fe75 	bl	800856a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006886:	2340      	movs	r3, #64	; 0x40
 8006888:	2202      	movs	r2, #2
 800688a:	2101      	movs	r1, #1
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fe6c 	bl	800856a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800689a:	2308      	movs	r3, #8
 800689c:	2203      	movs	r2, #3
 800689e:	2182      	movs	r1, #130	; 0x82
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fe62 	bl	800856a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068b0:	f001 ff7c 	bl	80087ac <USBD_static_malloc>
 80068b4:	4602      	mov	r2, r0
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d102      	bne.n	80068cc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068c6:	2301      	movs	r3, #1
 80068c8:	73fb      	strb	r3, [r7, #15]
 80068ca:	e026      	b.n	800691a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7c1b      	ldrb	r3, [r3, #16]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d109      	bne.n	800690a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006900:	2101      	movs	r1, #1
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 ff1b 	bl	800873e <USBD_LL_PrepareReceive>
 8006908:	e007      	b.n	800691a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006910:	2340      	movs	r3, #64	; 0x40
 8006912:	2101      	movs	r1, #1
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 ff12 	bl	800873e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800691a:	7bfb      	ldrb	r3, [r7, #15]
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}

08006924 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b084      	sub	sp, #16
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006930:	2300      	movs	r3, #0
 8006932:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006934:	2181      	movs	r1, #129	; 0x81
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f001 fe3d 	bl	80085b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006942:	2101      	movs	r1, #1
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 fe36 	bl	80085b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006952:	2182      	movs	r1, #130	; 0x82
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 fe2e 	bl	80085b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2200      	movs	r2, #0
 800695e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00e      	beq.n	8006988 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697a:	4618      	mov	r0, r3
 800697c:	f001 ff22 	bl	80087c4 <USBD_static_free>
    pdev->pClassData = NULL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b086      	sub	sp, #24
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
 800699a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80069ac:	2300      	movs	r3, #0
 80069ae:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d039      	beq.n	8006a30 <USBD_CDC_Setup+0x9e>
 80069bc:	2b20      	cmp	r3, #32
 80069be:	d17c      	bne.n	8006aba <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	88db      	ldrh	r3, [r3, #6]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d029      	beq.n	8006a1c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	da11      	bge.n	80069f6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069e0:	683a      	ldr	r2, [r7, #0]
 80069e2:	88d2      	ldrh	r2, [r2, #6]
 80069e4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069e6:	6939      	ldr	r1, [r7, #16]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	88db      	ldrh	r3, [r3, #6]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f001 f9f6 	bl	8007de0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069f4:	e068      	b.n	8006ac8 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	785a      	ldrb	r2, [r3, #1]
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	88db      	ldrh	r3, [r3, #6]
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a0c:	6939      	ldr	r1, [r7, #16]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	88db      	ldrh	r3, [r3, #6]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f001 fa11 	bl	8007e3c <USBD_CtlPrepareRx>
      break;
 8006a1a:	e055      	b.n	8006ac8 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	7850      	ldrb	r0, [r2, #1]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	4798      	blx	r3
      break;
 8006a2e:	e04b      	b.n	8006ac8 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b0a      	cmp	r3, #10
 8006a36:	d017      	beq.n	8006a68 <USBD_CDC_Setup+0xd6>
 8006a38:	2b0b      	cmp	r3, #11
 8006a3a:	d029      	beq.n	8006a90 <USBD_CDC_Setup+0xfe>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d133      	bne.n	8006aa8 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d107      	bne.n	8006a5a <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a4a:	f107 030c 	add.w	r3, r7, #12
 8006a4e:	2202      	movs	r2, #2
 8006a50:	4619      	mov	r1, r3
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 f9c4 	bl	8007de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a58:	e02e      	b.n	8006ab8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a5a:	6839      	ldr	r1, [r7, #0]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 f955 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a62:	2302      	movs	r3, #2
 8006a64:	75fb      	strb	r3, [r7, #23]
          break;
 8006a66:	e027      	b.n	8006ab8 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d107      	bne.n	8006a82 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a72:	f107 030f 	add.w	r3, r7, #15
 8006a76:	2201      	movs	r2, #1
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f001 f9b0 	bl	8007de0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a80:	e01a      	b.n	8006ab8 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f001 f941 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a8e:	e013      	b.n	8006ab8 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d00d      	beq.n	8006ab6 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f935 	bl	8007d0c <USBD_CtlError>
            ret = USBD_FAIL;
 8006aa2:	2302      	movs	r3, #2
 8006aa4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006aa6:	e006      	b.n	8006ab6 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006aa8:	6839      	ldr	r1, [r7, #0]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f001 f92e 	bl	8007d0c <USBD_CtlError>
          ret = USBD_FAIL;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ab4:	e000      	b.n	8006ab8 <USBD_CDC_Setup+0x126>
          break;
 8006ab6:	bf00      	nop
      }
      break;
 8006ab8:	e006      	b.n	8006ac8 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006aba:	6839      	ldr	r1, [r7, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f925 	bl	8007d0c <USBD_CtlError>
      ret = USBD_FAIL;
 8006ac2:	2302      	movs	r3, #2
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	bf00      	nop
  }

  return ret;
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b084      	sub	sp, #16
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	460b      	mov	r3, r1
 8006adc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aec:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d037      	beq.n	8006b68 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	331c      	adds	r3, #28
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d026      	beq.n	8006b5c <USBD_CDC_DataIn+0x8a>
 8006b0e:	78fa      	ldrb	r2, [r7, #3]
 8006b10:	6879      	ldr	r1, [r7, #4]
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	440b      	add	r3, r1
 8006b1c:	331c      	adds	r3, #28
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	78fa      	ldrb	r2, [r7, #3]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	0152      	lsls	r2, r2, #5
 8006b26:	440a      	add	r2, r1
 8006b28:	3238      	adds	r2, #56	; 0x38
 8006b2a:	6812      	ldr	r2, [r2, #0]
 8006b2c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b30:	fb02 f201 	mul.w	r2, r2, r1
 8006b34:	1a9b      	subs	r3, r3, r2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d110      	bne.n	8006b5c <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b3a:	78fa      	ldrb	r2, [r7, #3]
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	4613      	mov	r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	4413      	add	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	440b      	add	r3, r1
 8006b48:	331c      	adds	r3, #28
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b4e:	78f9      	ldrb	r1, [r7, #3]
 8006b50:	2300      	movs	r3, #0
 8006b52:	2200      	movs	r2, #0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fdcf 	bl	80086f8 <USBD_LL_Transmit>
 8006b5a:	e003      	b.n	8006b64 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b64:	2300      	movs	r3, #0
 8006b66:	e000      	b.n	8006b6a <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006b68:	2302      	movs	r3, #2
  }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b86:	78fb      	ldrb	r3, [r7, #3]
 8006b88:	4619      	mov	r1, r3
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f001 fdfa 	bl	8008784 <USBD_LL_GetRxDataSize>
 8006b90:	4602      	mov	r2, r0
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00d      	beq.n	8006bbe <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	4798      	blx	r3

    return USBD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	e000      	b.n	8006bc0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bbe:	2302      	movs	r3, #2
  }
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bd6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d015      	beq.n	8006c0e <USBD_CDC_EP0_RxReady+0x46>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006be8:	2bff      	cmp	r3, #255	; 0xff
 8006bea:	d010      	beq.n	8006c0e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bfa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c02:	b292      	uxth	r2, r2
 8006c04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	22ff      	movs	r2, #255	; 0xff
 8006c0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2243      	movs	r2, #67	; 0x43
 8006c24:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c26:	4b03      	ldr	r3, [pc, #12]	; (8006c34 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bc80      	pop	{r7}
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20000098 	.word	0x20000098

08006c38 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2243      	movs	r2, #67	; 0x43
 8006c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c46:	4b03      	ldr	r3, [pc, #12]	; (8006c54 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	370c      	adds	r7, #12
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bc80      	pop	{r7}
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	20000054 	.word	0x20000054

08006c58 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2243      	movs	r2, #67	; 0x43
 8006c64:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c66:	4b03      	ldr	r3, [pc, #12]	; (8006c74 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bc80      	pop	{r7}
 8006c70:	4770      	bx	lr
 8006c72:	bf00      	nop
 8006c74:	200000dc 	.word	0x200000dc

08006c78 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	220a      	movs	r2, #10
 8006c84:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c86:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bc80      	pop	{r7}
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000010 	.word	0x20000010

08006c98 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d005      	beq.n	8006cb8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bc80      	pop	{r7}
 8006cf4:	4770      	bx	lr

08006cf6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b085      	sub	sp, #20
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bc80      	pop	{r7}
 8006d1a:	4770      	bx	lr

08006d1c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b084      	sub	sp, #16
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d01c      	beq.n	8006d70 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d115      	bne.n	8006d6c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	2181      	movs	r1, #129	; 0x81
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 fcc8 	bl	80086f8 <USBD_LL_Transmit>

      return USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e002      	b.n	8006d72 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	e000      	b.n	8006d72 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d70:	2302      	movs	r3, #2
  }
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d017      	beq.n	8006dc4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	7c1b      	ldrb	r3, [r3, #16]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d109      	bne.n	8006db0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da6:	2101      	movs	r1, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 fcc8 	bl	800873e <USBD_LL_PrepareReceive>
 8006dae:	e007      	b.n	8006dc0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006db6:	2340      	movs	r3, #64	; 0x40
 8006db8:	2101      	movs	r1, #1
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f001 fcbf 	bl	800873e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	e000      	b.n	8006dc6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006dc4:	2302      	movs	r3, #2
  }
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	60f8      	str	r0, [r7, #12]
 8006dd6:	60b9      	str	r1, [r7, #8]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d101      	bne.n	8006de6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006de2:	2302      	movs	r3, #2
 8006de4:	e01a      	b.n	8006e1c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d003      	beq.n	8006e06 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	79fa      	ldrb	r2, [r7, #7]
 8006e12:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f001 fb33 	bl	8008480 <USBD_LL_Init>

  return USBD_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3710      	adds	r7, #16
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d006      	beq.n	8006e46 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	683a      	ldr	r2, [r7, #0]
 8006e3c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	e001      	b.n	8006e4a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e46:	2302      	movs	r3, #2
 8006e48:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3714      	adds	r7, #20
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bc80      	pop	{r7}
 8006e54:	4770      	bx	lr

08006e56 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b082      	sub	sp, #8
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fb68 	bl	8008534 <USBD_LL_Start>

  return USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3708      	adds	r7, #8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b083      	sub	sp, #12
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	370c      	adds	r7, #12
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e8e:	2302      	movs	r3, #2
 8006e90:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00c      	beq.n	8006eb6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	78fa      	ldrb	r2, [r7, #3]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	4798      	blx	r3
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d101      	bne.n	8006eb6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	78fa      	ldrb	r2, [r7, #3]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	4798      	blx	r3

  return USBD_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3708      	adds	r7, #8
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	bd80      	pop	{r7, pc}

08006ee6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ee6:	b580      	push	{r7, lr}
 8006ee8:	b082      	sub	sp, #8
 8006eea:	af00      	add	r7, sp, #0
 8006eec:	6078      	str	r0, [r7, #4]
 8006eee:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ef6:	6839      	ldr	r1, [r7, #0]
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f000 fecb 	bl	8007c94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f1a:	f003 031f 	and.w	r3, r3, #31
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d00c      	beq.n	8006f3c <USBD_LL_SetupStage+0x56>
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d302      	bcc.n	8006f2c <USBD_LL_SetupStage+0x46>
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	d010      	beq.n	8006f4c <USBD_LL_SetupStage+0x66>
 8006f2a:	e017      	b.n	8006f5c <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f9cb 	bl	80072d0 <USBD_StdDevReq>
      break;
 8006f3a:	e01a      	b.n	8006f72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f42:	4619      	mov	r1, r3
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 fa2d 	bl	80073a4 <USBD_StdItfReq>
      break;
 8006f4a:	e012      	b.n	8006f72 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa6b 	bl	8007430 <USBD_StdEPReq>
      break;
 8006f5a:	e00a      	b.n	8006f72 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f001 fb42 	bl	80085f4 <USBD_LL_StallEP>
      break;
 8006f70:	bf00      	nop
  }

  return USBD_OK;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3708      	adds	r7, #8
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	460b      	mov	r3, r1
 8006f86:	607a      	str	r2, [r7, #4]
 8006f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d14b      	bne.n	8007028 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f96:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d134      	bne.n	800700c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d919      	bls.n	8006fe2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	68da      	ldr	r2, [r3, #12]
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	1ad2      	subs	r2, r2, r3
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	68da      	ldr	r2, [r3, #12]
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d203      	bcs.n	8006fd0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	e002      	b.n	8006fd6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6879      	ldr	r1, [r7, #4]
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f000 ff4c 	bl	8007e78 <USBD_CtlContinueRx>
 8006fe0:	e038      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00a      	beq.n	8007004 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ff4:	2b03      	cmp	r3, #3
 8006ff6:	d105      	bne.n	8007004 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 ff49 	bl	8007e9c <USBD_CtlSendStatus>
 800700a:	e023      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007012:	2b05      	cmp	r3, #5
 8007014:	d11e      	bne.n	8007054 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800701e:	2100      	movs	r1, #0
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	f001 fae7 	bl	80085f4 <USBD_LL_StallEP>
 8007026:	e015      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800702e:	699b      	ldr	r3, [r3, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00d      	beq.n	8007050 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800703a:	2b03      	cmp	r3, #3
 800703c:	d108      	bne.n	8007050 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	7afa      	ldrb	r2, [r7, #11]
 8007048:	4611      	mov	r1, r2
 800704a:	68f8      	ldr	r0, [r7, #12]
 800704c:	4798      	blx	r3
 800704e:	e001      	b.n	8007054 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007050:	2302      	movs	r3, #2
 8007052:	e000      	b.n	8007056 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	60f8      	str	r0, [r7, #12]
 8007066:	460b      	mov	r3, r1
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800706c:	7afb      	ldrb	r3, [r7, #11]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d17f      	bne.n	8007172 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	3314      	adds	r3, #20
 8007076:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800707e:	2b02      	cmp	r3, #2
 8007080:	d15c      	bne.n	800713c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	429a      	cmp	r2, r3
 800708c:	d915      	bls.n	80070ba <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	1ad2      	subs	r2, r2, r3
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	461a      	mov	r2, r3
 80070a4:	6879      	ldr	r1, [r7, #4]
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f000 feb6 	bl	8007e18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070ac:	2300      	movs	r3, #0
 80070ae:	2200      	movs	r2, #0
 80070b0:	2100      	movs	r1, #0
 80070b2:	68f8      	ldr	r0, [r7, #12]
 80070b4:	f001 fb43 	bl	800873e <USBD_LL_PrepareReceive>
 80070b8:	e04e      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	6912      	ldr	r2, [r2, #16]
 80070c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80070c6:	fb02 f201 	mul.w	r2, r2, r1
 80070ca:	1a9b      	subs	r3, r3, r2
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d11c      	bne.n	800710a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070d8:	429a      	cmp	r2, r3
 80070da:	d316      	bcc.n	800710a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	689a      	ldr	r2, [r3, #8]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d20f      	bcs.n	800710a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070ea:	2200      	movs	r2, #0
 80070ec:	2100      	movs	r1, #0
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 fe92 	bl	8007e18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070fc:	2300      	movs	r3, #0
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f001 fb1b 	bl	800873e <USBD_LL_PrepareReceive>
 8007108:	e026      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d00a      	beq.n	800712c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800711c:	2b03      	cmp	r3, #3
 800711e:	d105      	bne.n	800712c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800712c:	2180      	movs	r1, #128	; 0x80
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f001 fa60 	bl	80085f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007134:	68f8      	ldr	r0, [r7, #12]
 8007136:	f000 fec4 	bl	8007ec2 <USBD_CtlReceiveStatus>
 800713a:	e00d      	b.n	8007158 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007142:	2b04      	cmp	r3, #4
 8007144:	d004      	beq.n	8007150 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800714c:	2b00      	cmp	r3, #0
 800714e:	d103      	bne.n	8007158 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007150:	2180      	movs	r1, #128	; 0x80
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f001 fa4e 	bl	80085f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800715e:	2b01      	cmp	r3, #1
 8007160:	d11d      	bne.n	800719e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f7ff fe83 	bl	8006e6e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007170:	e015      	b.n	800719e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00d      	beq.n	800719a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007184:	2b03      	cmp	r3, #3
 8007186:	d108      	bne.n	800719a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	7afa      	ldrb	r2, [r7, #11]
 8007192:	4611      	mov	r1, r2
 8007194:	68f8      	ldr	r0, [r7, #12]
 8007196:	4798      	blx	r3
 8007198:	e001      	b.n	800719e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800719a:	2302      	movs	r3, #2
 800719c:	e000      	b.n	80071a0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	2200      	movs	r2, #0
 80071b4:	2100      	movs	r1, #0
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 f9d7 	bl	800856a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2240      	movs	r2, #64	; 0x40
 80071c8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071cc:	2340      	movs	r3, #64	; 0x40
 80071ce:	2200      	movs	r2, #0
 80071d0:	2180      	movs	r1, #128	; 0x80
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 f9c9 	bl	800856a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2240      	movs	r2, #64	; 0x40
 80071e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d009      	beq.n	8007220 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	6852      	ldr	r2, [r2, #4]
 8007218:	b2d2      	uxtb	r2, r2
 800721a:	4611      	mov	r1, r2
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	4798      	blx	r3
  }

  return USBD_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	460b      	mov	r3, r1
 8007234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	78fa      	ldrb	r2, [r7, #3]
 800723a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	bc80      	pop	{r7}
 8007246:	4770      	bx	lr

08007248 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2204      	movs	r2, #4
 8007260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	2b04      	cmp	r3, #4
 8007280:	d105      	bne.n	800728e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	370c      	adds	r7, #12
 8007294:	46bd      	mov	sp, r7
 8007296:	bc80      	pop	{r7}
 8007298:	4770      	bx	lr

0800729a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d10b      	bne.n	80072c4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d005      	beq.n	80072c4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072be:	69db      	ldr	r3, [r3, #28]
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3708      	adds	r7, #8
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072da:	2300      	movs	r3, #0
 80072dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d004      	beq.n	80072f4 <USBD_StdDevReq+0x24>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d002      	beq.n	80072f4 <USBD_StdDevReq+0x24>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d008      	beq.n	8007304 <USBD_StdDevReq+0x34>
 80072f2:	e04c      	b.n	800738e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	6839      	ldr	r1, [r7, #0]
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
      break;
 8007302:	e049      	b.n	8007398 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	785b      	ldrb	r3, [r3, #1]
 8007308:	2b09      	cmp	r3, #9
 800730a:	d83a      	bhi.n	8007382 <USBD_StdDevReq+0xb2>
 800730c:	a201      	add	r2, pc, #4	; (adr r2, 8007314 <USBD_StdDevReq+0x44>)
 800730e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007312:	bf00      	nop
 8007314:	08007365 	.word	0x08007365
 8007318:	08007379 	.word	0x08007379
 800731c:	08007383 	.word	0x08007383
 8007320:	0800736f 	.word	0x0800736f
 8007324:	08007383 	.word	0x08007383
 8007328:	08007347 	.word	0x08007347
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007383 	.word	0x08007383
 8007334:	0800735b 	.word	0x0800735b
 8007338:	08007351 	.word	0x08007351
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800733c:	6839      	ldr	r1, [r7, #0]
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 f9d4 	bl	80076ec <USBD_GetDescriptor>
          break;
 8007344:	e022      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007346:	6839      	ldr	r1, [r7, #0]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 fb37 	bl	80079bc <USBD_SetAddress>
          break;
 800734e:	e01d      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007350:	6839      	ldr	r1, [r7, #0]
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fb74 	bl	8007a40 <USBD_SetConfig>
          break;
 8007358:	e018      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 fbfd 	bl	8007b5c <USBD_GetConfig>
          break;
 8007362:	e013      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fc2c 	bl	8007bc4 <USBD_GetStatus>
          break;
 800736c:	e00e      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800736e:	6839      	ldr	r1, [r7, #0]
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 fc5a 	bl	8007c2a <USBD_SetFeature>
          break;
 8007376:	e009      	b.n	800738c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007378:	6839      	ldr	r1, [r7, #0]
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fc69 	bl	8007c52 <USBD_ClrFeature>
          break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcc1 	bl	8007d0c <USBD_CtlError>
          break;
 800738a:	bf00      	nop
      }
      break;
 800738c:	e004      	b.n	8007398 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800738e:	6839      	ldr	r1, [r7, #0]
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 fcbb 	bl	8007d0c <USBD_CtlError>
      break;
 8007396:	bf00      	nop
  }

  return ret;
 8007398:	7bfb      	ldrb	r3, [r7, #15]
}
 800739a:	4618      	mov	r0, r3
 800739c:	3710      	adds	r7, #16
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop

080073a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d003      	beq.n	80073c6 <USBD_StdItfReq+0x22>
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d001      	beq.n	80073c6 <USBD_StdItfReq+0x22>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d12a      	bne.n	800741c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073cc:	3b01      	subs	r3, #1
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d81d      	bhi.n	800740e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	889b      	ldrh	r3, [r3, #4]
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d813      	bhi.n	8007404 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	4798      	blx	r3
 80073ea:	4603      	mov	r3, r0
 80073ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	88db      	ldrh	r3, [r3, #6]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d110      	bne.n	8007418 <USBD_StdItfReq+0x74>
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10d      	bne.n	8007418 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fd4d 	bl	8007e9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007402:	e009      	b.n	8007418 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007404:	6839      	ldr	r1, [r7, #0]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fc80 	bl	8007d0c <USBD_CtlError>
          break;
 800740c:	e004      	b.n	8007418 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fc7b 	bl	8007d0c <USBD_CtlError>
          break;
 8007416:	e000      	b.n	800741a <USBD_StdItfReq+0x76>
          break;
 8007418:	bf00      	nop
      }
      break;
 800741a:	e004      	b.n	8007426 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fc74 	bl	8007d0c <USBD_CtlError>
      break;
 8007424:	bf00      	nop
  }

  return USBD_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	889b      	ldrh	r3, [r3, #4]
 8007442:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	781b      	ldrb	r3, [r3, #0]
 8007448:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800744c:	2b20      	cmp	r3, #32
 800744e:	d004      	beq.n	800745a <USBD_StdEPReq+0x2a>
 8007450:	2b40      	cmp	r3, #64	; 0x40
 8007452:	d002      	beq.n	800745a <USBD_StdEPReq+0x2a>
 8007454:	2b00      	cmp	r3, #0
 8007456:	d008      	beq.n	800746a <USBD_StdEPReq+0x3a>
 8007458:	e13d      	b.n	80076d6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	4798      	blx	r3
      break;
 8007468:	e13a      	b.n	80076e0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007472:	2b20      	cmp	r3, #32
 8007474:	d10a      	bne.n	800748c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	4798      	blx	r3
 8007484:	4603      	mov	r3, r0
 8007486:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
 800748a:	e12a      	b.n	80076e2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d03e      	beq.n	8007512 <USBD_StdEPReq+0xe2>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d002      	beq.n	800749e <USBD_StdEPReq+0x6e>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d070      	beq.n	800757e <USBD_StdEPReq+0x14e>
 800749c:	e115      	b.n	80076ca <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d002      	beq.n	80074ae <USBD_StdEPReq+0x7e>
 80074a8:	2b03      	cmp	r3, #3
 80074aa:	d015      	beq.n	80074d8 <USBD_StdEPReq+0xa8>
 80074ac:	e02b      	b.n	8007506 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074ae:	7bbb      	ldrb	r3, [r7, #14]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00c      	beq.n	80074ce <USBD_StdEPReq+0x9e>
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	2b80      	cmp	r3, #128	; 0x80
 80074b8:	d009      	beq.n	80074ce <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f001 f898 	bl	80085f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074c4:	2180      	movs	r1, #128	; 0x80
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f001 f894 	bl	80085f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074cc:	e020      	b.n	8007510 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 fc1b 	bl	8007d0c <USBD_CtlError>
              break;
 80074d6:	e01b      	b.n	8007510 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	885b      	ldrh	r3, [r3, #2]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10e      	bne.n	80074fe <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 80074e0:	7bbb      	ldrb	r3, [r7, #14]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <USBD_StdEPReq+0xce>
 80074e6:	7bbb      	ldrb	r3, [r7, #14]
 80074e8:	2b80      	cmp	r3, #128	; 0x80
 80074ea:	d008      	beq.n	80074fe <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074f4:	7bbb      	ldrb	r3, [r7, #14]
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f001 f87b 	bl	80085f4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fccc 	bl	8007e9c <USBD_CtlSendStatus>

              break;
 8007504:	e004      	b.n	8007510 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fbff 	bl	8007d0c <USBD_CtlError>
              break;
 800750e:	bf00      	nop
          }
          break;
 8007510:	e0e0      	b.n	80076d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007518:	2b02      	cmp	r3, #2
 800751a:	d002      	beq.n	8007522 <USBD_StdEPReq+0xf2>
 800751c:	2b03      	cmp	r3, #3
 800751e:	d015      	beq.n	800754c <USBD_StdEPReq+0x11c>
 8007520:	e026      	b.n	8007570 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00c      	beq.n	8007542 <USBD_StdEPReq+0x112>
 8007528:	7bbb      	ldrb	r3, [r7, #14]
 800752a:	2b80      	cmp	r3, #128	; 0x80
 800752c:	d009      	beq.n	8007542 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800752e:	7bbb      	ldrb	r3, [r7, #14]
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f001 f85e 	bl	80085f4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 f85a 	bl	80085f4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007540:	e01c      	b.n	800757c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8007542:	6839      	ldr	r1, [r7, #0]
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fbe1 	bl	8007d0c <USBD_CtlError>
              break;
 800754a:	e017      	b.n	800757c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	885b      	ldrh	r3, [r3, #2]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d112      	bne.n	800757a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007554:	7bbb      	ldrb	r3, [r7, #14]
 8007556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800755e:	7bbb      	ldrb	r3, [r7, #14]
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f001 f865 	bl	8008632 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 fc97 	bl	8007e9c <USBD_CtlSendStatus>
              }
              break;
 800756e:	e004      	b.n	800757a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007570:	6839      	ldr	r1, [r7, #0]
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 fbca 	bl	8007d0c <USBD_CtlError>
              break;
 8007578:	e000      	b.n	800757c <USBD_StdEPReq+0x14c>
              break;
 800757a:	bf00      	nop
          }
          break;
 800757c:	e0aa      	b.n	80076d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	2b02      	cmp	r3, #2
 8007586:	d002      	beq.n	800758e <USBD_StdEPReq+0x15e>
 8007588:	2b03      	cmp	r3, #3
 800758a:	d032      	beq.n	80075f2 <USBD_StdEPReq+0x1c2>
 800758c:	e097      	b.n	80076be <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800758e:	7bbb      	ldrb	r3, [r7, #14]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d007      	beq.n	80075a4 <USBD_StdEPReq+0x174>
 8007594:	7bbb      	ldrb	r3, [r7, #14]
 8007596:	2b80      	cmp	r3, #128	; 0x80
 8007598:	d004      	beq.n	80075a4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800759a:	6839      	ldr	r1, [r7, #0]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 fbb5 	bl	8007d0c <USBD_CtlError>
                break;
 80075a2:	e091      	b.n	80076c8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da0b      	bge.n	80075c4 <USBD_StdEPReq+0x194>
 80075ac:	7bbb      	ldrb	r3, [r7, #14]
 80075ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b2:	4613      	mov	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	3310      	adds	r3, #16
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	4413      	add	r3, r2
 80075c0:	3304      	adds	r3, #4
 80075c2:	e00b      	b.n	80075dc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	4413      	add	r3, r2
 80075da:	3304      	adds	r3, #4
 80075dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2202      	movs	r2, #2
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fbf8 	bl	8007de0 <USBD_CtlSendData>
              break;
 80075f0:	e06a      	b.n	80076c8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	da11      	bge.n	800761e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075fa:	7bbb      	ldrb	r3, [r7, #14]
 80075fc:	f003 020f 	and.w	r2, r3, #15
 8007600:	6879      	ldr	r1, [r7, #4]
 8007602:	4613      	mov	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4413      	add	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	440b      	add	r3, r1
 800760c:	3318      	adds	r3, #24
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d117      	bne.n	8007644 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007614:	6839      	ldr	r1, [r7, #0]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fb78 	bl	8007d0c <USBD_CtlError>
                  break;
 800761c:	e054      	b.n	80076c8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800761e:	7bbb      	ldrb	r3, [r7, #14]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800763a:	6839      	ldr	r1, [r7, #0]
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fb65 	bl	8007d0c <USBD_CtlError>
                  break;
 8007642:	e041      	b.n	80076c8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007644:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007648:	2b00      	cmp	r3, #0
 800764a:	da0b      	bge.n	8007664 <USBD_StdEPReq+0x234>
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	3310      	adds	r3, #16
 800765c:	687a      	ldr	r2, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	3304      	adds	r3, #4
 8007662:	e00b      	b.n	800767c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007664:	7bbb      	ldrb	r3, [r7, #14]
 8007666:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800766a:	4613      	mov	r3, r2
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	4413      	add	r3, r2
 800767a:	3304      	adds	r3, #4
 800767c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800767e:	7bbb      	ldrb	r3, [r7, #14]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d002      	beq.n	800768a <USBD_StdEPReq+0x25a>
 8007684:	7bbb      	ldrb	r3, [r7, #14]
 8007686:	2b80      	cmp	r3, #128	; 0x80
 8007688:	d103      	bne.n	8007692 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e00e      	b.n	80076b0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	4619      	mov	r1, r3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 ffea 	bl	8008670 <USBD_LL_IsStallEP>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	2201      	movs	r2, #1
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	e002      	b.n	80076b0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	2202      	movs	r2, #2
 80076b4:	4619      	mov	r1, r3
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fb92 	bl	8007de0 <USBD_CtlSendData>
              break;
 80076bc:	e004      	b.n	80076c8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 fb23 	bl	8007d0c <USBD_CtlError>
              break;
 80076c6:	bf00      	nop
          }
          break;
 80076c8:	e004      	b.n	80076d4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80076ca:	6839      	ldr	r1, [r7, #0]
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fb1d 	bl	8007d0c <USBD_CtlError>
          break;
 80076d2:	bf00      	nop
      }
      break;
 80076d4:	e004      	b.n	80076e0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80076d6:	6839      	ldr	r1, [r7, #0]
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 fb17 	bl	8007d0c <USBD_CtlError>
      break;
 80076de:	bf00      	nop
  }

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076f6:	2300      	movs	r3, #0
 80076f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076fe:	2300      	movs	r3, #0
 8007700:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	885b      	ldrh	r3, [r3, #2]
 8007706:	0a1b      	lsrs	r3, r3, #8
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	2b06      	cmp	r3, #6
 800770e:	f200 8128 	bhi.w	8007962 <USBD_GetDescriptor+0x276>
 8007712:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <USBD_GetDescriptor+0x2c>)
 8007714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007718:	08007735 	.word	0x08007735
 800771c:	0800774d 	.word	0x0800774d
 8007720:	0800778d 	.word	0x0800778d
 8007724:	08007963 	.word	0x08007963
 8007728:	08007963 	.word	0x08007963
 800772c:	08007903 	.word	0x08007903
 8007730:	0800792f 	.word	0x0800792f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	7c12      	ldrb	r2, [r2, #16]
 8007740:	f107 0108 	add.w	r1, r7, #8
 8007744:	4610      	mov	r0, r2
 8007746:	4798      	blx	r3
 8007748:	60f8      	str	r0, [r7, #12]
      break;
 800774a:	e112      	b.n	8007972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	7c1b      	ldrb	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10d      	bne.n	8007770 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f107 0208 	add.w	r2, r7, #8
 8007760:	4610      	mov	r0, r2
 8007762:	4798      	blx	r3
 8007764:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	2202      	movs	r2, #2
 800776c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800776e:	e100      	b.n	8007972 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	f107 0208 	add.w	r2, r7, #8
 800777c:	4610      	mov	r0, r2
 800777e:	4798      	blx	r3
 8007780:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	2202      	movs	r2, #2
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e0f2      	b.n	8007972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	885b      	ldrh	r3, [r3, #2]
 8007790:	b2db      	uxtb	r3, r3
 8007792:	2b05      	cmp	r3, #5
 8007794:	f200 80ac 	bhi.w	80078f0 <USBD_GetDescriptor+0x204>
 8007798:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBD_GetDescriptor+0xb4>)
 800779a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779e:	bf00      	nop
 80077a0:	080077b9 	.word	0x080077b9
 80077a4:	080077ed 	.word	0x080077ed
 80077a8:	08007821 	.word	0x08007821
 80077ac:	08007855 	.word	0x08007855
 80077b0:	08007889 	.word	0x08007889
 80077b4:	080078bd 	.word	0x080078bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00b      	beq.n	80077dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	7c12      	ldrb	r2, [r2, #16]
 80077d0:	f107 0108 	add.w	r1, r7, #8
 80077d4:	4610      	mov	r0, r2
 80077d6:	4798      	blx	r3
 80077d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077da:	e091      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077dc:	6839      	ldr	r1, [r7, #0]
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 fa94 	bl	8007d0c <USBD_CtlError>
            err++;
 80077e4:	7afb      	ldrb	r3, [r7, #11]
 80077e6:	3301      	adds	r3, #1
 80077e8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ea:	e089      	b.n	8007900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	7c12      	ldrb	r2, [r2, #16]
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	4610      	mov	r0, r2
 800780a:	4798      	blx	r3
 800780c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800780e:	e077      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 fa7a 	bl	8007d0c <USBD_CtlError>
            err++;
 8007818:	7afb      	ldrb	r3, [r7, #11]
 800781a:	3301      	adds	r3, #1
 800781c:	72fb      	strb	r3, [r7, #11]
          break;
 800781e:	e06f      	b.n	8007900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00b      	beq.n	8007844 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	7c12      	ldrb	r2, [r2, #16]
 8007838:	f107 0108 	add.w	r1, r7, #8
 800783c:	4610      	mov	r0, r2
 800783e:	4798      	blx	r3
 8007840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007842:	e05d      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fa60 	bl	8007d0c <USBD_CtlError>
            err++;
 800784c:	7afb      	ldrb	r3, [r7, #11]
 800784e:	3301      	adds	r3, #1
 8007850:	72fb      	strb	r3, [r7, #11]
          break;
 8007852:	e055      	b.n	8007900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7c12      	ldrb	r2, [r2, #16]
 800786c:	f107 0108 	add.w	r1, r7, #8
 8007870:	4610      	mov	r0, r2
 8007872:	4798      	blx	r3
 8007874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007876:	e043      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fa46 	bl	8007d0c <USBD_CtlError>
            err++;
 8007880:	7afb      	ldrb	r3, [r7, #11]
 8007882:	3301      	adds	r3, #1
 8007884:	72fb      	strb	r3, [r7, #11]
          break;
 8007886:	e03b      	b.n	8007900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00b      	beq.n	80078ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	687a      	ldr	r2, [r7, #4]
 800789e:	7c12      	ldrb	r2, [r2, #16]
 80078a0:	f107 0108 	add.w	r1, r7, #8
 80078a4:	4610      	mov	r0, r2
 80078a6:	4798      	blx	r3
 80078a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078aa:	e029      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 fa2c 	bl	8007d0c <USBD_CtlError>
            err++;
 80078b4:	7afb      	ldrb	r3, [r7, #11]
 80078b6:	3301      	adds	r3, #1
 80078b8:	72fb      	strb	r3, [r7, #11]
          break;
 80078ba:	e021      	b.n	8007900 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078c2:	699b      	ldr	r3, [r3, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	7c12      	ldrb	r2, [r2, #16]
 80078d4:	f107 0108 	add.w	r1, r7, #8
 80078d8:	4610      	mov	r0, r2
 80078da:	4798      	blx	r3
 80078dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078de:	e00f      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e0:	6839      	ldr	r1, [r7, #0]
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fa12 	bl	8007d0c <USBD_CtlError>
            err++;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	3301      	adds	r3, #1
 80078ec:	72fb      	strb	r3, [r7, #11]
          break;
 80078ee:	e007      	b.n	8007900 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa0a 	bl	8007d0c <USBD_CtlError>
          err++;
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	3301      	adds	r3, #1
 80078fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80078fe:	e038      	b.n	8007972 <USBD_GetDescriptor+0x286>
 8007900:	e037      	b.n	8007972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7c1b      	ldrb	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d109      	bne.n	800791e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007912:	f107 0208 	add.w	r2, r7, #8
 8007916:	4610      	mov	r0, r2
 8007918:	4798      	blx	r3
 800791a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800791c:	e029      	b.n	8007972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800791e:	6839      	ldr	r1, [r7, #0]
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f000 f9f3 	bl	8007d0c <USBD_CtlError>
        err++;
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	3301      	adds	r3, #1
 800792a:	72fb      	strb	r3, [r7, #11]
      break;
 800792c:	e021      	b.n	8007972 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	7c1b      	ldrb	r3, [r3, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d10d      	bne.n	8007952 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800793c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800793e:	f107 0208 	add.w	r2, r7, #8
 8007942:	4610      	mov	r0, r2
 8007944:	4798      	blx	r3
 8007946:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	3301      	adds	r3, #1
 800794c:	2207      	movs	r2, #7
 800794e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007950:	e00f      	b.n	8007972 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007952:	6839      	ldr	r1, [r7, #0]
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	f000 f9d9 	bl	8007d0c <USBD_CtlError>
        err++;
 800795a:	7afb      	ldrb	r3, [r7, #11]
 800795c:	3301      	adds	r3, #1
 800795e:	72fb      	strb	r3, [r7, #11]
      break;
 8007960:	e007      	b.n	8007972 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f9d1 	bl	8007d0c <USBD_CtlError>
      err++;
 800796a:	7afb      	ldrb	r3, [r7, #11]
 800796c:	3301      	adds	r3, #1
 800796e:	72fb      	strb	r3, [r7, #11]
      break;
 8007970:	bf00      	nop
  }

  if (err != 0U)
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d11c      	bne.n	80079b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <USBD_GetDescriptor+0x2b6>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	88da      	ldrh	r2, [r3, #6]
 800798a:	893b      	ldrh	r3, [r7, #8]
 800798c:	4293      	cmp	r3, r2
 800798e:	bf28      	it	cs
 8007990:	4613      	movcs	r3, r2
 8007992:	b29b      	uxth	r3, r3
 8007994:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007996:	893b      	ldrh	r3, [r7, #8]
 8007998:	461a      	mov	r2, r3
 800799a:	68f9      	ldr	r1, [r7, #12]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fa1f 	bl	8007de0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	88db      	ldrh	r3, [r3, #6]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d104      	bne.n	80079b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 fa76 	bl	8007e9c <USBD_CtlSendStatus>
 80079b0:	e000      	b.n	80079b4 <USBD_GetDescriptor+0x2c8>
    return;
 80079b2:	bf00      	nop
    }
  }
}
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop

080079bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	889b      	ldrh	r3, [r3, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d130      	bne.n	8007a30 <USBD_SetAddress+0x74>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	88db      	ldrh	r3, [r3, #6]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d12c      	bne.n	8007a30 <USBD_SetAddress+0x74>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	885b      	ldrh	r3, [r3, #2]
 80079da:	2b7f      	cmp	r3, #127	; 0x7f
 80079dc:	d828      	bhi.n	8007a30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	885b      	ldrh	r3, [r3, #2]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f0:	2b03      	cmp	r3, #3
 80079f2:	d104      	bne.n	80079fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f988 	bl	8007d0c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079fc:	e01c      	b.n	8007a38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fe55 	bl	80086ba <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 fa43 	bl	8007e9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d004      	beq.n	8007a26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a24:	e008      	b.n	8007a38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a2e:	e003      	b.n	8007a38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f96a 	bl	8007d0c <USBD_CtlError>
  }
}
 8007a38:	bf00      	nop
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	885b      	ldrh	r3, [r3, #2]
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	4b41      	ldr	r3, [pc, #260]	; (8007b58 <USBD_SetConfig+0x118>)
 8007a52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a54:	4b40      	ldr	r3, [pc, #256]	; (8007b58 <USBD_SetConfig+0x118>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d904      	bls.n	8007a66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f954 	bl	8007d0c <USBD_CtlError>
 8007a64:	e075      	b.n	8007b52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a6c:	2b02      	cmp	r3, #2
 8007a6e:	d002      	beq.n	8007a76 <USBD_SetConfig+0x36>
 8007a70:	2b03      	cmp	r3, #3
 8007a72:	d023      	beq.n	8007abc <USBD_SetConfig+0x7c>
 8007a74:	e062      	b.n	8007b3c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a76:	4b38      	ldr	r3, [pc, #224]	; (8007b58 <USBD_SetConfig+0x118>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d01a      	beq.n	8007ab4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a7e:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <USBD_SetConfig+0x118>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	461a      	mov	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a90:	4b31      	ldr	r3, [pc, #196]	; (8007b58 <USBD_SetConfig+0x118>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	4619      	mov	r1, r3
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff f9f3 	bl	8006e82 <USBD_SetClassConfig>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d104      	bne.n	8007aac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007aa2:	6839      	ldr	r1, [r7, #0]
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f000 f931 	bl	8007d0c <USBD_CtlError>
            return;
 8007aaa:	e052      	b.n	8007b52 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f9f5 	bl	8007e9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ab2:	e04e      	b.n	8007b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9f1 	bl	8007e9c <USBD_CtlSendStatus>
        break;
 8007aba:	e04a      	b.n	8007b52 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007abc:	4b26      	ldr	r3, [pc, #152]	; (8007b58 <USBD_SetConfig+0x118>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d112      	bne.n	8007aea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2202      	movs	r2, #2
 8007ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007acc:	4b22      	ldr	r3, [pc, #136]	; (8007b58 <USBD_SetConfig+0x118>)
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ad6:	4b20      	ldr	r3, [pc, #128]	; (8007b58 <USBD_SetConfig+0x118>)
 8007ad8:	781b      	ldrb	r3, [r3, #0]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f7ff f9ef 	bl	8006ec0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f9da 	bl	8007e9c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007ae8:	e033      	b.n	8007b52 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007aea:	4b1b      	ldr	r3, [pc, #108]	; (8007b58 <USBD_SetConfig+0x118>)
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	461a      	mov	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	429a      	cmp	r2, r3
 8007af6:	d01d      	beq.n	8007b34 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff f9dd 	bl	8006ec0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <USBD_SetConfig+0x118>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b10:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <USBD_SetConfig+0x118>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	4619      	mov	r1, r3
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7ff f9b3 	bl	8006e82 <USBD_SetClassConfig>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d104      	bne.n	8007b2c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f8f1 	bl	8007d0c <USBD_CtlError>
            return;
 8007b2a:	e012      	b.n	8007b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f9b5 	bl	8007e9c <USBD_CtlSendStatus>
        break;
 8007b32:	e00e      	b.n	8007b52 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9b1 	bl	8007e9c <USBD_CtlSendStatus>
        break;
 8007b3a:	e00a      	b.n	8007b52 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b3c:	6839      	ldr	r1, [r7, #0]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f8e4 	bl	8007d0c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b44:	4b04      	ldr	r3, [pc, #16]	; (8007b58 <USBD_SetConfig+0x118>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff f9b8 	bl	8006ec0 <USBD_ClrClassConfig>
        break;
 8007b50:	bf00      	nop
    }
  }
}
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	20000378 	.word	0x20000378

08007b5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	88db      	ldrh	r3, [r3, #6]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d004      	beq.n	8007b78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b6e:	6839      	ldr	r1, [r7, #0]
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8cb 	bl	8007d0c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b76:	e021      	b.n	8007bbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	db17      	blt.n	8007bb2 <USBD_GetConfig+0x56>
 8007b82:	2b02      	cmp	r3, #2
 8007b84:	dd02      	ble.n	8007b8c <USBD_GetConfig+0x30>
 8007b86:	2b03      	cmp	r3, #3
 8007b88:	d00b      	beq.n	8007ba2 <USBD_GetConfig+0x46>
 8007b8a:	e012      	b.n	8007bb2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3308      	adds	r3, #8
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f920 	bl	8007de0 <USBD_CtlSendData>
        break;
 8007ba0:	e00c      	b.n	8007bbc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	3304      	adds	r3, #4
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f918 	bl	8007de0 <USBD_CtlSendData>
        break;
 8007bb0:	e004      	b.n	8007bbc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007bb2:	6839      	ldr	r1, [r7, #0]
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f8a9 	bl	8007d0c <USBD_CtlError>
        break;
 8007bba:	bf00      	nop
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd4:	3b01      	subs	r3, #1
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d81e      	bhi.n	8007c18 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	88db      	ldrh	r3, [r3, #6]
 8007bde:	2b02      	cmp	r3, #2
 8007be0:	d004      	beq.n	8007bec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f891 	bl	8007d0c <USBD_CtlError>
        break;
 8007bea:	e01a      	b.n	8007c22 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f043 0202 	orr.w	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	330c      	adds	r3, #12
 8007c0c:	2202      	movs	r2, #2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f8e5 	bl	8007de0 <USBD_CtlSendData>
      break;
 8007c16:	e004      	b.n	8007c22 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f876 	bl	8007d0c <USBD_CtlError>
      break;
 8007c20:	bf00      	nop
  }
}
 8007c22:	bf00      	nop
 8007c24:	3708      	adds	r7, #8
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	885b      	ldrh	r3, [r3, #2]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d106      	bne.n	8007c4a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f929 	bl	8007e9c <USBD_CtlSendStatus>
  }
}
 8007c4a:	bf00      	nop
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}

08007c52 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c52:	b580      	push	{r7, lr}
 8007c54:	b082      	sub	sp, #8
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c62:	3b01      	subs	r3, #1
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d80b      	bhi.n	8007c80 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	885b      	ldrh	r3, [r3, #2]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d10c      	bne.n	8007c8a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f90f 	bl	8007e9c <USBD_CtlSendStatus>
      }
      break;
 8007c7e:	e004      	b.n	8007c8a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f842 	bl	8007d0c <USBD_CtlError>
      break;
 8007c88:	e000      	b.n	8007c8c <USBD_ClrFeature+0x3a>
      break;
 8007c8a:	bf00      	nop
  }
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785a      	ldrb	r2, [r3, #1]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	3302      	adds	r3, #2
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b29a      	uxth	r2, r3
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	3303      	adds	r3, #3
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	b29a      	uxth	r2, r3
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3305      	adds	r3, #5
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	4413      	add	r3, r2
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	3306      	adds	r3, #6
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	3307      	adds	r3, #7
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	021b      	lsls	r3, r3, #8
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	4413      	add	r3, r2
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	80da      	strh	r2, [r3, #6]

}
 8007d02:	bf00      	nop
 8007d04:	370c      	adds	r7, #12
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bc80      	pop	{r7}
 8007d0a:	4770      	bx	lr

08007d0c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b082      	sub	sp, #8
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fc6b 	bl	80085f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fc67 	bl	80085f4 <USBD_LL_StallEP>
}
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d032      	beq.n	8007daa <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f000 f834 	bl	8007db2 <USBD_GetLen>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	005b      	lsls	r3, r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	1c5a      	adds	r2, r3, #1
 8007d5c:	75fa      	strb	r2, [r7, #23]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4413      	add	r3, r2
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7812      	ldrb	r2, [r2, #0]
 8007d68:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d6a:	7dfb      	ldrb	r3, [r7, #23]
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	75fa      	strb	r2, [r7, #23]
 8007d70:	461a      	mov	r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4413      	add	r3, r2
 8007d76:	2203      	movs	r2, #3
 8007d78:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d7a:	e012      	b.n	8007da2 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	1c5a      	adds	r2, r3, #1
 8007d80:	60fa      	str	r2, [r7, #12]
 8007d82:	7dfa      	ldrb	r2, [r7, #23]
 8007d84:	1c51      	adds	r1, r2, #1
 8007d86:	75f9      	strb	r1, [r7, #23]
 8007d88:	4611      	mov	r1, r2
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	440a      	add	r2, r1
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	1c5a      	adds	r2, r3, #1
 8007d96:	75fa      	strb	r2, [r7, #23]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	2200      	movs	r2, #0
 8007da0:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d1e8      	bne.n	8007d7c <USBD_GetString+0x4e>
    }
  }
}
 8007daa:	bf00      	nop
 8007dac:	3718      	adds	r7, #24
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007dbe:	e005      	b.n	8007dcc <USBD_GetLen+0x1a>
  {
    len++;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d1f5      	bne.n	8007dc0 <USBD_GetLen+0xe>
  }

  return len;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bc80      	pop	{r7}
 8007dde:	4770      	bx	lr

08007de0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	4613      	mov	r3, r2
 8007dec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2202      	movs	r2, #2
 8007df2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007df6:	88fa      	ldrh	r2, [r7, #6]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007dfc:	88fa      	ldrh	r2, [r7, #6]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e02:	88fb      	ldrh	r3, [r7, #6]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	2100      	movs	r1, #0
 8007e08:	68f8      	ldr	r0, [r7, #12]
 8007e0a:	f000 fc75 	bl	80086f8 <USBD_LL_Transmit>

  return USBD_OK;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3710      	adds	r7, #16
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	68ba      	ldr	r2, [r7, #8]
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f000 fc63 	bl	80086f8 <USBD_LL_Transmit>

  return USBD_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2203      	movs	r2, #3
 8007e4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e52:	88fa      	ldrh	r2, [r7, #6]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e5a:	88fa      	ldrh	r2, [r7, #6]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fc68 	bl	800873e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	4613      	mov	r3, r2
 8007e84:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e86:	88fb      	ldrh	r3, [r7, #6]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 fc56 	bl	800873e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eac:	2300      	movs	r3, #0
 8007eae:	2200      	movs	r2, #0
 8007eb0:	2100      	movs	r1, #0
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fc20 	bl	80086f8 <USBD_LL_Transmit>

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b082      	sub	sp, #8
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2205      	movs	r2, #5
 8007ece:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc30 	bl	800873e <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4912      	ldr	r1, [pc, #72]	; (8007f38 <MX_USB_DEVICE_Init+0x50>)
 8007ef0:	4812      	ldr	r0, [pc, #72]	; (8007f3c <MX_USB_DEVICE_Init+0x54>)
 8007ef2:	f7fe ff6c 	bl	8006dce <USBD_Init>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007efc:	f7fa fb00 	bl	8002500 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f00:	490f      	ldr	r1, [pc, #60]	; (8007f40 <MX_USB_DEVICE_Init+0x58>)
 8007f02:	480e      	ldr	r0, [pc, #56]	; (8007f3c <MX_USB_DEVICE_Init+0x54>)
 8007f04:	f7fe ff8e 	bl	8006e24 <USBD_RegisterClass>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f0e:	f7fa faf7 	bl	8002500 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f12:	490c      	ldr	r1, [pc, #48]	; (8007f44 <MX_USB_DEVICE_Init+0x5c>)
 8007f14:	4809      	ldr	r0, [pc, #36]	; (8007f3c <MX_USB_DEVICE_Init+0x54>)
 8007f16:	f7fe febf 	bl	8006c98 <USBD_CDC_RegisterInterface>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d001      	beq.n	8007f24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f20:	f7fa faee 	bl	8002500 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f24:	4805      	ldr	r0, [pc, #20]	; (8007f3c <MX_USB_DEVICE_Init+0x54>)
 8007f26:	f7fe ff96 	bl	8006e56 <USBD_Start>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f30:	f7fa fae6 	bl	8002500 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f34:	bf00      	nop
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	20000130 	.word	0x20000130
 8007f3c:	2000073c 	.word	0x2000073c
 8007f40:	2000001c 	.word	0x2000001c
 8007f44:	20000120 	.word	0x20000120

08007f48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	4905      	ldr	r1, [pc, #20]	; (8007f64 <CDC_Init_FS+0x1c>)
 8007f50:	4805      	ldr	r0, [pc, #20]	; (8007f68 <CDC_Init_FS+0x20>)
 8007f52:	f7fe feb7 	bl	8006cc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f56:	4905      	ldr	r1, [pc, #20]	; (8007f6c <CDC_Init_FS+0x24>)
 8007f58:	4803      	ldr	r0, [pc, #12]	; (8007f68 <CDC_Init_FS+0x20>)
 8007f5a:	f7fe fecc 	bl	8006cf6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	20000de8 	.word	0x20000de8
 8007f68:	2000073c 	.word	0x2000073c
 8007f6c:	20000a00 	.word	0x20000a00

08007f70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr
	...

08007f80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	4603      	mov	r3, r0
 8007f88:	6039      	str	r1, [r7, #0]
 8007f8a:	71fb      	strb	r3, [r7, #7]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	2b23      	cmp	r3, #35	; 0x23
 8007f94:	d84a      	bhi.n	800802c <CDC_Control_FS+0xac>
 8007f96:	a201      	add	r2, pc, #4	; (adr r2, 8007f9c <CDC_Control_FS+0x1c>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	0800802d 	.word	0x0800802d
 8007fa0:	0800802d 	.word	0x0800802d
 8007fa4:	0800802d 	.word	0x0800802d
 8007fa8:	0800802d 	.word	0x0800802d
 8007fac:	0800802d 	.word	0x0800802d
 8007fb0:	0800802d 	.word	0x0800802d
 8007fb4:	0800802d 	.word	0x0800802d
 8007fb8:	0800802d 	.word	0x0800802d
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	0800802d 	.word	0x0800802d
 8007fcc:	0800802d 	.word	0x0800802d
 8007fd0:	0800802d 	.word	0x0800802d
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	0800802d 	.word	0x0800802d
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	0800802d 	.word	0x0800802d
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	0800802d 	.word	0x0800802d
 8007ffc:	0800802d 	.word	0x0800802d
 8008000:	0800802d 	.word	0x0800802d
 8008004:	0800802d 	.word	0x0800802d
 8008008:	0800802d 	.word	0x0800802d
 800800c:	0800802d 	.word	0x0800802d
 8008010:	0800802d 	.word	0x0800802d
 8008014:	0800802d 	.word	0x0800802d
 8008018:	0800802d 	.word	0x0800802d
 800801c:	0800802d 	.word	0x0800802d
 8008020:	0800802d 	.word	0x0800802d
 8008024:	0800802d 	.word	0x0800802d
 8008028:	0800802d 	.word	0x0800802d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800802c:	bf00      	nop
  }

  return (USBD_OK);
 800802e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008030:	4618      	mov	r0, r3
 8008032:	370c      	adds	r7, #12
 8008034:	46bd      	mov	sp, r7
 8008036:	bc80      	pop	{r7}
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop

0800803c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4810      	ldr	r0, [pc, #64]	; (800808c <CDC_Receive_FS+0x50>)
 800804a:	f7fe fe54 	bl	8006cf6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800804e:	480f      	ldr	r0, [pc, #60]	; (800808c <CDC_Receive_FS+0x50>)
 8008050:	f7fe fe93 	bl	8006d7a <USBD_CDC_ReceivePacket>
  memcpy(rxBuffer, Buf, (*Len) + 1);
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <CDC_Receive_FS+0x54>)
 8008056:	6818      	ldr	r0, [r3, #0]
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3301      	adds	r3, #1
 800805e:	461a      	mov	r2, r3
 8008060:	6879      	ldr	r1, [r7, #4]
 8008062:	f000 fc45 	bl	80088f0 <memcpy>
  incomingMessageFlag=1;
 8008066:	4b0b      	ldr	r3, [pc, #44]	; (8008094 <CDC_Receive_FS+0x58>)
 8008068:	2201      	movs	r2, #1
 800806a:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800806c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008070:	4809      	ldr	r0, [pc, #36]	; (8008098 <CDC_Receive_FS+0x5c>)
 8008072:	f7fb fadf 	bl	8003634 <HAL_GPIO_TogglePin>
  sizeOfMessage=*Len;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	b2da      	uxtb	r2, r3
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <CDC_Receive_FS+0x60>)
 800807e:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008080:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	2000073c 	.word	0x2000073c
 8008090:	2000069c 	.word	0x2000069c
 8008094:	20000379 	.word	0x20000379
 8008098:	40011000 	.word	0x40011000
 800809c:	20000698 	.word	0x20000698

080080a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	460b      	mov	r3, r1
 80080aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080b0:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <CDC_Transmit_FS+0x48>)
 80080b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d001      	beq.n	80080c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080c2:	2301      	movs	r3, #1
 80080c4:	e00b      	b.n	80080de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080c6:	887b      	ldrh	r3, [r7, #2]
 80080c8:	461a      	mov	r2, r3
 80080ca:	6879      	ldr	r1, [r7, #4]
 80080cc:	4806      	ldr	r0, [pc, #24]	; (80080e8 <CDC_Transmit_FS+0x48>)
 80080ce:	f7fe fdf9 	bl	8006cc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080d2:	4805      	ldr	r0, [pc, #20]	; (80080e8 <CDC_Transmit_FS+0x48>)
 80080d4:	f7fe fe22 	bl	8006d1c <USBD_CDC_TransmitPacket>
 80080d8:	4603      	mov	r3, r0
 80080da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	2000073c 	.word	0x2000073c

080080ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2212      	movs	r2, #18
 80080fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080fe:	4b03      	ldr	r3, [pc, #12]	; (800810c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	2000014c 	.word	0x2000014c

08008110 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	2204      	movs	r2, #4
 8008120:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008122:	4b03      	ldr	r3, [pc, #12]	; (8008130 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008124:	4618      	mov	r0, r3
 8008126:	370c      	adds	r7, #12
 8008128:	46bd      	mov	sp, r7
 800812a:	bc80      	pop	{r7}
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	20000160 	.word	0x20000160

08008134 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008140:	79fb      	ldrb	r3, [r7, #7]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d105      	bne.n	8008152 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4907      	ldr	r1, [pc, #28]	; (8008168 <USBD_FS_ProductStrDescriptor+0x34>)
 800814a:	4808      	ldr	r0, [pc, #32]	; (800816c <USBD_FS_ProductStrDescriptor+0x38>)
 800814c:	f7ff fdef 	bl	8007d2e <USBD_GetString>
 8008150:	e004      	b.n	800815c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	4904      	ldr	r1, [pc, #16]	; (8008168 <USBD_FS_ProductStrDescriptor+0x34>)
 8008156:	4805      	ldr	r0, [pc, #20]	; (800816c <USBD_FS_ProductStrDescriptor+0x38>)
 8008158:	f7ff fde9 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 800815c:	4b02      	ldr	r3, [pc, #8]	; (8008168 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800815e:	4618      	mov	r0, r3
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	200011d0 	.word	0x200011d0
 800816c:	08008c3c 	.word	0x08008c3c

08008170 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	4603      	mov	r3, r0
 8008178:	6039      	str	r1, [r7, #0]
 800817a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800817c:	683a      	ldr	r2, [r7, #0]
 800817e:	4904      	ldr	r1, [pc, #16]	; (8008190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008180:	4804      	ldr	r0, [pc, #16]	; (8008194 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008182:	f7ff fdd4 	bl	8007d2e <USBD_GetString>
  return USBD_StrDesc;
 8008186:	4b02      	ldr	r3, [pc, #8]	; (8008190 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}
 8008190:	200011d0 	.word	0x200011d0
 8008194:	08008c3c 	.word	0x08008c3c

08008198 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	221a      	movs	r2, #26
 80081a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081aa:	f000 f843 	bl	8008234 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081ae:	4b02      	ldr	r3, [pc, #8]	; (80081b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	20000164 	.word	0x20000164

080081bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4907      	ldr	r1, [pc, #28]	; (80081f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081d2:	4808      	ldr	r0, [pc, #32]	; (80081f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081d4:	f7ff fdab 	bl	8007d2e <USBD_GetString>
 80081d8:	e004      	b.n	80081e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4904      	ldr	r1, [pc, #16]	; (80081f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081de:	4805      	ldr	r0, [pc, #20]	; (80081f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081e0:	f7ff fda5 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200011d0 	.word	0x200011d0
 80081f4:	08008c48 	.word	0x08008c48

080081f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008204:	79fb      	ldrb	r3, [r7, #7]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4907      	ldr	r1, [pc, #28]	; (800822c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800820e:	4808      	ldr	r0, [pc, #32]	; (8008230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008210:	f7ff fd8d 	bl	8007d2e <USBD_GetString>
 8008214:	e004      	b.n	8008220 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008216:	683a      	ldr	r2, [r7, #0]
 8008218:	4904      	ldr	r1, [pc, #16]	; (800822c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800821a:	4805      	ldr	r0, [pc, #20]	; (8008230 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800821c:	f7ff fd87 	bl	8007d2e <USBD_GetString>
  }
  return USBD_StrDesc;
 8008220:	4b02      	ldr	r3, [pc, #8]	; (800822c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	200011d0 	.word	0x200011d0
 8008230:	08008c54 	.word	0x08008c54

08008234 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800823a:	4b0f      	ldr	r3, [pc, #60]	; (8008278 <Get_SerialNum+0x44>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008240:	4b0e      	ldr	r3, [pc, #56]	; (800827c <Get_SerialNum+0x48>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008246:	4b0e      	ldr	r3, [pc, #56]	; (8008280 <Get_SerialNum+0x4c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4413      	add	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d009      	beq.n	800826e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800825a:	2208      	movs	r2, #8
 800825c:	4909      	ldr	r1, [pc, #36]	; (8008284 <Get_SerialNum+0x50>)
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f000 f814 	bl	800828c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008264:	2204      	movs	r2, #4
 8008266:	4908      	ldr	r1, [pc, #32]	; (8008288 <Get_SerialNum+0x54>)
 8008268:	68b8      	ldr	r0, [r7, #8]
 800826a:	f000 f80f 	bl	800828c <IntToUnicode>
  }
}
 800826e:	bf00      	nop
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	1ffff7e8 	.word	0x1ffff7e8
 800827c:	1ffff7ec 	.word	0x1ffff7ec
 8008280:	1ffff7f0 	.word	0x1ffff7f0
 8008284:	20000166 	.word	0x20000166
 8008288:	20000176 	.word	0x20000176

0800828c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800829e:	2300      	movs	r3, #0
 80082a0:	75fb      	strb	r3, [r7, #23]
 80082a2:	e027      	b.n	80082f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	0f1b      	lsrs	r3, r3, #28
 80082a8:	2b09      	cmp	r3, #9
 80082aa:	d80b      	bhi.n	80082c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	0f1b      	lsrs	r3, r3, #28
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4619      	mov	r1, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	440b      	add	r3, r1
 80082bc:	3230      	adds	r2, #48	; 0x30
 80082be:	b2d2      	uxtb	r2, r2
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e00a      	b.n	80082da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0f1b      	lsrs	r3, r3, #28
 80082c8:	b2da      	uxtb	r2, r3
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4619      	mov	r1, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	440b      	add	r3, r1
 80082d4:	3237      	adds	r2, #55	; 0x37
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	3301      	adds	r3, #1
 80082e6:	68ba      	ldr	r2, [r7, #8]
 80082e8:	4413      	add	r3, r2
 80082ea:	2200      	movs	r2, #0
 80082ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	3301      	adds	r3, #1
 80082f2:	75fb      	strb	r3, [r7, #23]
 80082f4:	7dfa      	ldrb	r2, [r7, #23]
 80082f6:	79fb      	ldrb	r3, [r7, #7]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d3d3      	bcc.n	80082a4 <IntToUnicode+0x18>
  }
}
 80082fc:	bf00      	nop
 80082fe:	371c      	adds	r7, #28
 8008300:	46bd      	mov	sp, r7
 8008302:	bc80      	pop	{r7}
 8008304:	4770      	bx	lr
	...

08008308 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a0d      	ldr	r2, [pc, #52]	; (800834c <HAL_PCD_MspInit+0x44>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d113      	bne.n	8008342 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800831a:	4b0d      	ldr	r3, [pc, #52]	; (8008350 <HAL_PCD_MspInit+0x48>)
 800831c:	69db      	ldr	r3, [r3, #28]
 800831e:	4a0c      	ldr	r2, [pc, #48]	; (8008350 <HAL_PCD_MspInit+0x48>)
 8008320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008324:	61d3      	str	r3, [r2, #28]
 8008326:	4b0a      	ldr	r3, [pc, #40]	; (8008350 <HAL_PCD_MspInit+0x48>)
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	2014      	movs	r0, #20
 8008338:	f7fa ffb7 	bl	80032aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800833c:	2014      	movs	r0, #20
 800833e:	f7fa ffd0 	bl	80032e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	40005c00 	.word	0x40005c00
 8008350:	40021000 	.word	0x40021000

08008354 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8008368:	4619      	mov	r1, r3
 800836a:	4610      	mov	r0, r2
 800836c:	f7fe fdbb 	bl	8006ee6 <USBD_LL_SetupStage>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	015b      	lsls	r3, r3, #5
 8008390:	4413      	add	r3, r2
 8008392:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	4619      	mov	r1, r3
 800839c:	f7fe fdee 	bl	8006f7c <USBD_LL_DataOutStage>
}
 80083a0:	bf00      	nop
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	015b      	lsls	r3, r3, #5
 80083c0:	4413      	add	r3, r2
 80083c2:	333c      	adds	r3, #60	; 0x3c
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	78fb      	ldrb	r3, [r7, #3]
 80083c8:	4619      	mov	r1, r3
 80083ca:	f7fe fe48 	bl	800705e <USBD_LL_DataInStage>
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}

080083d6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b082      	sub	sp, #8
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fe ff58 	bl	800729a <USBD_LL_SOF>
}
 80083ea:	bf00      	nop
 80083ec:	3708      	adds	r7, #8
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083fa:	2301      	movs	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d001      	beq.n	800840a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008406:	f7fa f87b 	bl	8002500 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008410:	7bfa      	ldrb	r2, [r7, #15]
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fe ff08 	bl	800722a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fec1 	bl	80071a8 <USBD_LL_Reset>
}
 8008426:	bf00      	nop
 8008428:	3710      	adds	r7, #16
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}
	...

08008430 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800843e:	4618      	mov	r0, r3
 8008440:	f7fe ff02 	bl	8007248 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <HAL_PCD_SuspendCallback+0x30>)
 800844e:	691b      	ldr	r3, [r3, #16]
 8008450:	4a03      	ldr	r2, [pc, #12]	; (8008460 <HAL_PCD_SuspendCallback+0x30>)
 8008452:	f043 0306 	orr.w	r3, r3, #6
 8008456:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008458:	bf00      	nop
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	e000ed00 	.word	0xe000ed00

08008464 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b082      	sub	sp, #8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008472:	4618      	mov	r0, r3
 8008474:	f7fe fefc 	bl	8007270 <USBD_LL_Resume>
}
 8008478:	bf00      	nop
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008488:	4a28      	ldr	r2, [pc, #160]	; (800852c <USBD_LL_Init+0xac>)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a26      	ldr	r2, [pc, #152]	; (800852c <USBD_LL_Init+0xac>)
 8008494:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008498:	4b24      	ldr	r3, [pc, #144]	; (800852c <USBD_LL_Init+0xac>)
 800849a:	4a25      	ldr	r2, [pc, #148]	; (8008530 <USBD_LL_Init+0xb0>)
 800849c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800849e:	4b23      	ldr	r3, [pc, #140]	; (800852c <USBD_LL_Init+0xac>)
 80084a0:	2208      	movs	r2, #8
 80084a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80084a4:	4b21      	ldr	r3, [pc, #132]	; (800852c <USBD_LL_Init+0xac>)
 80084a6:	2202      	movs	r2, #2
 80084a8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80084aa:	4b20      	ldr	r3, [pc, #128]	; (800852c <USBD_LL_Init+0xac>)
 80084ac:	2200      	movs	r2, #0
 80084ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80084b0:	4b1e      	ldr	r3, [pc, #120]	; (800852c <USBD_LL_Init+0xac>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80084b6:	4b1d      	ldr	r3, [pc, #116]	; (800852c <USBD_LL_Init+0xac>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084bc:	481b      	ldr	r0, [pc, #108]	; (800852c <USBD_LL_Init+0xac>)
 80084be:	f7fb f8d1 	bl	8003664 <HAL_PCD_Init>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d001      	beq.n	80084cc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084c8:	f7fa f81a 	bl	8002500 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084d2:	2318      	movs	r3, #24
 80084d4:	2200      	movs	r2, #0
 80084d6:	2100      	movs	r1, #0
 80084d8:	f7fb ff6a 	bl	80043b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084e2:	2358      	movs	r3, #88	; 0x58
 80084e4:	2200      	movs	r2, #0
 80084e6:	2180      	movs	r1, #128	; 0x80
 80084e8:	f7fb ff62 	bl	80043b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084f2:	23c0      	movs	r3, #192	; 0xc0
 80084f4:	2200      	movs	r2, #0
 80084f6:	2181      	movs	r1, #129	; 0x81
 80084f8:	f7fb ff5a 	bl	80043b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008502:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008506:	2200      	movs	r2, #0
 8008508:	2101      	movs	r1, #1
 800850a:	f7fb ff51 	bl	80043b0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008514:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008518:	2200      	movs	r2, #0
 800851a:	2182      	movs	r1, #130	; 0x82
 800851c:	f7fb ff48 	bl	80043b0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	200013d0 	.word	0x200013d0
 8008530:	40005c00 	.word	0x40005c00

08008534 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800854a:	4618      	mov	r0, r3
 800854c:	f7fb f96b 	bl	8003826 <HAL_PCD_Start>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f948 	bl	80087ec <USBD_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	4608      	mov	r0, r1
 8008574:	4611      	mov	r1, r2
 8008576:	461a      	mov	r2, r3
 8008578:	4603      	mov	r3, r0
 800857a:	70fb      	strb	r3, [r7, #3]
 800857c:	460b      	mov	r3, r1
 800857e:	70bb      	strb	r3, [r7, #2]
 8008580:	4613      	mov	r3, r2
 8008582:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008592:	78bb      	ldrb	r3, [r7, #2]
 8008594:	883a      	ldrh	r2, [r7, #0]
 8008596:	78f9      	ldrb	r1, [r7, #3]
 8008598:	f7fb fa9e 	bl	8003ad8 <HAL_PCD_EP_Open>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a0:	7bfb      	ldrb	r3, [r7, #15]
 80085a2:	4618      	mov	r0, r3
 80085a4:	f000 f922 	bl	80087ec <USBD_Get_USB_Status>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 80085ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}

080085b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b084      	sub	sp, #16
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	6078      	str	r0, [r7, #4]
 80085be:	460b      	mov	r3, r1
 80085c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	4611      	mov	r1, r2
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7fb fadf 	bl	8003b98 <HAL_PCD_EP_Close>
 80085da:	4603      	mov	r3, r0
 80085dc:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 f903 	bl	80087ec <USBD_Get_USB_Status>
 80085e6:	4603      	mov	r3, r0
 80085e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	460b      	mov	r3, r1
 80085fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008604:	2300      	movs	r3, #0
 8008606:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	4611      	mov	r1, r2
 8008612:	4618      	mov	r0, r3
 8008614:	f7fb fb89 	bl	8003d2a <HAL_PCD_EP_SetStall>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	4618      	mov	r0, r3
 8008620:	f000 f8e4 	bl	80087ec <USBD_Get_USB_Status>
 8008624:	4603      	mov	r3, r0
 8008626:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008628:	7bbb      	ldrb	r3, [r7, #14]
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	460b      	mov	r3, r1
 800863c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800864c:	78fa      	ldrb	r2, [r7, #3]
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f7fb fbc4 	bl	8003dde <HAL_PCD_EP_ClrStall>
 8008656:	4603      	mov	r3, r0
 8008658:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800865a:	7bfb      	ldrb	r3, [r7, #15]
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f8c5 	bl	80087ec <USBD_Get_USB_Status>
 8008662:	4603      	mov	r3, r0
 8008664:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008666:	7bbb      	ldrb	r3, [r7, #14]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008670:	b480      	push	{r7}
 8008672:	b085      	sub	sp, #20
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	460b      	mov	r3, r1
 800867a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008682:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008688:	2b00      	cmp	r3, #0
 800868a:	da08      	bge.n	800869e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800868c:	78fb      	ldrb	r3, [r7, #3]
 800868e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	015b      	lsls	r3, r3, #5
 8008696:	4413      	add	r3, r2
 8008698:	332a      	adds	r3, #42	; 0x2a
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	e008      	b.n	80086b0 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	015b      	lsls	r3, r3, #5
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80086ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3714      	adds	r7, #20
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bc80      	pop	{r7}
 80086b8:	4770      	bx	lr

080086ba <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fb f9d8 	bl	8003a8e <HAL_PCD_SetAddress>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f881 	bl	80087ec <USBD_Get_USB_Status>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	607a      	str	r2, [r7, #4]
 8008702:	461a      	mov	r2, r3
 8008704:	460b      	mov	r3, r1
 8008706:	72fb      	strb	r3, [r7, #11]
 8008708:	4613      	mov	r3, r2
 800870a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008710:	2300      	movs	r3, #0
 8008712:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800871a:	893b      	ldrh	r3, [r7, #8]
 800871c:	7af9      	ldrb	r1, [r7, #11]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	f7fb faca 	bl	8003cb8 <HAL_PCD_EP_Transmit>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008728:	7dfb      	ldrb	r3, [r7, #23]
 800872a:	4618      	mov	r0, r3
 800872c:	f000 f85e 	bl	80087ec <USBD_Get_USB_Status>
 8008730:	4603      	mov	r3, r0
 8008732:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008734:	7dbb      	ldrb	r3, [r7, #22]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3718      	adds	r7, #24
 800873a:	46bd      	mov	sp, r7
 800873c:	bd80      	pop	{r7, pc}

0800873e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800873e:	b580      	push	{r7, lr}
 8008740:	b086      	sub	sp, #24
 8008742:	af00      	add	r7, sp, #0
 8008744:	60f8      	str	r0, [r7, #12]
 8008746:	607a      	str	r2, [r7, #4]
 8008748:	461a      	mov	r2, r3
 800874a:	460b      	mov	r3, r1
 800874c:	72fb      	strb	r3, [r7, #11]
 800874e:	4613      	mov	r3, r2
 8008750:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008756:	2300      	movs	r3, #0
 8008758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008760:	893b      	ldrh	r3, [r7, #8]
 8008762:	7af9      	ldrb	r1, [r7, #11]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	f7fb fa59 	bl	8003c1c <HAL_PCD_EP_Receive>
 800876a:	4603      	mov	r3, r0
 800876c:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800876e:	7dfb      	ldrb	r3, [r7, #23]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 f83b 	bl	80087ec <USBD_Get_USB_Status>
 8008776:	4603      	mov	r3, r0
 8008778:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800877a:	7dbb      	ldrb	r3, [r7, #22]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	460b      	mov	r3, r1
 800878e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008796:	78fa      	ldrb	r2, [r7, #3]
 8008798:	4611      	mov	r1, r2
 800879a:	4618      	mov	r0, r3
 800879c:	f7fb fa78 	bl	8003c90 <HAL_PCD_EP_GetRxCount>
 80087a0:	4603      	mov	r3, r0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3708      	adds	r7, #8
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
	...

080087ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087b4:	4b02      	ldr	r3, [pc, #8]	; (80087c0 <USBD_static_malloc+0x14>)
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bc80      	pop	{r7}
 80087be:	4770      	bx	lr
 80087c0:	2000037c 	.word	0x2000037c

080087c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]

}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bc80      	pop	{r7}
 80087d4:	4770      	bx	lr

080087d6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	460b      	mov	r3, r1
 80087e0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80087e2:	bf00      	nop
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bc80      	pop	{r7}
 80087ea:	4770      	bx	lr

080087ec <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b085      	sub	sp, #20
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087fa:	79fb      	ldrb	r3, [r7, #7]
 80087fc:	2b03      	cmp	r3, #3
 80087fe:	d817      	bhi.n	8008830 <USBD_Get_USB_Status+0x44>
 8008800:	a201      	add	r2, pc, #4	; (adr r2, 8008808 <USBD_Get_USB_Status+0x1c>)
 8008802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008806:	bf00      	nop
 8008808:	08008819 	.word	0x08008819
 800880c:	0800881f 	.word	0x0800881f
 8008810:	08008825 	.word	0x08008825
 8008814:	0800882b 	.word	0x0800882b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	e00b      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	73fb      	strb	r3, [r7, #15]
    break;
 8008822:	e008      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008824:	2301      	movs	r3, #1
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	e005      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800882a:	2302      	movs	r3, #2
 800882c:	73fb      	strb	r3, [r7, #15]
    break;
 800882e:	e002      	b.n	8008836 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008830:	2302      	movs	r3, #2
 8008832:	73fb      	strb	r3, [r7, #15]
    break;
 8008834:	bf00      	nop
  }
  return usb_status;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	bc80      	pop	{r7}
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop

08008844 <abs>:
 8008844:	2800      	cmp	r0, #0
 8008846:	bfb8      	it	lt
 8008848:	4240      	neglt	r0, r0
 800884a:	4770      	bx	lr

0800884c <__errno>:
 800884c:	4b01      	ldr	r3, [pc, #4]	; (8008854 <__errno+0x8>)
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20000180 	.word	0x20000180

08008858 <__libc_init_array>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	2500      	movs	r5, #0
 800885c:	4e0c      	ldr	r6, [pc, #48]	; (8008890 <__libc_init_array+0x38>)
 800885e:	4c0d      	ldr	r4, [pc, #52]	; (8008894 <__libc_init_array+0x3c>)
 8008860:	1ba4      	subs	r4, r4, r6
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	42a5      	cmp	r5, r4
 8008866:	d109      	bne.n	800887c <__libc_init_array+0x24>
 8008868:	f000 f9d2 	bl	8008c10 <_init>
 800886c:	2500      	movs	r5, #0
 800886e:	4e0a      	ldr	r6, [pc, #40]	; (8008898 <__libc_init_array+0x40>)
 8008870:	4c0a      	ldr	r4, [pc, #40]	; (800889c <__libc_init_array+0x44>)
 8008872:	1ba4      	subs	r4, r4, r6
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	42a5      	cmp	r5, r4
 8008878:	d105      	bne.n	8008886 <__libc_init_array+0x2e>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008880:	4798      	blx	r3
 8008882:	3501      	adds	r5, #1
 8008884:	e7ee      	b.n	8008864 <__libc_init_array+0xc>
 8008886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800888a:	4798      	blx	r3
 800888c:	3501      	adds	r5, #1
 800888e:	e7f2      	b.n	8008876 <__libc_init_array+0x1e>
 8008890:	08008d84 	.word	0x08008d84
 8008894:	08008d84 	.word	0x08008d84
 8008898:	08008d84 	.word	0x08008d84
 800889c:	08008d88 	.word	0x08008d88

080088a0 <__locale_ctype_ptr>:
 80088a0:	4b04      	ldr	r3, [pc, #16]	; (80088b4 <__locale_ctype_ptr+0x14>)
 80088a2:	4a05      	ldr	r2, [pc, #20]	; (80088b8 <__locale_ctype_ptr+0x18>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6a1b      	ldr	r3, [r3, #32]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bf08      	it	eq
 80088ac:	4613      	moveq	r3, r2
 80088ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80088b2:	4770      	bx	lr
 80088b4:	20000180 	.word	0x20000180
 80088b8:	200001e4 	.word	0x200001e4

080088bc <malloc>:
 80088bc:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <malloc+0xc>)
 80088be:	4601      	mov	r1, r0
 80088c0:	6818      	ldr	r0, [r3, #0]
 80088c2:	f000 b829 	b.w	8008918 <_malloc_r>
 80088c6:	bf00      	nop
 80088c8:	20000180 	.word	0x20000180

080088cc <__ascii_mbtowc>:
 80088cc:	b082      	sub	sp, #8
 80088ce:	b901      	cbnz	r1, 80088d2 <__ascii_mbtowc+0x6>
 80088d0:	a901      	add	r1, sp, #4
 80088d2:	b142      	cbz	r2, 80088e6 <__ascii_mbtowc+0x1a>
 80088d4:	b14b      	cbz	r3, 80088ea <__ascii_mbtowc+0x1e>
 80088d6:	7813      	ldrb	r3, [r2, #0]
 80088d8:	600b      	str	r3, [r1, #0]
 80088da:	7812      	ldrb	r2, [r2, #0]
 80088dc:	1c10      	adds	r0, r2, #0
 80088de:	bf18      	it	ne
 80088e0:	2001      	movne	r0, #1
 80088e2:	b002      	add	sp, #8
 80088e4:	4770      	bx	lr
 80088e6:	4610      	mov	r0, r2
 80088e8:	e7fb      	b.n	80088e2 <__ascii_mbtowc+0x16>
 80088ea:	f06f 0001 	mvn.w	r0, #1
 80088ee:	e7f8      	b.n	80088e2 <__ascii_mbtowc+0x16>

080088f0 <memcpy>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	1e43      	subs	r3, r0, #1
 80088f4:	440a      	add	r2, r1
 80088f6:	4291      	cmp	r1, r2
 80088f8:	d100      	bne.n	80088fc <memcpy+0xc>
 80088fa:	bd10      	pop	{r4, pc}
 80088fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008904:	e7f7      	b.n	80088f6 <memcpy+0x6>

08008906 <memset>:
 8008906:	4603      	mov	r3, r0
 8008908:	4402      	add	r2, r0
 800890a:	4293      	cmp	r3, r2
 800890c:	d100      	bne.n	8008910 <memset+0xa>
 800890e:	4770      	bx	lr
 8008910:	f803 1b01 	strb.w	r1, [r3], #1
 8008914:	e7f9      	b.n	800890a <memset+0x4>
	...

08008918 <_malloc_r>:
 8008918:	b570      	push	{r4, r5, r6, lr}
 800891a:	1ccd      	adds	r5, r1, #3
 800891c:	f025 0503 	bic.w	r5, r5, #3
 8008920:	3508      	adds	r5, #8
 8008922:	2d0c      	cmp	r5, #12
 8008924:	bf38      	it	cc
 8008926:	250c      	movcc	r5, #12
 8008928:	2d00      	cmp	r5, #0
 800892a:	4606      	mov	r6, r0
 800892c:	db01      	blt.n	8008932 <_malloc_r+0x1a>
 800892e:	42a9      	cmp	r1, r5
 8008930:	d903      	bls.n	800893a <_malloc_r+0x22>
 8008932:	230c      	movs	r3, #12
 8008934:	6033      	str	r3, [r6, #0]
 8008936:	2000      	movs	r0, #0
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	f000 f864 	bl	8008a06 <__malloc_lock>
 800893e:	4a21      	ldr	r2, [pc, #132]	; (80089c4 <_malloc_r+0xac>)
 8008940:	6814      	ldr	r4, [r2, #0]
 8008942:	4621      	mov	r1, r4
 8008944:	b991      	cbnz	r1, 800896c <_malloc_r+0x54>
 8008946:	4c20      	ldr	r4, [pc, #128]	; (80089c8 <_malloc_r+0xb0>)
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	b91b      	cbnz	r3, 8008954 <_malloc_r+0x3c>
 800894c:	4630      	mov	r0, r6
 800894e:	f000 f83d 	bl	80089cc <_sbrk_r>
 8008952:	6020      	str	r0, [r4, #0]
 8008954:	4629      	mov	r1, r5
 8008956:	4630      	mov	r0, r6
 8008958:	f000 f838 	bl	80089cc <_sbrk_r>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d124      	bne.n	80089aa <_malloc_r+0x92>
 8008960:	230c      	movs	r3, #12
 8008962:	4630      	mov	r0, r6
 8008964:	6033      	str	r3, [r6, #0]
 8008966:	f000 f84f 	bl	8008a08 <__malloc_unlock>
 800896a:	e7e4      	b.n	8008936 <_malloc_r+0x1e>
 800896c:	680b      	ldr	r3, [r1, #0]
 800896e:	1b5b      	subs	r3, r3, r5
 8008970:	d418      	bmi.n	80089a4 <_malloc_r+0x8c>
 8008972:	2b0b      	cmp	r3, #11
 8008974:	d90f      	bls.n	8008996 <_malloc_r+0x7e>
 8008976:	600b      	str	r3, [r1, #0]
 8008978:	18cc      	adds	r4, r1, r3
 800897a:	50cd      	str	r5, [r1, r3]
 800897c:	4630      	mov	r0, r6
 800897e:	f000 f843 	bl	8008a08 <__malloc_unlock>
 8008982:	f104 000b 	add.w	r0, r4, #11
 8008986:	1d23      	adds	r3, r4, #4
 8008988:	f020 0007 	bic.w	r0, r0, #7
 800898c:	1ac3      	subs	r3, r0, r3
 800898e:	d0d3      	beq.n	8008938 <_malloc_r+0x20>
 8008990:	425a      	negs	r2, r3
 8008992:	50e2      	str	r2, [r4, r3]
 8008994:	e7d0      	b.n	8008938 <_malloc_r+0x20>
 8008996:	684b      	ldr	r3, [r1, #4]
 8008998:	428c      	cmp	r4, r1
 800899a:	bf16      	itet	ne
 800899c:	6063      	strne	r3, [r4, #4]
 800899e:	6013      	streq	r3, [r2, #0]
 80089a0:	460c      	movne	r4, r1
 80089a2:	e7eb      	b.n	800897c <_malloc_r+0x64>
 80089a4:	460c      	mov	r4, r1
 80089a6:	6849      	ldr	r1, [r1, #4]
 80089a8:	e7cc      	b.n	8008944 <_malloc_r+0x2c>
 80089aa:	1cc4      	adds	r4, r0, #3
 80089ac:	f024 0403 	bic.w	r4, r4, #3
 80089b0:	42a0      	cmp	r0, r4
 80089b2:	d005      	beq.n	80089c0 <_malloc_r+0xa8>
 80089b4:	1a21      	subs	r1, r4, r0
 80089b6:	4630      	mov	r0, r6
 80089b8:	f000 f808 	bl	80089cc <_sbrk_r>
 80089bc:	3001      	adds	r0, #1
 80089be:	d0cf      	beq.n	8008960 <_malloc_r+0x48>
 80089c0:	6025      	str	r5, [r4, #0]
 80089c2:	e7db      	b.n	800897c <_malloc_r+0x64>
 80089c4:	2000059c 	.word	0x2000059c
 80089c8:	200005a0 	.word	0x200005a0

080089cc <_sbrk_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	2300      	movs	r3, #0
 80089d0:	4c05      	ldr	r4, [pc, #20]	; (80089e8 <_sbrk_r+0x1c>)
 80089d2:	4605      	mov	r5, r0
 80089d4:	4608      	mov	r0, r1
 80089d6:	6023      	str	r3, [r4, #0]
 80089d8:	f7f9 fee0 	bl	800279c <_sbrk>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d102      	bne.n	80089e6 <_sbrk_r+0x1a>
 80089e0:	6823      	ldr	r3, [r4, #0]
 80089e2:	b103      	cbz	r3, 80089e6 <_sbrk_r+0x1a>
 80089e4:	602b      	str	r3, [r5, #0]
 80089e6:	bd38      	pop	{r3, r4, r5, pc}
 80089e8:	2000163c 	.word	0x2000163c

080089ec <__ascii_wctomb>:
 80089ec:	b149      	cbz	r1, 8008a02 <__ascii_wctomb+0x16>
 80089ee:	2aff      	cmp	r2, #255	; 0xff
 80089f0:	bf8b      	itete	hi
 80089f2:	238a      	movhi	r3, #138	; 0x8a
 80089f4:	700a      	strbls	r2, [r1, #0]
 80089f6:	6003      	strhi	r3, [r0, #0]
 80089f8:	2001      	movls	r0, #1
 80089fa:	bf88      	it	hi
 80089fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a00:	4770      	bx	lr
 8008a02:	4608      	mov	r0, r1
 8008a04:	4770      	bx	lr

08008a06 <__malloc_lock>:
 8008a06:	4770      	bx	lr

08008a08 <__malloc_unlock>:
 8008a08:	4770      	bx	lr
	...

08008a0c <sqrt>:
 8008a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a10:	b08b      	sub	sp, #44	; 0x2c
 8008a12:	4604      	mov	r4, r0
 8008a14:	460d      	mov	r5, r1
 8008a16:	f000 f84d 	bl	8008ab4 <__ieee754_sqrt>
 8008a1a:	4b24      	ldr	r3, [pc, #144]	; (8008aac <sqrt+0xa0>)
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	f993 a000 	ldrsb.w	sl, [r3]
 8008a22:	4689      	mov	r9, r1
 8008a24:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008a28:	d02b      	beq.n	8008a82 <sqrt+0x76>
 8008a2a:	4622      	mov	r2, r4
 8008a2c:	462b      	mov	r3, r5
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 ffe3 	bl	80009fc <__aeabi_dcmpun>
 8008a36:	4683      	mov	fp, r0
 8008a38:	bb18      	cbnz	r0, 8008a82 <sqrt+0x76>
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	2700      	movs	r7, #0
 8008a3e:	4632      	mov	r2, r6
 8008a40:	463b      	mov	r3, r7
 8008a42:	4620      	mov	r0, r4
 8008a44:	4629      	mov	r1, r5
 8008a46:	f7f7 ffb1 	bl	80009ac <__aeabi_dcmplt>
 8008a4a:	b1d0      	cbz	r0, 8008a82 <sqrt+0x76>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	9300      	str	r3, [sp, #0]
 8008a50:	4b17      	ldr	r3, [pc, #92]	; (8008ab0 <sqrt+0xa4>)
 8008a52:	f8cd b020 	str.w	fp, [sp, #32]
 8008a56:	9301      	str	r3, [sp, #4]
 8008a58:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008a5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008a60:	f1ba 0f00 	cmp.w	sl, #0
 8008a64:	d112      	bne.n	8008a8c <sqrt+0x80>
 8008a66:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008a6a:	4668      	mov	r0, sp
 8008a6c:	f000 f8ce 	bl	8008c0c <matherr>
 8008a70:	b1b8      	cbz	r0, 8008aa2 <sqrt+0x96>
 8008a72:	9b08      	ldr	r3, [sp, #32]
 8008a74:	b11b      	cbz	r3, 8008a7e <sqrt+0x72>
 8008a76:	f7ff fee9 	bl	800884c <__errno>
 8008a7a:	9b08      	ldr	r3, [sp, #32]
 8008a7c:	6003      	str	r3, [r0, #0]
 8008a7e:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	b00b      	add	sp, #44	; 0x2c
 8008a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8c:	4632      	mov	r2, r6
 8008a8e:	463b      	mov	r3, r7
 8008a90:	4630      	mov	r0, r6
 8008a92:	4639      	mov	r1, r7
 8008a94:	f7f7 fe42 	bl	800071c <__aeabi_ddiv>
 8008a98:	f1ba 0f02 	cmp.w	sl, #2
 8008a9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008aa0:	d1e3      	bne.n	8008a6a <sqrt+0x5e>
 8008aa2:	f7ff fed3 	bl	800884c <__errno>
 8008aa6:	2321      	movs	r3, #33	; 0x21
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	e7e2      	b.n	8008a72 <sqrt+0x66>
 8008aac:	20000350 	.word	0x20000350
 8008ab0:	08008d7f 	.word	0x08008d7f

08008ab4 <__ieee754_sqrt>:
 8008ab4:	4b54      	ldr	r3, [pc, #336]	; (8008c08 <__ieee754_sqrt+0x154>)
 8008ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aba:	438b      	bics	r3, r1
 8008abc:	4606      	mov	r6, r0
 8008abe:	460d      	mov	r5, r1
 8008ac0:	460a      	mov	r2, r1
 8008ac2:	460c      	mov	r4, r1
 8008ac4:	d10f      	bne.n	8008ae6 <__ieee754_sqrt+0x32>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	f7f7 fcfd 	bl	80004c8 <__aeabi_dmul>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	4630      	mov	r0, r6
 8008ad4:	4629      	mov	r1, r5
 8008ad6:	f7f7 fb41 	bl	800015c <__adddf3>
 8008ada:	4606      	mov	r6, r0
 8008adc:	460d      	mov	r5, r1
 8008ade:	4630      	mov	r0, r6
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae6:	2900      	cmp	r1, #0
 8008ae8:	4607      	mov	r7, r0
 8008aea:	4603      	mov	r3, r0
 8008aec:	dc0e      	bgt.n	8008b0c <__ieee754_sqrt+0x58>
 8008aee:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008af2:	ea5c 0707 	orrs.w	r7, ip, r7
 8008af6:	d0f2      	beq.n	8008ade <__ieee754_sqrt+0x2a>
 8008af8:	b141      	cbz	r1, 8008b0c <__ieee754_sqrt+0x58>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	f7f7 fb2b 	bl	8000158 <__aeabi_dsub>
 8008b02:	4602      	mov	r2, r0
 8008b04:	460b      	mov	r3, r1
 8008b06:	f7f7 fe09 	bl	800071c <__aeabi_ddiv>
 8008b0a:	e7e6      	b.n	8008ada <__ieee754_sqrt+0x26>
 8008b0c:	1512      	asrs	r2, r2, #20
 8008b0e:	d074      	beq.n	8008bfa <__ieee754_sqrt+0x146>
 8008b10:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008b14:	07d5      	lsls	r5, r2, #31
 8008b16:	f04f 0500 	mov.w	r5, #0
 8008b1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b1e:	bf48      	it	mi
 8008b20:	0fd9      	lsrmi	r1, r3, #31
 8008b22:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008b26:	bf44      	itt	mi
 8008b28:	005b      	lslmi	r3, r3, #1
 8008b2a:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008b2e:	1051      	asrs	r1, r2, #1
 8008b30:	0fda      	lsrs	r2, r3, #31
 8008b32:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008b36:	4628      	mov	r0, r5
 8008b38:	2216      	movs	r2, #22
 8008b3a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008b3e:	005b      	lsls	r3, r3, #1
 8008b40:	1987      	adds	r7, r0, r6
 8008b42:	42a7      	cmp	r7, r4
 8008b44:	bfde      	ittt	le
 8008b46:	19b8      	addle	r0, r7, r6
 8008b48:	1be4      	suble	r4, r4, r7
 8008b4a:	19ad      	addle	r5, r5, r6
 8008b4c:	0fdf      	lsrs	r7, r3, #31
 8008b4e:	3a01      	subs	r2, #1
 8008b50:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008b58:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008b5c:	d1f0      	bne.n	8008b40 <__ieee754_sqrt+0x8c>
 8008b5e:	f04f 0c20 	mov.w	ip, #32
 8008b62:	4696      	mov	lr, r2
 8008b64:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008b68:	4284      	cmp	r4, r0
 8008b6a:	eb06 070e 	add.w	r7, r6, lr
 8008b6e:	dc02      	bgt.n	8008b76 <__ieee754_sqrt+0xc2>
 8008b70:	d112      	bne.n	8008b98 <__ieee754_sqrt+0xe4>
 8008b72:	429f      	cmp	r7, r3
 8008b74:	d810      	bhi.n	8008b98 <__ieee754_sqrt+0xe4>
 8008b76:	2f00      	cmp	r7, #0
 8008b78:	eb07 0e06 	add.w	lr, r7, r6
 8008b7c:	da42      	bge.n	8008c04 <__ieee754_sqrt+0x150>
 8008b7e:	f1be 0f00 	cmp.w	lr, #0
 8008b82:	db3f      	blt.n	8008c04 <__ieee754_sqrt+0x150>
 8008b84:	f100 0801 	add.w	r8, r0, #1
 8008b88:	1a24      	subs	r4, r4, r0
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	429f      	cmp	r7, r3
 8008b8e:	bf88      	it	hi
 8008b90:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008b94:	1bdb      	subs	r3, r3, r7
 8008b96:	4432      	add	r2, r6
 8008b98:	0064      	lsls	r4, r4, #1
 8008b9a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008b9e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008ba2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ba6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008baa:	d1dd      	bne.n	8008b68 <__ieee754_sqrt+0xb4>
 8008bac:	4323      	orrs	r3, r4
 8008bae:	d006      	beq.n	8008bbe <__ieee754_sqrt+0x10a>
 8008bb0:	1c54      	adds	r4, r2, #1
 8008bb2:	bf0b      	itete	eq
 8008bb4:	4662      	moveq	r2, ip
 8008bb6:	3201      	addne	r2, #1
 8008bb8:	3501      	addeq	r5, #1
 8008bba:	f022 0201 	bicne.w	r2, r2, #1
 8008bbe:	106b      	asrs	r3, r5, #1
 8008bc0:	0852      	lsrs	r2, r2, #1
 8008bc2:	07e8      	lsls	r0, r5, #31
 8008bc4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008bc8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008bcc:	bf48      	it	mi
 8008bce:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008bd2:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008bd6:	4616      	mov	r6, r2
 8008bd8:	e781      	b.n	8008ade <__ieee754_sqrt+0x2a>
 8008bda:	0adc      	lsrs	r4, r3, #11
 8008bdc:	3915      	subs	r1, #21
 8008bde:	055b      	lsls	r3, r3, #21
 8008be0:	2c00      	cmp	r4, #0
 8008be2:	d0fa      	beq.n	8008bda <__ieee754_sqrt+0x126>
 8008be4:	02e6      	lsls	r6, r4, #11
 8008be6:	d50a      	bpl.n	8008bfe <__ieee754_sqrt+0x14a>
 8008be8:	f1c2 0020 	rsb	r0, r2, #32
 8008bec:	fa23 f000 	lsr.w	r0, r3, r0
 8008bf0:	1e55      	subs	r5, r2, #1
 8008bf2:	4093      	lsls	r3, r2
 8008bf4:	4304      	orrs	r4, r0
 8008bf6:	1b4a      	subs	r2, r1, r5
 8008bf8:	e78a      	b.n	8008b10 <__ieee754_sqrt+0x5c>
 8008bfa:	4611      	mov	r1, r2
 8008bfc:	e7f0      	b.n	8008be0 <__ieee754_sqrt+0x12c>
 8008bfe:	0064      	lsls	r4, r4, #1
 8008c00:	3201      	adds	r2, #1
 8008c02:	e7ef      	b.n	8008be4 <__ieee754_sqrt+0x130>
 8008c04:	4680      	mov	r8, r0
 8008c06:	e7bf      	b.n	8008b88 <__ieee754_sqrt+0xd4>
 8008c08:	7ff00000 	.word	0x7ff00000

08008c0c <matherr>:
 8008c0c:	2000      	movs	r0, #0
 8008c0e:	4770      	bx	lr

08008c10 <_init>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr

08008c1c <_fini>:
 8008c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c1e:	bf00      	nop
 8008c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c22:	bc08      	pop	{r3}
 8008c24:	469e      	mov	lr, r3
 8008c26:	4770      	bx	lr
