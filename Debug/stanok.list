
stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080090b4  080090b4  000190b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009210  08009210  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08009210  08009210  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009210  08009210  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08009218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  20000354  0800956c  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001644  0800956c  00021644  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac1a  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003e5a  00000000  00000000  0003af97  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001338  00000000  00000000  0003edf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001160  00000000  00000000  00040130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018efa  00000000  00000000  00041290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000123a1  00000000  00000000  0005a18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000781c8  00000000  00000000  0006c52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e46f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005420  00000000  00000000  000e4770  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	0800909c 	.word	0x0800909c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	0800909c 	.word	0x0800909c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <parseCodeString>:
 */

#include "GParser.h"


void parseCodeString(char *array, char len){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	switch(array[2]){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b47      	cmp	r3, #71	; 0x47
 8001160:	d002      	beq.n	8001168 <parseCodeString+0x1c>
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d00a      	beq.n	800117c <parseCodeString+0x30>
			parseMCode(array+3,len-1);
			break;
		}
		default:{

			break;
 8001166:	e013      	b.n	8001190 <parseCodeString+0x44>
			parseGCode(array+3,len-1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1cda      	adds	r2, r3, #3
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 f80f 	bl	8001198 <parseGCode>
			break;
 800117a:	e009      	b.n	8001190 <parseCodeString+0x44>
			parseMCode(array+3,len-1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1cda      	adds	r2, r3, #3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3b01      	subs	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 f9eb 	bl	8001564 <parseMCode>
			break;
 800118e:	bf00      	nop
		}
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <parseGCode>:
//////////////////////////////////////////////////////////////////////
void parseGCode(char *array, char len){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	//в массиве строка в коде ASCII. первые 2 байта команда G, далее аргументы через пробелы

	struct driversComand comand;
	comand.GCode=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
	comand.posX=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	comand.posY=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	comand.posZ=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	comand.F=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	comand.R=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	comand.valid=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	comand.I=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	comand.J=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	char ok=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	float result=0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int pos=-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38

	//читаем номер команды
	int tmp=(int)(array[0]);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 80011e0:	f007 fda4 	bl	8008d2c <__locale_ctype_ptr>
 80011e4:	4602      	mov	r2, r0
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 81b0 	beq.w	8001558 <parseGCode+0x3c0>
		comand.GCode=(char)(stringToInt(array,2,&ok)/100);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	461a      	mov	r2, r3
 80011fe:	2102      	movs	r1, #2
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9dd 	bl	80015c0 <stringToInt>
 8001206:	4603      	mov	r3, r0
 8001208:	4a89      	ldr	r2, [pc, #548]	; (8001430 <parseGCode+0x298>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1152      	asrs	r2, r2, #5
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	743b      	strb	r3, [r7, #16]
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}

	//читаем координату Х
	pos = findInString(array,'X',len);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	2158      	movs	r1, #88	; 0x58
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 facd 	bl	80017be <findInString>
 8001224:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d027      	beq.n	800127e <parseGCode+0xe6>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	3301      	adds	r3, #1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001238:	b2db      	uxtb	r3, r3
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f107 020f 	add.w	r2, r7, #15
 8001244:	4619      	mov	r1, r3
 8001246:	f000 f9bb 	bl	80015c0 <stringToInt>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd1d 	bl	8000c8c <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <parseGCode+0xe6>
			comand.posX = result/10;
 800125c:	4975      	ldr	r1, [pc, #468]	; (8001434 <parseGCode+0x29c>)
 800125e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001260:	f7ff fe1c 	bl	8000e9c <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff2a 	bl	80010c0 <__aeabi_f2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	617b      	str	r3, [r7, #20]
			comand.valid |= (1<<0);
 8001270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Y
	pos = findInString(array,'Y',len);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	461a      	mov	r2, r3
 8001282:	2159      	movs	r1, #89	; 0x59
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa9a 	bl	80017be <findInString>
 800128a:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d027      	beq.n	80012e4 <parseGCode+0x14c>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	3301      	adds	r3, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d0      	adds	r0, r2, r3
 800129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 020f 	add.w	r2, r7, #15
 80012aa:	4619      	mov	r1, r3
 80012ac:	f000 f988 	bl	80015c0 <stringToInt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcea 	bl	8000c8c <__aeabi_i2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <parseGCode+0x14c>
			comand.posY = result/10;
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <parseGCode+0x29c>)
 80012c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c6:	f7ff fde9 	bl	8000e9c <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef7 	bl	80010c0 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
			comand.valid |= (1<<1);
 80012d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Z
	pos = findInString(array,'Z',len);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	215a      	movs	r1, #90	; 0x5a
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa67 	bl	80017be <findInString>
 80012f0:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d027      	beq.n	800134a <parseGCode+0x1b2>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80012fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fc:	3301      	adds	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	18d0      	adds	r0, r2, r3
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	b2db      	uxtb	r3, r3
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f107 020f 	add.w	r2, r7, #15
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f955 	bl	80015c0 <stringToInt>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb7 	bl	8000c8c <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <parseGCode+0x1b2>
			comand.posZ = result/10;
 8001328:	4942      	ldr	r1, [pc, #264]	; (8001434 <parseGCode+0x29c>)
 800132a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800132c:	f7ff fdb6 	bl	8000e9c <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec4 	bl	80010c0 <__aeabi_f2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	61fb      	str	r3, [r7, #28]
			comand.valid |= (1<<2);
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем F
	pos = findInString(array,'F',len);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fa34 	bl	80017be <findInString>
 8001356:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d022      	beq.n	80013a6 <parseGCode+0x20e>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	3301      	adds	r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d0      	adds	r0, r2, r3
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b2db      	uxtb	r3, r3
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f107 020f 	add.w	r2, r7, #15
 8001376:	4619      	mov	r1, r3
 8001378:	f000 f922 	bl	80015c0 <stringToInt>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc84 	bl	8000c8c <__aeabi_i2f>
 8001384:	4603      	mov	r3, r0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <parseGCode+0x20e>
			comand.F = result;
 800138e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001390:	f7ff fe96 	bl	80010c0 <__aeabi_f2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	623b      	str	r3, [r7, #32]
			comand.valid |= (1<<3);
 8001398:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем R
	pos = findInString(array,'R',len);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa06 	bl	80017be <findInString>
 80013b2:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d03d      	beq.n	8001438 <parseGCode+0x2a0>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	3301      	adds	r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d0      	adds	r0, r2, r3
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f107 020f 	add.w	r2, r7, #15
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f8f4 	bl	80015c0 <stringToInt>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc56 	bl	8000c8c <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a9 	beq.w	800153e <parseGCode+0x3a6>
			if(result < 0){//радиус не может быть отрицательным
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f2:	f7ff fe3d 	bl	8001070 <__aeabi_fcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <parseGCode+0x272>
				result = 0 - result;
 80013fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	f7ff fb8d 	bl	8000b20 <__aeabi_fsub>
 8001406:	4603      	mov	r3, r0
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			comand.R = result/10;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <parseGCode+0x29c>)
 800140c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800140e:	f7ff fd45 	bl	8000e9c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe53 	bl	80010c0 <__aeabi_f2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
			comand.valid |= (1<<4);
 800141e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800142c:	e087      	b.n	800153e <parseGCode+0x3a6>
 800142e:	bf00      	nop
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	41200000 	.word	0x41200000
		}
	}
	else{
		//читаем I
		pos = findInString(array,'I',len);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	2149      	movs	r1, #73	; 0x49
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9bd 	bl	80017be <findInString>
 8001444:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 8001446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d027      	beq.n	800149e <parseGCode+0x306>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 800144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001450:	3301      	adds	r3, #1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	18d0      	adds	r0, r2, r3
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	b2db      	uxtb	r3, r3
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f107 020f 	add.w	r2, r7, #15
 8001464:	4619      	mov	r1, r3
 8001466:	f000 f8ab 	bl	80015c0 <stringToInt>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc0d 	bl	8000c8c <__aeabi_i2f>
 8001472:	4603      	mov	r3, r0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <parseGCode+0x306>
				comand.I = result/10;
 800147c:	4938      	ldr	r1, [pc, #224]	; (8001560 <parseGCode+0x3c8>)
 800147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001480:	f7ff fd0c 	bl	8000e9c <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe1a 	bl	80010c0 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
				comand.valid |= (1<<5);
 8001490:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}

		//читаем J
		pos = findInString(array,'J',len);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	214a      	movs	r1, #74	; 0x4a
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f98a 	bl	80017be <findInString>
 80014aa:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d027      	beq.n	8001504 <parseGCode+0x36c>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	18d0      	adds	r0, r2, r3
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f107 020f 	add.w	r2, r7, #15
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 f878 	bl	80015c0 <stringToInt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fbda 	bl	8000c8c <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <parseGCode+0x36c>
				comand.J = result/10;
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <parseGCode+0x3c8>)
 80014e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014e6:	f7ff fcd9 	bl	8000e9c <__aeabi_fdiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_f2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				comand.valid |= (1<<6);
 80014f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}
		comand.R=abs(sqrt(comand.I*comand.I + comand.J*comand.J));
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	fb02 f203 	mul.w	r2, r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff6c 	bl	80003f4 <__aeabi_i2d>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	f007 fcb8 	bl	8008e98 <sqrt>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	4618      	mov	r0, r3
 800152e:	4621      	mov	r1, r4
 8001530:	f7ff fa7a 	bl	8000a28 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
	}
	executeGComand(comand);
 800153e:	466d      	mov	r5, sp
 8001540:	f107 0420 	add.w	r4, r7, #32
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	f000 f995 	bl	8001880 <executeGComand>
 8001556:	e000      	b.n	800155a <parseGCode+0x3c2>
		return;
 8001558:	bf00      	nop
}
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	41200000 	.word	0x41200000

08001564 <parseMCode>:
////////////////////////////////////////////////////////////////////////
void parseMCode(char *array, char len){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	struct MComand comand;
	char ok=0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

	//читаем номер команды
	int tmp=(int)(array[0]);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	617b      	str	r3, [r7, #20]
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 800157a:	f007 fbd7 	bl	8008d2c <__locale_ctype_ptr>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <parseMCode+0x52>
		comand.MCode=(char)(stringToInt(array,2,&ok)/100);
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	461a      	mov	r2, r3
 8001596:	2102      	movs	r1, #2
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f811 	bl	80015c0 <stringToInt>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <parseMCode+0x58>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1152      	asrs	r2, r2, #5
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	743b      	strb	r3, [r7, #16]
		executeMComand(comand);
 80015b0:	7c38      	ldrb	r0, [r7, #16]
 80015b2:	f000 fbad 	bl	8001d10 <executeMComand>
	}
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}
}
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	51eb851f 	.word	0x51eb851f

080015c0 <stringToInt>:
//////////////////////////////////////////////////////////////////////////
int stringToInt(char *string, char len, char *ok){
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08d      	sub	sp, #52	; 0x34
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	460b      	mov	r3, r1
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	72fb      	strb	r3, [r7, #11]
	int endPos=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pointPos=len;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
	int result=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	char minus=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 80015e0:	e042      	b.n	8001668 <stringToInt+0xa8>
		if(isByteDigit(string[endPos]) == 0){
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8d4 	bl	8001798 <isByteDigit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d135      	bne.n	8001662 <stringToInt+0xa2>
			if(string[endPos] == 46){//проверяем на десятичную точку (46 - ASCII код точки)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d10b      	bne.n	800161a <stringToInt+0x5a>
				if(pointPos == len){//если раньше точка не встречалась
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <stringToInt+0x50>
					pointPos=endPos;//то запоминаем позицию
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	e028      	b.n	8001662 <stringToInt+0xa2>
				}
				else{//если на точку уже натыкались, то в строке ошибка
					*ok=0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
					return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e0b1      	b.n	800177e <stringToInt+0x1be>
				}
			}
			else if(string[endPos] == 45){//если минус (45 - ASCII код минуса)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b2d      	cmp	r3, #45	; 0x2d
 8001624:	d10c      	bne.n	8001640 <stringToInt+0x80>
				if(minus != 0){//если минус уже встречался, то в строке ошибка
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <stringToInt+0x78>
					*ok=0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
					return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e0a2      	b.n	800177e <stringToInt+0x1be>
				}
				minus=1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800163e:	e010      	b.n	8001662 <stringToInt+0xa2>
			}
			else if(string[endPos] == 32){//если пробел (32 - ASCII код пробела)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b20      	cmp	r3, #32
 800164a:	d012      	beq.n	8001672 <stringToInt+0xb2>
				break;//то прерываемся
			}
			else if(string[endPos] == 10){//если конец строки (10 - ASCII код конца строки)
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d00e      	beq.n	8001676 <stringToInt+0xb6>
				break;//то прерываемся
			}
			else{//если символ не цифра и не точка, то в строке ошибка
				*ok=0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e08d      	b.n	800177e <stringToInt+0x1be>
	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	3301      	adds	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d1b8      	bne.n	80015e2 <stringToInt+0x22>
 8001670:	e002      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001672:	bf00      	nop
 8001674:	e000      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001676:	bf00      	nop
			}
		}
	}
	if(pointPos==len){//точка в строке так и не встретилась,
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	429a      	cmp	r2, r3
 800167e:	d101      	bne.n	8001684 <stringToInt+0xc4>
		pointPos=endPos;//то её позиция в конце числа
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(endPos!=0){
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d069      	beq.n	800175e <stringToInt+0x19e>
		float multiplier=100;
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <stringToInt+0x1d0>)
 800168c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e025      	b.n	80016e0 <stringToInt+0x120>
			result += (string[n-1]-48)*multiplier;
 8001694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001696:	f7ff faf9 	bl	8000c8c <__aeabi_i2f>
 800169a:	4604      	mov	r4, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faef 	bl	8000c8c <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb3e 	bl	8000d34 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa31 	bl	8000b24 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcfb 	bl	80010c0 <__aeabi_f2iz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=10;
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <stringToInt+0x1d4>)
 80016d0:	69f8      	ldr	r0, [r7, #28]
 80016d2:	f7ff fb2f 	bl	8000d34 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3b01      	subs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d1d4      	bne.n	8001694 <stringToInt+0xd4>
		}

		multiplier=10;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <stringToInt+0x1d4>)
 80016ec:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e02e      	b.n	8001754 <stringToInt+0x194>
			result += (string[n]-48)*multiplier;
 80016f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016f8:	f7ff fac8 	bl	8000c8c <__aeabi_i2f>
 80016fc:	4604      	mov	r4, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b30      	subs	r3, #48	; 0x30
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fabf 	bl	8000c8c <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb0e 	bl	8000d34 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa01 	bl	8000b24 <__addsf3>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fccb 	bl	80010c0 <__aeabi_f2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=0.1;
 800172e:	69f8      	ldr	r0, [r7, #28]
 8001730:	f7fe fe72 	bl	8000418 <__aeabi_f2d>
 8001734:	a314      	add	r3, pc, #80	; (adr r3, 8001788 <stringToInt+0x1c8>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe fec5 	bl	80004c8 <__aeabi_dmul>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	dbcc      	blt.n	80016f6 <stringToInt+0x136>
 800175c:	e004      	b.n	8001768 <stringToInt+0x1a8>
		}
	}
	else{
		*ok=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e00a      	b.n	800177e <stringToInt+0x1be>
	}
	if(minus != 0){
 8001768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <stringToInt+0x1b6>
		result = 0 - result;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	425b      	negs	r3, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*ok=1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	return result;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800177e:	4618      	mov	r0, r3
 8001780:	3734      	adds	r7, #52	; 0x34
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	9999999a 	.word	0x9999999a
 800178c:	3fb99999 	.word	0x3fb99999
 8001790:	42c80000 	.word	0x42c80000
 8001794:	41200000 	.word	0x41200000

08001798 <isByteDigit>:
//////////////////////////////////////////////////////////////////////////////////
char isByteDigit(char byte){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	if((byte >=48) && (byte<=57)){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b2f      	cmp	r3, #47	; 0x2f
 80017a6:	d904      	bls.n	80017b2 <isByteDigit+0x1a>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b39      	cmp	r3, #57	; 0x39
 80017ac:	d801      	bhi.n	80017b2 <isByteDigit+0x1a>
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <isByteDigit+0x1c>
	}
	return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <findInString>:
////////////////////////////////////////////////////////////////////////////////////
int findInString(char *string, char symbol, char len){
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	for(int n=0; n!=len; n++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e00b      	b.n	80017ec <findInString+0x2e>
		if(string[n] == symbol){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <findInString+0x28>
			return n;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e008      	b.n	80017f8 <findInString+0x3a>
	for(int n=0; n!=len; n++){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1ef      	bne.n	80017d4 <findInString+0x16>
		}
	}
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <initDrives>:


#include "drive.h"


void initDrives(){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	positionX=0;
 8001808:	4b12      	ldr	r3, [pc, #72]	; (8001854 <initDrives+0x50>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
	positionY=0;
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <initDrives+0x54>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	positionZ=0;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <initDrives+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	stepsCounterX=0;
 800181a:	4b11      	ldr	r3, [pc, #68]	; (8001860 <initDrives+0x5c>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	stepsCounterY=0;
 8001820:	4b10      	ldr	r3, [pc, #64]	; (8001864 <initDrives+0x60>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	stepsCounterZ=0;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <initDrives+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	timerDivider=0;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <initDrives+0x68>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

	zeroPointX=0;
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <initDrives+0x6c>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
	zeroPointY=0;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <initDrives+0x70>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

	lastF=0;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <initDrives+0x74>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

	relCoordinates=0;//по умолчанию координаты абсолютные
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <initDrives+0x78>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]

}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200005a8 	.word	0x200005a8
 8001858:	200005c8 	.word	0x200005c8
 800185c:	200005a4 	.word	0x200005a4
 8001860:	200005a0 	.word	0x200005a0
 8001864:	200005c0 	.word	0x200005c0
 8001868:	200005b4 	.word	0x200005b4
 800186c:	200005b8 	.word	0x200005b8
 8001870:	200005b0 	.word	0x200005b0
 8001874:	200005f4 	.word	0x200005f4
 8001878:	200005bc 	.word	0x200005bc
 800187c:	200005cc 	.word	0x200005cc

08001880 <executeGComand>:
//////////////////////////////////////////////////////////////////////////////////////
void executeGComand(struct driversComand comand){
 8001880:	b084      	sub	sp, #16
 8001882:	b5b0      	push	{r4, r5, r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	f107 0420 	add.w	r4, r7, #32
 800188c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	currentComand = comand;
 8001890:	4b90      	ldr	r3, [pc, #576]	; (8001ad4 <executeGComand+0x254>)
 8001892:	461c      	mov	r4, r3
 8001894:	f107 0520 	add.w	r5, r7, #32
 8001898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800189e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	6023      	str	r3, [r4, #0]

	if(currentComand.valid & (1<<3)){//если подача валидна,
 80018a4:	4b8b      	ldr	r3, [pc, #556]	; (8001ad4 <executeGComand+0x254>)
 80018a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018aa:	f003 0308 	and.w	r3, r3, #8
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <executeGComand+0x3a>
		lastF = currentComand.F;//то запоминаем её. В следующей команде подачи может не быть
 80018b2:	4b88      	ldr	r3, [pc, #544]	; (8001ad4 <executeGComand+0x254>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	4a88      	ldr	r2, [pc, #544]	; (8001ad8 <executeGComand+0x258>)
 80018b8:	6013      	str	r3, [r2, #0]
	}

	//если координаты абсолютные заполняем невалидные параметры текущими значениями
	if(relCoordinates == 0){
 80018ba:	4b88      	ldr	r3, [pc, #544]	; (8001adc <executeGComand+0x25c>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d146      	bne.n	8001950 <executeGComand+0xd0>
		if(!(currentComand.valid & (1<<0))){
 80018c2:	4b84      	ldr	r3, [pc, #528]	; (8001ad4 <executeGComand+0x254>)
 80018c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <executeGComand+0x58>
			currentComand.posX = positionX;
 80018d0:	4b83      	ldr	r3, [pc, #524]	; (8001ae0 <executeGComand+0x260>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a7f      	ldr	r2, [pc, #508]	; (8001ad4 <executeGComand+0x254>)
 80018d6:	6053      	str	r3, [r2, #4]
		}
		if(!(currentComand.valid & (1<<1))){
 80018d8:	4b7e      	ldr	r3, [pc, #504]	; (8001ad4 <executeGComand+0x254>)
 80018da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <executeGComand+0x6e>
			currentComand.posY = positionY;
 80018e6:	4b7f      	ldr	r3, [pc, #508]	; (8001ae4 <executeGComand+0x264>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7a      	ldr	r2, [pc, #488]	; (8001ad4 <executeGComand+0x254>)
 80018ec:	6093      	str	r3, [r2, #8]
		}
		if(!(currentComand.valid & (1<<2))){
 80018ee:	4b79      	ldr	r3, [pc, #484]	; (8001ad4 <executeGComand+0x254>)
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	f003 0304 	and.w	r3, r3, #4
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d103      	bne.n	8001904 <executeGComand+0x84>
			currentComand.posZ = positionZ;
 80018fc:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <executeGComand+0x268>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a74      	ldr	r2, [pc, #464]	; (8001ad4 <executeGComand+0x254>)
 8001902:	60d3      	str	r3, [r2, #12]
		}
		if(currentComand.valid & (1<<5)){//если I валидна, то преобразуем ее в абсолютные координаты
 8001904:	4b73      	ldr	r3, [pc, #460]	; (8001ad4 <executeGComand+0x254>)
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190a:	f003 0320 	and.w	r3, r3, #32
 800190e:	2b00      	cmp	r3, #0
 8001910:	d007      	beq.n	8001922 <executeGComand+0xa2>
			currentComand.I = positionX + currentComand.I;
 8001912:	4b70      	ldr	r3, [pc, #448]	; (8001ad4 <executeGComand+0x254>)
 8001914:	699a      	ldr	r2, [r3, #24]
 8001916:	4b72      	ldr	r3, [pc, #456]	; (8001ae0 <executeGComand+0x260>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4413      	add	r3, r2
 800191c:	4a6d      	ldr	r2, [pc, #436]	; (8001ad4 <executeGComand+0x254>)
 800191e:	6193      	str	r3, [r2, #24]
 8001920:	e003      	b.n	800192a <executeGComand+0xaa>
		}
		else{
			currentComand.I = positionX;//иначе просто присваиваем позицию Х
 8001922:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <executeGComand+0x260>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <executeGComand+0x254>)
 8001928:	6193      	str	r3, [r2, #24]
		}
		if(currentComand.valid & (1<<6)){//если J валидна, то преобразуем ее в абсолютные координаты
 800192a:	4b6a      	ldr	r3, [pc, #424]	; (8001ad4 <executeGComand+0x254>)
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <executeGComand+0xc8>
			currentComand.J = positionY + currentComand.J;
 8001938:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <executeGComand+0x254>)
 800193a:	69da      	ldr	r2, [r3, #28]
 800193c:	4b69      	ldr	r3, [pc, #420]	; (8001ae4 <executeGComand+0x264>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4413      	add	r3, r2
 8001942:	4a64      	ldr	r2, [pc, #400]	; (8001ad4 <executeGComand+0x254>)
 8001944:	61d3      	str	r3, [r2, #28]
 8001946:	e003      	b.n	8001950 <executeGComand+0xd0>
		}
		else{
			currentComand.J = positionY;//иначе просто присваиваем позицию Y
 8001948:	4b66      	ldr	r3, [pc, #408]	; (8001ae4 <executeGComand+0x264>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a61      	ldr	r2, [pc, #388]	; (8001ad4 <executeGComand+0x254>)
 800194e:	61d3      	str	r3, [r2, #28]
		}
	}

	//одно прерывание таймера = 0.000 025 С
	float F=(float)lastF/100;
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <executeGComand+0x258>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f999 	bl	8000c8c <__aeabi_i2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4963      	ldr	r1, [pc, #396]	; (8001aec <executeGComand+0x26c>)
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff fa9c 	bl	8000e9c <__aeabi_fdiv>
 8001964:	4603      	mov	r3, r0
 8001966:	60fb      	str	r3, [r7, #12]
	float periodPerStep=1/(1/F/200);
 8001968:	68f9      	ldr	r1, [r7, #12]
 800196a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800196e:	f7ff fa95 	bl	8000e9c <__aeabi_fdiv>
 8001972:	4603      	mov	r3, r0
 8001974:	495e      	ldr	r1, [pc, #376]	; (8001af0 <executeGComand+0x270>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff fa90 	bl	8000e9c <__aeabi_fdiv>
 800197c:	4603      	mov	r3, r0
 800197e:	4619      	mov	r1, r3
 8001980:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001984:	f7ff fa8a 	bl	8000e9c <__aeabi_fdiv>
 8001988:	4603      	mov	r3, r0
 800198a:	60bb      	str	r3, [r7, #8]
	timerDivider=40000/periodPerStep;
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4859      	ldr	r0, [pc, #356]	; (8001af4 <executeGComand+0x274>)
 8001990:	f7ff fa84 	bl	8000e9c <__aeabi_fdiv>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbb8 	bl	800110c <__aeabi_f2uiz>
 800199c:	4602      	mov	r2, r0
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <executeGComand+0x278>)
 80019a0:	601a      	str	r2, [r3, #0]

	switch(currentComand.GCode){
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <executeGComand+0x254>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	f000 80e5 	beq.w	8001b76 <executeGComand+0x2f6>
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	dc07      	bgt.n	80019c0 <executeGComand+0x140>
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d047      	beq.n	8001a44 <executeGComand+0x1c4>
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	f300 80ad 	bgt.w	8001b14 <executeGComand+0x294>
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <executeGComand+0x160>
			relCoordinates = 1;
			comandExecuted();
			break;
		}
	}
}
 80019be:	e127      	b.n	8001c10 <executeGComand+0x390>
	switch(currentComand.GCode){
 80019c0:	2b5a      	cmp	r3, #90	; 0x5a
 80019c2:	f000 8118 	beq.w	8001bf6 <executeGComand+0x376>
 80019c6:	2b5a      	cmp	r3, #90	; 0x5a
 80019c8:	dc03      	bgt.n	80019d2 <executeGComand+0x152>
 80019ca:	2b1c      	cmp	r3, #28
 80019cc:	f000 8104 	beq.w	8001bd8 <executeGComand+0x358>
}
 80019d0:	e11e      	b.n	8001c10 <executeGComand+0x390>
	switch(currentComand.GCode){
 80019d2:	2b5b      	cmp	r3, #91	; 0x5b
 80019d4:	f000 8115 	beq.w	8001c02 <executeGComand+0x382>
 80019d8:	2b5c      	cmp	r3, #92	; 0x5c
 80019da:	f000 8100 	beq.w	8001bde <executeGComand+0x35e>
}
 80019de:	e117      	b.n	8001c10 <executeGComand+0x390>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <executeGComand+0x25c>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d014      	beq.n	8001a12 <executeGComand+0x192>
				currentComand.posX = currentComand.posX + positionX;
 80019e8:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <executeGComand+0x254>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <executeGComand+0x260>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	4a38      	ldr	r2, [pc, #224]	; (8001ad4 <executeGComand+0x254>)
 80019f4:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <executeGComand+0x254>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <executeGComand+0x264>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <executeGComand+0x254>)
 8001a02:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <executeGComand+0x254>)
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b37      	ldr	r3, [pc, #220]	; (8001ae8 <executeGComand+0x268>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <executeGComand+0x254>)
 8001a10:	60d3      	str	r3, [r2, #12]
			stepsCounterX = currentComand.posX - positionX;
 8001a12:	4b30      	ldr	r3, [pc, #192]	; (8001ad4 <executeGComand+0x254>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4b32      	ldr	r3, [pc, #200]	; (8001ae0 <executeGComand+0x260>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	4a37      	ldr	r2, [pc, #220]	; (8001afc <executeGComand+0x27c>)
 8001a1e:	6013      	str	r3, [r2, #0]
			stepsCounterY = currentComand.posY - positionY;
 8001a20:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <executeGComand+0x254>)
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <executeGComand+0x264>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <executeGComand+0x280>)
 8001a2c:	6013      	str	r3, [r2, #0]
			stepsCounterZ = currentComand.posZ - positionZ;
 8001a2e:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <executeGComand+0x254>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <executeGComand+0x268>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a32      	ldr	r2, [pc, #200]	; (8001b04 <executeGComand+0x284>)
 8001a3a:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001a3c:	4832      	ldr	r0, [pc, #200]	; (8001b08 <executeGComand+0x288>)
 8001a3e:	f003 fc69 	bl	8005314 <HAL_TIM_Base_Start_IT>
			break;
 8001a42:	e0e5      	b.n	8001c10 <executeGComand+0x390>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <executeGComand+0x25c>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d014      	beq.n	8001a76 <executeGComand+0x1f6>
				currentComand.posX = currentComand.posX + positionX;
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <executeGComand+0x254>)
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4b23      	ldr	r3, [pc, #140]	; (8001ae0 <executeGComand+0x260>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a1f      	ldr	r2, [pc, #124]	; (8001ad4 <executeGComand+0x254>)
 8001a58:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <executeGComand+0x254>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <executeGComand+0x264>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a1b      	ldr	r2, [pc, #108]	; (8001ad4 <executeGComand+0x254>)
 8001a66:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <executeGComand+0x254>)
 8001a6a:	68da      	ldr	r2, [r3, #12]
 8001a6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ae8 <executeGComand+0x268>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4413      	add	r3, r2
 8001a72:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <executeGComand+0x254>)
 8001a74:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<2)){//если Z валидна,
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <executeGComand+0x254>)
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00d      	beq.n	8001aa0 <executeGComand+0x220>
				int difZ=positionZ-currentComand.posZ;//то задаем для нее количество шагов
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <executeGComand+0x268>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <executeGComand+0x254>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	607b      	str	r3, [r7, #4]
				stepsCounterZ=difZ*10;
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	4613      	mov	r3, r2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	4413      	add	r3, r2
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <executeGComand+0x284>)
 8001a9e:	601a      	str	r2, [r3, #0]
			if((currentComand.valid & (1<<0)) || (currentComand.valid & (1<<1))){//если х или у валидны
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <executeGComand+0x254>)
 8001aa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d107      	bne.n	8001abe <executeGComand+0x23e>
 8001aae:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <executeGComand+0x254>)
 8001ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80a8 	beq.w	8001c0e <executeGComand+0x38e>
					zeroPointX = positionX;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <executeGComand+0x260>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <executeGComand+0x28c>)
 8001ac4:	6013      	str	r3, [r2, #0]
					zeroPointY = positionY;
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <executeGComand+0x264>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a11      	ldr	r2, [pc, #68]	; (8001b10 <executeGComand+0x290>)
 8001acc:	6013      	str	r3, [r2, #0]
					calcInterpolation();//считаем интерполяцию
 8001ace:	f000 f8b5 	bl	8001c3c <calcInterpolation>
			break;
 8001ad2:	e09c      	b.n	8001c0e <executeGComand+0x38e>
 8001ad4:	200005d0 	.word	0x200005d0
 8001ad8:	200005bc 	.word	0x200005bc
 8001adc:	200005cc 	.word	0x200005cc
 8001ae0:	200005a8 	.word	0x200005a8
 8001ae4:	200005c8 	.word	0x200005c8
 8001ae8:	200005a4 	.word	0x200005a4
 8001aec:	42c80000 	.word	0x42c80000
 8001af0:	43480000 	.word	0x43480000
 8001af4:	471c4000 	.word	0x471c4000
 8001af8:	200005b8 	.word	0x200005b8
 8001afc:	200005a0 	.word	0x200005a0
 8001b00:	200005c0 	.word	0x200005c0
 8001b04:	200005b4 	.word	0x200005b4
 8001b08:	200006fc 	.word	0x200006fc
 8001b0c:	200005b0 	.word	0x200005b0
 8001b10:	200005f4 	.word	0x200005f4
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <executeGComand+0x3a0>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d014      	beq.n	8001b46 <executeGComand+0x2c6>
				currentComand.posX = currentComand.posX + positionX;
 8001b1c:	4b41      	ldr	r3, [pc, #260]	; (8001c24 <executeGComand+0x3a4>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4b41      	ldr	r3, [pc, #260]	; (8001c28 <executeGComand+0x3a8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <executeGComand+0x3a4>)
 8001b28:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b2a:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <executeGComand+0x3a4>)
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	4b3f      	ldr	r3, [pc, #252]	; (8001c2c <executeGComand+0x3ac>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4413      	add	r3, r2
 8001b34:	4a3b      	ldr	r2, [pc, #236]	; (8001c24 <executeGComand+0x3a4>)
 8001b36:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b38:	4b3a      	ldr	r3, [pc, #232]	; (8001c24 <executeGComand+0x3a4>)
 8001b3a:	68da      	ldr	r2, [r3, #12]
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <executeGComand+0x3b0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4413      	add	r3, r2
 8001b42:	4a38      	ldr	r2, [pc, #224]	; (8001c24 <executeGComand+0x3a4>)
 8001b44:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001b46:	4b37      	ldr	r3, [pc, #220]	; (8001c24 <executeGComand+0x3a4>)
 8001b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4c:	f003 0310 	and.w	r3, r3, #16
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10d      	bne.n	8001b70 <executeGComand+0x2f0>
				vPosX = positionX - currentComand.I;
 8001b54:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <executeGComand+0x3a8>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b32      	ldr	r3, [pc, #200]	; (8001c24 <executeGComand+0x3a4>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	4a35      	ldr	r2, [pc, #212]	; (8001c34 <executeGComand+0x3b4>)
 8001b60:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001b62:	4b32      	ldr	r3, [pc, #200]	; (8001c2c <executeGComand+0x3ac>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4b2f      	ldr	r3, [pc, #188]	; (8001c24 <executeGComand+0x3a4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	4a32      	ldr	r2, [pc, #200]	; (8001c38 <executeGComand+0x3b8>)
 8001b6e:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001b70:	f000 f864 	bl	8001c3c <calcInterpolation>
			break;
 8001b74:	e04c      	b.n	8001c10 <executeGComand+0x390>
			if(relCoordinates > 0){//если координаты относительные - пересчитываем в абсолютные
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <executeGComand+0x3a0>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d014      	beq.n	8001ba8 <executeGComand+0x328>
				currentComand.posX = currentComand.posX + positionX;
 8001b7e:	4b29      	ldr	r3, [pc, #164]	; (8001c24 <executeGComand+0x3a4>)
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <executeGComand+0x3a8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	4a26      	ldr	r2, [pc, #152]	; (8001c24 <executeGComand+0x3a4>)
 8001b8a:	6053      	str	r3, [r2, #4]
				currentComand.posY = currentComand.posY + positionY;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	; (8001c24 <executeGComand+0x3a4>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <executeGComand+0x3ac>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4413      	add	r3, r2
 8001b96:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <executeGComand+0x3a4>)
 8001b98:	6093      	str	r3, [r2, #8]
				currentComand.posZ = currentComand.posZ + positionZ;
 8001b9a:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <executeGComand+0x3a4>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b24      	ldr	r3, [pc, #144]	; (8001c30 <executeGComand+0x3b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	4a1f      	ldr	r2, [pc, #124]	; (8001c24 <executeGComand+0x3a4>)
 8001ba6:	60d3      	str	r3, [r2, #12]
			if(currentComand.valid & (1<<4)){//если строим через радиус
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <executeGComand+0x3a4>)
 8001baa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10d      	bne.n	8001bd2 <executeGComand+0x352>
				vPosX = positionX - currentComand.I;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <executeGComand+0x3a8>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <executeGComand+0x3a4>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a1c      	ldr	r2, [pc, #112]	; (8001c34 <executeGComand+0x3b4>)
 8001bc2:	6013      	str	r3, [r2, #0]
				vPosY = positionY - currentComand.J;
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <executeGComand+0x3ac>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <executeGComand+0x3a4>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <executeGComand+0x3b8>)
 8001bd0:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001bd2:	f000 f833 	bl	8001c3c <calcInterpolation>
			break;
 8001bd6:	e01b      	b.n	8001c10 <executeGComand+0x390>
			calcInterpolation();
 8001bd8:	f000 f830 	bl	8001c3c <calcInterpolation>
			break;
 8001bdc:	e018      	b.n	8001c10 <executeGComand+0x390>
			positionX=0;
 8001bde:	4b12      	ldr	r3, [pc, #72]	; (8001c28 <executeGComand+0x3a8>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	601a      	str	r2, [r3, #0]
			positionY=0;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <executeGComand+0x3ac>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
			positionZ=0;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <executeGComand+0x3b0>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
			comandExecuted();
 8001bf0:	f000 fbfa 	bl	80023e8 <comandExecuted>
			break;
 8001bf4:	e00c      	b.n	8001c10 <executeGComand+0x390>
			relCoordinates = 0;
 8001bf6:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <executeGComand+0x3a0>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001bfc:	f000 fbf4 	bl	80023e8 <comandExecuted>
			break;
 8001c00:	e006      	b.n	8001c10 <executeGComand+0x390>
			relCoordinates = 1;
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <executeGComand+0x3a0>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	701a      	strb	r2, [r3, #0]
			comandExecuted();
 8001c08:	f000 fbee 	bl	80023e8 <comandExecuted>
			break;
 8001c0c:	e000      	b.n	8001c10 <executeGComand+0x390>
			break;
 8001c0e:	bf00      	nop
}
 8001c10:	bf00      	nop
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001c1a:	b004      	add	sp, #16
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200005cc 	.word	0x200005cc
 8001c24:	200005d0 	.word	0x200005d0
 8001c28:	200005a8 	.word	0x200005a8
 8001c2c:	200005c8 	.word	0x200005c8
 8001c30:	200005a4 	.word	0x200005a4
 8001c34:	200005ac 	.word	0x200005ac
 8001c38:	200005c4 	.word	0x200005c4

08001c3c <calcInterpolation>:
////////////////////////////////////////////////////////////////////////////////////////
void calcInterpolation(){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0

	switch(currentComand.GCode){
 8001c40:	4b30      	ldr	r3, [pc, #192]	; (8001d04 <calcInterpolation+0xc8>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b1c      	cmp	r3, #28
 8001c46:	d858      	bhi.n	8001cfa <calcInterpolation+0xbe>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <calcInterpolation+0x14>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001cc5 	.word	0x08001cc5
 8001c54:	08001ce3 	.word	0x08001ce3
 8001c58:	08001ce9 	.word	0x08001ce9
 8001c5c:	08001cef 	.word	0x08001cef
 8001c60:	08001cfb 	.word	0x08001cfb
 8001c64:	08001cfb 	.word	0x08001cfb
 8001c68:	08001cfb 	.word	0x08001cfb
 8001c6c:	08001cfb 	.word	0x08001cfb
 8001c70:	08001cfb 	.word	0x08001cfb
 8001c74:	08001cfb 	.word	0x08001cfb
 8001c78:	08001cfb 	.word	0x08001cfb
 8001c7c:	08001cfb 	.word	0x08001cfb
 8001c80:	08001cfb 	.word	0x08001cfb
 8001c84:	08001cfb 	.word	0x08001cfb
 8001c88:	08001cfb 	.word	0x08001cfb
 8001c8c:	08001cfb 	.word	0x08001cfb
 8001c90:	08001cfb 	.word	0x08001cfb
 8001c94:	08001cfb 	.word	0x08001cfb
 8001c98:	08001cfb 	.word	0x08001cfb
 8001c9c:	08001cfb 	.word	0x08001cfb
 8001ca0:	08001cfb 	.word	0x08001cfb
 8001ca4:	08001cfb 	.word	0x08001cfb
 8001ca8:	08001cfb 	.word	0x08001cfb
 8001cac:	08001cfb 	.word	0x08001cfb
 8001cb0:	08001cfb 	.word	0x08001cfb
 8001cb4:	08001cfb 	.word	0x08001cfb
 8001cb8:	08001cfb 	.word	0x08001cfb
 8001cbc:	08001cfb 	.word	0x08001cfb
 8001cc0:	08001cf5 	.word	0x08001cf5
		case(0):{
			if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <calcInterpolation+0xc8>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <calcInterpolation+0xcc>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d116      	bne.n	8001cfe <calcInterpolation+0xc2>
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <calcInterpolation+0xc8>)
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	; (8001d0c <calcInterpolation+0xd0>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d110      	bne.n	8001cfe <calcInterpolation+0xc2>
				comandExecuted();
 8001cdc:	f000 fb84 	bl	80023e8 <comandExecuted>
				return;
 8001ce0:	e00e      	b.n	8001d00 <calcInterpolation+0xc4>
			}
			break;
		}
		case(1):{//линейное перемещение
			lineInterpolacion();
 8001ce2:	f000 f86b 	bl	8001dbc <lineInterpolacion>
			break;
 8001ce6:	e00b      	b.n	8001d00 <calcInterpolation+0xc4>
		}
		case(2):{//круговая интерполяция по часовой стрелке
			cwCicleInterpolation();
 8001ce8:	f000 f936 	bl	8001f58 <cwCicleInterpolation>
			break;
 8001cec:	e008      	b.n	8001d00 <calcInterpolation+0xc4>
		}
		case(3):{//круговая интерполяция против часосвой стрелки
			ccwCicleInterpolation();
 8001cee:	f000 fa2b 	bl	8002148 <ccwCicleInterpolation>
			break;
 8001cf2:	e005      	b.n	8001d00 <calcInterpolation+0xc4>
		}
		case(28):{//перемещение до сработки концевиков
			moveToZero();
 8001cf4:	f000 fb20 	bl	8002338 <moveToZero>
			break;
 8001cf8:	e002      	b.n	8001d00 <calcInterpolation+0xc4>
		}
		default:{
			return;//todo потом сделать обработку ошибки
 8001cfa:	bf00      	nop
 8001cfc:	e000      	b.n	8001d00 <calcInterpolation+0xc4>
			break;
 8001cfe:	bf00      	nop
		}
	}
}
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	200005d0 	.word	0x200005d0
 8001d08:	200005a8 	.word	0x200005a8
 8001d0c:	200005c8 	.word	0x200005c8

08001d10 <executeMComand>:
////////////////////////////////////////////////////////////////////////////////////
void executeMComand(struct MComand comand){
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	7138      	strb	r0, [r7, #4]
	switch(comand.MCode){
 8001d18:	793b      	ldrb	r3, [r7, #4]
 8001d1a:	2b12      	cmp	r3, #18
 8001d1c:	d000      	beq.n	8001d20 <executeMComand+0x10>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
			break;
		}
	}
}
 8001d1e:	e044      	b.n	8001daa <executeMComand+0x9a>
			HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d26:	4823      	ldr	r0, [pc, #140]	; (8001db4 <executeMComand+0xa4>)
 8001d28:	f001 feb7 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d32:	4820      	ldr	r0, [pc, #128]	; (8001db4 <executeMComand+0xa4>)
 8001d34:	f001 feb1 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d3e:	481d      	ldr	r0, [pc, #116]	; (8001db4 <executeMComand+0xa4>)
 8001d40:	f001 feab 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8001d44:	2200      	movs	r2, #0
 8001d46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d4a:	481a      	ldr	r0, [pc, #104]	; (8001db4 <executeMComand+0xa4>)
 8001d4c:	f001 fea5 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8001d50:	2200      	movs	r2, #0
 8001d52:	2140      	movs	r1, #64	; 0x40
 8001d54:	4817      	ldr	r0, [pc, #92]	; (8001db4 <executeMComand+0xa4>)
 8001d56:	f001 fea0 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d60:	4815      	ldr	r0, [pc, #84]	; (8001db8 <executeMComand+0xa8>)
 8001d62:	f001 fe9a 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2110      	movs	r1, #16
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <executeMComand+0xa4>)
 8001d6c:	f001 fe95 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2108      	movs	r1, #8
 8001d74:	480f      	ldr	r0, [pc, #60]	; (8001db4 <executeMComand+0xa4>)
 8001d76:	f001 fe90 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <executeMComand+0xa8>)
 8001d82:	f001 fe8a 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8001d86:	2200      	movs	r2, #0
 8001d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8c:	480a      	ldr	r0, [pc, #40]	; (8001db8 <executeMComand+0xa8>)
 8001d8e:	f001 fe84 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2180      	movs	r1, #128	; 0x80
 8001d96:	4807      	ldr	r0, [pc, #28]	; (8001db4 <executeMComand+0xa4>)
 8001d98:	f001 fe7f 	bl	8003a9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <executeMComand+0xa8>)
 8001da4:	f001 fe79 	bl	8003a9a <HAL_GPIO_WritePin>
			break;
 8001da8:	bf00      	nop
}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40010c00 	.word	0x40010c00
 8001db8:	40010800 	.word	0x40010800

08001dbc <lineInterpolacion>:
////////////////////////////////////////////////////////////////////////////////////
void lineInterpolacion(){
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <lineInterpolacion+0x17c>)
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4b5d      	ldr	r3, [pc, #372]	; (8001f3c <lineInterpolacion+0x180>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d108      	bne.n	8001de0 <lineInterpolacion+0x24>
 8001dce:	4b5a      	ldr	r3, [pc, #360]	; (8001f38 <lineInterpolacion+0x17c>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	4b5b      	ldr	r3, [pc, #364]	; (8001f40 <lineInterpolacion+0x184>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d102      	bne.n	8001de0 <lineInterpolacion+0x24>
		comandExecuted();
 8001dda:	f000 fb05 	bl	80023e8 <comandExecuted>
		return;
 8001dde:	e0a7      	b.n	8001f30 <lineInterpolacion+0x174>
	}

	int offsetX = zeroPointX - positionX;
 8001de0:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <lineInterpolacion+0x188>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b55      	ldr	r3, [pc, #340]	; (8001f3c <lineInterpolacion+0x180>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001dec:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <lineInterpolacion+0x18c>)
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4b53      	ldr	r3, [pc, #332]	; (8001f40 <lineInterpolacion+0x184>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	613b      	str	r3, [r7, #16]
	int vectorX = currentComand.posX - positionX;
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <lineInterpolacion+0x17c>)
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4b4f      	ldr	r3, [pc, #316]	; (8001f3c <lineInterpolacion+0x180>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	60fb      	str	r3, [r7, #12]
	int vectorY = currentComand.posY - positionY;
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <lineInterpolacion+0x17c>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b4d      	ldr	r3, [pc, #308]	; (8001f40 <lineInterpolacion+0x184>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	60bb      	str	r3, [r7, #8]

	int F = (abs(offsetY) * abs(vectorX) - (abs(offsetX) * abs(vectorY)));//оценочная функция
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bfb8      	it	lt
 8001e16:	425b      	neglt	r3, r3
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	2a00      	cmp	r2, #0
 8001e1c:	bfb8      	it	lt
 8001e1e:	4252      	neglt	r2, r2
 8001e20:	fb02 f203 	mul.w	r2, r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bfb8      	it	lt
 8001e2a:	425b      	neglt	r3, r3
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	2900      	cmp	r1, #0
 8001e30:	bfb8      	it	lt
 8001e32:	4249      	neglt	r1, r1
 8001e34:	fb01 f303 	mul.w	r3, r1, r3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	607b      	str	r3, [r7, #4]
	if(F == 0){
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d124      	bne.n	8001e8c <lineInterpolacion+0xd0>
		if(vectorX > 0){
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd04      	ble.n	8001e52 <lineInterpolacion+0x96>
			stepsCounterX = -1;
 8001e48:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <lineInterpolacion+0x190>)
 8001e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e009      	b.n	8001e66 <lineInterpolacion+0xaa>
		}
		else if(vectorX < 0){
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	da03      	bge.n	8001e60 <lineInterpolacion+0xa4>
			stepsCounterX = 1;
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <lineInterpolacion+0x190>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e002      	b.n	8001e66 <lineInterpolacion+0xaa>
		}
		else{
			stepsCounterX = 0;
 8001e60:	4b3a      	ldr	r3, [pc, #232]	; (8001f4c <lineInterpolacion+0x190>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
		}
		if(vectorY > 0){
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	dd03      	ble.n	8001e74 <lineInterpolacion+0xb8>
			stepsCounterY = 1;
 8001e6c:	4b38      	ldr	r3, [pc, #224]	; (8001f50 <lineInterpolacion+0x194>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e05a      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else if(vectorY < 0){
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	da04      	bge.n	8001e84 <lineInterpolacion+0xc8>
			stepsCounterY = -1;
 8001e7a:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <lineInterpolacion+0x194>)
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e052      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else{
			stepsCounterY = 0;
 8001e84:	4b32      	ldr	r3, [pc, #200]	; (8001f50 <lineInterpolacion+0x194>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	e04e      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
	}
	else if(F > 0){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dd24      	ble.n	8001edc <lineInterpolacion+0x120>
		if(vectorX > 0){
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	dd04      	ble.n	8001ea2 <lineInterpolacion+0xe6>
			stepsCounterX = -1;
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <lineInterpolacion+0x190>)
 8001e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	e043      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else if(vectorX < 0){
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da03      	bge.n	8001eb0 <lineInterpolacion+0xf4>
			stepsCounterX = 1;
 8001ea8:	4b28      	ldr	r3, [pc, #160]	; (8001f4c <lineInterpolacion+0x190>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	e03c      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else{
			stepsCounterX = 0;
 8001eb0:	4b26      	ldr	r3, [pc, #152]	; (8001f4c <lineInterpolacion+0x190>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
			if(vectorY > 0){
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	dd03      	ble.n	8001ec4 <lineInterpolacion+0x108>
				stepsCounterY = 1;
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <lineInterpolacion+0x194>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	e032      	b.n	8001f2a <lineInterpolacion+0x16e>
			}
			else if(vectorY < 0){
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da04      	bge.n	8001ed4 <lineInterpolacion+0x118>
				stepsCounterY = -1;
 8001eca:	4b21      	ldr	r3, [pc, #132]	; (8001f50 <lineInterpolacion+0x194>)
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	e02a      	b.n	8001f2a <lineInterpolacion+0x16e>
			}
			else{
				stepsCounterY = 0;
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <lineInterpolacion+0x194>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e026      	b.n	8001f2a <lineInterpolacion+0x16e>
			}
		}
	}
	else if(F < 0){
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	da23      	bge.n	8001f2a <lineInterpolacion+0x16e>
		if(vectorY > 0){
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	dd03      	ble.n	8001ef0 <lineInterpolacion+0x134>
			stepsCounterY = 1;
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <lineInterpolacion+0x194>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e01c      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else if(vectorY < 0){
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	da04      	bge.n	8001f00 <lineInterpolacion+0x144>
			stepsCounterY = -1;
 8001ef6:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <lineInterpolacion+0x194>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e014      	b.n	8001f2a <lineInterpolacion+0x16e>
		}
		else{
			stepsCounterY = 0;
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <lineInterpolacion+0x194>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
			if(vectorX > 0){
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	dd04      	ble.n	8001f16 <lineInterpolacion+0x15a>
				stepsCounterX = -1;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	; (8001f4c <lineInterpolacion+0x190>)
 8001f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e009      	b.n	8001f2a <lineInterpolacion+0x16e>
			}
			else if(vectorX < 0){
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da03      	bge.n	8001f24 <lineInterpolacion+0x168>
				stepsCounterX = 1;
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <lineInterpolacion+0x190>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e002      	b.n	8001f2a <lineInterpolacion+0x16e>
			}
			else{
				stepsCounterX = 0;
 8001f24:	4b09      	ldr	r3, [pc, #36]	; (8001f4c <lineInterpolacion+0x190>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
			}
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 8001f2a:	480a      	ldr	r0, [pc, #40]	; (8001f54 <lineInterpolacion+0x198>)
 8001f2c:	f003 f9f2 	bl	8005314 <HAL_TIM_Base_Start_IT>
}
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200005d0 	.word	0x200005d0
 8001f3c:	200005a8 	.word	0x200005a8
 8001f40:	200005c8 	.word	0x200005c8
 8001f44:	200005b0 	.word	0x200005b0
 8001f48:	200005f4 	.word	0x200005f4
 8001f4c:	200005a0 	.word	0x200005a0
 8001f50:	200005c0 	.word	0x200005c0
 8001f54:	200006fc 	.word	0x200006fc

08001f58 <cwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void cwCicleInterpolation(){
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001f5e:	4b72      	ldr	r3, [pc, #456]	; (8002128 <cwCicleInterpolation+0x1d0>)
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	4b72      	ldr	r3, [pc, #456]	; (800212c <cwCicleInterpolation+0x1d4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d108      	bne.n	8001f7c <cwCicleInterpolation+0x24>
 8001f6a:	4b6f      	ldr	r3, [pc, #444]	; (8002128 <cwCicleInterpolation+0x1d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	4b70      	ldr	r3, [pc, #448]	; (8002130 <cwCicleInterpolation+0x1d8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d102      	bne.n	8001f7c <cwCicleInterpolation+0x24>
		comandExecuted();
 8001f76:	f000 fa37 	bl	80023e8 <comandExecuted>
		return;
 8001f7a:	e0d2      	b.n	8002122 <cwCicleInterpolation+0x1ca>
	}

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001f7c:	4b6d      	ldr	r3, [pc, #436]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a6c      	ldr	r2, [pc, #432]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001f82:	6812      	ldr	r2, [r2, #0]
 8001f84:	fb02 f203 	mul.w	r2, r2, r3
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	496a      	ldr	r1, [pc, #424]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8001f8e:	6809      	ldr	r1, [r1, #0]
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	441a      	add	r2, r3
 8001f96:	4b64      	ldr	r3, [pc, #400]	; (8002128 <cwCicleInterpolation+0x1d0>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	4963      	ldr	r1, [pc, #396]	; (8002128 <cwCicleInterpolation+0x1d0>)
 8001f9c:	6949      	ldr	r1, [r1, #20]
 8001f9e:	fb01 f303 	mul.w	r3, r1, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	607b      	str	r3, [r7, #4]
																		//контролируется на этапе парсинга
	if(F >= 0){//если на окружности или за ней
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	db53      	blt.n	8002054 <cwCicleInterpolation+0xfc>

		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	dd08      	ble.n	8001fc6 <cwCicleInterpolation+0x6e>
 8001fb4:	4b60      	ldr	r3, [pc, #384]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dd04      	ble.n	8001fc6 <cwCicleInterpolation+0x6e>
			stepsCounterY = -1;
 8001fbc:	4b5f      	ldr	r3, [pc, #380]	; (800213c <cwCicleInterpolation+0x1e4>)
 8001fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e09c      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001fc6:	4b5b      	ldr	r3, [pc, #364]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	dd07      	ble.n	8001fde <cwCicleInterpolation+0x86>
 8001fce:	4b5a      	ldr	r3, [pc, #360]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	da03      	bge.n	8001fde <cwCicleInterpolation+0x86>
			stepsCounterX = 1;
 8001fd6:	4b5a      	ldr	r3, [pc, #360]	; (8002140 <cwCicleInterpolation+0x1e8>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e090      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001fde:	4b55      	ldr	r3, [pc, #340]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	da07      	bge.n	8001ff6 <cwCicleInterpolation+0x9e>
 8001fe6:	4b54      	ldr	r3, [pc, #336]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	da03      	bge.n	8001ff6 <cwCicleInterpolation+0x9e>
			stepsCounterY = 1;
 8001fee:	4b53      	ldr	r3, [pc, #332]	; (800213c <cwCicleInterpolation+0x1e4>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e084      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001ff6:	4b4f      	ldr	r3, [pc, #316]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da08      	bge.n	8002010 <cwCicleInterpolation+0xb8>
 8001ffe:	4b4e      	ldr	r3, [pc, #312]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	dd04      	ble.n	8002010 <cwCicleInterpolation+0xb8>
			stepsCounterX = -1;
 8002006:	4b4e      	ldr	r3, [pc, #312]	; (8002140 <cwCicleInterpolation+0x1e8>)
 8002008:	f04f 32ff 	mov.w	r2, #4294967295
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e077      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else{
			if(vPosY > 0){
 8002010:	4b49      	ldr	r3, [pc, #292]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	dd04      	ble.n	8002022 <cwCicleInterpolation+0xca>
				stepsCounterY = -1;
 8002018:	4b48      	ldr	r3, [pc, #288]	; (800213c <cwCicleInterpolation+0x1e4>)
 800201a:	f04f 32ff 	mov.w	r2, #4294967295
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e06e      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosY < 0){
 8002022:	4b45      	ldr	r3, [pc, #276]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2b00      	cmp	r3, #0
 8002028:	da03      	bge.n	8002032 <cwCicleInterpolation+0xda>
				stepsCounterY = 1;
 800202a:	4b44      	ldr	r3, [pc, #272]	; (800213c <cwCicleInterpolation+0x1e4>)
 800202c:	2201      	movs	r2, #1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	e066      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX > 0){
 8002032:	4b40      	ldr	r3, [pc, #256]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	dd03      	ble.n	8002042 <cwCicleInterpolation+0xea>
				stepsCounterX = 1;
 800203a:	4b41      	ldr	r3, [pc, #260]	; (8002140 <cwCicleInterpolation+0x1e8>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	e05e      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX < 0){
 8002042:	4b3c      	ldr	r3, [pc, #240]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	da5a      	bge.n	8002100 <cwCicleInterpolation+0x1a8>
				stepsCounterX = -1;
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <cwCicleInterpolation+0x1e8>)
 800204c:	f04f 32ff 	mov.w	r2, #4294967295
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	e055      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
		}
	}
	else if(F < 0){//если внутри окружности
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da52      	bge.n	8002100 <cwCicleInterpolation+0x1a8>
		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800205a:	4b36      	ldr	r3, [pc, #216]	; (8002134 <cwCicleInterpolation+0x1dc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	dd08      	ble.n	8002074 <cwCicleInterpolation+0x11c>
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	dd04      	ble.n	8002074 <cwCicleInterpolation+0x11c>
			stepsCounterX = -1;
 800206a:	4b35      	ldr	r3, [pc, #212]	; (8002140 <cwCicleInterpolation+0x1e8>)
 800206c:	f04f 32ff 	mov.w	r2, #4294967295
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e045      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002074:	4b2f      	ldr	r3, [pc, #188]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	dd08      	ble.n	800208e <cwCicleInterpolation+0x136>
 800207c:	4b2e      	ldr	r3, [pc, #184]	; (8002138 <cwCicleInterpolation+0x1e0>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	da04      	bge.n	800208e <cwCicleInterpolation+0x136>
			stepsCounterY = -1;
 8002084:	4b2d      	ldr	r3, [pc, #180]	; (800213c <cwCicleInterpolation+0x1e4>)
 8002086:	f04f 32ff 	mov.w	r2, #4294967295
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e038      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800208e:	4b29      	ldr	r3, [pc, #164]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b00      	cmp	r3, #0
 8002094:	da07      	bge.n	80020a6 <cwCicleInterpolation+0x14e>
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	da03      	bge.n	80020a6 <cwCicleInterpolation+0x14e>
			stepsCounterX = 1;
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <cwCicleInterpolation+0x1e8>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e02c      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80020a6:	4b23      	ldr	r3, [pc, #140]	; (8002134 <cwCicleInterpolation+0x1dc>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da07      	bge.n	80020be <cwCicleInterpolation+0x166>
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <cwCicleInterpolation+0x1e0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	dd03      	ble.n	80020be <cwCicleInterpolation+0x166>
			stepsCounterY = 1;
 80020b6:	4b21      	ldr	r3, [pc, #132]	; (800213c <cwCicleInterpolation+0x1e4>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e020      	b.n	8002100 <cwCicleInterpolation+0x1a8>
		}
		else{
			if(vPosY > 0){
 80020be:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <cwCicleInterpolation+0x1e0>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	dd04      	ble.n	80020d0 <cwCicleInterpolation+0x178>
				stepsCounterX = -1;
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <cwCicleInterpolation+0x1e8>)
 80020c8:	f04f 32ff 	mov.w	r2, #4294967295
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e017      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosY < 0){
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <cwCicleInterpolation+0x1e0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da03      	bge.n	80020e0 <cwCicleInterpolation+0x188>
				stepsCounterX = 1;
 80020d8:	4b19      	ldr	r3, [pc, #100]	; (8002140 <cwCicleInterpolation+0x1e8>)
 80020da:	2201      	movs	r2, #1
 80020dc:	601a      	str	r2, [r3, #0]
 80020de:	e00f      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX > 0){
 80020e0:	4b14      	ldr	r3, [pc, #80]	; (8002134 <cwCicleInterpolation+0x1dc>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	dd04      	ble.n	80020f2 <cwCicleInterpolation+0x19a>
				stepsCounterY = -1;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <cwCicleInterpolation+0x1e4>)
 80020ea:	f04f 32ff 	mov.w	r2, #4294967295
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	e006      	b.n	8002100 <cwCicleInterpolation+0x1a8>
			}
			else if(vPosX < 0){
 80020f2:	4b10      	ldr	r3, [pc, #64]	; (8002134 <cwCicleInterpolation+0x1dc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da02      	bge.n	8002100 <cwCicleInterpolation+0x1a8>
				stepsCounterY = 1;
 80020fa:	4b10      	ldr	r3, [pc, #64]	; (800213c <cwCicleInterpolation+0x1e4>)
 80020fc:	2201      	movs	r2, #1
 80020fe:	601a      	str	r2, [r3, #0]
			}
		}
	}

	vPosX+=stepsCounterX;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <cwCicleInterpolation+0x1dc>)
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <cwCicleInterpolation+0x1e8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4413      	add	r3, r2
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <cwCicleInterpolation+0x1dc>)
 800210c:	6013      	str	r3, [r2, #0]
	vPosY+=stepsCounterY;
 800210e:	4b0a      	ldr	r3, [pc, #40]	; (8002138 <cwCicleInterpolation+0x1e0>)
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <cwCicleInterpolation+0x1e4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4413      	add	r3, r2
 8002118:	4a07      	ldr	r2, [pc, #28]	; (8002138 <cwCicleInterpolation+0x1e0>)
 800211a:	6013      	str	r3, [r2, #0]

	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <cwCicleInterpolation+0x1ec>)
 800211e:	f003 f8f9 	bl	8005314 <HAL_TIM_Base_Start_IT>
}
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	200005d0 	.word	0x200005d0
 800212c:	200005a8 	.word	0x200005a8
 8002130:	200005c8 	.word	0x200005c8
 8002134:	200005ac 	.word	0x200005ac
 8002138:	200005c4 	.word	0x200005c4
 800213c:	200005c0 	.word	0x200005c0
 8002140:	200005a0 	.word	0x200005a0
 8002144:	200006fc 	.word	0x200006fc

08002148 <ccwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void ccwCicleInterpolation(){
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <ccwCicleInterpolation+0x1d0>)
 8002150:	685a      	ldr	r2, [r3, #4]
 8002152:	4b72      	ldr	r3, [pc, #456]	; (800231c <ccwCicleInterpolation+0x1d4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d108      	bne.n	800216c <ccwCicleInterpolation+0x24>
 800215a:	4b6f      	ldr	r3, [pc, #444]	; (8002318 <ccwCicleInterpolation+0x1d0>)
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	4b70      	ldr	r3, [pc, #448]	; (8002320 <ccwCicleInterpolation+0x1d8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d102      	bne.n	800216c <ccwCicleInterpolation+0x24>
		comandExecuted();
 8002166:	f000 f93f 	bl	80023e8 <comandExecuted>
		return;
 800216a:	e0d2      	b.n	8002312 <ccwCicleInterpolation+0x1ca>
	}

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 800216c:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6c      	ldr	r2, [pc, #432]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 8002172:	6812      	ldr	r2, [r2, #0]
 8002174:	fb02 f203 	mul.w	r2, r2, r3
 8002178:	4b6b      	ldr	r3, [pc, #428]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	496a      	ldr	r1, [pc, #424]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 800217e:	6809      	ldr	r1, [r1, #0]
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	441a      	add	r2, r3
 8002186:	4b64      	ldr	r3, [pc, #400]	; (8002318 <ccwCicleInterpolation+0x1d0>)
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	4963      	ldr	r1, [pc, #396]	; (8002318 <ccwCicleInterpolation+0x1d0>)
 800218c:	6949      	ldr	r1, [r1, #20]
 800218e:	fb01 f303 	mul.w	r3, r1, r3
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	607b      	str	r3, [r7, #4]
																			//контролируется на этапе парсинга
		if(F >= 0){//если на окружности или за ней
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db53      	blt.n	8002244 <ccwCicleInterpolation+0xfc>

			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dd07      	ble.n	80021b4 <ccwCicleInterpolation+0x6c>
 80021a4:	4b60      	ldr	r3, [pc, #384]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	dd03      	ble.n	80021b4 <ccwCicleInterpolation+0x6c>
				stepsCounterX = 1;
 80021ac:	4b5f      	ldr	r3, [pc, #380]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	e09d      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 80021b4:	4b5b      	ldr	r3, [pc, #364]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd07      	ble.n	80021cc <ccwCicleInterpolation+0x84>
 80021bc:	4b5a      	ldr	r3, [pc, #360]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	da03      	bge.n	80021cc <ccwCicleInterpolation+0x84>
				stepsCounterY = 1;
 80021c4:	4b5a      	ldr	r3, [pc, #360]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	601a      	str	r2, [r3, #0]
 80021ca:	e091      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 80021cc:	4b55      	ldr	r3, [pc, #340]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	da08      	bge.n	80021e6 <ccwCicleInterpolation+0x9e>
 80021d4:	4b54      	ldr	r3, [pc, #336]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da04      	bge.n	80021e6 <ccwCicleInterpolation+0x9e>
				stepsCounterX = -1;
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80021de:	f04f 32ff 	mov.w	r2, #4294967295
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e084      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 80021e6:	4b4f      	ldr	r3, [pc, #316]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	da08      	bge.n	8002200 <ccwCicleInterpolation+0xb8>
 80021ee:	4b4e      	ldr	r3, [pc, #312]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dd04      	ble.n	8002200 <ccwCicleInterpolation+0xb8>
				stepsCounterY = -1;
 80021f6:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	e077      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else{
				if(vPosY > 0){
 8002200:	4b49      	ldr	r3, [pc, #292]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	dd04      	ble.n	8002212 <ccwCicleInterpolation+0xca>
					stepsCounterY = -1;
 8002208:	4b49      	ldr	r3, [pc, #292]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 800220a:	f04f 32ff 	mov.w	r2, #4294967295
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	e06e      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosY < 0){
 8002212:	4b45      	ldr	r3, [pc, #276]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	da03      	bge.n	8002222 <ccwCicleInterpolation+0xda>
					stepsCounterY = 1;
 800221a:	4b45      	ldr	r3, [pc, #276]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 800221c:	2201      	movs	r2, #1
 800221e:	601a      	str	r2, [r3, #0]
 8002220:	e066      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX > 0){
 8002222:	4b40      	ldr	r3, [pc, #256]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dd03      	ble.n	8002232 <ccwCicleInterpolation+0xea>
					stepsCounterX = 1;
 800222a:	4b40      	ldr	r3, [pc, #256]	; (800232c <ccwCicleInterpolation+0x1e4>)
 800222c:	2201      	movs	r2, #1
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	e05e      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX < 0){
 8002232:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	da5a      	bge.n	80022f0 <ccwCicleInterpolation+0x1a8>
					stepsCounterX = -1;
 800223a:	4b3c      	ldr	r3, [pc, #240]	; (800232c <ccwCicleInterpolation+0x1e4>)
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	e055      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
			}
		}
		else if(F < 0){//если внутри окружности
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	da52      	bge.n	80022f0 <ccwCicleInterpolation+0x1a8>
			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800224a:	4b36      	ldr	r3, [pc, #216]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	dd07      	ble.n	8002262 <ccwCicleInterpolation+0x11a>
 8002252:	4b35      	ldr	r3, [pc, #212]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	dd03      	ble.n	8002262 <ccwCicleInterpolation+0x11a>
				stepsCounterY = 1;
 800225a:	4b35      	ldr	r3, [pc, #212]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	e046      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002262:	4b30      	ldr	r3, [pc, #192]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	dd08      	ble.n	800227c <ccwCicleInterpolation+0x134>
 800226a:	4b2f      	ldr	r3, [pc, #188]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	da04      	bge.n	800227c <ccwCicleInterpolation+0x134>
				stepsCounterX = -1;
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <ccwCicleInterpolation+0x1e4>)
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e039      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	da08      	bge.n	8002296 <ccwCicleInterpolation+0x14e>
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	da04      	bge.n	8002296 <ccwCicleInterpolation+0x14e>
				stepsCounterY = -1;
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 800228e:	f04f 32ff 	mov.w	r2, #4294967295
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e02c      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	da07      	bge.n	80022ae <ccwCicleInterpolation+0x166>
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	dd03      	ble.n	80022ae <ccwCicleInterpolation+0x166>
				stepsCounterX = 1;
 80022a6:	4b21      	ldr	r3, [pc, #132]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80022a8:	2201      	movs	r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e020      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
			}
			else{
				if(vPosY > 0){
 80022ae:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	dd03      	ble.n	80022be <ccwCicleInterpolation+0x176>
					stepsCounterX = 1;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80022b8:	2201      	movs	r2, #1
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e018      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosY < 0){
 80022be:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	da04      	bge.n	80022d0 <ccwCicleInterpolation+0x188>
					stepsCounterX = -1;
 80022c6:	4b19      	ldr	r3, [pc, #100]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e00f      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX > 0){
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	dd03      	ble.n	80022e0 <ccwCicleInterpolation+0x198>
					stepsCounterY = 1;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 80022da:	2201      	movs	r2, #1
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	e007      	b.n	80022f0 <ccwCicleInterpolation+0x1a8>
				}
				else if(vPosX < 0){
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	da03      	bge.n	80022f0 <ccwCicleInterpolation+0x1a8>
					stepsCounterY = -1;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 80022ea:	f04f 32ff 	mov.w	r2, #4294967295
 80022ee:	601a      	str	r2, [r3, #0]
				}
			}
		}

		vPosX+=stepsCounterX;
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <ccwCicleInterpolation+0x1e4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4413      	add	r3, r2
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <ccwCicleInterpolation+0x1dc>)
 80022fc:	6013      	str	r3, [r2, #0]
		vPosY+=stepsCounterY;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	4b0b      	ldr	r3, [pc, #44]	; (8002330 <ccwCicleInterpolation+0x1e8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4413      	add	r3, r2
 8002308:	4a07      	ldr	r2, [pc, #28]	; (8002328 <ccwCicleInterpolation+0x1e0>)
 800230a:	6013      	str	r3, [r2, #0]

		HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 800230c:	4809      	ldr	r0, [pc, #36]	; (8002334 <ccwCicleInterpolation+0x1ec>)
 800230e:	f003 f801 	bl	8005314 <HAL_TIM_Base_Start_IT>
}
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200005d0 	.word	0x200005d0
 800231c:	200005a8 	.word	0x200005a8
 8002320:	200005c8 	.word	0x200005c8
 8002324:	200005ac 	.word	0x200005ac
 8002328:	200005c4 	.word	0x200005c4
 800232c:	200005a0 	.word	0x200005a0
 8002330:	200005c0 	.word	0x200005c0
 8002334:	200006fc 	.word	0x200006fc

08002338 <moveToZero>:
////////////////////////////////////////////////////////////////////////////////////////////
void moveToZero(){
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET) &&
 800233c:	2101      	movs	r1, #1
 800233e:	4822      	ldr	r0, [pc, #136]	; (80023c8 <moveToZero+0x90>)
 8002340:	f001 fb94 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b01      	cmp	r3, #1
 8002348:	d119      	bne.n	800237e <moveToZero+0x46>
			(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET) &&
 800234a:	2102      	movs	r1, #2
 800234c:	481e      	ldr	r0, [pc, #120]	; (80023c8 <moveToZero+0x90>)
 800234e:	f001 fb8d 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
	if((HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET) &&
 8002354:	2b01      	cmp	r3, #1
 8002356:	d112      	bne.n	800237e <moveToZero+0x46>
			(HAL_GPIO_ReadPin(swZ) == GPIO_PIN_SET)){
 8002358:	2104      	movs	r1, #4
 800235a:	481b      	ldr	r0, [pc, #108]	; (80023c8 <moveToZero+0x90>)
 800235c:	f001 fb86 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
			(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET) &&
 8002362:	2b01      	cmp	r3, #1
 8002364:	d10b      	bne.n	800237e <moveToZero+0x46>
		positionX = 0;
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <moveToZero+0x94>)
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
		positionY = 0;
 800236c:	4b18      	ldr	r3, [pc, #96]	; (80023d0 <moveToZero+0x98>)
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
		positionZ = 0;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <moveToZero+0x9c>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
		comandExecuted();
 8002378:	f000 f836 	bl	80023e8 <comandExecuted>
		return;
 800237c:	e023      	b.n	80023c6 <moveToZero+0x8e>
	}

	if(HAL_GPIO_ReadPin(swX) != GPIO_PIN_SET){
 800237e:	2101      	movs	r1, #1
 8002380:	4811      	ldr	r0, [pc, #68]	; (80023c8 <moveToZero+0x90>)
 8002382:	f001 fb73 	bl	8003a6c <HAL_GPIO_ReadPin>
 8002386:	4603      	mov	r3, r0
 8002388:	2b01      	cmp	r3, #1
 800238a:	d003      	beq.n	8002394 <moveToZero+0x5c>
		stepsCounterX = -1;
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <moveToZero+0xa0>)
 800238e:	f04f 32ff 	mov.w	r2, #4294967295
 8002392:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(swY) != GPIO_PIN_SET){
 8002394:	2102      	movs	r1, #2
 8002396:	480c      	ldr	r0, [pc, #48]	; (80023c8 <moveToZero+0x90>)
 8002398:	f001 fb68 	bl	8003a6c <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d003      	beq.n	80023aa <moveToZero+0x72>
		stepsCounterY = -1;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <moveToZero+0xa4>)
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	601a      	str	r2, [r3, #0]
	}
	if(HAL_GPIO_ReadPin(swZ) != GPIO_PIN_SET){
 80023aa:	2104      	movs	r1, #4
 80023ac:	4806      	ldr	r0, [pc, #24]	; (80023c8 <moveToZero+0x90>)
 80023ae:	f001 fb5d 	bl	8003a6c <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d003      	beq.n	80023c0 <moveToZero+0x88>
		stepsCounterZ = -1;
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <moveToZero+0xa8>)
 80023ba:	f04f 32ff 	mov.w	r2, #4294967295
 80023be:	601a      	str	r2, [r3, #0]
	}

	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <moveToZero+0xac>)
 80023c2:	f002 ffa7 	bl	8005314 <HAL_TIM_Base_Start_IT>
}
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40010800 	.word	0x40010800
 80023cc:	200005a8 	.word	0x200005a8
 80023d0:	200005c8 	.word	0x200005c8
 80023d4:	200005a4 	.word	0x200005a4
 80023d8:	200005a0 	.word	0x200005a0
 80023dc:	200005c0 	.word	0x200005c0
 80023e0:	200005b4 	.word	0x200005b4
 80023e4:	200006fc 	.word	0x200006fc

080023e8 <comandExecuted>:
/////////////////////////////////////////////////////////////////////////////////////
void comandExecuted(){
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	vPosX = 0;
 80023ec:	4b07      	ldr	r3, [pc, #28]	; (800240c <comandExecuted+0x24>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
	vPosY = 0;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <comandExecuted+0x28>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
	counter = 0;
 80023f8:	4b06      	ldr	r3, [pc, #24]	; (8002414 <comandExecuted+0x2c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]
	resetCurrentCommand();
 80023fe:	f000 f80b 	bl	8002418 <resetCurrentCommand>
	sendFree();
 8002402:	f001 f81d 	bl	8003440 <sendFree>
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200005ac 	.word	0x200005ac
 8002410:	200005c4 	.word	0x200005c4
 8002414:	2000069c 	.word	0x2000069c

08002418 <resetCurrentCommand>:
//////////////////////////////////////////////////////////////////////////////////////
void resetCurrentCommand(){
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
	currentComand.F = 0;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <resetCurrentCommand+0x44>)
 800241e:	2200      	movs	r2, #0
 8002420:	611a      	str	r2, [r3, #16]
	currentComand.GCode = 0;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <resetCurrentCommand+0x44>)
 8002424:	2200      	movs	r2, #0
 8002426:	701a      	strb	r2, [r3, #0]
	currentComand.I = 0;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <resetCurrentCommand+0x44>)
 800242a:	2200      	movs	r2, #0
 800242c:	619a      	str	r2, [r3, #24]
	currentComand.J = 0;
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <resetCurrentCommand+0x44>)
 8002430:	2200      	movs	r2, #0
 8002432:	61da      	str	r2, [r3, #28]
	currentComand.R = 0;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <resetCurrentCommand+0x44>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
	currentComand.posX = 0;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <resetCurrentCommand+0x44>)
 800243c:	2200      	movs	r2, #0
 800243e:	605a      	str	r2, [r3, #4]
	currentComand.posY = 0;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <resetCurrentCommand+0x44>)
 8002442:	2200      	movs	r2, #0
 8002444:	609a      	str	r2, [r3, #8]
	currentComand.posZ = 0;
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <resetCurrentCommand+0x44>)
 8002448:	2200      	movs	r2, #0
 800244a:	60da      	str	r2, [r3, #12]
	currentComand.valid = 0;
 800244c:	4b03      	ldr	r3, [pc, #12]	; (800245c <resetCurrentCommand+0x44>)
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2020 	strb.w	r2, [r3, #32]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	200005d0 	.word	0x200005d0

08002460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002464:	f001 f81c 	bl	80034a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002468:	f000 f81c 	bl	80024a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800246c:	f000 f9a4 	bl	80027b8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002470:	f000 f888 	bl	8002584 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002474:	f000 f8bc 	bl	80025f0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002478:	f000 f906 	bl	8002688 <MX_TIM3_Init>
  MX_TIM4_Init();
 800247c:	f000 f950 	bl	8002720 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8002480:	f005 ff7c 	bl	800837c <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8002484:	f000 f86a 	bl	800255c <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  initDrives();
 8002488:	f7ff f9bc 	bl	8001804 <initDrives>
  usbInit();
 800248c:	f000 fe48 	bl	8003120 <usbInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(incomingMessageFlag==1){
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <main+0x40>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d1fb      	bne.n	8002490 <main+0x30>
	  	readMessage();
 8002498:	f000 fe58 	bl	800314c <readMessage>
	if(incomingMessageFlag==1){
 800249c:	e7f8      	b.n	8002490 <main+0x30>
 800249e:	bf00      	nop
 80024a0:	20000375 	.word	0x20000375

080024a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b094      	sub	sp, #80	; 0x50
 80024a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024ae:	2228      	movs	r2, #40	; 0x28
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f006 fc6d 	bl	8008d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024c8:	1d3b      	adds	r3, r7, #4
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80024de:	2300      	movs	r3, #0
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024e2:	2301      	movs	r3, #1
 80024e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e6:	2302      	movs	r3, #2
 80024e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024fa:	4618      	mov	r0, r3
 80024fc:	f002 f9de 	bl	80048bc <HAL_RCC_OscConfig>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002506:	f000 f9f5 	bl	80028f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800250a:	230f      	movs	r3, #15
 800250c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800250e:	2302      	movs	r3, #2
 8002510:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800251a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800251c:	2300      	movs	r3, #0
 800251e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2101      	movs	r1, #1
 8002526:	4618      	mov	r0, r3
 8002528:	f002 fc48 	bl	8004dbc <HAL_RCC_ClockConfig>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002532:	f000 f9df 	bl	80028f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002536:	2310      	movs	r3, #16
 8002538:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800253a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4618      	mov	r0, r3
 8002544:	f002 fda4 	bl	8005090 <HAL_RCCEx_PeriphCLKConfig>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800254e:	f000 f9d1 	bl	80028f4 <Error_Handler>
  }
}
 8002552:	bf00      	nop
 8002554:	3750      	adds	r7, #80	; 0x50
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_CRC_Init+0x20>)
 8002562:	4a07      	ldr	r2, [pc, #28]	; (8002580 <MX_CRC_Init+0x24>)
 8002564:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_CRC_Init+0x20>)
 8002568:	f001 f909 	bl	800377e <HAL_CRC_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8002572:	f000 f9bf 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000638 	.word	0x20000638
 8002580:	40023000 	.word	0x40023000

08002584 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002588:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <MX_SPI1_Init+0x64>)
 800258a:	4a18      	ldr	r2, [pc, #96]	; (80025ec <MX_SPI1_Init+0x68>)
 800258c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <MX_SPI1_Init+0x64>)
 8002590:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002594:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <MX_SPI1_Init+0x64>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <MX_SPI1_Init+0x64>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80025ae:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80025b4:	4b0c      	ldr	r3, [pc, #48]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025b6:	2208      	movs	r2, #8
 80025b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025c0:	4b09      	ldr	r3, [pc, #36]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025ce:	220a      	movs	r2, #10
 80025d0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_SPI1_Init+0x64>)
 80025d4:	f002 fe12 	bl	80051fc <HAL_SPI_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 80025de:	f000 f989 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200006a4 	.word	0x200006a4
 80025ec:	40013000 	.word	0x40013000

080025f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025f6:	f107 0308 	add.w	r3, r7, #8
 80025fa:	2200      	movs	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
 8002600:	609a      	str	r2, [r3, #8]
 8002602:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002604:	463b      	mov	r3, r7
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <MX_TIM2_Init+0x94>)
 800260e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002612:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <MX_TIM2_Init+0x94>)
 8002616:	2277      	movs	r2, #119	; 0x77
 8002618:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261a:	4b1a      	ldr	r3, [pc, #104]	; (8002684 <MX_TIM2_Init+0x94>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8002620:	4b18      	ldr	r3, [pc, #96]	; (8002684 <MX_TIM2_Init+0x94>)
 8002622:	2209      	movs	r2, #9
 8002624:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <MX_TIM2_Init+0x94>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <MX_TIM2_Init+0x94>)
 800262e:	2280      	movs	r2, #128	; 0x80
 8002630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002632:	4814      	ldr	r0, [pc, #80]	; (8002684 <MX_TIM2_Init+0x94>)
 8002634:	f002 fe43 	bl	80052be <HAL_TIM_Base_Init>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800263e:	f000 f959 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002646:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002648:	f107 0308 	add.w	r3, r7, #8
 800264c:	4619      	mov	r1, r3
 800264e:	480d      	ldr	r0, [pc, #52]	; (8002684 <MX_TIM2_Init+0x94>)
 8002650:	f002 ffb5 	bl	80055be <HAL_TIM_ConfigClockSource>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800265a:	f000 f94b 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002662:	2300      	movs	r3, #0
 8002664:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002666:	463b      	mov	r3, r7
 8002668:	4619      	mov	r1, r3
 800266a:	4806      	ldr	r0, [pc, #24]	; (8002684 <MX_TIM2_Init+0x94>)
 800266c:	f003 f97a 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002676:	f000 f93d 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	200006fc 	.word	0x200006fc

08002688 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800268e:	f107 0308 	add.w	r3, r7, #8
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	605a      	str	r2, [r3, #4]
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800269c:	463b      	mov	r3, r7
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80026a4:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <MX_TIM3_Init+0x90>)
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <MX_TIM3_Init+0x94>)
 80026a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80026aa:	4b1b      	ldr	r3, [pc, #108]	; (8002718 <MX_TIM3_Init+0x90>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b19      	ldr	r3, [pc, #100]	; (8002718 <MX_TIM3_Init+0x90>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80026b6:	4b18      	ldr	r3, [pc, #96]	; (8002718 <MX_TIM3_Init+0x90>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026bc:	4b16      	ldr	r3, [pc, #88]	; (8002718 <MX_TIM3_Init+0x90>)
 80026be:	2200      	movs	r2, #0
 80026c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c2:	4b15      	ldr	r3, [pc, #84]	; (8002718 <MX_TIM3_Init+0x90>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <MX_TIM3_Init+0x90>)
 80026ca:	f002 fdf8 	bl	80052be <HAL_TIM_Base_Init>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80026d4:	f000 f90e 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026de:	f107 0308 	add.w	r3, r7, #8
 80026e2:	4619      	mov	r1, r3
 80026e4:	480c      	ldr	r0, [pc, #48]	; (8002718 <MX_TIM3_Init+0x90>)
 80026e6:	f002 ff6a 	bl	80055be <HAL_TIM_ConfigClockSource>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80026f0:	f000 f900 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026f4:	2300      	movs	r3, #0
 80026f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026fc:	463b      	mov	r3, r7
 80026fe:	4619      	mov	r1, r3
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <MX_TIM3_Init+0x90>)
 8002702:	f003 f92f 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800270c:	f000 f8f2 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	20000644 	.word	0x20000644
 800271c:	40000400 	.word	0x40000400

08002720 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002726:	f107 0308 	add.w	r3, r7, #8
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
 800272e:	605a      	str	r2, [r3, #4]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002734:	463b      	mov	r3, r7
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800273c:	4b1c      	ldr	r3, [pc, #112]	; (80027b0 <MX_TIM4_Init+0x90>)
 800273e:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <MX_TIM4_Init+0x94>)
 8002740:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <MX_TIM4_Init+0x90>)
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <MX_TIM4_Init+0x90>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 800274e:	4b18      	ldr	r3, [pc, #96]	; (80027b0 <MX_TIM4_Init+0x90>)
 8002750:	2200      	movs	r2, #0
 8002752:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002754:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <MX_TIM4_Init+0x90>)
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_TIM4_Init+0x90>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002760:	4813      	ldr	r0, [pc, #76]	; (80027b0 <MX_TIM4_Init+0x90>)
 8002762:	f002 fdac 	bl	80052be <HAL_TIM_Base_Init>
 8002766:	4603      	mov	r3, r0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d001      	beq.n	8002770 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 800276c:	f000 f8c2 	bl	80028f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002774:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	4619      	mov	r1, r3
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <MX_TIM4_Init+0x90>)
 800277e:	f002 ff1e 	bl	80055be <HAL_TIM_ConfigClockSource>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002788:	f000 f8b4 	bl	80028f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002794:	463b      	mov	r3, r7
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_TIM4_Init+0x90>)
 800279a:	f003 f8e3 	bl	8005964 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 80027a4:	f000 f8a6 	bl	80028f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200005f8 	.word	0x200005f8
 80027b4:	40000800 	.word	0x40000800

080027b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027be:	f107 0310 	add.w	r3, r7, #16
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027cc:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	4a44      	ldr	r2, [pc, #272]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027d2:	f043 0310 	orr.w	r3, r3, #16
 80027d6:	6193      	str	r3, [r2, #24]
 80027d8:	4b42      	ldr	r3, [pc, #264]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	60fb      	str	r3, [r7, #12]
 80027e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027e4:	4b3f      	ldr	r3, [pc, #252]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a3e      	ldr	r2, [pc, #248]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027ea:	f043 0320 	orr.w	r3, r3, #32
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b3c      	ldr	r3, [pc, #240]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	60bb      	str	r3, [r7, #8]
 80027fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <MX_GPIO_Init+0x12c>)
 80027fe:	699b      	ldr	r3, [r3, #24]
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <MX_GPIO_Init+0x12c>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6193      	str	r3, [r2, #24]
 8002808:	4b36      	ldr	r3, [pc, #216]	; (80028e4 <MX_GPIO_Init+0x12c>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	607b      	str	r3, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002814:	4b33      	ldr	r3, [pc, #204]	; (80028e4 <MX_GPIO_Init+0x12c>)
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	4a32      	ldr	r2, [pc, #200]	; (80028e4 <MX_GPIO_Init+0x12c>)
 800281a:	f043 0308 	orr.w	r3, r3, #8
 800281e:	6193      	str	r3, [r2, #24]
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <MX_GPIO_Init+0x12c>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0308 	and.w	r3, r3, #8
 8002828:	603b      	str	r3, [r7, #0]
 800282a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800282c:	2201      	movs	r2, #1
 800282e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002832:	482d      	ldr	r0, [pc, #180]	; (80028e8 <MX_GPIO_Init+0x130>)
 8002834:	f001 f931 	bl	8003a9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 8002838:	2201      	movs	r2, #1
 800283a:	f24f 01d8 	movw	r1, #61656	; 0xf0d8
 800283e:	482b      	ldr	r0, [pc, #172]	; (80028ec <MX_GPIO_Init+0x134>)
 8002840:	f001 f92b 	bl	8003a9a <HAL_GPIO_WritePin>
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin, GPIO_PIN_SET);
 8002844:	2201      	movs	r2, #1
 8002846:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 800284a:	4829      	ldr	r0, [pc, #164]	; (80028f0 <MX_GPIO_Init+0x138>)
 800284c:	f001 f925 	bl	8003a9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002856:	2301      	movs	r3, #1
 8002858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2302      	movs	r3, #2
 8002860:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	4619      	mov	r1, r3
 8002868:	481f      	ldr	r0, [pc, #124]	; (80028e8 <MX_GPIO_Init+0x130>)
 800286a:	f000 ffa5 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800286e:	2307      	movs	r3, #7
 8002870:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002872:	2300      	movs	r3, #0
 8002874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002876:	2302      	movs	r3, #2
 8002878:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 0310 	add.w	r3, r7, #16
 800287e:	4619      	mov	r1, r3
 8002880:	481b      	ldr	r0, [pc, #108]	; (80028f0 <MX_GPIO_Init+0x138>)
 8002882:	f000 ff99 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_A_Pin X_B_Pin X_C_Pin X_D_Pin 
                           Z_C_Pin Z_D_Pin Y_D_Pin Z_A_Pin */
  GPIO_InitStruct.Pin = X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 8002886:	f24f 03d8 	movw	r3, #61656	; 0xf0d8
 800288a:	613b      	str	r3, [r7, #16]
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	2301      	movs	r3, #1
 800288e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2302      	movs	r3, #2
 8002896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	4619      	mov	r1, r3
 800289e:	4813      	ldr	r0, [pc, #76]	; (80028ec <MX_GPIO_Init+0x134>)
 80028a0:	f000 ff8a 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_A_Pin Y_B_Pin Y_C_Pin Z_B_Pin */
  GPIO_InitStruct.Pin = Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin;
 80028a4:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028aa:	2301      	movs	r3, #1
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b2:	2302      	movs	r3, #2
 80028b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b6:	f107 0310 	add.w	r3, r7, #16
 80028ba:	4619      	mov	r1, r3
 80028bc:	480c      	ldr	r0, [pc, #48]	; (80028f0 <MX_GPIO_Init+0x138>)
 80028be:	f000 ff7b 	bl	80037b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 80028c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028c8:	2300      	movs	r3, #0
 80028ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 0310 	add.w	r3, r7, #16
 80028d4:	4619      	mov	r1, r3
 80028d6:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_GPIO_Init+0x134>)
 80028d8:	f000 ff6e 	bl	80037b8 <HAL_GPIO_Init>

}
 80028dc:	bf00      	nop
 80028de:	3720      	adds	r7, #32
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40010c00 	.word	0x40010c00
 80028f0:	40010800 	.word	0x40010800

080028f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002906:	4b15      	ldr	r3, [pc, #84]	; (800295c <HAL_MspInit+0x5c>)
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	4a14      	ldr	r2, [pc, #80]	; (800295c <HAL_MspInit+0x5c>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	6193      	str	r3, [r2, #24]
 8002912:	4b12      	ldr	r3, [pc, #72]	; (800295c <HAL_MspInit+0x5c>)
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_MspInit+0x5c>)
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	4a0e      	ldr	r2, [pc, #56]	; (800295c <HAL_MspInit+0x5c>)
 8002924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002928:	61d3      	str	r3, [r2, #28]
 800292a:	4b0c      	ldr	r3, [pc, #48]	; (800295c <HAL_MspInit+0x5c>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002932:	607b      	str	r3, [r7, #4]
 8002934:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_MspInit+0x60>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	4a04      	ldr	r2, [pc, #16]	; (8002960 <HAL_MspInit+0x60>)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002952:	bf00      	nop
 8002954:	3714      	adds	r7, #20
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr
 800295c:	40021000 	.word	0x40021000
 8002960:	40010000 	.word	0x40010000

08002964 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_CRC_MspInit+0x34>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10b      	bne.n	800298e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_CRC_MspInit+0x38>)
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_CRC_MspInit+0x38>)
 800297c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002980:	6153      	str	r3, [r2, #20]
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_CRC_MspInit+0x38>)
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40023000 	.word	0x40023000
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a1b      	ldr	r2, [pc, #108]	; (8002a28 <HAL_SPI_MspInit+0x88>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d12f      	bne.n	8002a20 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	4a13      	ldr	r2, [pc, #76]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029de:	f043 0304 	orr.w	r3, r3, #4
 80029e2:	6193      	str	r3, [r2, #24]
 80029e4:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <HAL_SPI_MspInit+0x8c>)
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	60bb      	str	r3, [r7, #8]
 80029ee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80029f0:	2350      	movs	r3, #80	; 0x50
 80029f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029fc:	f107 0310 	add.w	r3, r7, #16
 8002a00:	4619      	mov	r1, r3
 8002a02:	480b      	ldr	r0, [pc, #44]	; (8002a30 <HAL_SPI_MspInit+0x90>)
 8002a04:	f000 fed8 	bl	80037b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a08:	23a0      	movs	r3, #160	; 0xa0
 8002a0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a14:	f107 0310 	add.w	r3, r7, #16
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <HAL_SPI_MspInit+0x90>)
 8002a1c:	f000 fecc 	bl	80037b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a20:	bf00      	nop
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40013000 	.word	0x40013000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40010800 	.word	0x40010800

08002a34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a44:	d114      	bne.n	8002a70 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a46:	4b26      	ldr	r3, [pc, #152]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	61d3      	str	r3, [r2, #28]
 8002a52:	4b23      	ldr	r3, [pc, #140]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a5e:	2200      	movs	r2, #0
 8002a60:	2100      	movs	r1, #0
 8002a62:	201c      	movs	r0, #28
 8002a64:	f000 fe55 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a68:	201c      	movs	r0, #28
 8002a6a:	f000 fe6e 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a6e:	e032      	b.n	8002ad6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <HAL_TIM_Base_MspInit+0xb0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d114      	bne.n	8002aa4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7a:	4b19      	ldr	r3, [pc, #100]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a7c:	69db      	ldr	r3, [r3, #28]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	61d3      	str	r3, [r2, #28]
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	613b      	str	r3, [r7, #16]
 8002a90:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	201d      	movs	r0, #29
 8002a98:	f000 fe3b 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a9c:	201d      	movs	r0, #29
 8002a9e:	f000 fe54 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 8002aa2:	e018      	b.n	8002ad6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_TIM_Base_MspInit+0xb4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d113      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aae:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	4a0b      	ldr	r2, [pc, #44]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002ab4:	f043 0304 	orr.w	r3, r3, #4
 8002ab8:	61d3      	str	r3, [r2, #28]
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_TIM_Base_MspInit+0xac>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	201e      	movs	r0, #30
 8002acc:	f000 fe21 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ad0:	201e      	movs	r0, #30
 8002ad2:	f000 fe3a 	bl	800374a <HAL_NVIC_EnableIRQ>
}
 8002ad6:	bf00      	nop
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40021000 	.word	0x40021000
 8002ae4:	40000400 	.word	0x40000400
 8002ae8:	40000800 	.word	0x40000800

08002aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002afc:	e7fe      	b.n	8002afc <HardFault_Handler+0x4>

08002afe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002afe:	b480      	push	{r7}
 8002b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b02:	e7fe      	b.n	8002b02 <MemManage_Handler+0x4>

08002b04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b08:	e7fe      	b.n	8002b08 <BusFault_Handler+0x4>

08002b0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b0e:	e7fe      	b.n	8002b0e <UsageFault_Handler+0x4>

08002b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b14:	bf00      	nop
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr

08002b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc80      	pop	{r7}
 8002b26:	4770      	bx	lr

08002b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b2c:	bf00      	nop
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b38:	f000 fcf8 	bl	800352c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002b46:	f001 f8df 	bl	8003d08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200013d4 	.word	0x200013d4

08002b54 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <TIM2_IRQHandler+0x10>)
 8002b5a:	f002 fc28 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200006fc 	.word	0x200006fc

08002b68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM3_IRQHandler+0x10>)
 8002b6e:	f002 fc1e 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000644 	.word	0x20000644

08002b7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <TIM4_IRQHandler+0x10>)
 8002b82:	f002 fc14 	bl	80053ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200005f8 	.word	0x200005f8

08002b90 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002b98:	4b11      	ldr	r3, [pc, #68]	; (8002be0 <_sbrk+0x50>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <_sbrk+0x16>
		heap_end = &end;
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <_sbrk+0x50>)
 8002ba2:	4a10      	ldr	r2, [pc, #64]	; (8002be4 <_sbrk+0x54>)
 8002ba4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002ba6:	4b0e      	ldr	r3, [pc, #56]	; (8002be0 <_sbrk+0x50>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bac:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <_sbrk+0x50>)
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	466a      	mov	r2, sp
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d907      	bls.n	8002bca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bba:	f006 f88d 	bl	8008cd8 <__errno>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	230c      	movs	r3, #12
 8002bc2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc8:	e006      	b.n	8002bd8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bca:	4b05      	ldr	r3, [pc, #20]	; (8002be0 <_sbrk+0x50>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a03      	ldr	r2, [pc, #12]	; (8002be0 <_sbrk+0x50>)
 8002bd4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	20000370 	.word	0x20000370
 8002be4:	20001648 	.word	0x20001648

08002be8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bec:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <SystemInit+0x5c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a14      	ldr	r2, [pc, #80]	; (8002c44 <SystemInit+0x5c>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002bf8:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <SystemInit+0x5c>)
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	4911      	ldr	r1, [pc, #68]	; (8002c44 <SystemInit+0x5c>)
 8002bfe:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <SystemInit+0x60>)
 8002c00:	4013      	ands	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c04:	4b0f      	ldr	r3, [pc, #60]	; (8002c44 <SystemInit+0x5c>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <SystemInit+0x5c>)
 8002c0a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c12:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <SystemInit+0x5c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SystemInit+0x5c>)
 8002c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c1e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <SystemInit+0x5c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <SystemInit+0x5c>)
 8002c26:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c2a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SystemInit+0x5c>)
 8002c2e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c32:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <SystemInit+0x64>)
 8002c36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c3a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c3c:	bf00      	nop
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bc80      	pop	{r7}
 8002c42:	4770      	bx	lr
 8002c44:	40021000 	.word	0x40021000
 8002c48:	f8ff0000 	.word	0xf8ff0000
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Игорь
 */
#include "timers.h"

////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2){
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c60:	d126      	bne.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x60>

		counter++;
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	3301      	adds	r3, #1
 8002c68:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c6a:	6013      	str	r3, [r2, #0]
		if(counter>=timerDivider){
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	461a      	mov	r2, r3
 8002c72:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d31a      	bcc.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x60>

			if((stepsCounterX==0) && (stepsCounterY==0) && (stepsCounterZ==0)){
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10d      	bne.n	8002c9e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002c82:	4b10      	ldr	r3, [pc, #64]	; (8002cc4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002c92:	480e      	ldr	r0, [pc, #56]	; (8002ccc <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002c94:	f002 fb61 	bl	800535a <HAL_TIM_Base_Stop_IT>
				calcInterpolation();//пересчитываем следующий шаг интерполяции
 8002c98:	f7fe ffd0 	bl	8001c3c <calcInterpolation>
				return;
 8002c9c:	e008      	b.n	8002cb0 <HAL_TIM_PeriodElapsedCallback+0x60>
			}

			moveDirX();
 8002c9e:	f000 f817 	bl	8002cd0 <moveDirX>
			moveDirY();
 8002ca2:	f000 f8d1 	bl	8002e48 <moveDirY>
			moveDirZ();
 8002ca6:	f000 f981 	bl	8002fac <moveDirZ>
			counter=0;
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000069c 	.word	0x2000069c
 8002cbc:	200005b8 	.word	0x200005b8
 8002cc0:	200005a0 	.word	0x200005a0
 8002cc4:	200005c0 	.word	0x200005c0
 8002cc8:	200005b4 	.word	0x200005b4
 8002ccc:	200006fc 	.word	0x200006fc

08002cd0 <moveDirX>:
/////////////////////////////////////////////////////////////////////////////
void moveDirX(){
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
	static char stepX=1;

	if(stepsCounterX!=0){
 8002cd4:	4b58      	ldr	r3, [pc, #352]	; (8002e38 <moveDirX+0x168>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 80ab 	beq.w	8002e34 <moveDirX+0x164>
		if(stepsCounterX>0){
 8002cde:	4b56      	ldr	r3, [pc, #344]	; (8002e38 <moveDirX+0x168>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	dd17      	ble.n	8002d16 <moveDirX+0x46>
			stepX--;
 8002ce6:	4b55      	ldr	r3, [pc, #340]	; (8002e3c <moveDirX+0x16c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <moveDirX+0x16c>)
 8002cf0:	701a      	strb	r2, [r3, #0]
			if(stepX == 0)stepX = 4;
 8002cf2:	4b52      	ldr	r3, [pc, #328]	; (8002e3c <moveDirX+0x16c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d102      	bne.n	8002d00 <moveDirX+0x30>
 8002cfa:	4b50      	ldr	r3, [pc, #320]	; (8002e3c <moveDirX+0x16c>)
 8002cfc:	2204      	movs	r2, #4
 8002cfe:	701a      	strb	r2, [r3, #0]
			positionX+=1;
 8002d00:	4b4f      	ldr	r3, [pc, #316]	; (8002e40 <moveDirX+0x170>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	4a4e      	ldr	r2, [pc, #312]	; (8002e40 <moveDirX+0x170>)
 8002d08:	6013      	str	r3, [r2, #0]
			stepsCounterX--;
 8002d0a:	4b4b      	ldr	r3, [pc, #300]	; (8002e38 <moveDirX+0x168>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	4a49      	ldr	r2, [pc, #292]	; (8002e38 <moveDirX+0x168>)
 8002d12:	6013      	str	r3, [r2, #0]
 8002d14:	e01a      	b.n	8002d4c <moveDirX+0x7c>
		}
		else if(stepsCounterX<0){
 8002d16:	4b48      	ldr	r3, [pc, #288]	; (8002e38 <moveDirX+0x168>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	da16      	bge.n	8002d4c <moveDirX+0x7c>
			stepX++;
 8002d1e:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <moveDirX+0x16c>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	3301      	adds	r3, #1
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b45      	ldr	r3, [pc, #276]	; (8002e3c <moveDirX+0x16c>)
 8002d28:	701a      	strb	r2, [r3, #0]
			if(stepX== 5)stepX = 1;
 8002d2a:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <moveDirX+0x16c>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b05      	cmp	r3, #5
 8002d30:	d102      	bne.n	8002d38 <moveDirX+0x68>
 8002d32:	4b42      	ldr	r3, [pc, #264]	; (8002e3c <moveDirX+0x16c>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	701a      	strb	r2, [r3, #0]
			positionX-=1;
 8002d38:	4b41      	ldr	r3, [pc, #260]	; (8002e40 <moveDirX+0x170>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	4a40      	ldr	r2, [pc, #256]	; (8002e40 <moveDirX+0x170>)
 8002d40:	6013      	str	r3, [r2, #0]
			stepsCounterX++;
 8002d42:	4b3d      	ldr	r3, [pc, #244]	; (8002e38 <moveDirX+0x168>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <moveDirX+0x168>)
 8002d4a:	6013      	str	r3, [r2, #0]
		}
		switch(stepX){
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <moveDirX+0x16c>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d86e      	bhi.n	8002e34 <moveDirX+0x164>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <moveDirX+0x8c>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d6d 	.word	0x08002d6d
 8002d60:	08002d9f 	.word	0x08002d9f
 8002d64:	08002dd1 	.word	0x08002dd1
 8002d68:	08002e03 	.word	0x08002e03
			case(1):{
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d72:	4834      	ldr	r0, [pc, #208]	; (8002e44 <moveDirX+0x174>)
 8002d74:	f000 fe91 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002d7e:	4831      	ldr	r0, [pc, #196]	; (8002e44 <moveDirX+0x174>)
 8002d80:	f000 fe8b 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002d8a:	482e      	ldr	r0, [pc, #184]	; (8002e44 <moveDirX+0x174>)
 8002d8c:	f000 fe85 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_A,GPIO_PIN_SET);
 8002d90:	2201      	movs	r2, #1
 8002d92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d96:	482b      	ldr	r0, [pc, #172]	; (8002e44 <moveDirX+0x174>)
 8002d98:	f000 fe7f 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002d9c:	e04a      	b.n	8002e34 <moveDirX+0x164>
			}
			case(2):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002da4:	4827      	ldr	r0, [pc, #156]	; (8002e44 <moveDirX+0x174>)
 8002da6:	f000 fe78 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002daa:	2200      	movs	r2, #0
 8002dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002db0:	4824      	ldr	r0, [pc, #144]	; (8002e44 <moveDirX+0x174>)
 8002db2:	f000 fe72 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002db6:	2200      	movs	r2, #0
 8002db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dbc:	4821      	ldr	r0, [pc, #132]	; (8002e44 <moveDirX+0x174>)
 8002dbe:	f000 fe6c 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_SET);
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002dc8:	481e      	ldr	r0, [pc, #120]	; (8002e44 <moveDirX+0x174>)
 8002dca:	f000 fe66 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002dce:	e031      	b.n	8002e34 <moveDirX+0x164>
			}
			case(3):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002dd6:	481b      	ldr	r0, [pc, #108]	; (8002e44 <moveDirX+0x174>)
 8002dd8:	f000 fe5f 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002de2:	4818      	ldr	r0, [pc, #96]	; (8002e44 <moveDirX+0x174>)
 8002de4:	f000 fe59 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dee:	4815      	ldr	r0, [pc, #84]	; (8002e44 <moveDirX+0x174>)
 8002df0:	f000 fe53 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_SET);
 8002df4:	2201      	movs	r2, #1
 8002df6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002dfa:	4812      	ldr	r0, [pc, #72]	; (8002e44 <moveDirX+0x174>)
 8002dfc:	f000 fe4d 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002e00:	e018      	b.n	8002e34 <moveDirX+0x164>
			}
			case(4):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002e02:	2200      	movs	r2, #0
 8002e04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e08:	480e      	ldr	r0, [pc, #56]	; (8002e44 <moveDirX+0x174>)
 8002e0a:	f000 fe46 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e14:	480b      	ldr	r0, [pc, #44]	; (8002e44 <moveDirX+0x174>)
 8002e16:	f000 fe40 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e20:	4808      	ldr	r0, [pc, #32]	; (8002e44 <moveDirX+0x174>)
 8002e22:	f000 fe3a 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_SET);
 8002e26:	2201      	movs	r2, #1
 8002e28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e2c:	4805      	ldr	r0, [pc, #20]	; (8002e44 <moveDirX+0x174>)
 8002e2e:	f000 fe34 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002e32:	bf00      	nop
			}
		}
	}
}
 8002e34:	bf00      	nop
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	200005a0 	.word	0x200005a0
 8002e3c:	20000004 	.word	0x20000004
 8002e40:	200005a8 	.word	0x200005a8
 8002e44:	40010c00 	.word	0x40010c00

08002e48 <moveDirY>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirY(){
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
	static char stepY=1;

	if(stepsCounterY!=0){
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <moveDirY+0x150>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f000 809f 	beq.w	8002f94 <moveDirY+0x14c>
		if(stepsCounterY>0){
 8002e56:	4b50      	ldr	r3, [pc, #320]	; (8002f98 <moveDirY+0x150>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	dd17      	ble.n	8002e8e <moveDirY+0x46>
			stepY++;
 8002e5e:	4b4f      	ldr	r3, [pc, #316]	; (8002f9c <moveDirY+0x154>)
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	3301      	adds	r3, #1
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4b4d      	ldr	r3, [pc, #308]	; (8002f9c <moveDirY+0x154>)
 8002e68:	701a      	strb	r2, [r3, #0]
			if(stepY == 5)stepY = 1;
 8002e6a:	4b4c      	ldr	r3, [pc, #304]	; (8002f9c <moveDirY+0x154>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d102      	bne.n	8002e78 <moveDirY+0x30>
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <moveDirY+0x154>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	701a      	strb	r2, [r3, #0]
			positionY+=1;
 8002e78:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <moveDirY+0x158>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	4a48      	ldr	r2, [pc, #288]	; (8002fa0 <moveDirY+0x158>)
 8002e80:	6013      	str	r3, [r2, #0]
			stepsCounterY--;
 8002e82:	4b45      	ldr	r3, [pc, #276]	; (8002f98 <moveDirY+0x150>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	4a43      	ldr	r2, [pc, #268]	; (8002f98 <moveDirY+0x150>)
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e01a      	b.n	8002ec4 <moveDirY+0x7c>
		}
		else if(stepsCounterY<0){
 8002e8e:	4b42      	ldr	r3, [pc, #264]	; (8002f98 <moveDirY+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	da16      	bge.n	8002ec4 <moveDirY+0x7c>
			stepY--;
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <moveDirY+0x154>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	b2da      	uxtb	r2, r3
 8002e9e:	4b3f      	ldr	r3, [pc, #252]	; (8002f9c <moveDirY+0x154>)
 8002ea0:	701a      	strb	r2, [r3, #0]
			if(stepY == 0)stepY = 4;
 8002ea2:	4b3e      	ldr	r3, [pc, #248]	; (8002f9c <moveDirY+0x154>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d102      	bne.n	8002eb0 <moveDirY+0x68>
 8002eaa:	4b3c      	ldr	r3, [pc, #240]	; (8002f9c <moveDirY+0x154>)
 8002eac:	2204      	movs	r2, #4
 8002eae:	701a      	strb	r2, [r3, #0]
			positionY-=1;
 8002eb0:	4b3b      	ldr	r3, [pc, #236]	; (8002fa0 <moveDirY+0x158>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	4a3a      	ldr	r2, [pc, #232]	; (8002fa0 <moveDirY+0x158>)
 8002eb8:	6013      	str	r3, [r2, #0]
			stepsCounterY++;
 8002eba:	4b37      	ldr	r3, [pc, #220]	; (8002f98 <moveDirY+0x150>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	4a35      	ldr	r2, [pc, #212]	; (8002f98 <moveDirY+0x150>)
 8002ec2:	6013      	str	r3, [r2, #0]
		}
		switch(stepY){
 8002ec4:	4b35      	ldr	r3, [pc, #212]	; (8002f9c <moveDirY+0x154>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d862      	bhi.n	8002f94 <moveDirY+0x14c>
 8002ece:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <moveDirY+0x8c>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002f11 	.word	0x08002f11
 8002edc:	08002f3d 	.word	0x08002f3d
 8002ee0:	08002f69 	.word	0x08002f69
			case(1):{
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eea:	482e      	ldr	r0, [pc, #184]	; (8002fa4 <moveDirY+0x15c>)
 8002eec:	f000 fdd5 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	482c      	ldr	r0, [pc, #176]	; (8002fa8 <moveDirY+0x160>)
 8002ef6:	f000 fdd0 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_SET);
 8002efa:	2201      	movs	r2, #1
 8002efc:	2110      	movs	r1, #16
 8002efe:	482a      	ldr	r0, [pc, #168]	; (8002fa8 <moveDirY+0x160>)
 8002f00:	f000 fdcb 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2140      	movs	r1, #64	; 0x40
 8002f08:	4827      	ldr	r0, [pc, #156]	; (8002fa8 <moveDirY+0x160>)
 8002f0a:	f000 fdc6 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002f0e:	e041      	b.n	8002f94 <moveDirY+0x14c>
			}
			case(2):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f10:	2200      	movs	r2, #0
 8002f12:	2140      	movs	r1, #64	; 0x40
 8002f14:	4824      	ldr	r0, [pc, #144]	; (8002fa8 <moveDirY+0x160>)
 8002f16:	f000 fdc0 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_SET);
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	2108      	movs	r1, #8
 8002f1e:	4822      	ldr	r0, [pc, #136]	; (8002fa8 <moveDirY+0x160>)
 8002f20:	f000 fdbb 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f24:	2200      	movs	r2, #0
 8002f26:	2110      	movs	r1, #16
 8002f28:	481f      	ldr	r0, [pc, #124]	; (8002fa8 <moveDirY+0x160>)
 8002f2a:	f000 fdb6 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f34:	481b      	ldr	r0, [pc, #108]	; (8002fa4 <moveDirY+0x15c>)
 8002f36:	f000 fdb0 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002f3a:	e02b      	b.n	8002f94 <moveDirY+0x14c>
			}
			case(3):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2140      	movs	r1, #64	; 0x40
 8002f40:	4819      	ldr	r0, [pc, #100]	; (8002fa8 <moveDirY+0x160>)
 8002f42:	f000 fdaa 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_SET);
 8002f46:	2201      	movs	r2, #1
 8002f48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f4c:	4815      	ldr	r0, [pc, #84]	; (8002fa4 <moveDirY+0x15c>)
 8002f4e:	f000 fda4 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	2110      	movs	r1, #16
 8002f56:	4814      	ldr	r0, [pc, #80]	; (8002fa8 <moveDirY+0x160>)
 8002f58:	f000 fd9f 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2108      	movs	r1, #8
 8002f60:	4811      	ldr	r0, [pc, #68]	; (8002fa8 <moveDirY+0x160>)
 8002f62:	f000 fd9a 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002f66:	e015      	b.n	8002f94 <moveDirY+0x14c>
			}
			case(4):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_SET);
 8002f68:	2201      	movs	r2, #1
 8002f6a:	2140      	movs	r1, #64	; 0x40
 8002f6c:	480e      	ldr	r0, [pc, #56]	; (8002fa8 <moveDirY+0x160>)
 8002f6e:	f000 fd94 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002f72:	2200      	movs	r2, #0
 8002f74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f78:	480a      	ldr	r0, [pc, #40]	; (8002fa4 <moveDirY+0x15c>)
 8002f7a:	f000 fd8e 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2108      	movs	r1, #8
 8002f82:	4809      	ldr	r0, [pc, #36]	; (8002fa8 <moveDirY+0x160>)
 8002f84:	f000 fd89 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	4806      	ldr	r0, [pc, #24]	; (8002fa8 <moveDirY+0x160>)
 8002f8e:	f000 fd84 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8002f92:	bf00      	nop
			}
		}
	}
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	200005c0 	.word	0x200005c0
 8002f9c:	20000005 	.word	0x20000005
 8002fa0:	200005c8 	.word	0x200005c8
 8002fa4:	40010800 	.word	0x40010800
 8002fa8:	40010c00 	.word	0x40010c00

08002fac <moveDirZ>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirZ(){
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
	static char stepZ=1;

	if(stepsCounterZ!=0){
 8002fb0:	4b56      	ldr	r3, [pc, #344]	; (800310c <moveDirZ+0x160>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 80a7 	beq.w	8003108 <moveDirZ+0x15c>
			if(stepsCounterZ>0){
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <moveDirZ+0x160>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	dd17      	ble.n	8002ff2 <moveDirZ+0x46>
				stepZ--;
 8002fc2:	4b53      	ldr	r3, [pc, #332]	; (8003110 <moveDirZ+0x164>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b2da      	uxtb	r2, r3
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <moveDirZ+0x164>)
 8002fcc:	701a      	strb	r2, [r3, #0]
				if(stepZ == 0)stepZ = 4;
 8002fce:	4b50      	ldr	r3, [pc, #320]	; (8003110 <moveDirZ+0x164>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <moveDirZ+0x30>
 8002fd6:	4b4e      	ldr	r3, [pc, #312]	; (8003110 <moveDirZ+0x164>)
 8002fd8:	2204      	movs	r2, #4
 8002fda:	701a      	strb	r2, [r3, #0]
				positionZ+=1;
 8002fdc:	4b4d      	ldr	r3, [pc, #308]	; (8003114 <moveDirZ+0x168>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	4a4c      	ldr	r2, [pc, #304]	; (8003114 <moveDirZ+0x168>)
 8002fe4:	6013      	str	r3, [r2, #0]
				stepsCounterZ--;
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <moveDirZ+0x160>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	4a47      	ldr	r2, [pc, #284]	; (800310c <moveDirZ+0x160>)
 8002fee:	6013      	str	r3, [r2, #0]
 8002ff0:	e01a      	b.n	8003028 <moveDirZ+0x7c>
			}
			else if(stepsCounterZ<0){
 8002ff2:	4b46      	ldr	r3, [pc, #280]	; (800310c <moveDirZ+0x160>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	da16      	bge.n	8003028 <moveDirZ+0x7c>
				stepZ++;
 8002ffa:	4b45      	ldr	r3, [pc, #276]	; (8003110 <moveDirZ+0x164>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	3301      	adds	r3, #1
 8003000:	b2da      	uxtb	r2, r3
 8003002:	4b43      	ldr	r3, [pc, #268]	; (8003110 <moveDirZ+0x164>)
 8003004:	701a      	strb	r2, [r3, #0]
				if(stepZ == 5)stepZ = 1;
 8003006:	4b42      	ldr	r3, [pc, #264]	; (8003110 <moveDirZ+0x164>)
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b05      	cmp	r3, #5
 800300c:	d102      	bne.n	8003014 <moveDirZ+0x68>
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <moveDirZ+0x164>)
 8003010:	2201      	movs	r2, #1
 8003012:	701a      	strb	r2, [r3, #0]
				positionZ-=1;
 8003014:	4b3f      	ldr	r3, [pc, #252]	; (8003114 <moveDirZ+0x168>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	3b01      	subs	r3, #1
 800301a:	4a3e      	ldr	r2, [pc, #248]	; (8003114 <moveDirZ+0x168>)
 800301c:	6013      	str	r3, [r2, #0]
				stepsCounterZ++;
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <moveDirZ+0x160>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3301      	adds	r3, #1
 8003024:	4a39      	ldr	r2, [pc, #228]	; (800310c <moveDirZ+0x160>)
 8003026:	6013      	str	r3, [r2, #0]
			}
		switch(stepZ){
 8003028:	4b39      	ldr	r3, [pc, #228]	; (8003110 <moveDirZ+0x164>)
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	3b01      	subs	r3, #1
 800302e:	2b03      	cmp	r3, #3
 8003030:	d86a      	bhi.n	8003108 <moveDirZ+0x15c>
 8003032:	a201      	add	r2, pc, #4	; (adr r2, 8003038 <moveDirZ+0x8c>)
 8003034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003038:	08003049 	.word	0x08003049
 800303c:	08003079 	.word	0x08003079
 8003040:	080030a9 	.word	0x080030a9
 8003044:	080030d9 	.word	0x080030d9
			case(1):{
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8003048:	2200      	movs	r2, #0
 800304a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800304e:	4832      	ldr	r0, [pc, #200]	; (8003118 <moveDirZ+0x16c>)
 8003050:	f000 fd23 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8003054:	2200      	movs	r2, #0
 8003056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800305a:	482f      	ldr	r0, [pc, #188]	; (8003118 <moveDirZ+0x16c>)
 800305c:	f000 fd1d 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8003060:	2200      	movs	r2, #0
 8003062:	2180      	movs	r1, #128	; 0x80
 8003064:	482d      	ldr	r0, [pc, #180]	; (800311c <moveDirZ+0x170>)
 8003066:	f000 fd18 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_SET);
 800306a:	2201      	movs	r2, #1
 800306c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003070:	4829      	ldr	r0, [pc, #164]	; (8003118 <moveDirZ+0x16c>)
 8003072:	f000 fd12 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8003076:	e047      	b.n	8003108 <moveDirZ+0x15c>
			}
			case(2):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8003078:	2200      	movs	r2, #0
 800307a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307e:	4826      	ldr	r0, [pc, #152]	; (8003118 <moveDirZ+0x16c>)
 8003080:	f000 fd0b 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8003084:	2200      	movs	r2, #0
 8003086:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800308a:	4823      	ldr	r0, [pc, #140]	; (8003118 <moveDirZ+0x16c>)
 800308c:	f000 fd05 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8003090:	2200      	movs	r2, #0
 8003092:	2180      	movs	r1, #128	; 0x80
 8003094:	4821      	ldr	r0, [pc, #132]	; (800311c <moveDirZ+0x170>)
 8003096:	f000 fd00 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_SET);
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030a0:	481d      	ldr	r0, [pc, #116]	; (8003118 <moveDirZ+0x16c>)
 80030a2:	f000 fcfa 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 80030a6:	e02f      	b.n	8003108 <moveDirZ+0x15c>
			}
			case(3):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 80030a8:	2200      	movs	r2, #0
 80030aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030ae:	481a      	ldr	r0, [pc, #104]	; (8003118 <moveDirZ+0x16c>)
 80030b0:	f000 fcf3 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 80030b4:	2200      	movs	r2, #0
 80030b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ba:	4817      	ldr	r0, [pc, #92]	; (8003118 <moveDirZ+0x16c>)
 80030bc:	f000 fced 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 80030c0:	2200      	movs	r2, #0
 80030c2:	2180      	movs	r1, #128	; 0x80
 80030c4:	4815      	ldr	r0, [pc, #84]	; (800311c <moveDirZ+0x170>)
 80030c6:	f000 fce8 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_SET);
 80030ca:	2201      	movs	r2, #1
 80030cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030d0:	4811      	ldr	r0, [pc, #68]	; (8003118 <moveDirZ+0x16c>)
 80030d2:	f000 fce2 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 80030d6:	e017      	b.n	8003108 <moveDirZ+0x15c>
			}
			case(4):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 80030d8:	2200      	movs	r2, #0
 80030da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030de:	480e      	ldr	r0, [pc, #56]	; (8003118 <moveDirZ+0x16c>)
 80030e0:	f000 fcdb 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030ea:	480b      	ldr	r0, [pc, #44]	; (8003118 <moveDirZ+0x16c>)
 80030ec:	f000 fcd5 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 80030f0:	2200      	movs	r2, #0
 80030f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030f6:	4808      	ldr	r0, [pc, #32]	; (8003118 <moveDirZ+0x16c>)
 80030f8:	f000 fccf 	bl	8003a9a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_SET);
 80030fc:	2201      	movs	r2, #1
 80030fe:	2180      	movs	r1, #128	; 0x80
 8003100:	4806      	ldr	r0, [pc, #24]	; (800311c <moveDirZ+0x170>)
 8003102:	f000 fcca 	bl	8003a9a <HAL_GPIO_WritePin>
				break;
 8003106:	bf00      	nop
			}
		}
	}
}
 8003108:	bf00      	nop
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200005b4 	.word	0x200005b4
 8003110:	20000006 	.word	0x20000006
 8003114:	200005a4 	.word	0x200005a4
 8003118:	40010800 	.word	0x40010800
 800311c:	40010c00 	.word	0x40010c00

08003120 <usbInit>:
 */


#include "usb.h"

void usbInit(){
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
	if(rxBuffer==NULL){
 8003124:	4b07      	ldr	r3, [pc, #28]	; (8003144 <usbInit+0x24>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <usbInit+0x1a>
		rxBuffer=malloc(50);
 800312c:	2032      	movs	r0, #50	; 0x32
 800312e:	f005 fe0b 	bl	8008d48 <malloc>
 8003132:	4603      	mov	r3, r0
 8003134:	461a      	mov	r2, r3
 8003136:	4b03      	ldr	r3, [pc, #12]	; (8003144 <usbInit+0x24>)
 8003138:	601a      	str	r2, [r3, #0]
	}
	sizeOfMessage=0;
 800313a:	4b03      	ldr	r3, [pc, #12]	; (8003148 <usbInit+0x28>)
 800313c:	2200      	movs	r2, #0
 800313e:	701a      	strb	r2, [r3, #0]
}
 8003140:	bf00      	nop
 8003142:	bd80      	pop	{r7, pc}
 8003144:	200006a0 	.word	0x200006a0
 8003148:	20000698 	.word	0x20000698

0800314c <readMessage>:
///////////////////////////////////////////////////////////////
void readMessage(){
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0

	incomingMessageFlag=0;
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <readMessage+0x98>)
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
	unsigned short crc=0;
 8003158:	2300      	movs	r3, #0
 800315a:	80bb      	strh	r3, [r7, #4]
	unsigned short crc2=0;
 800315c:	2300      	movs	r3, #0
 800315e:	80fb      	strh	r3, [r7, #6]
	memcpy(&crc,&rxBuffer[sizeOfMessage-2],2);
 8003160:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <readMessage+0x9c>)
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	4b21      	ldr	r3, [pc, #132]	; (80031ec <readMessage+0xa0>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	3b02      	subs	r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	b29b      	uxth	r3, r3
 8003170:	80bb      	strh	r3, [r7, #4]
	crc2=Crc16(rxBuffer,sizeOfMessage-2);
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <readMessage+0x9c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	4b1d      	ldr	r3, [pc, #116]	; (80031ec <readMessage+0xa0>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b02      	subs	r3, #2
 800317e:	b29b      	uxth	r3, r3
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 f834 	bl	80031f0 <Crc16>
 8003188:	4603      	mov	r3, r0
 800318a:	80fb      	strh	r3, [r7, #6]
	if(crc==crc2){
 800318c:	88bb      	ldrh	r3, [r7, #4]
 800318e:	88fa      	ldrh	r2, [r7, #6]
 8003190:	429a      	cmp	r2, r3
 8003192:	d122      	bne.n	80031da <readMessage+0x8e>
		switch(rxBuffer[1]){
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <readMessage+0x9c>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	3301      	adds	r3, #1
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d002      	beq.n	80031a6 <readMessage+0x5a>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d003      	beq.n	80031ac <readMessage+0x60>
				break;
			}
		}
	}

}
 80031a4:	e019      	b.n	80031da <readMessage+0x8e>
				sendStatus();
 80031a6:	f000 f85f 	bl	8003268 <sendStatus>
				break;
 80031aa:	e016      	b.n	80031da <readMessage+0x8e>
				parseCodeString(rxBuffer+2,sizeOfMessage-4);
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <readMessage+0x9c>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	1c9a      	adds	r2, r3, #2
 80031b2:	4b0e      	ldr	r3, [pc, #56]	; (80031ec <readMessage+0xa0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	3b04      	subs	r3, #4
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f7fd ffc5 	bl	800114c <parseCodeString>
				sendAcknolege(MESSAGE_G_CODE,rxBuffer+2,sizeOfMessage-4);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <readMessage+0x9c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c99      	adds	r1, r3, #2
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <readMessage+0xa0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	3b04      	subs	r3, #4
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	461a      	mov	r2, r3
 80031d2:	2001      	movs	r0, #1
 80031d4:	f000 f8d8 	bl	8003388 <sendAcknolege>
				break;
 80031d8:	bf00      	nop
}
 80031da:	bf00      	nop
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	20000375 	.word	0x20000375
 80031e8:	200006a0 	.word	0x200006a0
 80031ec:	20000698 	.word	0x20000698

080031f0 <Crc16>:
////////////////////////////////////////////////////////////////
unsigned short Crc16(char *pcBlock, unsigned short len){
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 80031fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003200:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--){
 8003202:	e025      	b.n	8003250 <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	1c5a      	adds	r2, r3, #1
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	021b      	lsls	r3, r3, #8
 800320e:	b21a      	sxth	r2, r3
 8003210:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003214:	4053      	eors	r3, r2
 8003216:	b21b      	sxth	r3, r3
 8003218:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 800321a:	2300      	movs	r3, #0
 800321c:	737b      	strb	r3, [r7, #13]
 800321e:	e014      	b.n	800324a <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8003220:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003224:	2b00      	cmp	r3, #0
 8003226:	da09      	bge.n	800323c <Crc16+0x4c>
 8003228:	89fb      	ldrh	r3, [r7, #14]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	b21b      	sxth	r3, r3
 800322e:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8003232:	f083 0301 	eor.w	r3, r3, #1
 8003236:	b21b      	sxth	r3, r3
 8003238:	b29b      	uxth	r3, r3
 800323a:	e002      	b.n	8003242 <Crc16+0x52>
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	b29b      	uxth	r3, r3
 8003242:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8003244:	7b7b      	ldrb	r3, [r7, #13]
 8003246:	3301      	adds	r3, #1
 8003248:	737b      	strb	r3, [r7, #13]
 800324a:	7b7b      	ldrb	r3, [r7, #13]
 800324c:	2b07      	cmp	r3, #7
 800324e:	d9e7      	bls.n	8003220 <Crc16+0x30>
    while (len--){
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	1e5a      	subs	r2, r3, #1
 8003254:	807a      	strh	r2, [r7, #2]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1d4      	bne.n	8003204 <Crc16+0x14>
        }
    }
    return crc;
 800325a:	89fb      	ldrh	r3, [r7, #14]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	bc80      	pop	{r7}
 8003264:	4770      	bx	lr
	...

08003268 <sendStatus>:
////////////////////////////////////////////////////////////////////////
void sendStatus(){
 8003268:	b5b0      	push	{r4, r5, r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	466b      	mov	r3, sp
 8003270:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+3+2;//размер,тип,3 флоата,3 char, CRC
 8003272:	2313      	movs	r3, #19
 8003274:	74fb      	strb	r3, [r7, #19]
	char dataToSend[size];
 8003276:	7cf8      	ldrb	r0, [r7, #19]
 8003278:	4603      	mov	r3, r0
 800327a:	3b01      	subs	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	b2c1      	uxtb	r1, r0
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f04f 0400 	mov.w	r4, #0
 800328c:	00d4      	lsls	r4, r2, #3
 800328e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003292:	00cb      	lsls	r3, r1, #3
 8003294:	b2c1      	uxtb	r1, r0
 8003296:	f04f 0200 	mov.w	r2, #0
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f04f 0400 	mov.w	r4, #0
 80032a2:	00d4      	lsls	r4, r2, #3
 80032a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80032a8:	00cb      	lsls	r3, r1, #3
 80032aa:	4603      	mov	r3, r0
 80032ac:	3307      	adds	r3, #7
 80032ae:	08db      	lsrs	r3, r3, #3
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	ebad 0d03 	sub.w	sp, sp, r3
 80032b6:	466b      	mov	r3, sp
 80032b8:	3300      	adds	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
	for(int n = 0; n != size; n++){
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e007      	b.n	80032d2 <sendStatus+0x6a>
		dataToSend[n]=0;
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	4413      	add	r3, r2
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
	for(int n = 0; n != size; n++){
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	3301      	adds	r3, #1
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	697a      	ldr	r2, [r7, #20]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d1f3      	bne.n	80032c2 <sendStatus+0x5a>
	}

	dataToSend[0]=size;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	7cfa      	ldrb	r2, [r7, #19]
 80032de:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=MESSAGE_STATUS;
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	2200      	movs	r2, #0
 80032e4:	705a      	strb	r2, [r3, #1]
	//отправляем позицию X. Разбираем int на char
	memcpy(dataToSend+2,&positionX,sizeof(int));
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	3302      	adds	r3, #2
 80032ea:	4a23      	ldr	r2, [pc, #140]	; (8003378 <sendStatus+0x110>)
 80032ec:	6812      	ldr	r2, [r2, #0]
 80032ee:	601a      	str	r2, [r3, #0]
	//отправляем позицию Y. Разбираем int на char
	memcpy(dataToSend+2+sizeof(int),&positionY,sizeof(int));
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	3306      	adds	r3, #6
 80032f4:	4a21      	ldr	r2, [pc, #132]	; (800337c <sendStatus+0x114>)
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	601a      	str	r2, [r3, #0]
	//отправляем позицию X. Разбираем int на char
	memcpy(dataToSend+2+sizeof(int)*2,&positionZ,sizeof(int));
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	330a      	adds	r3, #10
 80032fe:	4a20      	ldr	r2, [pc, #128]	; (8003380 <sendStatus+0x118>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	601a      	str	r2, [r3, #0]
	if(HAL_GPIO_ReadPin(swX) == GPIO_PIN_SET){
 8003304:	2101      	movs	r1, #1
 8003306:	481f      	ldr	r0, [pc, #124]	; (8003384 <sendStatus+0x11c>)
 8003308:	f000 fbb0 	bl	8003a6c <HAL_GPIO_ReadPin>
 800330c:	4603      	mov	r3, r0
 800330e:	2b01      	cmp	r3, #1
 8003310:	d102      	bne.n	8003318 <sendStatus+0xb0>
		dataToSend[14]=1;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2201      	movs	r2, #1
 8003316:	739a      	strb	r2, [r3, #14]
	}
	if(HAL_GPIO_ReadPin(swY) == GPIO_PIN_SET){
 8003318:	2102      	movs	r1, #2
 800331a:	481a      	ldr	r0, [pc, #104]	; (8003384 <sendStatus+0x11c>)
 800331c:	f000 fba6 	bl	8003a6c <HAL_GPIO_ReadPin>
 8003320:	4603      	mov	r3, r0
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <sendStatus+0xc4>
		dataToSend[15]=1;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	2201      	movs	r2, #1
 800332a:	73da      	strb	r2, [r3, #15]
	}
	if(HAL_GPIO_ReadPin(swZ) == GPIO_PIN_SET){
 800332c:	2104      	movs	r1, #4
 800332e:	4815      	ldr	r0, [pc, #84]	; (8003384 <sendStatus+0x11c>)
 8003330:	f000 fb9c 	bl	8003a6c <HAL_GPIO_ReadPin>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d102      	bne.n	8003340 <sendStatus+0xd8>
		dataToSend[16]=1;
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2201      	movs	r2, #1
 800333e:	741a      	strb	r2, [r3, #16]
	}
	unsigned short crc = Crc16(dataToSend,size-2);
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	7cfb      	ldrb	r3, [r7, #19]
 8003344:	b29b      	uxth	r3, r3
 8003346:	3b02      	subs	r3, #2
 8003348:	b29b      	uxth	r3, r3
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7ff ff4f 	bl	80031f0 <Crc16>
 8003352:	4603      	mov	r3, r0
 8003354:	80fb      	strh	r3, [r7, #6]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	7cfb      	ldrb	r3, [r7, #19]
 800335a:	3b02      	subs	r3, #2
 800335c:	4413      	add	r3, r2
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	7cfa      	ldrb	r2, [r7, #19]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f005 f8e3 	bl	8008534 <CDC_Transmit_FS>
 800336e:	46ad      	mov	sp, r5

}
 8003370:	bf00      	nop
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bdb0      	pop	{r4, r5, r7, pc}
 8003378:	200005a8 	.word	0x200005a8
 800337c:	200005c8 	.word	0x200005c8
 8003380:	200005a4 	.word	0x200005a4
 8003384:	40010800 	.word	0x40010800

08003388 <sendAcknolege>:
/////////////////////////////////////////////////////////////////////////
void sendAcknolege(enum messageType mess, char *array, char arrSize){
 8003388:	b5b0      	push	{r4, r5, r7, lr}
 800338a:	b086      	sub	sp, #24
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	6039      	str	r1, [r7, #0]
 8003392:	71fb      	strb	r3, [r7, #7]
 8003394:	4613      	mov	r3, r2
 8003396:	71bb      	strb	r3, [r7, #6]
 8003398:	466b      	mov	r3, sp
 800339a:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2+arrSize;//размер,тип,3 инта,CRC, размер массива
 800339c:	79bb      	ldrb	r3, [r7, #6]
 800339e:	3310      	adds	r3, #16
 80033a0:	75fb      	strb	r3, [r7, #23]
	char dataToSend[size];
 80033a2:	7df8      	ldrb	r0, [r7, #23]
 80033a4:	4603      	mov	r3, r0
 80033a6:	3b01      	subs	r3, #1
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	b2c1      	uxtb	r1, r0
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f04f 0400 	mov.w	r4, #0
 80033b8:	00d4      	lsls	r4, r2, #3
 80033ba:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80033be:	00cb      	lsls	r3, r1, #3
 80033c0:	b2c1      	uxtb	r1, r0
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	f04f 0400 	mov.w	r4, #0
 80033ce:	00d4      	lsls	r4, r2, #3
 80033d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80033d4:	00cb      	lsls	r3, r1, #3
 80033d6:	4603      	mov	r3, r0
 80033d8:	3307      	adds	r3, #7
 80033da:	08db      	lsrs	r3, r3, #3
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	ebad 0d03 	sub.w	sp, sp, r3
 80033e2:	466b      	mov	r3, sp
 80033e4:	3300      	adds	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]

	dataToSend[0]=size;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	7dfa      	ldrb	r2, [r7, #23]
 80033ec:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=mess;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	79fa      	ldrb	r2, [r7, #7]
 80033f2:	705a      	strb	r2, [r3, #1]

	if(array != NULL){
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <sendAcknolege+0x80>
		memcpy(array,dataToSend+2,arrSize);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3302      	adds	r3, #2
 80033fe:	79ba      	ldrb	r2, [r7, #6]
 8003400:	4619      	mov	r1, r3
 8003402:	6838      	ldr	r0, [r7, #0]
 8003404:	f005 fcba 	bl	8008d7c <memcpy>
	}
	unsigned short crc = Crc16(dataToSend,size-2);
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	7dfb      	ldrb	r3, [r7, #23]
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b02      	subs	r3, #2
 8003410:	b29b      	uxth	r3, r3
 8003412:	4619      	mov	r1, r3
 8003414:	4610      	mov	r0, r2
 8003416:	f7ff feeb 	bl	80031f0 <Crc16>
 800341a:	4603      	mov	r3, r0
 800341c:	817b      	strh	r3, [r7, #10]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	3b02      	subs	r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	897a      	ldrh	r2, [r7, #10]
 8003428:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	7dfa      	ldrb	r2, [r7, #23]
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f005 f87f 	bl	8008534 <CDC_Transmit_FS>
 8003436:	46ad      	mov	sp, r5
}
 8003438:	bf00      	nop
 800343a:	3718      	adds	r7, #24
 800343c:	46bd      	mov	sp, r7
 800343e:	bdb0      	pop	{r4, r5, r7, pc}

08003440 <sendFree>:
/////////////////////////////////////////////////////////////////////////
void sendFree(){
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
	sendAcknolege(MESSAGE_ACKNOWLEDGE,NULL,0);
 8003444:	2200      	movs	r2, #0
 8003446:	2100      	movs	r1, #0
 8003448:	2002      	movs	r0, #2
 800344a:	f7ff ff9d 	bl	8003388 <sendAcknolege>
}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003454:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003456:	e003      	b.n	8003460 <LoopCopyDataInit>

08003458 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800345a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800345c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800345e:	3104      	adds	r1, #4

08003460 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003460:	480a      	ldr	r0, [pc, #40]	; (800348c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003462:	4b0b      	ldr	r3, [pc, #44]	; (8003490 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003464:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003466:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003468:	d3f6      	bcc.n	8003458 <CopyDataInit>
  ldr r2, =_sbss
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800346c:	e002      	b.n	8003474 <LoopFillZerobss>

0800346e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800346e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003470:	f842 3b04 	str.w	r3, [r2], #4

08003474 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003476:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003478:	d3f9      	bcc.n	800346e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800347a:	f7ff fbb5 	bl	8002be8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800347e:	f005 fc31 	bl	8008ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003482:	f7fe ffed 	bl	8002460 <main>
  bx lr
 8003486:	4770      	bx	lr
  ldr r3, =_sidata
 8003488:	08009218 	.word	0x08009218
  ldr r0, =_sdata
 800348c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003490:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 8003494:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 8003498:	20001644 	.word	0x20001644

0800349c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800349c:	e7fe      	b.n	800349c <ADC1_2_IRQHandler>
	...

080034a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034a4:	4b08      	ldr	r3, [pc, #32]	; (80034c8 <HAL_Init+0x28>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a07      	ldr	r2, [pc, #28]	; (80034c8 <HAL_Init+0x28>)
 80034aa:	f043 0310 	orr.w	r3, r3, #16
 80034ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034b0:	2003      	movs	r0, #3
 80034b2:	f000 f923 	bl	80036fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034b6:	2000      	movs	r0, #0
 80034b8:	f000 f808 	bl	80034cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034bc:	f7ff fa20 	bl	8002900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40022000 	.word	0x40022000

080034cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034d4:	4b12      	ldr	r3, [pc, #72]	; (8003520 <HAL_InitTick+0x54>)
 80034d6:	681a      	ldr	r2, [r3, #0]
 80034d8:	4b12      	ldr	r3, [pc, #72]	; (8003524 <HAL_InitTick+0x58>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4619      	mov	r1, r3
 80034de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	f000 f93b 	bl	8003766 <HAL_SYSTICK_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e00e      	b.n	8003518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b0f      	cmp	r3, #15
 80034fe:	d80a      	bhi.n	8003516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003500:	2200      	movs	r2, #0
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	f04f 30ff 	mov.w	r0, #4294967295
 8003508:	f000 f903 	bl	8003712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800350c:	4a06      	ldr	r2, [pc, #24]	; (8003528 <HAL_InitTick+0x5c>)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
 8003514:	e000      	b.n	8003518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
}
 8003518:	4618      	mov	r0, r3
 800351a:	3708      	adds	r7, #8
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}
 8003520:	20000000 	.word	0x20000000
 8003524:	2000000c 	.word	0x2000000c
 8003528:	20000008 	.word	0x20000008

0800352c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <HAL_IncTick+0x1c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_IncTick+0x20>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4413      	add	r3, r2
 800353c:	4a03      	ldr	r2, [pc, #12]	; (800354c <HAL_IncTick+0x20>)
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr
 8003548:	2000000c 	.word	0x2000000c
 800354c:	2000073c 	.word	0x2000073c

08003550 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return uwTick;
 8003554:	4b02      	ldr	r3, [pc, #8]	; (8003560 <HAL_GetTick+0x10>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr
 8003560:	2000073c 	.word	0x2000073c

08003564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357a:	68ba      	ldr	r2, [r7, #8]
 800357c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003580:	4013      	ands	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800358c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003596:	4a04      	ldr	r2, [pc, #16]	; (80035a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	60d3      	str	r3, [r2, #12]
}
 800359c:	bf00      	nop
 800359e:	3714      	adds	r7, #20
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	e000ed00 	.word	0xe000ed00

080035ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <__NVIC_GetPriorityGrouping+0x18>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	0a1b      	lsrs	r3, r3, #8
 80035b6:	f003 0307 	and.w	r3, r3, #7
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000ed00 	.word	0xe000ed00

080035c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	db0b      	blt.n	80035f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	f003 021f 	and.w	r2, r3, #31
 80035e0:	4906      	ldr	r1, [pc, #24]	; (80035fc <__NVIC_EnableIRQ+0x34>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	2001      	movs	r0, #1
 80035ea:	fa00 f202 	lsl.w	r2, r0, r2
 80035ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f2:	bf00      	nop
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr
 80035fc:	e000e100 	.word	0xe000e100

08003600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	6039      	str	r1, [r7, #0]
 800360a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800360c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003610:	2b00      	cmp	r3, #0
 8003612:	db0a      	blt.n	800362a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	b2da      	uxtb	r2, r3
 8003618:	490c      	ldr	r1, [pc, #48]	; (800364c <__NVIC_SetPriority+0x4c>)
 800361a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361e:	0112      	lsls	r2, r2, #4
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	440b      	add	r3, r1
 8003624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003628:	e00a      	b.n	8003640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	b2da      	uxtb	r2, r3
 800362e:	4908      	ldr	r1, [pc, #32]	; (8003650 <__NVIC_SetPriority+0x50>)
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	f003 030f 	and.w	r3, r3, #15
 8003636:	3b04      	subs	r3, #4
 8003638:	0112      	lsls	r2, r2, #4
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	440b      	add	r3, r1
 800363e:	761a      	strb	r2, [r3, #24]
}
 8003640:	bf00      	nop
 8003642:	370c      	adds	r7, #12
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	e000e100 	.word	0xe000e100
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003654:	b480      	push	{r7}
 8003656:	b089      	sub	sp, #36	; 0x24
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f1c3 0307 	rsb	r3, r3, #7
 800366e:	2b04      	cmp	r3, #4
 8003670:	bf28      	it	cs
 8003672:	2304      	movcs	r3, #4
 8003674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3304      	adds	r3, #4
 800367a:	2b06      	cmp	r3, #6
 800367c:	d902      	bls.n	8003684 <NVIC_EncodePriority+0x30>
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3b03      	subs	r3, #3
 8003682:	e000      	b.n	8003686 <NVIC_EncodePriority+0x32>
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003688:	f04f 32ff 	mov.w	r2, #4294967295
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43da      	mvns	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	401a      	ands	r2, r3
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800369c:	f04f 31ff 	mov.w	r1, #4294967295
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	fa01 f303 	lsl.w	r3, r1, r3
 80036a6:	43d9      	mvns	r1, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	4313      	orrs	r3, r2
         );
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3724      	adds	r7, #36	; 0x24
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr

080036b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036c8:	d301      	bcc.n	80036ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036ca:	2301      	movs	r3, #1
 80036cc:	e00f      	b.n	80036ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036ce:	4a0a      	ldr	r2, [pc, #40]	; (80036f8 <SysTick_Config+0x40>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036d6:	210f      	movs	r1, #15
 80036d8:	f04f 30ff 	mov.w	r0, #4294967295
 80036dc:	f7ff ff90 	bl	8003600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036e0:	4b05      	ldr	r3, [pc, #20]	; (80036f8 <SysTick_Config+0x40>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036e6:	4b04      	ldr	r3, [pc, #16]	; (80036f8 <SysTick_Config+0x40>)
 80036e8:	2207      	movs	r2, #7
 80036ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	e000e010 	.word	0xe000e010

080036fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f7ff ff2d 	bl	8003564 <__NVIC_SetPriorityGrouping>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003712:	b580      	push	{r7, lr}
 8003714:	b086      	sub	sp, #24
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003724:	f7ff ff42 	bl	80035ac <__NVIC_GetPriorityGrouping>
 8003728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	6978      	ldr	r0, [r7, #20]
 8003730:	f7ff ff90 	bl	8003654 <NVIC_EncodePriority>
 8003734:	4602      	mov	r2, r0
 8003736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800373a:	4611      	mov	r1, r2
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff ff5f 	bl	8003600 <__NVIC_SetPriority>
}
 8003742:	bf00      	nop
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b082      	sub	sp, #8
 800374e:	af00      	add	r7, sp, #0
 8003750:	4603      	mov	r3, r0
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff ff35 	bl	80035c8 <__NVIC_EnableIRQ>
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f7ff ffa2 	bl	80036b8 <SysTick_Config>
 8003774:	4603      	mov	r3, r0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b082      	sub	sp, #8
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e00e      	b.n	80037ae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	795b      	ldrb	r3, [r3, #5]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d105      	bne.n	80037a6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff f8df 	bl	8002964 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80037ac:	2300      	movs	r3, #0
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b08b      	sub	sp, #44	; 0x2c
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037c6:	2300      	movs	r3, #0
 80037c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ca:	e127      	b.n	8003a1c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037cc:	2201      	movs	r2, #1
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f040 8116 	bne.w	8003a16 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b12      	cmp	r3, #18
 80037f0:	d034      	beq.n	800385c <HAL_GPIO_Init+0xa4>
 80037f2:	2b12      	cmp	r3, #18
 80037f4:	d80d      	bhi.n	8003812 <HAL_GPIO_Init+0x5a>
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d02b      	beq.n	8003852 <HAL_GPIO_Init+0x9a>
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d804      	bhi.n	8003808 <HAL_GPIO_Init+0x50>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d031      	beq.n	8003866 <HAL_GPIO_Init+0xae>
 8003802:	2b01      	cmp	r3, #1
 8003804:	d01c      	beq.n	8003840 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003806:	e048      	b.n	800389a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003808:	2b03      	cmp	r3, #3
 800380a:	d043      	beq.n	8003894 <HAL_GPIO_Init+0xdc>
 800380c:	2b11      	cmp	r3, #17
 800380e:	d01b      	beq.n	8003848 <HAL_GPIO_Init+0x90>
          break;
 8003810:	e043      	b.n	800389a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003812:	4a89      	ldr	r2, [pc, #548]	; (8003a38 <HAL_GPIO_Init+0x280>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d026      	beq.n	8003866 <HAL_GPIO_Init+0xae>
 8003818:	4a87      	ldr	r2, [pc, #540]	; (8003a38 <HAL_GPIO_Init+0x280>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d806      	bhi.n	800382c <HAL_GPIO_Init+0x74>
 800381e:	4a87      	ldr	r2, [pc, #540]	; (8003a3c <HAL_GPIO_Init+0x284>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d020      	beq.n	8003866 <HAL_GPIO_Init+0xae>
 8003824:	4a86      	ldr	r2, [pc, #536]	; (8003a40 <HAL_GPIO_Init+0x288>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01d      	beq.n	8003866 <HAL_GPIO_Init+0xae>
          break;
 800382a:	e036      	b.n	800389a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800382c:	4a85      	ldr	r2, [pc, #532]	; (8003a44 <HAL_GPIO_Init+0x28c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d019      	beq.n	8003866 <HAL_GPIO_Init+0xae>
 8003832:	4a85      	ldr	r2, [pc, #532]	; (8003a48 <HAL_GPIO_Init+0x290>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d016      	beq.n	8003866 <HAL_GPIO_Init+0xae>
 8003838:	4a84      	ldr	r2, [pc, #528]	; (8003a4c <HAL_GPIO_Init+0x294>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d013      	beq.n	8003866 <HAL_GPIO_Init+0xae>
          break;
 800383e:	e02c      	b.n	800389a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	623b      	str	r3, [r7, #32]
          break;
 8003846:	e028      	b.n	800389a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	3304      	adds	r3, #4
 800384e:	623b      	str	r3, [r7, #32]
          break;
 8003850:	e023      	b.n	800389a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	3308      	adds	r3, #8
 8003858:	623b      	str	r3, [r7, #32]
          break;
 800385a:	e01e      	b.n	800389a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	330c      	adds	r3, #12
 8003862:	623b      	str	r3, [r7, #32]
          break;
 8003864:	e019      	b.n	800389a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d102      	bne.n	8003874 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800386e:	2304      	movs	r3, #4
 8003870:	623b      	str	r3, [r7, #32]
          break;
 8003872:	e012      	b.n	800389a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d105      	bne.n	8003888 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800387c:	2308      	movs	r3, #8
 800387e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	611a      	str	r2, [r3, #16]
          break;
 8003886:	e008      	b.n	800389a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003888:	2308      	movs	r3, #8
 800388a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	615a      	str	r2, [r3, #20]
          break;
 8003892:	e002      	b.n	800389a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003894:	2300      	movs	r3, #0
 8003896:	623b      	str	r3, [r7, #32]
          break;
 8003898:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	2bff      	cmp	r3, #255	; 0xff
 800389e:	d801      	bhi.n	80038a4 <HAL_GPIO_Init+0xec>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	e001      	b.n	80038a8 <HAL_GPIO_Init+0xf0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3304      	adds	r3, #4
 80038a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	2bff      	cmp	r3, #255	; 0xff
 80038ae:	d802      	bhi.n	80038b6 <HAL_GPIO_Init+0xfe>
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	e002      	b.n	80038bc <HAL_GPIO_Init+0x104>
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	3b08      	subs	r3, #8
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	210f      	movs	r1, #15
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	401a      	ands	r2, r3
 80038ce:	6a39      	ldr	r1, [r7, #32]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	431a      	orrs	r2, r3
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8096 	beq.w	8003a16 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038ea:	4b59      	ldr	r3, [pc, #356]	; (8003a50 <HAL_GPIO_Init+0x298>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	4a58      	ldr	r2, [pc, #352]	; (8003a50 <HAL_GPIO_Init+0x298>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	6193      	str	r3, [r2, #24]
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_GPIO_Init+0x298>)
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	60bb      	str	r3, [r7, #8]
 8003900:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003902:	4a54      	ldr	r2, [pc, #336]	; (8003a54 <HAL_GPIO_Init+0x29c>)
 8003904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003906:	089b      	lsrs	r3, r3, #2
 8003908:	3302      	adds	r3, #2
 800390a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800390e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	220f      	movs	r2, #15
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43db      	mvns	r3, r3
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4013      	ands	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a4b      	ldr	r2, [pc, #300]	; (8003a58 <HAL_GPIO_Init+0x2a0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <HAL_GPIO_Init+0x19e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a4a      	ldr	r2, [pc, #296]	; (8003a5c <HAL_GPIO_Init+0x2a4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00d      	beq.n	8003952 <HAL_GPIO_Init+0x19a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a49      	ldr	r2, [pc, #292]	; (8003a60 <HAL_GPIO_Init+0x2a8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_GPIO_Init+0x196>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a48      	ldr	r2, [pc, #288]	; (8003a64 <HAL_GPIO_Init+0x2ac>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d101      	bne.n	800394a <HAL_GPIO_Init+0x192>
 8003946:	2303      	movs	r3, #3
 8003948:	e006      	b.n	8003958 <HAL_GPIO_Init+0x1a0>
 800394a:	2304      	movs	r3, #4
 800394c:	e004      	b.n	8003958 <HAL_GPIO_Init+0x1a0>
 800394e:	2302      	movs	r3, #2
 8003950:	e002      	b.n	8003958 <HAL_GPIO_Init+0x1a0>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <HAL_GPIO_Init+0x1a0>
 8003956:	2300      	movs	r3, #0
 8003958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395a:	f002 0203 	and.w	r2, r2, #3
 800395e:	0092      	lsls	r2, r2, #2
 8003960:	4093      	lsls	r3, r2
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003968:	493a      	ldr	r1, [pc, #232]	; (8003a54 <HAL_GPIO_Init+0x29c>)
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3302      	adds	r3, #2
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d006      	beq.n	8003990 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003982:	4b39      	ldr	r3, [pc, #228]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4938      	ldr	r1, [pc, #224]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	4313      	orrs	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
 800398e:	e006      	b.n	800399e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003990:	4b35      	ldr	r3, [pc, #212]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	43db      	mvns	r3, r3
 8003998:	4933      	ldr	r1, [pc, #204]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 800399a:	4013      	ands	r3, r2
 800399c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d006      	beq.n	80039b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039aa:	4b2f      	ldr	r3, [pc, #188]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	492e      	ldr	r1, [pc, #184]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	604b      	str	r3, [r1, #4]
 80039b6:	e006      	b.n	80039c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039b8:	4b2b      	ldr	r3, [pc, #172]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	43db      	mvns	r3, r3
 80039c0:	4929      	ldr	r1, [pc, #164]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d006      	beq.n	80039e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039d2:	4b25      	ldr	r3, [pc, #148]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039d4:	689a      	ldr	r2, [r3, #8]
 80039d6:	4924      	ldr	r1, [pc, #144]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4313      	orrs	r3, r2
 80039dc:	608b      	str	r3, [r1, #8]
 80039de:	e006      	b.n	80039ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039e0:	4b21      	ldr	r3, [pc, #132]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	491f      	ldr	r1, [pc, #124]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d006      	beq.n	8003a08 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80039fa:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 80039fc:	68da      	ldr	r2, [r3, #12]
 80039fe:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
 8003a06:	e006      	b.n	8003a16 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	4915      	ldr	r1, [pc, #84]	; (8003a68 <HAL_GPIO_Init+0x2b0>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	3301      	adds	r3, #1
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	fa22 f303 	lsr.w	r3, r2, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f47f aed0 	bne.w	80037cc <HAL_GPIO_Init+0x14>
  }
}
 8003a2c:	bf00      	nop
 8003a2e:	372c      	adds	r7, #44	; 0x2c
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr
 8003a36:	bf00      	nop
 8003a38:	10210000 	.word	0x10210000
 8003a3c:	10110000 	.word	0x10110000
 8003a40:	10120000 	.word	0x10120000
 8003a44:	10310000 	.word	0x10310000
 8003a48:	10320000 	.word	0x10320000
 8003a4c:	10220000 	.word	0x10220000
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010800 	.word	0x40010800
 8003a5c:	40010c00 	.word	0x40010c00
 8003a60:	40011000 	.word	0x40011000
 8003a64:	40011400 	.word	0x40011400
 8003a68:	40010400 	.word	0x40010400

08003a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	887b      	ldrh	r3, [r7, #2]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a84:	2301      	movs	r3, #1
 8003a86:	73fb      	strb	r3, [r7, #15]
 8003a88:	e001      	b.n	8003a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3714      	adds	r7, #20
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr

08003a9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	807b      	strh	r3, [r7, #2]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003aaa:	787b      	ldrb	r3, [r7, #1]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ab6:	e003      	b.n	8003ac0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ab8:	887b      	ldrh	r3, [r7, #2]
 8003aba:	041a      	lsls	r2, r3, #16
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	611a      	str	r2, [r3, #16]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc80      	pop	{r7}
 8003ac8:	4770      	bx	lr

08003aca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	4013      	ands	r3, r2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	611a      	str	r2, [r3, #16]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr

08003afa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003afa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afc:	b08b      	sub	sp, #44	; 0x2c
 8003afe:	af06      	add	r7, sp, #24
 8003b00:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d101      	bne.n	8003b0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0d3      	b.n	8003cb4 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d106      	bne.n	8003b26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	f004 fe3b 	bl	800879c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2203      	movs	r2, #3
 8003b2a:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f001 ff93 	bl	8005a5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	687e      	ldr	r6, [r7, #4]
 8003b40:	466d      	mov	r5, sp
 8003b42:	f106 0410 	add.w	r4, r6, #16
 8003b46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b4a:	6823      	ldr	r3, [r4, #0]
 8003b4c:	602b      	str	r3, [r5, #0]
 8003b4e:	1d33      	adds	r3, r6, #4
 8003b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b52:	6838      	ldr	r0, [r7, #0]
 8003b54:	f001 ff5c 	bl	8005a10 <USB_CoreInit>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d005      	beq.n	8003b6a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e0a4      	b.n	8003cb4 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f001 ff90 	bl	8005a96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	e035      	b.n	8003be8 <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	015b      	lsls	r3, r3, #5
 8003b82:	4413      	add	r3, r2
 8003b84:	3329      	adds	r3, #41	; 0x29
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	015b      	lsls	r3, r3, #5
 8003b90:	4413      	add	r3, r2
 8003b92:	3328      	adds	r3, #40	; 0x28
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	7bfa      	ldrb	r2, [r7, #15]
 8003b9c:	b291      	uxth	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	015b      	lsls	r3, r3, #5
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3336      	adds	r3, #54	; 0x36
 8003ba6:	460a      	mov	r2, r1
 8003ba8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	015b      	lsls	r3, r3, #5
 8003bb0:	4413      	add	r3, r2
 8003bb2:	332b      	adds	r3, #43	; 0x2b
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	015b      	lsls	r3, r3, #5
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3338      	adds	r3, #56	; 0x38
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bc6:	7bfb      	ldrb	r3, [r7, #15]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	4413      	add	r3, r2
 8003bce:	333c      	adds	r3, #60	; 0x3c
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	3302      	adds	r3, #2
 8003bda:	015b      	lsls	r3, r3, #5
 8003bdc:	4413      	add	r3, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	3301      	adds	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3c4      	bcc.n	8003b7c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e031      	b.n	8003c5c <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf8:	7bfb      	ldrb	r3, [r7, #15]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	015b      	lsls	r3, r3, #5
 8003bfe:	4413      	add	r3, r2
 8003c00:	f203 1329 	addw	r3, r3, #297	; 0x129
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	015b      	lsls	r3, r3, #5
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c14:	7bfa      	ldrb	r2, [r7, #15]
 8003c16:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c18:	7bfb      	ldrb	r3, [r7, #15]
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	015b      	lsls	r3, r3, #5
 8003c1e:	4413      	add	r3, r2
 8003c20:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	015b      	lsls	r3, r3, #5
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	015b      	lsls	r3, r3, #5
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	330a      	adds	r3, #10
 8003c4e:	015b      	lsls	r3, r3, #5
 8003c50:	4413      	add	r3, r2
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	3301      	adds	r3, #1
 8003c5a:	73fb      	strb	r3, [r7, #15]
 8003c5c:	7bfa      	ldrb	r2, [r7, #15]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d3c8      	bcc.n	8003bf8 <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	687e      	ldr	r6, [r7, #4]
 8003c6e:	466d      	mov	r5, sp
 8003c70:	f106 0410 	add.w	r4, r6, #16
 8003c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c78:	6823      	ldr	r3, [r4, #0]
 8003c7a:	602b      	str	r3, [r5, #0]
 8003c7c:	1d33      	adds	r3, r6, #4
 8003c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c80:	6838      	ldr	r0, [r7, #0]
 8003c82:	f001 ff14 	bl	8005aae <USB_DevInit>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d005      	beq.n	8003c98 <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2202      	movs	r2, #2
 8003c90:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e00d      	b.n	8003cb4 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f002 ff52 	bl	8006b56 <USB_DevDisconnect>

  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003cbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_PCD_Start+0x16>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e016      	b.n	8003d00 <HAL_PCD_Start+0x44>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f004 ffc4 	bl	8008c6a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f002 ff2b 	bl	8006b42 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 fe9d 	bl	8005a30 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f002 ff28 	bl	8006b6a <USB_ReadInterrupts>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d24:	d102      	bne.n	8003d2c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 faf2 	bl	8004310 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f002 ff1a 	bl	8006b6a <USB_ReadInterrupts>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d112      	bne.n	8003d68 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d54:	b292      	uxth	r2, r2
 8003d56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f004 fd93 	bl	8008886 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d60:	2100      	movs	r1, #0
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f8de 	bl	8003f24 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 fefc 	bl	8006b6a <USB_ReadInterrupts>
 8003d72:	4603      	mov	r3, r0
 8003d74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d7c:	d10b      	bne.n	8003d96 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d90:	b292      	uxth	r2, r2
 8003d92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 fee5 	bl	8006b6a <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003daa:	d10b      	bne.n	8003dc4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dbe:	b292      	uxth	r2, r2
 8003dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f002 fece 	bl	8006b6a <USB_ReadInterrupts>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d126      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0204 	bic.w	r2, r2, #4
 8003dec:	b292      	uxth	r2, r2
 8003dee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 0208 	bic.w	r2, r2, #8
 8003e04:	b292      	uxth	r2, r2
 8003e06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f004 fd74 	bl	80088f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e22:	b292      	uxth	r2, r2
 8003e24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 fe9c 	bl	8006b6a <USB_ReadInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e3c:	d13d      	bne.n	8003eba <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f042 0208 	orr.w	r2, r2, #8
 8003e50:	b292      	uxth	r2, r2
 8003e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e68:	b292      	uxth	r2, r2
 8003e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f042 0204 	orr.w	r2, r2, #4
 8003e80:	b292      	uxth	r2, r2
 8003e82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 fe6d 	bl	8006b6a <USB_ReadInterrupts>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003eae:	b292      	uxth	r2, r2
 8003eb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f004 fd05 	bl	80088c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f002 fe53 	bl	8006b6a <USB_ReadInterrupts>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003eca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ece:	d10e      	bne.n	8003eee <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f004 fcbe 	bl	800886a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f002 fe39 	bl	8006b6a <USB_ReadInterrupts>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f02:	d10b      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f16:	b292      	uxth	r2, r2
 8003f18:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d101      	bne.n	8003f3e <HAL_PCD_SetAddress+0x1a>
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e013      	b.n	8003f66 <HAL_PCD_SetAddress+0x42>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	78fa      	ldrb	r2, [r7, #3]
 8003f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 fde0 	bl	8006b1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f6e:	b580      	push	{r7, lr}
 8003f70:	b084      	sub	sp, #16
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	4608      	mov	r0, r1
 8003f78:	4611      	mov	r1, r2
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	70fb      	strb	r3, [r7, #3]
 8003f80:	460b      	mov	r3, r1
 8003f82:	803b      	strh	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	da0b      	bge.n	8003fac <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	015b      	lsls	r3, r3, #5
 8003f9c:	3328      	adds	r3, #40	; 0x28
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	705a      	strb	r2, [r3, #1]
 8003faa:	e00b      	b.n	8003fc4 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	015b      	lsls	r3, r3, #5
 8003fb4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003fb8:	687a      	ldr	r2, [r7, #4]
 8003fba:	4413      	add	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fc4:	78fb      	ldrb	r3, [r7, #3]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fd0:	883a      	ldrh	r2, [r7, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	78ba      	ldrb	r2, [r7, #2]
 8003fda:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d004      	beq.n	8003fee <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fee:	78bb      	ldrb	r3, [r7, #2]
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d102      	bne.n	8003ffa <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_PCD_EP_Open+0x9a>
 8004004:	2302      	movs	r3, #2
 8004006:	e00e      	b.n	8004026 <HAL_PCD_EP_Open+0xb8>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68f9      	ldr	r1, [r7, #12]
 8004016:	4618      	mov	r0, r3
 8004018:	f001 fd6e 	bl	8005af8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8004024:	7afb      	ldrb	r3, [r7, #11]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
 8004036:	460b      	mov	r3, r1
 8004038:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800403a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800403e:	2b00      	cmp	r3, #0
 8004040:	da0b      	bge.n	800405a <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	015b      	lsls	r3, r3, #5
 800404a:	3328      	adds	r3, #40	; 0x28
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	705a      	strb	r2, [r3, #1]
 8004058:	e00b      	b.n	8004072 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	015b      	lsls	r3, r3, #5
 8004062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	4413      	add	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004072:	78fb      	ldrb	r3, [r7, #3]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8004084:	2b01      	cmp	r3, #1
 8004086:	d101      	bne.n	800408c <HAL_PCD_EP_Close+0x5e>
 8004088:	2302      	movs	r3, #2
 800408a:	e00e      	b.n	80040aa <HAL_PCD_EP_Close+0x7c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68f9      	ldr	r1, [r7, #12]
 800409a:	4618      	mov	r0, r3
 800409c:	f002 f81a 	bl	80060d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	607a      	str	r2, [r7, #4]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	460b      	mov	r3, r1
 80040c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c2:	7afb      	ldrb	r3, [r7, #11]
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	015b      	lsls	r3, r3, #5
 80040ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2200      	movs	r2, #0
 80040ea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040ec:	7afb      	ldrb	r3, [r7, #11]
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d106      	bne.n	8004110 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6979      	ldr	r1, [r7, #20]
 8004108:	4618      	mov	r0, r3
 800410a:	f002 f979 	bl	8006400 <USB_EPStartXfer>
 800410e:	e005      	b.n	800411c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	6979      	ldr	r1, [r7, #20]
 8004116:	4618      	mov	r0, r3
 8004118:	f002 f972 	bl	8006400 <USB_EPStartXfer>
  }

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
 800412e:	460b      	mov	r3, r1
 8004130:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	330a      	adds	r3, #10
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	4413      	add	r3, r2
 8004140:	3304      	adds	r3, #4
 8004142:	681b      	ldr	r3, [r3, #0]
}
 8004144:	4618      	mov	r0, r3
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	bc80      	pop	{r7}
 800414c:	4770      	bx	lr

0800414e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	460b      	mov	r3, r1
 800415c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800415e:	7afb      	ldrb	r3, [r7, #11]
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	015b      	lsls	r3, r3, #5
 8004166:	3328      	adds	r3, #40	; 0x28
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2200      	movs	r2, #0
 800417e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	2201      	movs	r2, #1
 8004184:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	b2da      	uxtb	r2, r3
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004192:	7afb      	ldrb	r3, [r7, #11]
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6979      	ldr	r1, [r7, #20]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 f92c 	bl	8006400 <USB_EPStartXfer>
 80041a8:	e005      	b.n	80041b6 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6979      	ldr	r1, [r7, #20]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f002 f925 	bl	8006400 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 0207 	and.w	r2, r3, #7
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d901      	bls.n	80041de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e046      	b.n	800426c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	da0b      	bge.n	80041fe <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041e6:	78fb      	ldrb	r3, [r7, #3]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	015b      	lsls	r3, r3, #5
 80041ee:	3328      	adds	r3, #40	; 0x28
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	4413      	add	r3, r2
 80041f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2201      	movs	r2, #1
 80041fa:	705a      	strb	r2, [r3, #1]
 80041fc:	e009      	b.n	8004212 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	015b      	lsls	r3, r3, #5
 8004202:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	4413      	add	r3, r2
 800420a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004218:	78fb      	ldrb	r3, [r7, #3]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_PCD_EP_SetStall+0x72>
 800422e:	2302      	movs	r3, #2
 8004230:	e01c      	b.n	800426c <HAL_PCD_EP_SetStall+0xac>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	4618      	mov	r0, r3
 8004242:	f002 fb95 	bl	8006970 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	2b00      	cmp	r3, #0
 800424e:	d108      	bne.n	8004262 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f002 fc93 	bl	8006b88 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	460b      	mov	r3, r1
 800427e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004280:	78fb      	ldrb	r3, [r7, #3]
 8004282:	f003 020f 	and.w	r2, r3, #15
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	429a      	cmp	r2, r3
 800428c:	d901      	bls.n	8004292 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e03a      	b.n	8004308 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004292:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da0b      	bge.n	80042b2 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	015b      	lsls	r3, r3, #5
 80042a2:	3328      	adds	r3, #40	; 0x28
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	705a      	strb	r2, [r3, #1]
 80042b0:	e00b      	b.n	80042ca <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b2:	78fb      	ldrb	r3, [r7, #3]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	015b      	lsls	r3, r3, #5
 80042ba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	4413      	add	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	b2da      	uxtb	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d101      	bne.n	80042ea <HAL_PCD_EP_ClrStall+0x76>
 80042e6:	2302      	movs	r3, #2
 80042e8:	e00e      	b.n	8004308 <HAL_PCD_EP_ClrStall+0x94>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f002 fb7b 	bl	80069f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b089      	sub	sp, #36	; 0x24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004318:	e282      	b.n	8004820 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004322:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004324:	8afb      	ldrh	r3, [r7, #22]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 800432e:	7d7b      	ldrb	r3, [r7, #21]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 8142 	bne.w	80045ba <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	f003 0310 	and.w	r3, r3, #16
 800433c:	2b00      	cmp	r3, #0
 800433e:	d151      	bne.n	80043e4 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	b29b      	uxth	r3, r3
 8004348:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800434c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004350:	b29c      	uxth	r4, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800435a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800435e:	b29b      	uxth	r3, r3
 8004360:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	3328      	adds	r3, #40	; 0x28
 8004366:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004370:	b29b      	uxth	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	3302      	adds	r3, #2
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	6812      	ldr	r2, [r2, #0]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800438a:	881b      	ldrh	r3, [r3, #0]
 800438c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	441a      	add	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80043a2:	2100      	movs	r1, #0
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f004 fa49 	bl	800883c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 8234 	beq.w	8004820 <PCD_EP_ISR_Handler+0x510>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 822f 	bne.w	8004820 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	b292      	uxth	r2, r2
 80043d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80043e2:	e21d      	b.n	8004820 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80043ea:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80043f4:	8a7b      	ldrh	r3, [r7, #18]
 80043f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d033      	beq.n	8004466 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004406:	b29b      	uxth	r3, r3
 8004408:	461a      	mov	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	3306      	adds	r3, #6
 8004414:	005b      	lsls	r3, r3, #1
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6812      	ldr	r2, [r2, #0]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800443c:	b29b      	uxth	r3, r3
 800443e:	f002 fbf2 	bl	8006c26 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	b29a      	uxth	r2, r3
 800444a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800444e:	4013      	ands	r3, r2
 8004450:	b29c      	uxth	r4, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800445a:	b292      	uxth	r2, r2
 800445c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f004 f9c2 	bl	80087e8 <HAL_PCD_SetupStageCallback>
 8004464:	e1dc      	b.n	8004820 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004466:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f280 81d8 	bge.w	8004820 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	881b      	ldrh	r3, [r3, #0]
 8004476:	b29a      	uxth	r2, r3
 8004478:	f640 738f 	movw	r3, #3983	; 0xf8f
 800447c:	4013      	ands	r3, r2
 800447e:	b29c      	uxth	r4, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8004488:	b292      	uxth	r2, r2
 800448a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004494:	b29b      	uxth	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	3306      	adds	r3, #6
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ae:	881b      	ldrh	r3, [r3, #0]
 80044b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d019      	beq.n	80044f4 <PCD_EP_ISR_Handler+0x1e4>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d015      	beq.n	80044f4 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6959      	ldr	r1, [r3, #20]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80044d8:	b29b      	uxth	r3, r3
 80044da:	f002 fba4 	bl	8006c26 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	441a      	add	r2, r3
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80044ec:	2100      	movs	r1, #0
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f004 f98c 	bl	800880c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	461c      	mov	r4, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004502:	b29b      	uxth	r3, r3
 8004504:	441c      	add	r4, r3
 8004506:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 800450a:	461c      	mov	r4, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10e      	bne.n	8004532 <PCD_EP_ISR_Handler+0x222>
 8004514:	8823      	ldrh	r3, [r4, #0]
 8004516:	b29b      	uxth	r3, r3
 8004518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800451c:	b29b      	uxth	r3, r3
 800451e:	8023      	strh	r3, [r4, #0]
 8004520:	8823      	ldrh	r3, [r4, #0]
 8004522:	b29b      	uxth	r3, r3
 8004524:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004528:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800452c:	b29b      	uxth	r3, r3
 800452e:	8023      	strh	r3, [r4, #0]
 8004530:	e02d      	b.n	800458e <PCD_EP_ISR_Handler+0x27e>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	2b3e      	cmp	r3, #62	; 0x3e
 8004538:	d812      	bhi.n	8004560 <PCD_EP_ISR_Handler+0x250>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	085b      	lsrs	r3, r3, #1
 8004540:	61bb      	str	r3, [r7, #24]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <PCD_EP_ISR_Handler+0x244>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	3301      	adds	r3, #1
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	b29b      	uxth	r3, r3
 8004558:	029b      	lsls	r3, r3, #10
 800455a:	b29b      	uxth	r3, r3
 800455c:	8023      	strh	r3, [r4, #0]
 800455e:	e016      	b.n	800458e <PCD_EP_ISR_Handler+0x27e>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f003 031f 	and.w	r3, r3, #31
 8004570:	2b00      	cmp	r3, #0
 8004572:	d102      	bne.n	800457a <PCD_EP_ISR_Handler+0x26a>
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	3b01      	subs	r3, #1
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	b29b      	uxth	r3, r3
 800457e:	029b      	lsls	r3, r3, #10
 8004580:	b29b      	uxth	r3, r3
 8004582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800458a:	b29b      	uxth	r3, r3
 800458c:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	881b      	ldrh	r3, [r3, #0]
 8004594:	b29b      	uxth	r3, r3
 8004596:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	b29c      	uxth	r4, r3
 80045a0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80045a4:	b29c      	uxth	r4, r3
 80045a6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80045aa:	b29c      	uxth	r4, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	4ba2      	ldr	r3, [pc, #648]	; (800483c <PCD_EP_ISR_Handler+0x52c>)
 80045b2:	4323      	orrs	r3, r4
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	8013      	strh	r3, [r2, #0]
 80045b8:	e132      	b.n	8004820 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	7d7b      	ldrb	r3, [r7, #21]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80045ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f280 80d1 	bge.w	8004776 <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	7d7b      	ldrb	r3, [r7, #21]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29c      	uxth	r4, r3
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	7d7b      	ldrb	r3, [r7, #21]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80045fc:	b292      	uxth	r2, r2
 80045fe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004600:	7d7b      	ldrb	r3, [r7, #21]
 8004602:	015b      	lsls	r3, r3, #5
 8004604:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	7b1b      	ldrb	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d121      	bne.n	800465a <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461e:	b29b      	uxth	r3, r3
 8004620:	461a      	mov	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	3306      	adds	r3, #6
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6812      	ldr	r2, [r2, #0]
 8004632:	4413      	add	r3, r2
 8004634:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463e:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004640:	8bfb      	ldrh	r3, [r7, #30]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d072      	beq.n	800472c <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6959      	ldr	r1, [r3, #20]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	88da      	ldrh	r2, [r3, #6]
 8004652:	8bfb      	ldrh	r3, [r7, #30]
 8004654:	f002 fae7 	bl	8006c26 <USB_ReadPMA>
 8004658:	e068      	b.n	800472c <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	461a      	mov	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	4413      	add	r3, r2
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d021      	beq.n	80046b8 <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800467c:	b29b      	uxth	r3, r3
 800467e:	461a      	mov	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4413      	add	r3, r2
 8004688:	3302      	adds	r3, #2
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6812      	ldr	r2, [r2, #0]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800469c:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800469e:	8bfb      	ldrh	r3, [r7, #30]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d02a      	beq.n	80046fa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6818      	ldr	r0, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6959      	ldr	r1, [r3, #20]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	891a      	ldrh	r2, [r3, #8]
 80046b0:	8bfb      	ldrh	r3, [r7, #30]
 80046b2:	f002 fab8 	bl	8006c26 <USB_ReadPMA>
 80046b6:	e020      	b.n	80046fa <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	461a      	mov	r2, r3
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	00db      	lsls	r3, r3, #3
 80046ca:	4413      	add	r3, r2
 80046cc:	3306      	adds	r3, #6
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6812      	ldr	r2, [r2, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046da:	881b      	ldrh	r3, [r3, #0]
 80046dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046e0:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80046e2:	8bfb      	ldrh	r3, [r7, #30]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6818      	ldr	r0, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6959      	ldr	r1, [r3, #20]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	895a      	ldrh	r2, [r3, #10]
 80046f4:	8bfb      	ldrh	r3, [r7, #30]
 80046f6:	f002 fa96 	bl	8006c26 <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	009b      	lsls	r3, r3, #2
 8004706:	4413      	add	r3, r2
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004714:	b29c      	uxth	r4, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	441a      	add	r2, r3
 8004724:	4b46      	ldr	r3, [pc, #280]	; (8004840 <PCD_EP_ISR_Handler+0x530>)
 8004726:	4323      	orrs	r3, r4
 8004728:	b29b      	uxth	r3, r3
 800472a:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	8bfb      	ldrh	r3, [r7, #30]
 8004732:	441a      	add	r2, r3
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	8bfb      	ldrh	r3, [r7, #30]
 800473e:	441a      	add	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <PCD_EP_ISR_Handler+0x446>
 800474c:	8bfa      	ldrh	r2, [r7, #30]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	429a      	cmp	r2, r3
 8004754:	d206      	bcs.n	8004764 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f004 f855 	bl	800880c <HAL_PCD_DataOutStageCallback>
 8004762:	e008      	b.n	8004776 <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	7819      	ldrb	r1, [r3, #0]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	695a      	ldr	r2, [r3, #20]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	699b      	ldr	r3, [r3, #24]
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f7ff fc9e 	bl	80040b2 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004776:	8a7b      	ldrh	r3, [r7, #18]
 8004778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477c:	2b00      	cmp	r3, #0
 800477e:	d04f      	beq.n	8004820 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8004780:	7d7b      	ldrb	r3, [r7, #21]
 8004782:	015b      	lsls	r3, r3, #5
 8004784:	3328      	adds	r3, #40	; 0x28
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	4413      	add	r3, r2
 800478a:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	7d7b      	ldrb	r3, [r7, #21]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	881b      	ldrh	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a4:	b29c      	uxth	r4, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	461a      	mov	r2, r3
 80047ac:	7d7b      	ldrb	r3, [r7, #21]
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	441a      	add	r2, r3
 80047b2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80047b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	461a      	mov	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	3302      	adds	r3, #2
 80047d4:	005b      	lsls	r3, r3, #1
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6812      	ldr	r2, [r2, #0]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	441a      	add	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d106      	bne.n	800480e <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f004 f818 	bl	800883c <HAL_PCD_DataInStageCallback>
 800480c:	e008      	b.n	8004820 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	7819      	ldrb	r1, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	695a      	ldr	r2, [r3, #20]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff fc97 	bl	800414e <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004828:	b29b      	uxth	r3, r3
 800482a:	b21b      	sxth	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	f6ff ad74 	blt.w	800431a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004832:	2300      	movs	r3, #0
}
 8004834:	4618      	mov	r0, r3
 8004836:	3724      	adds	r7, #36	; 0x24
 8004838:	46bd      	mov	sp, r7
 800483a:	bd90      	pop	{r4, r7, pc}
 800483c:	ffff8080 	.word	0xffff8080
 8004840:	ffff80c0 	.word	0xffff80c0

08004844 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	607b      	str	r3, [r7, #4]
 800484e:	460b      	mov	r3, r1
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	4613      	mov	r3, r2
 8004854:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004856:	897b      	ldrh	r3, [r7, #10]
 8004858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800485c:	b29b      	uxth	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d008      	beq.n	8004874 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	015b      	lsls	r3, r3, #5
 800486a:	3328      	adds	r3, #40	; 0x28
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	617b      	str	r3, [r7, #20]
 8004872:	e006      	b.n	8004882 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004874:	897b      	ldrh	r3, [r7, #10]
 8004876:	015b      	lsls	r3, r3, #5
 8004878:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4413      	add	r3, r2
 8004880:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004882:	893b      	ldrh	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	2200      	movs	r2, #0
 800488c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	b29a      	uxth	r2, r3
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	80da      	strh	r2, [r3, #6]
 8004896:	e00b      	b.n	80048b0 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	2201      	movs	r2, #1
 800489c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	0c1b      	lsrs	r3, r3, #16
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e26c      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 8087 	beq.w	80049ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048dc:	4b92      	ldr	r3, [pc, #584]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 030c 	and.w	r3, r3, #12
 80048e4:	2b04      	cmp	r3, #4
 80048e6:	d00c      	beq.n	8004902 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048e8:	4b8f      	ldr	r3, [pc, #572]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 030c 	and.w	r3, r3, #12
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d112      	bne.n	800491a <HAL_RCC_OscConfig+0x5e>
 80048f4:	4b8c      	ldr	r3, [pc, #560]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004900:	d10b      	bne.n	800491a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004902:	4b89      	ldr	r3, [pc, #548]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d06c      	beq.n	80049e8 <HAL_RCC_OscConfig+0x12c>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d168      	bne.n	80049e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e246      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d106      	bne.n	8004932 <HAL_RCC_OscConfig+0x76>
 8004924:	4b80      	ldr	r3, [pc, #512]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a7f      	ldr	r2, [pc, #508]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800492a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	e02e      	b.n	8004990 <HAL_RCC_OscConfig+0xd4>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10c      	bne.n	8004954 <HAL_RCC_OscConfig+0x98>
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004940:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	4b78      	ldr	r3, [pc, #480]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a77      	ldr	r2, [pc, #476]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	e01d      	b.n	8004990 <HAL_RCC_OscConfig+0xd4>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800495c:	d10c      	bne.n	8004978 <HAL_RCC_OscConfig+0xbc>
 800495e:	4b72      	ldr	r3, [pc, #456]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a71      	ldr	r2, [pc, #452]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	4b6f      	ldr	r3, [pc, #444]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a6e      	ldr	r2, [pc, #440]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e00b      	b.n	8004990 <HAL_RCC_OscConfig+0xd4>
 8004978:	4b6b      	ldr	r3, [pc, #428]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a6a      	ldr	r2, [pc, #424]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800497e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004982:	6013      	str	r3, [r2, #0]
 8004984:	4b68      	ldr	r3, [pc, #416]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a67      	ldr	r2, [pc, #412]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 800498a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800498e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d013      	beq.n	80049c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004998:	f7fe fdda 	bl	8003550 <HAL_GetTick>
 800499c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a0:	f7fe fdd6 	bl	8003550 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b64      	cmp	r3, #100	; 0x64
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e1fa      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b2:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe4>
 80049be:	e014      	b.n	80049ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c0:	f7fe fdc6 	bl	8003550 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049c8:	f7fe fdc2 	bl	8003550 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b64      	cmp	r3, #100	; 0x64
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1e6      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049da:	4b53      	ldr	r3, [pc, #332]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x10c>
 80049e6:	e000      	b.n	80049ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d063      	beq.n	8004abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f6:	4b4c      	ldr	r3, [pc, #304]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f003 030c 	and.w	r3, r3, #12
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00b      	beq.n	8004a1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a02:	4b49      	ldr	r3, [pc, #292]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d11c      	bne.n	8004a48 <HAL_RCC_OscConfig+0x18c>
 8004a0e:	4b46      	ldr	r3, [pc, #280]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d116      	bne.n	8004a48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1a:	4b43      	ldr	r3, [pc, #268]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d005      	beq.n	8004a32 <HAL_RCC_OscConfig+0x176>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d001      	beq.n	8004a32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e1ba      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b3d      	ldr	r3, [pc, #244]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4939      	ldr	r1, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	e03a      	b.n	8004abe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d020      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a50:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_RCC_OscConfig+0x270>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a56:	f7fe fd7b 	bl	8003550 <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5e:	f7fe fd77 	bl	8003550 <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e19b      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7c:	4b2a      	ldr	r3, [pc, #168]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	4927      	ldr	r1, [pc, #156]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	600b      	str	r3, [r1, #0]
 8004a90:	e015      	b.n	8004abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a92:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCC_OscConfig+0x270>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a98:	f7fe fd5a 	bl	8003550 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa0:	f7fe fd56 	bl	8003550 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e17a      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1f0      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0308 	and.w	r3, r3, #8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03a      	beq.n	8004b40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d019      	beq.n	8004b06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad2:	4b17      	ldr	r3, [pc, #92]	; (8004b30 <HAL_RCC_OscConfig+0x274>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad8:	f7fe fd3a 	bl	8003550 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae0:	f7fe fd36 	bl	8003550 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b02      	cmp	r3, #2
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e15a      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d0f0      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004afe:	2001      	movs	r0, #1
 8004b00:	f000 faa8 	bl	8005054 <RCC_Delay>
 8004b04:	e01c      	b.n	8004b40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <HAL_RCC_OscConfig+0x274>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0c:	f7fe fd20 	bl	8003550 <HAL_GetTick>
 8004b10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b12:	e00f      	b.n	8004b34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b14:	f7fe fd1c 	bl	8003550 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d908      	bls.n	8004b34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e140      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	42420000 	.word	0x42420000
 8004b30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b34:	4b9e      	ldr	r3, [pc, #632]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1e9      	bne.n	8004b14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 80a6 	beq.w	8004c9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b52:	4b97      	ldr	r3, [pc, #604]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10d      	bne.n	8004b7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5e:	4b94      	ldr	r3, [pc, #592]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	4a93      	ldr	r2, [pc, #588]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b68:	61d3      	str	r3, [r2, #28]
 8004b6a:	4b91      	ldr	r3, [pc, #580]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b8e      	ldr	r3, [pc, #568]	; (8004db4 <HAL_RCC_OscConfig+0x4f8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d118      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b86:	4b8b      	ldr	r3, [pc, #556]	; (8004db4 <HAL_RCC_OscConfig+0x4f8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a8a      	ldr	r2, [pc, #552]	; (8004db4 <HAL_RCC_OscConfig+0x4f8>)
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b92:	f7fe fcdd 	bl	8003550 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9a:	f7fe fcd9 	bl	8003550 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b64      	cmp	r3, #100	; 0x64
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0fd      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	4b81      	ldr	r3, [pc, #516]	; (8004db4 <HAL_RCC_OscConfig+0x4f8>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d106      	bne.n	8004bce <HAL_RCC_OscConfig+0x312>
 8004bc0:	4b7b      	ldr	r3, [pc, #492]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4a7a      	ldr	r2, [pc, #488]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6213      	str	r3, [r2, #32]
 8004bcc:	e02d      	b.n	8004c2a <HAL_RCC_OscConfig+0x36e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x334>
 8004bd6:	4b76      	ldr	r3, [pc, #472]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4a75      	ldr	r2, [pc, #468]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bdc:	f023 0301 	bic.w	r3, r3, #1
 8004be0:	6213      	str	r3, [r2, #32]
 8004be2:	4b73      	ldr	r3, [pc, #460]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4a72      	ldr	r2, [pc, #456]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004be8:	f023 0304 	bic.w	r3, r3, #4
 8004bec:	6213      	str	r3, [r2, #32]
 8004bee:	e01c      	b.n	8004c2a <HAL_RCC_OscConfig+0x36e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	2b05      	cmp	r3, #5
 8004bf6:	d10c      	bne.n	8004c12 <HAL_RCC_OscConfig+0x356>
 8004bf8:	4b6d      	ldr	r3, [pc, #436]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4a6c      	ldr	r2, [pc, #432]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004bfe:	f043 0304 	orr.w	r3, r3, #4
 8004c02:	6213      	str	r3, [r2, #32]
 8004c04:	4b6a      	ldr	r3, [pc, #424]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4a69      	ldr	r2, [pc, #420]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	6213      	str	r3, [r2, #32]
 8004c10:	e00b      	b.n	8004c2a <HAL_RCC_OscConfig+0x36e>
 8004c12:	4b67      	ldr	r3, [pc, #412]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	4a66      	ldr	r2, [pc, #408]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c18:	f023 0301 	bic.w	r3, r3, #1
 8004c1c:	6213      	str	r3, [r2, #32]
 8004c1e:	4b64      	ldr	r3, [pc, #400]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a63      	ldr	r2, [pc, #396]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c24:	f023 0304 	bic.w	r3, r3, #4
 8004c28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d015      	beq.n	8004c5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c32:	f7fe fc8d 	bl	8003550 <HAL_GetTick>
 8004c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fe fc89 	bl	8003550 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e0ab      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	4b57      	ldr	r3, [pc, #348]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c52:	6a1b      	ldr	r3, [r3, #32]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ee      	beq.n	8004c3a <HAL_RCC_OscConfig+0x37e>
 8004c5c:	e014      	b.n	8004c88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5e:	f7fe fc77 	bl	8003550 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fe fc73 	bl	8003550 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e095      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c7c:	4b4c      	ldr	r3, [pc, #304]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1ee      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c88:	7dfb      	ldrb	r3, [r7, #23]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d105      	bne.n	8004c9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8e:	4b48      	ldr	r3, [pc, #288]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	4a47      	ldr	r2, [pc, #284]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004c94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	f000 8081 	beq.w	8004da6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ca4:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
 8004cac:	2b08      	cmp	r3, #8
 8004cae:	d061      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d146      	bne.n	8004d46 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_RCC_OscConfig+0x4fc>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbe:	f7fe fc47 	bl	8003550 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fe fc43 	bl	8003550 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e067      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cd8:	4b35      	ldr	r3, [pc, #212]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1f0      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cec:	d108      	bne.n	8004d00 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cee:	4b30      	ldr	r3, [pc, #192]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	492d      	ldr	r1, [pc, #180]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d00:	4b2b      	ldr	r3, [pc, #172]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a19      	ldr	r1, [r3, #32]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	430b      	orrs	r3, r1
 8004d12:	4927      	ldr	r1, [pc, #156]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d18:	4b27      	ldr	r3, [pc, #156]	; (8004db8 <HAL_RCC_OscConfig+0x4fc>)
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1e:	f7fe fc17 	bl	8003550 <HAL_GetTick>
 8004d22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d24:	e008      	b.n	8004d38 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d26:	f7fe fc13 	bl	8003550 <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d901      	bls.n	8004d38 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d34:	2303      	movs	r3, #3
 8004d36:	e037      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d38:	4b1d      	ldr	r3, [pc, #116]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f0      	beq.n	8004d26 <HAL_RCC_OscConfig+0x46a>
 8004d44:	e02f      	b.n	8004da6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_RCC_OscConfig+0x4fc>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4c:	f7fe fc00 	bl	8003550 <HAL_GetTick>
 8004d50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d52:	e008      	b.n	8004d66 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d54:	f7fe fbfc 	bl	8003550 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d901      	bls.n	8004d66 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	e020      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1f0      	bne.n	8004d54 <HAL_RCC_OscConfig+0x498>
 8004d72:	e018      	b.n	8004da6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d101      	bne.n	8004d80 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e013      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <HAL_RCC_OscConfig+0x4f4>)
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d106      	bne.n	8004da2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d001      	beq.n	8004da6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e000      	b.n	8004da8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3718      	adds	r7, #24
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40021000 	.word	0x40021000
 8004db4:	40007000 	.word	0x40007000
 8004db8:	42420060 	.word	0x42420060

08004dbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e0d0      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b6a      	ldr	r3, [pc, #424]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0307 	and.w	r3, r3, #7
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d910      	bls.n	8004e00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b67      	ldr	r3, [pc, #412]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 0207 	bic.w	r2, r3, #7
 8004de6:	4965      	ldr	r1, [pc, #404]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b63      	ldr	r3, [pc, #396]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0307 	and.w	r3, r3, #7
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0b8      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d020      	beq.n	8004e4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e18:	4b59      	ldr	r3, [pc, #356]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a58      	ldr	r2, [pc, #352]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d005      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e30:	4b53      	ldr	r3, [pc, #332]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	4a52      	ldr	r2, [pc, #328]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e3c:	4b50      	ldr	r3, [pc, #320]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	494d      	ldr	r1, [pc, #308]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d040      	beq.n	8004edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	4b47      	ldr	r3, [pc, #284]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d115      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e07f      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b02      	cmp	r3, #2
 8004e78:	d107      	bne.n	8004e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7a:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e073      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8a:	4b3d      	ldr	r3, [pc, #244]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e06b      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e9a:	4b39      	ldr	r3, [pc, #228]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f023 0203 	bic.w	r2, r3, #3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	4936      	ldr	r1, [pc, #216]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eac:	f7fe fb50 	bl	8003550 <HAL_GetTick>
 8004eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb4:	f7fe fb4c 	bl	8003550 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e053      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	4b2d      	ldr	r3, [pc, #180]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f003 020c 	and.w	r2, r3, #12
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d1eb      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004edc:	4b27      	ldr	r3, [pc, #156]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d210      	bcs.n	8004f0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eea:	4b24      	ldr	r3, [pc, #144]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f023 0207 	bic.w	r2, r3, #7
 8004ef2:	4922      	ldr	r1, [pc, #136]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004efa:	4b20      	ldr	r3, [pc, #128]	; (8004f7c <HAL_RCC_ClockConfig+0x1c0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	683a      	ldr	r2, [r7, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e032      	b.n	8004f72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0304 	and.w	r3, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d008      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f18:	4b19      	ldr	r3, [pc, #100]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4916      	ldr	r1, [pc, #88]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d009      	beq.n	8004f4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f36:	4b12      	ldr	r3, [pc, #72]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	490e      	ldr	r1, [pc, #56]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f4a:	f000 f821 	bl	8004f90 <HAL_RCC_GetSysClockFreq>
 8004f4e:	4601      	mov	r1, r0
 8004f50:	4b0b      	ldr	r3, [pc, #44]	; (8004f80 <HAL_RCC_ClockConfig+0x1c4>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	4a0a      	ldr	r2, [pc, #40]	; (8004f84 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	5cd3      	ldrb	r3, [r2, r3]
 8004f5e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <HAL_RCC_ClockConfig+0x1cc>)
 8004f64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f66:	4b09      	ldr	r3, [pc, #36]	; (8004f8c <HAL_RCC_ClockConfig+0x1d0>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fe faae 	bl	80034cc <HAL_InitTick>

  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	40022000 	.word	0x40022000
 8004f80:	40021000 	.word	0x40021000
 8004f84:	080090f0 	.word	0x080090f0
 8004f88:	20000000 	.word	0x20000000
 8004f8c:	20000008 	.word	0x20000008

08004f90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f90:	b490      	push	{r4, r7}
 8004f92:	b08a      	sub	sp, #40	; 0x28
 8004f94:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f98:	1d3c      	adds	r4, r7, #4
 8004f9a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004fa0:	4b28      	ldr	r3, [pc, #160]	; (8005044 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004fa2:	881b      	ldrh	r3, [r3, #0]
 8004fa4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
 8004faa:	2300      	movs	r3, #0
 8004fac:	61bb      	str	r3, [r7, #24]
 8004fae:	2300      	movs	r3, #0
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d002      	beq.n	8004fd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d003      	beq.n	8004fd6 <HAL_RCC_GetSysClockFreq+0x46>
 8004fce:	e02d      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fd2:	623b      	str	r3, [r7, #32]
      break;
 8004fd4:	e02d      	b.n	8005032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	0c9b      	lsrs	r3, r3, #18
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fe8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d013      	beq.n	800501c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ff4:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	0c5b      	lsrs	r3, r3, #17
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005002:	4413      	add	r3, r2
 8005004:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005008:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <HAL_RCC_GetSysClockFreq+0xbc>)
 800500e:	fb02 f203 	mul.w	r2, r2, r3
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	fbb2 f3f3 	udiv	r3, r2, r3
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
 800501a:	e004      	b.n	8005026 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	4a0c      	ldr	r2, [pc, #48]	; (8005050 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005020:	fb02 f303 	mul.w	r3, r2, r3
 8005024:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	623b      	str	r3, [r7, #32]
      break;
 800502a:	e002      	b.n	8005032 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b07      	ldr	r3, [pc, #28]	; (800504c <HAL_RCC_GetSysClockFreq+0xbc>)
 800502e:	623b      	str	r3, [r7, #32]
      break;
 8005030:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005032:	6a3b      	ldr	r3, [r7, #32]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3728      	adds	r7, #40	; 0x28
 8005038:	46bd      	mov	sp, r7
 800503a:	bc90      	pop	{r4, r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	080090b4 	.word	0x080090b4
 8005044:	080090c4 	.word	0x080090c4
 8005048:	40021000 	.word	0x40021000
 800504c:	007a1200 	.word	0x007a1200
 8005050:	003d0900 	.word	0x003d0900

08005054 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800505c:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <RCC_Delay+0x34>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <RCC_Delay+0x38>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	0a5b      	lsrs	r3, r3, #9
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005070:	bf00      	nop
  }
  while (Delay --);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1e5a      	subs	r2, r3, #1
 8005076:	60fa      	str	r2, [r7, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d1f9      	bne.n	8005070 <RCC_Delay+0x1c>
}
 800507c:	bf00      	nop
 800507e:	3714      	adds	r7, #20
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	20000000 	.word	0x20000000
 800508c:	10624dd3 	.word	0x10624dd3

08005090 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b086      	sub	sp, #24
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005098:	2300      	movs	r3, #0
 800509a:	613b      	str	r3, [r7, #16]
 800509c:	2300      	movs	r3, #0
 800509e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0301 	and.w	r3, r3, #1
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d07d      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80050ac:	2300      	movs	r3, #0
 80050ae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b0:	4b4f      	ldr	r3, [pc, #316]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10d      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050bc:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	4a4b      	ldr	r2, [pc, #300]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c6:	61d3      	str	r3, [r2, #28]
 80050c8:	4b49      	ldr	r3, [pc, #292]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050ca:	69db      	ldr	r3, [r3, #28]
 80050cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050d4:	2301      	movs	r3, #1
 80050d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d8:	4b46      	ldr	r3, [pc, #280]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d118      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a42      	ldr	r2, [pc, #264]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80050ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f0:	f7fe fa2e 	bl	8003550 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f6:	e008      	b.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f8:	f7fe fa2a 	bl	8003550 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e06d      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510a:	4b3a      	ldr	r3, [pc, #232]	; (80051f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005116:	4b36      	ldr	r3, [pc, #216]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800511e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d02e      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d027      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005134:	4b2e      	ldr	r3, [pc, #184]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800513e:	4b2e      	ldr	r3, [pc, #184]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005144:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005146:	2200      	movs	r2, #0
 8005148:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800514a:	4a29      	ldr	r2, [pc, #164]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d014      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515a:	f7fe f9f9 	bl	8003550 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fe f9f5 	bl	8003550 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e036      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	4917      	ldr	r1, [pc, #92]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005192:	4313      	orrs	r3, r2
 8005194:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005196:	7dfb      	ldrb	r3, [r7, #23]
 8005198:	2b01      	cmp	r3, #1
 800519a:	d105      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800519c:	4b14      	ldr	r3, [pc, #80]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	4a13      	ldr	r2, [pc, #76]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d008      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80051b4:	4b0e      	ldr	r3, [pc, #56]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	490b      	ldr	r1, [pc, #44]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0310 	and.w	r3, r3, #16
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051d2:	4b07      	ldr	r3, [pc, #28]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	4904      	ldr	r1, [pc, #16]	; (80051f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051e0:	4313      	orrs	r3, r2
 80051e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40007000 	.word	0x40007000
 80051f8:	42420440 	.word	0x42420440

080051fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e053      	b.n	80052b6 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d106      	bne.n	800522e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7fd fbb9 	bl	80029a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005244:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	69db      	ldr	r3, [r3, #28]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	ea42 0103 	orr.w	r1, r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	430a      	orrs	r2, r1
 8005284:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	0c1a      	lsrs	r2, r3, #16
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f002 0204 	and.w	r2, r2, #4
 8005294:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b082      	sub	sp, #8
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e01d      	b.n	800530c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fd fba5 	bl	8002a34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2202      	movs	r2, #2
 80052ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 fa39 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68da      	ldr	r2, [r3, #12]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d007      	beq.n	800534e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bc80      	pop	{r7}
 8005358:	4770      	bx	lr

0800535a <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800535a:	b480      	push	{r7}
 800535c:	b083      	sub	sp, #12
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 0201 	bic.w	r2, r2, #1
 8005370:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6a1a      	ldr	r2, [r3, #32]
 8005378:	f241 1311 	movw	r3, #4369	; 0x1111
 800537c:	4013      	ands	r3, r2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <HAL_TIM_Base_Stop_IT+0x48>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a1a      	ldr	r2, [r3, #32]
 8005388:	f240 4344 	movw	r3, #1092	; 0x444
 800538c:	4013      	ands	r3, r2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_Base_Stop_IT+0x48>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr

080053ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b082      	sub	sp, #8
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d122      	bne.n	800540a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f003 0302 	and.w	r3, r3, #2
 80053ce:	2b02      	cmp	r3, #2
 80053d0:	d11b      	bne.n	800540a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f06f 0202 	mvn.w	r2, #2
 80053da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f9a4 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 80053f6:	e005      	b.n	8005404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f997 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9a6 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d122      	bne.n	800545e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b04      	cmp	r3, #4
 8005424:	d11b      	bne.n	800545e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f06f 0204 	mvn.w	r2, #4
 800542e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f97a 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 800544a:	e005      	b.n	8005458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f96d 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f97c 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d122      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f003 0308 	and.w	r3, r3, #8
 8005476:	2b08      	cmp	r3, #8
 8005478:	d11b      	bne.n	80054b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f06f 0208 	mvn.w	r2, #8
 8005482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2204      	movs	r2, #4
 8005488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f950 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 800549e:	e005      	b.n	80054ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f943 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f952 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d122      	bne.n	8005506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0310 	and.w	r3, r3, #16
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d11b      	bne.n	8005506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f06f 0210 	mvn.w	r2, #16
 80054d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2208      	movs	r2, #8
 80054dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69db      	ldr	r3, [r3, #28]
 80054e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d003      	beq.n	80054f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f926 	bl	800573e <HAL_TIM_IC_CaptureCallback>
 80054f2:	e005      	b.n	8005500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 f919 	bl	800572c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f928 	bl	8005750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	691b      	ldr	r3, [r3, #16]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10e      	bne.n	8005532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f06f 0201 	mvn.w	r2, #1
 800552a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7fd fb8f 	bl	8002c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d10e      	bne.n	800555e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	2b80      	cmp	r3, #128	; 0x80
 800554c:	d107      	bne.n	800555e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fa50 	bl	80059fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005568:	2b40      	cmp	r3, #64	; 0x40
 800556a:	d10e      	bne.n	800558a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005576:	2b40      	cmp	r3, #64	; 0x40
 8005578:	d107      	bne.n	800558a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8ec 	bl	8005762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	f003 0320 	and.w	r3, r3, #32
 8005594:	2b20      	cmp	r3, #32
 8005596:	d10e      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0320 	and.w	r3, r3, #32
 80055a2:	2b20      	cmp	r3, #32
 80055a4:	d107      	bne.n	80055b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f06f 0220 	mvn.w	r2, #32
 80055ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 fa1b 	bl	80059ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_ConfigClockSource+0x18>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e0a6      	b.n	8005724 <HAL_TIM_ConfigClockSource+0x166>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2202      	movs	r2, #2
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b40      	cmp	r3, #64	; 0x40
 800560c:	d067      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x120>
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d80b      	bhi.n	800562a <HAL_TIM_ConfigClockSource+0x6c>
 8005612:	2b10      	cmp	r3, #16
 8005614:	d073      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x140>
 8005616:	2b10      	cmp	r3, #16
 8005618:	d802      	bhi.n	8005620 <HAL_TIM_ConfigClockSource+0x62>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d06f      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800561e:	e078      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005620:	2b20      	cmp	r3, #32
 8005622:	d06c      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x140>
 8005624:	2b30      	cmp	r3, #48	; 0x30
 8005626:	d06a      	beq.n	80056fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005628:	e073      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800562a:	2b70      	cmp	r3, #112	; 0x70
 800562c:	d00d      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x8c>
 800562e:	2b70      	cmp	r3, #112	; 0x70
 8005630:	d804      	bhi.n	800563c <HAL_TIM_ConfigClockSource+0x7e>
 8005632:	2b50      	cmp	r3, #80	; 0x50
 8005634:	d033      	beq.n	800569e <HAL_TIM_ConfigClockSource+0xe0>
 8005636:	2b60      	cmp	r3, #96	; 0x60
 8005638:	d041      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800563a:	e06a      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800563c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005640:	d066      	beq.n	8005710 <HAL_TIM_ConfigClockSource+0x152>
 8005642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005646:	d017      	beq.n	8005678 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005648:	e063      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6899      	ldr	r1, [r3, #8]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f000 f964 	bl	8005926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800566c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	609a      	str	r2, [r3, #8]
      break;
 8005676:	e04c      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	6899      	ldr	r1, [r3, #8]
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685a      	ldr	r2, [r3, #4]
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f000 f94d 	bl	8005926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	689a      	ldr	r2, [r3, #8]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800569a:	609a      	str	r2, [r3, #8]
      break;
 800569c:	e039      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 f8c4 	bl	8005838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2150      	movs	r1, #80	; 0x50
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 f91b 	bl	80058f2 <TIM_ITRx_SetConfig>
      break;
 80056bc:	e029      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 f8e2 	bl	8005894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2160      	movs	r1, #96	; 0x60
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f90b 	bl	80058f2 <TIM_ITRx_SetConfig>
      break;
 80056dc:	e019      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6859      	ldr	r1, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f000 f8a4 	bl	8005838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2140      	movs	r1, #64	; 0x40
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 f8fb 	bl	80058f2 <TIM_ITRx_SetConfig>
      break;
 80056fc:	e009      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4619      	mov	r1, r3
 8005708:	4610      	mov	r0, r2
 800570a:	f000 f8f2 	bl	80058f2 <TIM_ITRx_SetConfig>
      break;
 800570e:	e000      	b.n	8005712 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2201      	movs	r2, #1
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	bc80      	pop	{r7}
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	bc80      	pop	{r7}
 800574e:	4770      	bx	lr

08005750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b480      	push	{r7}
 8005752:	b083      	sub	sp, #12
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005758:	bf00      	nop
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	bc80      	pop	{r7}
 8005760:	4770      	bx	lr

08005762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800576a:	bf00      	nop
 800576c:	370c      	adds	r7, #12
 800576e:	46bd      	mov	sp, r7
 8005770:	bc80      	pop	{r7}
 8005772:	4770      	bx	lr

08005774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a29      	ldr	r2, [pc, #164]	; (800582c <TIM_Base_SetConfig+0xb8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a26      	ldr	r2, [pc, #152]	; (8005830 <TIM_Base_SetConfig+0xbc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x30>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a25      	ldr	r2, [pc, #148]	; (8005834 <TIM_Base_SetConfig+0xc0>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a1c      	ldr	r2, [pc, #112]	; (800582c <TIM_Base_SetConfig+0xb8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d00b      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d007      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a19      	ldr	r2, [pc, #100]	; (8005830 <TIM_Base_SetConfig+0xbc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d003      	beq.n	80057d6 <TIM_Base_SetConfig+0x62>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a18      	ldr	r2, [pc, #96]	; (8005834 <TIM_Base_SetConfig+0xc0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d108      	bne.n	80057e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a07      	ldr	r2, [pc, #28]	; (800582c <TIM_Base_SetConfig+0xb8>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr
 800582c:	40012c00 	.word	0x40012c00
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800

08005838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0201 	bic.w	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	011b      	lsls	r3, r3, #4
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 030a 	bic.w	r3, r3, #10
 8005874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	693a      	ldr	r2, [r7, #16]
 8005882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	621a      	str	r2, [r3, #32]
}
 800588a:	bf00      	nop
 800588c:	371c      	adds	r7, #28
 800588e:	46bd      	mov	sp, r7
 8005890:	bc80      	pop	{r7}
 8005892:	4770      	bx	lr

08005894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0210 	bic.w	r2, r3, #16
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	031b      	lsls	r3, r3, #12
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	621a      	str	r2, [r3, #32]
}
 80058e8:	bf00      	nop
 80058ea:	371c      	adds	r7, #28
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bc80      	pop	{r7}
 80058f0:	4770      	bx	lr

080058f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b085      	sub	sp, #20
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800590a:	683a      	ldr	r2, [r7, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	4313      	orrs	r3, r2
 8005910:	f043 0307 	orr.w	r3, r3, #7
 8005914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	609a      	str	r2, [r3, #8]
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	bc80      	pop	{r7}
 8005924:	4770      	bx	lr

08005926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005926:	b480      	push	{r7}
 8005928:	b087      	sub	sp, #28
 800592a:	af00      	add	r7, sp, #0
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	021a      	lsls	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	431a      	orrs	r2, r3
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	4313      	orrs	r3, r2
 800594e:	697a      	ldr	r2, [r7, #20]
 8005950:	4313      	orrs	r3, r2
 8005952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	609a      	str	r2, [r3, #8]
}
 800595a:	bf00      	nop
 800595c:	371c      	adds	r7, #28
 800595e:	46bd      	mov	sp, r7
 8005960:	bc80      	pop	{r7}
 8005962:	4770      	bx	lr

08005964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005974:	2b01      	cmp	r3, #1
 8005976:	d101      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005978:	2302      	movs	r3, #2
 800597a:	e032      	b.n	80059e2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	4313      	orrs	r3, r2
 80059be:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3714      	adds	r7, #20
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bc80      	pop	{r7}
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr

080059fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bc80      	pop	{r7}
 8005a0e:	4770      	bx	lr

08005a10 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a10:	b084      	sub	sp, #16
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	f107 0014 	add.w	r0, r7, #20
 8005a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bc80      	pop	{r7}
 8005a2c:	b004      	add	sp, #16
 8005a2e:	4770      	bx	lr

08005a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a38:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a3c:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	89fb      	ldrh	r3, [r7, #14]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3714      	adds	r7, #20
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bc80      	pop	{r7}
 8005a5c:	4770      	bx	lr

08005a5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a66:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005a6a:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	b21a      	sxth	r2, r3
 8005a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a7a:	43db      	mvns	r3, r3
 8005a7c:	b21b      	sxth	r3, r3
 8005a7e:	4013      	ands	r3, r2
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bc80      	pop	{r7}
 8005a94:	4770      	bx	lr

08005a96 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr

08005aae <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005aae:	b084      	sub	sp, #16
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	f107 0014 	add.w	r0, r7, #20
 8005abc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff ffa5 	bl	8005a30 <USB_EnableGlobalInt>

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005af2:	b004      	add	sp, #16
 8005af4:	4770      	bx	lr
	...

08005af8 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005af8:	b490      	push	{r4, r7}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	4413      	add	r3, r2
 8005b10:	881b      	ldrh	r3, [r3, #0]
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d819      	bhi.n	8005b5a <USB_ActivateEndpoint+0x62>
 8005b26:	a201      	add	r2, pc, #4	; (adr r2, 8005b2c <USB_ActivateEndpoint+0x34>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b51 	.word	0x08005b51
 8005b34:	08005b61 	.word	0x08005b61
 8005b38:	08005b47 	.word	0x08005b47
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b3c:	89bb      	ldrh	r3, [r7, #12]
 8005b3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b42:	81bb      	strh	r3, [r7, #12]
      break;
 8005b44:	e00d      	b.n	8005b62 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b46:	89bb      	ldrh	r3, [r7, #12]
 8005b48:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005b4c:	81bb      	strh	r3, [r7, #12]
      break;
 8005b4e:	e008      	b.n	8005b62 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b50:	89bb      	ldrh	r3, [r7, #12]
 8005b52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b56:	81bb      	strh	r3, [r7, #12]
      break;
 8005b58:	e003      	b.n	8005b62 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5e:	e000      	b.n	8005b62 <USB_ActivateEndpoint+0x6a>
      break;
 8005b60:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	441a      	add	r2, r3
 8005b6c:	89bb      	ldrh	r3, [r7, #12]
 8005b6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	881b      	ldrh	r3, [r3, #0]
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	b29c      	uxth	r4, r3
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	441a      	add	r2, r3
 8005bae:	4b8a      	ldr	r3, [pc, #552]	; (8005dd8 <USB_ActivateEndpoint+0x2e0>)
 8005bb0:	4323      	orrs	r3, r4
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	7b1b      	ldrb	r3, [r3, #12]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8112 	bne.w	8005de4 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d067      	beq.n	8005c98 <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bc8:	687c      	ldr	r4, [r7, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	441c      	add	r4, r3
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011b      	lsls	r3, r3, #4
 8005bda:	4423      	add	r3, r4
 8005bdc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005be0:	461c      	mov	r4, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	88db      	ldrh	r3, [r3, #6]
 8005be6:	085b      	lsrs	r3, r3, #1
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29c      	uxth	r4, r3
 8005bfe:	4623      	mov	r3, r4
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d014      	beq.n	8005c32 <USB_ActivateEndpoint+0x13a>
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1e:	b29c      	uxth	r4, r3
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	441a      	add	r2, r3
 8005c2a:	4b6c      	ldr	r3, [pc, #432]	; (8005ddc <USB_ActivateEndpoint+0x2e4>)
 8005c2c:	4323      	orrs	r3, r4
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	78db      	ldrb	r3, [r3, #3]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d018      	beq.n	8005c6c <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	4413      	add	r3, r2
 8005c44:	881b      	ldrh	r3, [r3, #0]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c50:	b29c      	uxth	r4, r3
 8005c52:	f084 0320 	eor.w	r3, r4, #32
 8005c56:	b29c      	uxth	r4, r3
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	441a      	add	r2, r3
 8005c62:	4b5d      	ldr	r3, [pc, #372]	; (8005dd8 <USB_ActivateEndpoint+0x2e0>)
 8005c64:	4323      	orrs	r3, r4
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	8013      	strh	r3, [r2, #0]
 8005c6a:	e22b      	b.n	80060c4 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	881b      	ldrh	r3, [r3, #0]
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c82:	b29c      	uxth	r4, r3
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	441a      	add	r2, r3
 8005c8e:	4b52      	ldr	r3, [pc, #328]	; (8005dd8 <USB_ActivateEndpoint+0x2e0>)
 8005c90:	4323      	orrs	r3, r4
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	8013      	strh	r3, [r2, #0]
 8005c96:	e215      	b.n	80060c4 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c98:	687c      	ldr	r4, [r7, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	441c      	add	r4, r3
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	4423      	add	r3, r4
 8005cac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005cb0:	461c      	mov	r4, r3
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	88db      	ldrh	r3, [r3, #6]
 8005cb6:	085b      	lsrs	r3, r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cc0:	687c      	ldr	r4, [r7, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	441c      	add	r4, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	4423      	add	r3, r4
 8005cd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cd8:	461c      	mov	r4, r3
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10e      	bne.n	8005d00 <USB_ActivateEndpoint+0x208>
 8005ce2:	8823      	ldrh	r3, [r4, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	8023      	strh	r3, [r4, #0]
 8005cee:	8823      	ldrh	r3, [r4, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	8023      	strh	r3, [r4, #0]
 8005cfe:	e02d      	b.n	8005d5c <USB_ActivateEndpoint+0x264>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b3e      	cmp	r3, #62	; 0x3e
 8005d06:	d812      	bhi.n	8005d2e <USB_ActivateEndpoint+0x236>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	085b      	lsrs	r3, r3, #1
 8005d0e:	60bb      	str	r3, [r7, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	691b      	ldr	r3, [r3, #16]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d002      	beq.n	8005d22 <USB_ActivateEndpoint+0x22a>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	029b      	lsls	r3, r3, #10
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	8023      	strh	r3, [r4, #0]
 8005d2c:	e016      	b.n	8005d5c <USB_ActivateEndpoint+0x264>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	691b      	ldr	r3, [r3, #16]
 8005d32:	095b      	lsrs	r3, r3, #5
 8005d34:	60bb      	str	r3, [r7, #8]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	f003 031f 	and.w	r3, r3, #31
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d102      	bne.n	8005d48 <USB_ActivateEndpoint+0x250>
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	60bb      	str	r3, [r7, #8]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	029b      	lsls	r3, r3, #10
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4413      	add	r3, r2
 8005d66:	881b      	ldrh	r3, [r3, #0]
 8005d68:	b29c      	uxth	r4, r3
 8005d6a:	4623      	mov	r3, r4
 8005d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d014      	beq.n	8005d9e <USB_ActivateEndpoint+0x2a6>
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	881b      	ldrh	r3, [r3, #0]
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d8a:	b29c      	uxth	r4, r3
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	009b      	lsls	r3, r3, #2
 8005d94:	441a      	add	r2, r3
 8005d96:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <USB_ActivateEndpoint+0x2e8>)
 8005d98:	4323      	orrs	r3, r4
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	881b      	ldrh	r3, [r3, #0]
 8005daa:	b29b      	uxth	r3, r3
 8005dac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005db0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db4:	b29c      	uxth	r4, r3
 8005db6:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005dba:	b29c      	uxth	r4, r3
 8005dbc:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005dc0:	b29c      	uxth	r4, r3
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	441a      	add	r2, r3
 8005dcc:	4b02      	ldr	r3, [pc, #8]	; (8005dd8 <USB_ActivateEndpoint+0x2e0>)
 8005dce:	4323      	orrs	r3, r4
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	8013      	strh	r3, [r2, #0]
 8005dd4:	e176      	b.n	80060c4 <USB_ActivateEndpoint+0x5cc>
 8005dd6:	bf00      	nop
 8005dd8:	ffff8080 	.word	0xffff8080
 8005ddc:	ffff80c0 	.word	0xffff80c0
 8005de0:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	881b      	ldrh	r3, [r3, #0]
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfa:	b29c      	uxth	r4, r3
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	441a      	add	r2, r3
 8005e06:	4b96      	ldr	r3, [pc, #600]	; (8006060 <USB_ActivateEndpoint+0x568>)
 8005e08:	4323      	orrs	r3, r4
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e0e:	687c      	ldr	r4, [r7, #4]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	441c      	add	r4, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	011b      	lsls	r3, r3, #4
 8005e20:	4423      	add	r3, r4
 8005e22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e26:	461c      	mov	r4, r3
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	891b      	ldrh	r3, [r3, #8]
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	005b      	lsls	r3, r3, #1
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8023      	strh	r3, [r4, #0]
 8005e36:	687c      	ldr	r4, [r7, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	441c      	add	r4, r3
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	4423      	add	r3, r4
 8005e4a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005e4e:	461c      	mov	r4, r3
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	895b      	ldrh	r3, [r3, #10]
 8005e54:	085b      	lsrs	r3, r3, #1
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	785b      	ldrb	r3, [r3, #1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	f040 8088 	bne.w	8005f78 <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	4413      	add	r3, r2
 8005e72:	881b      	ldrh	r3, [r3, #0]
 8005e74:	b29c      	uxth	r4, r3
 8005e76:	4623      	mov	r3, r4
 8005e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d014      	beq.n	8005eaa <USB_ActivateEndpoint+0x3b2>
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	4413      	add	r3, r2
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	b29c      	uxth	r4, r3
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	4b70      	ldr	r3, [pc, #448]	; (8006064 <USB_ActivateEndpoint+0x56c>)
 8005ea4:	4323      	orrs	r3, r4
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	881b      	ldrh	r3, [r3, #0]
 8005eb6:	b29c      	uxth	r4, r3
 8005eb8:	4623      	mov	r3, r4
 8005eba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d014      	beq.n	8005eec <USB_ActivateEndpoint+0x3f4>
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed8:	b29c      	uxth	r4, r3
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	4b60      	ldr	r3, [pc, #384]	; (8006068 <USB_ActivateEndpoint+0x570>)
 8005ee6:	4323      	orrs	r3, r4
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	009b      	lsls	r3, r3, #2
 8005ef4:	4413      	add	r3, r2
 8005ef6:	881b      	ldrh	r3, [r3, #0]
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f02:	b29c      	uxth	r4, r3
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	441a      	add	r2, r3
 8005f0e:	4b56      	ldr	r3, [pc, #344]	; (8006068 <USB_ActivateEndpoint+0x570>)
 8005f10:	4323      	orrs	r3, r4
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	b29c      	uxth	r4, r3
 8005f2e:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005f32:	b29c      	uxth	r4, r3
 8005f34:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005f38:	b29c      	uxth	r4, r3
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	441a      	add	r2, r3
 8005f44:	4b49      	ldr	r3, [pc, #292]	; (800606c <USB_ActivateEndpoint+0x574>)
 8005f46:	4323      	orrs	r3, r4
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f62:	b29c      	uxth	r4, r3
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	441a      	add	r2, r3
 8005f6e:	4b3f      	ldr	r3, [pc, #252]	; (800606c <USB_ActivateEndpoint+0x574>)
 8005f70:	4323      	orrs	r3, r4
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
 8005f76:	e0a5      	b.n	80060c4 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f78:	687a      	ldr	r2, [r7, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	4413      	add	r3, r2
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	b29c      	uxth	r4, r3
 8005f86:	4623      	mov	r3, r4
 8005f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d014      	beq.n	8005fba <USB_ActivateEndpoint+0x4c2>
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	4413      	add	r3, r2
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa6:	b29c      	uxth	r4, r3
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	4b2c      	ldr	r3, [pc, #176]	; (8006064 <USB_ActivateEndpoint+0x56c>)
 8005fb4:	4323      	orrs	r3, r4
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29c      	uxth	r4, r3
 8005fc8:	4623      	mov	r3, r4
 8005fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d014      	beq.n	8005ffc <USB_ActivateEndpoint+0x504>
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	881b      	ldrh	r3, [r3, #0]
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fe4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe8:	b29c      	uxth	r4, r3
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	441a      	add	r2, r3
 8005ff4:	4b1c      	ldr	r3, [pc, #112]	; (8006068 <USB_ActivateEndpoint+0x570>)
 8005ff6:	4323      	orrs	r3, r4
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	b29c      	uxth	r4, r3
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	441a      	add	r2, r3
 800601e:	4b11      	ldr	r3, [pc, #68]	; (8006064 <USB_ActivateEndpoint+0x56c>)
 8006020:	4323      	orrs	r3, r4
 8006022:	b29b      	uxth	r3, r3
 8006024:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	78db      	ldrb	r3, [r3, #3]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d020      	beq.n	8006070 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	b29c      	uxth	r4, r3
 8006046:	f084 0320 	eor.w	r3, r4, #32
 800604a:	b29c      	uxth	r4, r3
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	441a      	add	r2, r3
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <USB_ActivateEndpoint+0x574>)
 8006058:	4323      	orrs	r3, r4
 800605a:	b29b      	uxth	r3, r3
 800605c:	8013      	strh	r3, [r2, #0]
 800605e:	e01c      	b.n	800609a <USB_ActivateEndpoint+0x5a2>
 8006060:	ffff8180 	.word	0xffff8180
 8006064:	ffffc080 	.word	0xffffc080
 8006068:	ffff80c0 	.word	0xffff80c0
 800606c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006086:	b29c      	uxth	r4, r3
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	441a      	add	r2, r3
 8006092:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <USB_ActivateEndpoint+0x5d8>)
 8006094:	4323      	orrs	r3, r4
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	4413      	add	r3, r2
 80060a4:	881b      	ldrh	r3, [r3, #0]
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	b29c      	uxth	r4, r3
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	4b04      	ldr	r3, [pc, #16]	; (80060d0 <USB_ActivateEndpoint+0x5d8>)
 80060be:	4323      	orrs	r3, r4
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bc90      	pop	{r4, r7}
 80060ce:	4770      	bx	lr
 80060d0:	ffff8080 	.word	0xffff8080

080060d4 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060d4:	b490      	push	{r4, r7}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	7b1b      	ldrb	r3, [r3, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d171      	bne.n	80061ca <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d036      	beq.n	800615c <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4413      	add	r3, r2
 80060f8:	881b      	ldrh	r3, [r3, #0]
 80060fa:	b29c      	uxth	r4, r3
 80060fc:	4623      	mov	r3, r4
 80060fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006102:	2b00      	cmp	r3, #0
 8006104:	d014      	beq.n	8006130 <USB_DeactivateEndpoint+0x5c>
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	4413      	add	r3, r2
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	b29b      	uxth	r3, r3
 8006114:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611c:	b29c      	uxth	r4, r3
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	441a      	add	r2, r3
 8006128:	4b6b      	ldr	r3, [pc, #428]	; (80062d8 <USB_DeactivateEndpoint+0x204>)
 800612a:	4323      	orrs	r3, r4
 800612c:	b29b      	uxth	r3, r3
 800612e:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006146:	b29c      	uxth	r4, r3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	441a      	add	r2, r3
 8006152:	4b62      	ldr	r3, [pc, #392]	; (80062dc <USB_DeactivateEndpoint+0x208>)
 8006154:	4323      	orrs	r3, r4
 8006156:	b29b      	uxth	r3, r3
 8006158:	8013      	strh	r3, [r2, #0]
 800615a:	e144      	b.n	80063e6 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	b29c      	uxth	r4, r3
 800616a:	4623      	mov	r3, r4
 800616c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d014      	beq.n	800619e <USB_DeactivateEndpoint+0xca>
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800618a:	b29c      	uxth	r4, r3
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	4b52      	ldr	r3, [pc, #328]	; (80062e0 <USB_DeactivateEndpoint+0x20c>)
 8006198:	4323      	orrs	r3, r4
 800619a:	b29b      	uxth	r3, r3
 800619c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	b29c      	uxth	r4, r3
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	441a      	add	r2, r3
 80061c0:	4b46      	ldr	r3, [pc, #280]	; (80062dc <USB_DeactivateEndpoint+0x208>)
 80061c2:	4323      	orrs	r3, r4
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	8013      	strh	r3, [r2, #0]
 80061c8:	e10d      	b.n	80063e6 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f040 8088 	bne.w	80062e4 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	b29c      	uxth	r4, r3
 80061e2:	4623      	mov	r3, r4
 80061e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d014      	beq.n	8006216 <USB_DeactivateEndpoint+0x142>
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006202:	b29c      	uxth	r4, r3
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	441a      	add	r2, r3
 800620e:	4b34      	ldr	r3, [pc, #208]	; (80062e0 <USB_DeactivateEndpoint+0x20c>)
 8006210:	4323      	orrs	r3, r4
 8006212:	b29b      	uxth	r3, r3
 8006214:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29c      	uxth	r4, r3
 8006224:	4623      	mov	r3, r4
 8006226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622a:	2b00      	cmp	r3, #0
 800622c:	d014      	beq.n	8006258 <USB_DeactivateEndpoint+0x184>
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006240:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006244:	b29c      	uxth	r4, r3
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	781b      	ldrb	r3, [r3, #0]
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	441a      	add	r2, r3
 8006250:	4b21      	ldr	r3, [pc, #132]	; (80062d8 <USB_DeactivateEndpoint+0x204>)
 8006252:	4323      	orrs	r3, r4
 8006254:	b29b      	uxth	r3, r3
 8006256:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	4413      	add	r3, r2
 8006262:	881b      	ldrh	r3, [r3, #0]
 8006264:	b29b      	uxth	r3, r3
 8006266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800626a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626e:	b29c      	uxth	r4, r3
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	441a      	add	r2, r3
 800627a:	4b17      	ldr	r3, [pc, #92]	; (80062d8 <USB_DeactivateEndpoint+0x204>)
 800627c:	4323      	orrs	r3, r4
 800627e:	b29b      	uxth	r3, r3
 8006280:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	781b      	ldrb	r3, [r3, #0]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29b      	uxth	r3, r3
 8006290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006298:	b29c      	uxth	r4, r3
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	441a      	add	r2, r3
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <USB_DeactivateEndpoint+0x208>)
 80062a6:	4323      	orrs	r3, r4
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	009b      	lsls	r3, r3, #2
 80062b4:	4413      	add	r3, r2
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062c2:	b29c      	uxth	r4, r3
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	441a      	add	r2, r3
 80062ce:	4b03      	ldr	r3, [pc, #12]	; (80062dc <USB_DeactivateEndpoint+0x208>)
 80062d0:	4323      	orrs	r3, r4
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	e086      	b.n	80063e6 <USB_DeactivateEndpoint+0x312>
 80062d8:	ffff80c0 	.word	0xffff80c0
 80062dc:	ffff8080 	.word	0xffff8080
 80062e0:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	b29c      	uxth	r4, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d014      	beq.n	8006326 <USB_DeactivateEndpoint+0x252>
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	881b      	ldrh	r3, [r3, #0]
 8006308:	b29b      	uxth	r3, r3
 800630a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800630e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006312:	b29c      	uxth	r4, r3
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	441a      	add	r2, r3
 800631e:	4b35      	ldr	r3, [pc, #212]	; (80063f4 <USB_DeactivateEndpoint+0x320>)
 8006320:	4323      	orrs	r3, r4
 8006322:	b29b      	uxth	r3, r3
 8006324:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	4413      	add	r3, r2
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	b29c      	uxth	r4, r3
 8006334:	4623      	mov	r3, r4
 8006336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633a:	2b00      	cmp	r3, #0
 800633c:	d014      	beq.n	8006368 <USB_DeactivateEndpoint+0x294>
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4413      	add	r3, r2
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	b29b      	uxth	r3, r3
 800634c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006350:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006354:	b29c      	uxth	r4, r3
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	441a      	add	r2, r3
 8006360:	4b25      	ldr	r3, [pc, #148]	; (80063f8 <USB_DeactivateEndpoint+0x324>)
 8006362:	4323      	orrs	r3, r4
 8006364:	b29b      	uxth	r3, r3
 8006366:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	781b      	ldrb	r3, [r3, #0]
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4413      	add	r3, r2
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	b29b      	uxth	r3, r3
 8006376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800637a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800637e:	b29c      	uxth	r4, r3
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	441a      	add	r2, r3
 800638a:	4b1a      	ldr	r3, [pc, #104]	; (80063f4 <USB_DeactivateEndpoint+0x320>)
 800638c:	4323      	orrs	r3, r4
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	b29b      	uxth	r3, r3
 80063a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a8:	b29c      	uxth	r4, r3
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	441a      	add	r2, r3
 80063b4:	4b11      	ldr	r3, [pc, #68]	; (80063fc <USB_DeactivateEndpoint+0x328>)
 80063b6:	4323      	orrs	r3, r4
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063d2:	b29c      	uxth	r4, r3
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	441a      	add	r2, r3
 80063de:	4b07      	ldr	r3, [pc, #28]	; (80063fc <USB_DeactivateEndpoint+0x328>)
 80063e0:	4323      	orrs	r3, r4
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80063e6:	2300      	movs	r3, #0
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3708      	adds	r7, #8
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc90      	pop	{r4, r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	ffffc080 	.word	0xffffc080
 80063f8:	ffff80c0 	.word	0xffff80c0
 80063fc:	ffff8080 	.word	0xffff8080

08006400 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006400:	b590      	push	{r4, r7, lr}
 8006402:	b08d      	sub	sp, #52	; 0x34
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	785b      	ldrb	r3, [r3, #1]
 800640e:	2b01      	cmp	r3, #1
 8006410:	f040 8160 	bne.w	80066d4 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	429a      	cmp	r2, r3
 800641e:	d909      	bls.n	8006434 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	699a      	ldr	r2, [r3, #24]
 800642a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642c:	1ad2      	subs	r2, r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	619a      	str	r2, [r3, #24]
 8006432:	e005      	b.n	8006440 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2200      	movs	r2, #0
 800643e:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	7b1b      	ldrb	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d119      	bne.n	800647c <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	6959      	ldr	r1, [r3, #20]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	88da      	ldrh	r2, [r3, #6]
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	b29b      	uxth	r3, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fba2 	bl	8006b9e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800645a:	687c      	ldr	r4, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	441c      	add	r4, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	4423      	add	r3, r4
 800646e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006472:	461c      	mov	r4, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	b29b      	uxth	r3, r3
 8006478:	8023      	strh	r3, [r4, #0]
 800647a:	e10f      	b.n	800669c <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b00      	cmp	r3, #0
 8006490:	d065      	beq.n	800655e <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006492:	687c      	ldr	r4, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	785b      	ldrb	r3, [r3, #1]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d148      	bne.n	800652e <USB_EPStartXfer+0x12e>
 800649c:	687c      	ldr	r4, [r7, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	441c      	add	r4, r3
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	011b      	lsls	r3, r3, #4
 80064ae:	4423      	add	r3, r4
 80064b0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80064b4:	461c      	mov	r4, r3
 80064b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d10e      	bne.n	80064da <USB_EPStartXfer+0xda>
 80064bc:	8823      	ldrh	r3, [r4, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	8023      	strh	r3, [r4, #0]
 80064c8:	8823      	ldrh	r3, [r4, #0]
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064d4:	b29b      	uxth	r3, r3
 80064d6:	8023      	strh	r3, [r4, #0]
 80064d8:	e03d      	b.n	8006556 <USB_EPStartXfer+0x156>
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b3e      	cmp	r3, #62	; 0x3e
 80064de:	d810      	bhi.n	8006502 <USB_EPStartXfer+0x102>
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	f003 0301 	and.w	r3, r3, #1
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <USB_EPStartXfer+0xf6>
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	3301      	adds	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	029b      	lsls	r3, r3, #10
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	8023      	strh	r3, [r4, #0]
 8006500:	e029      	b.n	8006556 <USB_EPStartXfer+0x156>
 8006502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
 8006508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650a:	f003 031f 	and.w	r3, r3, #31
 800650e:	2b00      	cmp	r3, #0
 8006510:	d102      	bne.n	8006518 <USB_EPStartXfer+0x118>
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	3b01      	subs	r3, #1
 8006516:	627b      	str	r3, [r7, #36]	; 0x24
 8006518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651a:	b29b      	uxth	r3, r3
 800651c:	029b      	lsls	r3, r3, #10
 800651e:	b29b      	uxth	r3, r3
 8006520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006528:	b29b      	uxth	r3, r3
 800652a:	8023      	strh	r3, [r4, #0]
 800652c:	e013      	b.n	8006556 <USB_EPStartXfer+0x156>
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d10f      	bne.n	8006556 <USB_EPStartXfer+0x156>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800653c:	b29b      	uxth	r3, r3
 800653e:	441c      	add	r4, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	4423      	add	r3, r4
 8006548:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800654c:	60fb      	str	r3, [r7, #12]
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	895b      	ldrh	r3, [r3, #10]
 800655a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800655c:	e063      	b.n	8006626 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	785b      	ldrb	r3, [r3, #1]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d148      	bne.n	80065f8 <USB_EPStartXfer+0x1f8>
 8006566:	687c      	ldr	r4, [r7, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800656e:	b29b      	uxth	r3, r3
 8006570:	441c      	add	r4, r3
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	4423      	add	r3, r4
 800657a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800657e:	461c      	mov	r4, r3
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10e      	bne.n	80065a4 <USB_EPStartXfer+0x1a4>
 8006586:	8823      	ldrh	r3, [r4, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800658e:	b29b      	uxth	r3, r3
 8006590:	8023      	strh	r3, [r4, #0]
 8006592:	8823      	ldrh	r3, [r4, #0]
 8006594:	b29b      	uxth	r3, r3
 8006596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800659a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800659e:	b29b      	uxth	r3, r3
 80065a0:	8023      	strh	r3, [r4, #0]
 80065a2:	e03d      	b.n	8006620 <USB_EPStartXfer+0x220>
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	2b3e      	cmp	r3, #62	; 0x3e
 80065a8:	d810      	bhi.n	80065cc <USB_EPStartXfer+0x1cc>
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	085b      	lsrs	r3, r3, #1
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d002      	beq.n	80065c0 <USB_EPStartXfer+0x1c0>
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	3301      	adds	r3, #1
 80065be:	623b      	str	r3, [r7, #32]
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	029b      	lsls	r3, r3, #10
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	8023      	strh	r3, [r4, #0]
 80065ca:	e029      	b.n	8006620 <USB_EPStartXfer+0x220>
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	623b      	str	r3, [r7, #32]
 80065d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <USB_EPStartXfer+0x1e2>
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	3b01      	subs	r3, #1
 80065e0:	623b      	str	r3, [r7, #32]
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	029b      	lsls	r3, r3, #10
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	8023      	strh	r3, [r4, #0]
 80065f6:	e013      	b.n	8006620 <USB_EPStartXfer+0x220>
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d10f      	bne.n	8006620 <USB_EPStartXfer+0x220>
 8006600:	687c      	ldr	r4, [r7, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006608:	b29b      	uxth	r3, r3
 800660a:	441c      	add	r4, r3
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	4423      	add	r3, r4
 8006614:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006618:	461c      	mov	r4, r3
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	b29b      	uxth	r3, r3
 800661e:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	891b      	ldrh	r3, [r3, #8]
 8006624:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	6959      	ldr	r1, [r3, #20]
 800662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662c:	b29b      	uxth	r3, r3
 800662e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fab4 	bl	8006b9e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	785b      	ldrb	r3, [r3, #1]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d115      	bne.n	800666a <USB_EPStartXfer+0x26a>
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	b29b      	uxth	r3, r3
 800664c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006654:	b29c      	uxth	r4, r3
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	441a      	add	r2, r3
 8006660:	4b9a      	ldr	r3, [pc, #616]	; (80068cc <USB_EPStartXfer+0x4cc>)
 8006662:	4323      	orrs	r3, r4
 8006664:	b29b      	uxth	r3, r3
 8006666:	8013      	strh	r3, [r2, #0]
 8006668:	e018      	b.n	800669c <USB_EPStartXfer+0x29c>
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d114      	bne.n	800669c <USB_EPStartXfer+0x29c>
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4413      	add	r3, r2
 800667c:	881b      	ldrh	r3, [r3, #0]
 800667e:	b29b      	uxth	r3, r3
 8006680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006688:	b29c      	uxth	r4, r3
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	441a      	add	r2, r3
 8006694:	4b8e      	ldr	r3, [pc, #568]	; (80068d0 <USB_EPStartXfer+0x4d0>)
 8006696:	4323      	orrs	r3, r4
 8006698:	b29b      	uxth	r3, r3
 800669a:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	881b      	ldrh	r3, [r3, #0]
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066b2:	b29c      	uxth	r4, r3
 80066b4:	f084 0310 	eor.w	r3, r4, #16
 80066b8:	b29c      	uxth	r4, r3
 80066ba:	f084 0320 	eor.w	r3, r4, #32
 80066be:	b29c      	uxth	r4, r3
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	441a      	add	r2, r3
 80066ca:	4b82      	ldr	r3, [pc, #520]	; (80068d4 <USB_EPStartXfer+0x4d4>)
 80066cc:	4323      	orrs	r3, r4
 80066ce:	b29b      	uxth	r3, r3
 80066d0:	8013      	strh	r3, [r2, #0]
 80066d2:	e146      	b.n	8006962 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	699a      	ldr	r2, [r3, #24]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d909      	bls.n	80066f4 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	699a      	ldr	r2, [r3, #24]
 80066ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ec:	1ad2      	subs	r2, r2, r3
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	619a      	str	r2, [r3, #24]
 80066f2:	e005      	b.n	8006700 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	2200      	movs	r2, #0
 80066fe:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	7b1b      	ldrb	r3, [r3, #12]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d148      	bne.n	800679a <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8006708:	687c      	ldr	r4, [r7, #4]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006710:	b29b      	uxth	r3, r3
 8006712:	441c      	add	r4, r3
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	011b      	lsls	r3, r3, #4
 800671a:	4423      	add	r3, r4
 800671c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006720:	461c      	mov	r4, r3
 8006722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006724:	2b00      	cmp	r3, #0
 8006726:	d10e      	bne.n	8006746 <USB_EPStartXfer+0x346>
 8006728:	8823      	ldrh	r3, [r4, #0]
 800672a:	b29b      	uxth	r3, r3
 800672c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006730:	b29b      	uxth	r3, r3
 8006732:	8023      	strh	r3, [r4, #0]
 8006734:	8823      	ldrh	r3, [r4, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800673c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006740:	b29b      	uxth	r3, r3
 8006742:	8023      	strh	r3, [r4, #0]
 8006744:	e0f2      	b.n	800692c <USB_EPStartXfer+0x52c>
 8006746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006748:	2b3e      	cmp	r3, #62	; 0x3e
 800674a:	d810      	bhi.n	800676e <USB_EPStartXfer+0x36e>
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	085b      	lsrs	r3, r3, #1
 8006750:	61fb      	str	r3, [r7, #28]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <USB_EPStartXfer+0x362>
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	61fb      	str	r3, [r7, #28]
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	b29b      	uxth	r3, r3
 8006766:	029b      	lsls	r3, r3, #10
 8006768:	b29b      	uxth	r3, r3
 800676a:	8023      	strh	r3, [r4, #0]
 800676c:	e0de      	b.n	800692c <USB_EPStartXfer+0x52c>
 800676e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <USB_EPStartXfer+0x384>
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	3b01      	subs	r3, #1
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	b29b      	uxth	r3, r3
 8006788:	029b      	lsls	r3, r3, #10
 800678a:	b29b      	uxth	r3, r3
 800678c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006794:	b29b      	uxth	r3, r3
 8006796:	8023      	strh	r3, [r4, #0]
 8006798:	e0c8      	b.n	800692c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d148      	bne.n	8006834 <USB_EPStartXfer+0x434>
 80067a2:	687c      	ldr	r4, [r7, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	441c      	add	r4, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	011b      	lsls	r3, r3, #4
 80067b4:	4423      	add	r3, r4
 80067b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80067ba:	461c      	mov	r4, r3
 80067bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10e      	bne.n	80067e0 <USB_EPStartXfer+0x3e0>
 80067c2:	8823      	ldrh	r3, [r4, #0]
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	8023      	strh	r3, [r4, #0]
 80067ce:	8823      	ldrh	r3, [r4, #0]
 80067d0:	b29b      	uxth	r3, r3
 80067d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067da:	b29b      	uxth	r3, r3
 80067dc:	8023      	strh	r3, [r4, #0]
 80067de:	e03d      	b.n	800685c <USB_EPStartXfer+0x45c>
 80067e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e2:	2b3e      	cmp	r3, #62	; 0x3e
 80067e4:	d810      	bhi.n	8006808 <USB_EPStartXfer+0x408>
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	085b      	lsrs	r3, r3, #1
 80067ea:	61bb      	str	r3, [r7, #24]
 80067ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d002      	beq.n	80067fc <USB_EPStartXfer+0x3fc>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	3301      	adds	r3, #1
 80067fa:	61bb      	str	r3, [r7, #24]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	029b      	lsls	r3, r3, #10
 8006802:	b29b      	uxth	r3, r3
 8006804:	8023      	strh	r3, [r4, #0]
 8006806:	e029      	b.n	800685c <USB_EPStartXfer+0x45c>
 8006808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680a:	095b      	lsrs	r3, r3, #5
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	f003 031f 	and.w	r3, r3, #31
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <USB_EPStartXfer+0x41e>
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	3b01      	subs	r3, #1
 800681c:	61bb      	str	r3, [r7, #24]
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	b29b      	uxth	r3, r3
 8006822:	029b      	lsls	r3, r3, #10
 8006824:	b29b      	uxth	r3, r3
 8006826:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800682a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800682e:	b29b      	uxth	r3, r3
 8006830:	8023      	strh	r3, [r4, #0]
 8006832:	e013      	b.n	800685c <USB_EPStartXfer+0x45c>
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b01      	cmp	r3, #1
 800683a:	d10f      	bne.n	800685c <USB_EPStartXfer+0x45c>
 800683c:	687c      	ldr	r4, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006844:	b29b      	uxth	r3, r3
 8006846:	441c      	add	r4, r3
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	011b      	lsls	r3, r3, #4
 800684e:	4423      	add	r3, r4
 8006850:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006854:	461c      	mov	r4, r3
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	b29b      	uxth	r3, r3
 800685a:	8023      	strh	r3, [r4, #0]
 800685c:	687c      	ldr	r4, [r7, #4]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	785b      	ldrb	r3, [r3, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d14e      	bne.n	8006904 <USB_EPStartXfer+0x504>
 8006866:	687c      	ldr	r4, [r7, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800686e:	b29b      	uxth	r3, r3
 8006870:	441c      	add	r4, r3
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	4423      	add	r3, r4
 800687a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800687e:	461c      	mov	r4, r3
 8006880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10e      	bne.n	80068a4 <USB_EPStartXfer+0x4a4>
 8006886:	8823      	ldrh	r3, [r4, #0]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800688e:	b29b      	uxth	r3, r3
 8006890:	8023      	strh	r3, [r4, #0]
 8006892:	8823      	ldrh	r3, [r4, #0]
 8006894:	b29b      	uxth	r3, r3
 8006896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800689a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800689e:	b29b      	uxth	r3, r3
 80068a0:	8023      	strh	r3, [r4, #0]
 80068a2:	e043      	b.n	800692c <USB_EPStartXfer+0x52c>
 80068a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a6:	2b3e      	cmp	r3, #62	; 0x3e
 80068a8:	d816      	bhi.n	80068d8 <USB_EPStartXfer+0x4d8>
 80068aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ac:	085b      	lsrs	r3, r3, #1
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <USB_EPStartXfer+0x4c0>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	3301      	adds	r3, #1
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	b29b      	uxth	r3, r3
 80068c4:	029b      	lsls	r3, r3, #10
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	8023      	strh	r3, [r4, #0]
 80068ca:	e02f      	b.n	800692c <USB_EPStartXfer+0x52c>
 80068cc:	ffff80c0 	.word	0xffff80c0
 80068d0:	ffffc080 	.word	0xffffc080
 80068d4:	ffff8080 	.word	0xffff8080
 80068d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e0:	f003 031f 	and.w	r3, r3, #31
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d102      	bne.n	80068ee <USB_EPStartXfer+0x4ee>
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	029b      	lsls	r3, r3, #10
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068fe:	b29b      	uxth	r3, r3
 8006900:	8023      	strh	r3, [r4, #0]
 8006902:	e013      	b.n	800692c <USB_EPStartXfer+0x52c>
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d10f      	bne.n	800692c <USB_EPStartXfer+0x52c>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006912:	b29b      	uxth	r3, r3
 8006914:	441c      	add	r4, r3
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	011b      	lsls	r3, r3, #4
 800691c:	4423      	add	r3, r4
 800691e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	b29a      	uxth	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	b29c      	uxth	r4, r3
 8006944:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006948:	b29c      	uxth	r4, r3
 800694a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800694e:	b29c      	uxth	r4, r3
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	4b04      	ldr	r3, [pc, #16]	; (800696c <USB_EPStartXfer+0x56c>)
 800695c:	4323      	orrs	r3, r4
 800695e:	b29b      	uxth	r3, r3
 8006960:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006962:	2300      	movs	r3, #0
}
 8006964:	4618      	mov	r0, r3
 8006966:	3734      	adds	r7, #52	; 0x34
 8006968:	46bd      	mov	sp, r7
 800696a:	bd90      	pop	{r4, r7, pc}
 800696c:	ffff8080 	.word	0xffff8080

08006970 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006970:	b490      	push	{r4, r7}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	785b      	ldrb	r3, [r3, #1]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d018      	beq.n	80069b4 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4413      	add	r3, r2
 800698c:	881b      	ldrh	r3, [r3, #0]
 800698e:	b29b      	uxth	r3, r3
 8006990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006998:	b29c      	uxth	r4, r3
 800699a:	f084 0310 	eor.w	r3, r4, #16
 800699e:	b29c      	uxth	r4, r3
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	441a      	add	r2, r3
 80069aa:	4b11      	ldr	r3, [pc, #68]	; (80069f0 <USB_EPSetStall+0x80>)
 80069ac:	4323      	orrs	r3, r4
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	8013      	strh	r3, [r2, #0]
 80069b2:	e017      	b.n	80069e4 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	881b      	ldrh	r3, [r3, #0]
 80069c0:	b29b      	uxth	r3, r3
 80069c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ca:	b29c      	uxth	r4, r3
 80069cc:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80069d0:	b29c      	uxth	r4, r3
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	441a      	add	r2, r3
 80069dc:	4b04      	ldr	r3, [pc, #16]	; (80069f0 <USB_EPSetStall+0x80>)
 80069de:	4323      	orrs	r3, r4
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3708      	adds	r7, #8
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bc90      	pop	{r4, r7}
 80069ee:	4770      	bx	lr
 80069f0:	ffff8080 	.word	0xffff8080

080069f4 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069f4:	b490      	push	{r4, r7}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	7b1b      	ldrb	r3, [r3, #12]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d17d      	bne.n	8006b02 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d03d      	beq.n	8006a8a <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29c      	uxth	r4, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d014      	beq.n	8006a50 <USB_EPClearStall+0x5c>
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	4413      	add	r3, r2
 8006a30:	881b      	ldrh	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3c:	b29c      	uxth	r4, r3
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	009b      	lsls	r3, r3, #2
 8006a46:	441a      	add	r2, r3
 8006a48:	4b31      	ldr	r3, [pc, #196]	; (8006b10 <USB_EPClearStall+0x11c>)
 8006a4a:	4323      	orrs	r3, r4
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	78db      	ldrb	r3, [r3, #3]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d054      	beq.n	8006b02 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	009b      	lsls	r3, r3, #2
 8006a60:	4413      	add	r3, r2
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a6e:	b29c      	uxth	r4, r3
 8006a70:	f084 0320 	eor.w	r3, r4, #32
 8006a74:	b29c      	uxth	r4, r3
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	441a      	add	r2, r3
 8006a80:	4b24      	ldr	r3, [pc, #144]	; (8006b14 <USB_EPClearStall+0x120>)
 8006a82:	4323      	orrs	r3, r4
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	8013      	strh	r3, [r2, #0]
 8006a88:	e03b      	b.n	8006b02 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29c      	uxth	r4, r3
 8006a98:	4623      	mov	r3, r4
 8006a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d014      	beq.n	8006acc <USB_EPClearStall+0xd8>
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	009b      	lsls	r3, r3, #2
 8006aaa:	4413      	add	r3, r2
 8006aac:	881b      	ldrh	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab8:	b29c      	uxth	r4, r3
 8006aba:	687a      	ldr	r2, [r7, #4]
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	441a      	add	r2, r3
 8006ac4:	4b14      	ldr	r3, [pc, #80]	; (8006b18 <USB_EPClearStall+0x124>)
 8006ac6:	4323      	orrs	r3, r4
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	881b      	ldrh	r3, [r3, #0]
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ae2:	b29c      	uxth	r4, r3
 8006ae4:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8006ae8:	b29c      	uxth	r4, r3
 8006aea:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006aee:	b29c      	uxth	r4, r3
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	441a      	add	r2, r3
 8006afa:	4b06      	ldr	r3, [pc, #24]	; (8006b14 <USB_EPClearStall+0x120>)
 8006afc:	4323      	orrs	r3, r4
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bc90      	pop	{r4, r7}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	ffff80c0 	.word	0xffff80c0
 8006b14:	ffff8080 	.word	0xffff8080
 8006b18:	ffffc080 	.word	0xffffc080

08006b1c <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2280      	movs	r2, #128	; 0x80
 8006b32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bc80      	pop	{r7}
 8006b54:	4770      	bx	lr

08006b56 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b085      	sub	sp, #20
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3714      	adds	r7, #20
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bc80      	pop	{r7}
 8006b9c:	4770      	bx	lr

08006b9e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b08d      	sub	sp, #52	; 0x34
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	4611      	mov	r1, r2
 8006baa:	461a      	mov	r2, r3
 8006bac:	460b      	mov	r3, r1
 8006bae:	80fb      	strh	r3, [r7, #6]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006bb4:	88bb      	ldrh	r3, [r7, #4]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006bc4:	88fb      	ldrh	r3, [r7, #6]
 8006bc6:	005a      	lsls	r2, r3, #1
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006bd0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd6:	e01e      	b.n	8006c16 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	3301      	adds	r3, #1
 8006be2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	021b      	lsls	r3, r3, #8
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	3302      	adds	r3, #2
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	3302      	adds	r3, #2
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	3b01      	subs	r3, #1
 8006c14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d1dd      	bne.n	8006bd8 <USB_WritePMA+0x3a>
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3734      	adds	r7, #52	; 0x34
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bc80      	pop	{r7}
 8006c24:	4770      	bx	lr

08006c26 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b08b      	sub	sp, #44	; 0x2c
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	60f8      	str	r0, [r7, #12]
 8006c2e:	60b9      	str	r1, [r7, #8]
 8006c30:	4611      	mov	r1, r2
 8006c32:	461a      	mov	r2, r3
 8006c34:	460b      	mov	r3, r1
 8006c36:	80fb      	strh	r3, [r7, #6]
 8006c38:	4613      	mov	r3, r2
 8006c3a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006c3c:	88bb      	ldrh	r3, [r7, #4]
 8006c3e:	085b      	lsrs	r3, r3, #1
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c4c:	88fb      	ldrh	r3, [r7, #6]
 8006c4e:	005a      	lsls	r2, r3, #1
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c58:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e01b      	b.n	8006c98 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c68:	6a3b      	ldr	r3, [r7, #32]
 8006c6a:	3302      	adds	r3, #2
 8006c6c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	3302      	adds	r3, #2
 8006c90:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	3b01      	subs	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e0      	bne.n	8006c60 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c9e:	88bb      	ldrh	r3, [r7, #4]
 8006ca0:	f003 0301 	and.w	r3, r3, #1
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	701a      	strb	r2, [r3, #0]
  }
}
 8006cba:	bf00      	nop
 8006cbc:	372c      	adds	r7, #44	; 0x2c
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bc80      	pop	{r7}
 8006cc2:	4770      	bx	lr

08006cc4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	460b      	mov	r3, r1
 8006cce:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	7c1b      	ldrb	r3, [r3, #16]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d115      	bne.n	8006d08 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ce0:	2202      	movs	r2, #2
 8006ce2:	2181      	movs	r1, #129	; 0x81
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f001 fe8a 	bl	80089fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf4:	2202      	movs	r2, #2
 8006cf6:	2101      	movs	r1, #1
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fe80 	bl	80089fe <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006d06:	e012      	b.n	8006d2e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d08:	2340      	movs	r3, #64	; 0x40
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	2181      	movs	r1, #129	; 0x81
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f001 fe75 	bl	80089fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d1a:	2340      	movs	r3, #64	; 0x40
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	2101      	movs	r1, #1
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f001 fe6c 	bl	80089fe <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d2e:	2308      	movs	r3, #8
 8006d30:	2203      	movs	r2, #3
 8006d32:	2182      	movs	r1, #130	; 0x82
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fe62 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d44:	f001 ff7c 	bl	8008c40 <USBD_static_malloc>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d102      	bne.n	8006d60 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	73fb      	strb	r3, [r7, #15]
 8006d5e:	e026      	b.n	8006dae <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d66:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c1b      	ldrb	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d94:	2101      	movs	r1, #1
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f001 ff1b 	bl	8008bd2 <USBD_LL_PrepareReceive>
 8006d9c:	e007      	b.n	8006dae <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	2101      	movs	r1, #1
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f001 ff12 	bl	8008bd2 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006dc8:	2181      	movs	r1, #129	; 0x81
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f001 fe3d 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f001 fe36 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006de6:	2182      	movs	r1, #130	; 0x82
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 fe2e 	bl	8008a4a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00e      	beq.n	8006e1c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 ff22 	bl	8008c58 <USBD_static_free>
    pdev->pClassData = NULL;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b086      	sub	sp, #24
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e36:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d039      	beq.n	8006ec4 <USBD_CDC_Setup+0x9e>
 8006e50:	2b20      	cmp	r3, #32
 8006e52:	d17c      	bne.n	8006f4e <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	88db      	ldrh	r3, [r3, #6]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d029      	beq.n	8006eb0 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	da11      	bge.n	8006e8a <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006e72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	88d2      	ldrh	r2, [r2, #6]
 8006e78:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006e7a:	6939      	ldr	r1, [r7, #16]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	88db      	ldrh	r3, [r3, #6]
 8006e80:	461a      	mov	r2, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f001 f9f6 	bl	8008274 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006e88:	e068      	b.n	8006f5c <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	785a      	ldrb	r2, [r3, #1]
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	88db      	ldrh	r3, [r3, #6]
 8006e98:	b2da      	uxtb	r2, r3
 8006e9a:	693b      	ldr	r3, [r7, #16]
 8006e9c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006ea0:	6939      	ldr	r1, [r7, #16]
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	88db      	ldrh	r3, [r3, #6]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fa11 	bl	80082d0 <USBD_CtlPrepareRx>
      break;
 8006eae:	e055      	b.n	8006f5c <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	683a      	ldr	r2, [r7, #0]
 8006eba:	7850      	ldrb	r0, [r2, #1]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	4798      	blx	r3
      break;
 8006ec2:	e04b      	b.n	8006f5c <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b0a      	cmp	r3, #10
 8006eca:	d017      	beq.n	8006efc <USBD_CDC_Setup+0xd6>
 8006ecc:	2b0b      	cmp	r3, #11
 8006ece:	d029      	beq.n	8006f24 <USBD_CDC_Setup+0xfe>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d133      	bne.n	8006f3c <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d107      	bne.n	8006eee <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ede:	f107 030c 	add.w	r3, r7, #12
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f9c4 	bl	8008274 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eec:	e02e      	b.n	8006f4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 f955 	bl	80081a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	75fb      	strb	r3, [r7, #23]
          break;
 8006efa:	e027      	b.n	8006f4c <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	d107      	bne.n	8006f16 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f06:	f107 030f 	add.w	r3, r7, #15
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f001 f9b0 	bl	8008274 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006f14:	e01a      	b.n	8006f4c <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006f16:	6839      	ldr	r1, [r7, #0]
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f001 f941 	bl	80081a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f1e:	2302      	movs	r3, #2
 8006f20:	75fb      	strb	r3, [r7, #23]
          break;
 8006f22:	e013      	b.n	8006f4c <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d00d      	beq.n	8006f4a <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f001 f935 	bl	80081a0 <USBD_CtlError>
            ret = USBD_FAIL;
 8006f36:	2302      	movs	r3, #2
 8006f38:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006f3a:	e006      	b.n	8006f4a <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f001 f92e 	bl	80081a0 <USBD_CtlError>
          ret = USBD_FAIL;
 8006f44:	2302      	movs	r3, #2
 8006f46:	75fb      	strb	r3, [r7, #23]
          break;
 8006f48:	e000      	b.n	8006f4c <USBD_CDC_Setup+0x126>
          break;
 8006f4a:	bf00      	nop
      }
      break;
 8006f4c:	e006      	b.n	8006f5c <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006f4e:	6839      	ldr	r1, [r7, #0]
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 f925 	bl	80081a0 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f56:	2302      	movs	r3, #2
 8006f58:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5a:	bf00      	nop
  }

  return ret;
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3718      	adds	r7, #24
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b084      	sub	sp, #16
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	6078      	str	r0, [r7, #4]
 8006f6e:	460b      	mov	r3, r1
 8006f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f78:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f80:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d037      	beq.n	8006ffc <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f8c:	78fa      	ldrb	r2, [r7, #3]
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	4613      	mov	r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	440b      	add	r3, r1
 8006f9a:	331c      	adds	r3, #28
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d026      	beq.n	8006ff0 <USBD_CDC_DataIn+0x8a>
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	6879      	ldr	r1, [r7, #4]
 8006fa6:	4613      	mov	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	4413      	add	r3, r2
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	440b      	add	r3, r1
 8006fb0:	331c      	adds	r3, #28
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	0152      	lsls	r2, r2, #5
 8006fba:	440a      	add	r2, r1
 8006fbc:	3238      	adds	r2, #56	; 0x38
 8006fbe:	6812      	ldr	r2, [r2, #0]
 8006fc0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fc4:	fb02 f201 	mul.w	r2, r2, r1
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d110      	bne.n	8006ff0 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006fce:	78fa      	ldrb	r2, [r7, #3]
 8006fd0:	6879      	ldr	r1, [r7, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	440b      	add	r3, r1
 8006fdc:	331c      	adds	r3, #28
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006fe2:	78f9      	ldrb	r1, [r7, #3]
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f001 fdcf 	bl	8008b8c <USBD_LL_Transmit>
 8006fee:	e003      	b.n	8006ff8 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	e000      	b.n	8006ffe <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006ffc:	2302      	movs	r3, #2
  }
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007006:	b580      	push	{r7, lr}
 8007008:	b084      	sub	sp, #16
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007018:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fdfa 	bl	8008c18 <USBD_LL_GetRxDataSize>
 8007024:	4602      	mov	r2, r0
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800704a:	4611      	mov	r1, r2
 800704c:	4798      	blx	r3

    return USBD_OK;
 800704e:	2300      	movs	r3, #0
 8007050:	e000      	b.n	8007054 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007052:	2302      	movs	r3, #2
  }
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800706a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007072:	2b00      	cmp	r3, #0
 8007074:	d015      	beq.n	80070a2 <USBD_CDC_EP0_RxReady+0x46>
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800707c:	2bff      	cmp	r3, #255	; 0xff
 800707e:	d010      	beq.n	80070a2 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800708e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007096:	b292      	uxth	r2, r2
 8007098:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	22ff      	movs	r2, #255	; 0xff
 800709e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2243      	movs	r2, #67	; 0x43
 80070b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80070ba:	4b03      	ldr	r3, [pc, #12]	; (80070c8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80070bc:	4618      	mov	r0, r3
 80070be:	370c      	adds	r7, #12
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bc80      	pop	{r7}
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000098 	.word	0x20000098

080070cc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2243      	movs	r2, #67	; 0x43
 80070d8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80070da:	4b03      	ldr	r3, [pc, #12]	; (80070e8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80070dc:	4618      	mov	r0, r3
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc80      	pop	{r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000054 	.word	0x20000054

080070ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b083      	sub	sp, #12
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2243      	movs	r2, #67	; 0x43
 80070f8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80070fa:	4b03      	ldr	r3, [pc, #12]	; (8007108 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	bc80      	pop	{r7}
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200000dc 	.word	0x200000dc

0800710c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	220a      	movs	r2, #10
 8007118:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800711a:	4b03      	ldr	r3, [pc, #12]	; (8007128 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	bc80      	pop	{r7}
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop
 8007128:	20000010 	.word	0x20000010

0800712c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007136:	2302      	movs	r3, #2
 8007138:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d005      	beq.n	800714c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	bc80      	pop	{r7}
 8007156:	4770      	bx	lr

08007158 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800716c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007176:	88fa      	ldrh	r2, [r7, #6]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	371c      	adds	r7, #28
 8007184:	46bd      	mov	sp, r7
 8007186:	bc80      	pop	{r7}
 8007188:	4770      	bx	lr

0800718a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800719a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d01c      	beq.n	8007204 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d115      	bne.n	8007200 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2201      	movs	r2, #1
 80071d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2181      	movs	r1, #129	; 0x81
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f001 fcc8 	bl	8008b8c <USBD_LL_Transmit>

      return USBD_OK;
 80071fc:	2300      	movs	r3, #0
 80071fe:	e002      	b.n	8007206 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007200:	2301      	movs	r3, #1
 8007202:	e000      	b.n	8007206 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8007204:	2302      	movs	r3, #2
  }
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721c:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d017      	beq.n	8007258 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c1b      	ldrb	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d109      	bne.n	8007244 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007236:	f44f 7300 	mov.w	r3, #512	; 0x200
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f001 fcc8 	bl	8008bd2 <USBD_LL_PrepareReceive>
 8007242:	e007      	b.n	8007254 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800724a:	2340      	movs	r3, #64	; 0x40
 800724c:	2101      	movs	r1, #1
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f001 fcbf 	bl	8008bd2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	e000      	b.n	800725a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007258:	2302      	movs	r3, #2
  }
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	4613      	mov	r3, r2
 800726e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007276:	2302      	movs	r3, #2
 8007278:	e01a      	b.n	80072b0 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2200      	movs	r2, #0
 8007288:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	79fa      	ldrb	r2, [r7, #7]
 80072a6:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f001 fb33 	bl	8008914 <USBD_LL_Init>

  return USBD_OK;
 80072ae:	2300      	movs	r3, #0
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3710      	adds	r7, #16
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80072c2:	2300      	movs	r3, #0
 80072c4:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d006      	beq.n	80072da <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
 80072d8:	e001      	b.n	80072de <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80072da:	2302      	movs	r3, #2
 80072dc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80072de:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3714      	adds	r7, #20
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bc80      	pop	{r7}
 80072e8:	4770      	bx	lr

080072ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b082      	sub	sp, #8
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fb68 	bl	80089c8 <USBD_LL_Start>

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007302:	b480      	push	{r7}
 8007304:	b083      	sub	sp, #12
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	bc80      	pop	{r7}
 8007314:	4770      	bx	lr

08007316 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b084      	sub	sp, #16
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007322:	2302      	movs	r3, #2
 8007324:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	78fa      	ldrb	r2, [r7, #3]
 800733a:	4611      	mov	r1, r2
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	4798      	blx	r3
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d101      	bne.n	800734a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800734a:	7bfb      	ldrb	r3, [r7, #15]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	460b      	mov	r3, r1
 800735e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	78fa      	ldrb	r2, [r7, #3]
 800736a:	4611      	mov	r1, r2
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	4798      	blx	r3

  return USBD_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	4618      	mov	r0, r3
 800738e:	f000 fecb 	bl	8008128 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80073a0:	461a      	mov	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073ae:	f003 031f 	and.w	r3, r3, #31
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d00c      	beq.n	80073d0 <USBD_LL_SetupStage+0x56>
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d302      	bcc.n	80073c0 <USBD_LL_SetupStage+0x46>
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d010      	beq.n	80073e0 <USBD_LL_SetupStage+0x66>
 80073be:	e017      	b.n	80073f0 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073c6:	4619      	mov	r1, r3
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 f9cb 	bl	8007764 <USBD_StdDevReq>
      break;
 80073ce:	e01a      	b.n	8007406 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073d6:	4619      	mov	r1, r3
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 fa2d 	bl	8007838 <USBD_StdItfReq>
      break;
 80073de:	e012      	b.n	8007406 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fa6b 	bl	80078c4 <USBD_StdEPReq>
      break;
 80073ee:	e00a      	b.n	8007406 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80073f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fa:	b2db      	uxtb	r3, r3
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f001 fb42 	bl	8008a88 <USBD_LL_StallEP>
      break;
 8007404:	bf00      	nop
  }

  return USBD_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	60f8      	str	r0, [r7, #12]
 8007418:	460b      	mov	r3, r1
 800741a:	607a      	str	r2, [r7, #4]
 800741c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d14b      	bne.n	80074bc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800742a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007432:	2b03      	cmp	r3, #3
 8007434:	d134      	bne.n	80074a0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d919      	bls.n	8007476 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	68da      	ldr	r2, [r3, #12]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	691b      	ldr	r3, [r3, #16]
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007458:	429a      	cmp	r2, r3
 800745a:	d203      	bcs.n	8007464 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007460:	b29b      	uxth	r3, r3
 8007462:	e002      	b.n	800746a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8007468:	b29b      	uxth	r3, r3
 800746a:	461a      	mov	r2, r3
 800746c:	6879      	ldr	r1, [r7, #4]
 800746e:	68f8      	ldr	r0, [r7, #12]
 8007470:	f000 ff4c 	bl	800830c <USBD_CtlContinueRx>
 8007474:	e038      	b.n	80074e8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007488:	2b03      	cmp	r3, #3
 800748a:	d105      	bne.n	8007498 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007498:	68f8      	ldr	r0, [r7, #12]
 800749a:	f000 ff49 	bl	8008330 <USBD_CtlSendStatus>
 800749e:	e023      	b.n	80074e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074a6:	2b05      	cmp	r3, #5
 80074a8:	d11e      	bne.n	80074e8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80074b2:	2100      	movs	r1, #0
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f001 fae7 	bl	8008a88 <USBD_LL_StallEP>
 80074ba:	e015      	b.n	80074e8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074c2:	699b      	ldr	r3, [r3, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d00d      	beq.n	80074e4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d108      	bne.n	80074e4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	7afa      	ldrb	r2, [r7, #11]
 80074dc:	4611      	mov	r1, r2
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	4798      	blx	r3
 80074e2:	e001      	b.n	80074e8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074e4:	2302      	movs	r3, #2
 80074e6:	e000      	b.n	80074ea <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	460b      	mov	r3, r1
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d17f      	bne.n	8007606 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3314      	adds	r3, #20
 800750a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007512:	2b02      	cmp	r3, #2
 8007514:	d15c      	bne.n	80075d0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	429a      	cmp	r2, r3
 8007520:	d915      	bls.n	800754e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	b29b      	uxth	r3, r3
 8007536:	461a      	mov	r2, r3
 8007538:	6879      	ldr	r1, [r7, #4]
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f000 feb6 	bl	80082ac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007540:	2300      	movs	r3, #0
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f001 fb43 	bl	8008bd2 <USBD_LL_PrepareReceive>
 800754c:	e04e      	b.n	80075ec <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	6912      	ldr	r2, [r2, #16]
 8007556:	fbb3 f1f2 	udiv	r1, r3, r2
 800755a:	fb02 f201 	mul.w	r2, r2, r1
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	2b00      	cmp	r3, #0
 8007562:	d11c      	bne.n	800759e <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	689a      	ldr	r2, [r3, #8]
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800756c:	429a      	cmp	r2, r3
 800756e:	d316      	bcc.n	800759e <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	689a      	ldr	r2, [r3, #8]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800757a:	429a      	cmp	r2, r3
 800757c:	d20f      	bcs.n	800759e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800757e:	2200      	movs	r2, #0
 8007580:	2100      	movs	r1, #0
 8007582:	68f8      	ldr	r0, [r7, #12]
 8007584:	f000 fe92 	bl	80082ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007590:	2300      	movs	r3, #0
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f001 fb1b 	bl	8008bd2 <USBD_LL_PrepareReceive>
 800759c:	e026      	b.n	80075ec <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80075b0:	2b03      	cmp	r3, #3
 80075b2:	d105      	bne.n	80075c0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f001 fa60 	bl	8008a88 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f000 fec4 	bl	8008356 <USBD_CtlReceiveStatus>
 80075ce:	e00d      	b.n	80075ec <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d004      	beq.n	80075e4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d103      	bne.n	80075ec <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80075e4:	2180      	movs	r1, #128	; 0x80
 80075e6:	68f8      	ldr	r0, [r7, #12]
 80075e8:	f001 fa4e 	bl	8008a88 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d11d      	bne.n	8007632 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fe83 	bl	8007302 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007604:	e015      	b.n	8007632 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d00d      	beq.n	800762e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007618:	2b03      	cmp	r3, #3
 800761a:	d108      	bne.n	800762e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	7afa      	ldrb	r2, [r7, #11]
 8007626:	4611      	mov	r1, r2
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	4798      	blx	r3
 800762c:	e001      	b.n	8007632 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800762e:	2302      	movs	r3, #2
 8007630:	e000      	b.n	8007634 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007644:	2340      	movs	r3, #64	; 0x40
 8007646:	2200      	movs	r2, #0
 8007648:	2100      	movs	r1, #0
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f001 f9d7 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2201      	movs	r2, #1
 8007654:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2240      	movs	r2, #64	; 0x40
 800765c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007660:	2340      	movs	r3, #64	; 0x40
 8007662:	2200      	movs	r2, #0
 8007664:	2180      	movs	r1, #128	; 0x80
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f001 f9c9 	bl	80089fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2240      	movs	r2, #64	; 0x40
 8007676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2200      	movs	r2, #0
 800768c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d009      	beq.n	80076b4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	6852      	ldr	r2, [r2, #4]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	4611      	mov	r1, r2
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	4798      	blx	r3
  }

  return USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80076be:	b480      	push	{r7}
 80076c0:	b083      	sub	sp, #12
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	460b      	mov	r3, r1
 80076c8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80076d0:	2300      	movs	r3, #0
}
 80076d2:	4618      	mov	r0, r3
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bc80      	pop	{r7}
 80076da:	4770      	bx	lr

080076dc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2204      	movs	r2, #4
 80076f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076f8:	2300      	movs	r3, #0
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	370c      	adds	r7, #12
 80076fe:	46bd      	mov	sp, r7
 8007700:	bc80      	pop	{r7}
 8007702:	4770      	bx	lr

08007704 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007704:	b480      	push	{r7}
 8007706:	b083      	sub	sp, #12
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007712:	2b04      	cmp	r3, #4
 8007714:	d105      	bne.n	8007722 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	bc80      	pop	{r7}
 800772c:	4770      	bx	lr

0800772e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b082      	sub	sp, #8
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800773c:	2b03      	cmp	r3, #3
 800773e:	d10b      	bne.n	8007758 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3708      	adds	r7, #8
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800777a:	2b20      	cmp	r3, #32
 800777c:	d004      	beq.n	8007788 <USBD_StdDevReq+0x24>
 800777e:	2b40      	cmp	r3, #64	; 0x40
 8007780:	d002      	beq.n	8007788 <USBD_StdDevReq+0x24>
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <USBD_StdDevReq+0x34>
 8007786:	e04c      	b.n	8007822 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	4798      	blx	r3
      break;
 8007796:	e049      	b.n	800782c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	785b      	ldrb	r3, [r3, #1]
 800779c:	2b09      	cmp	r3, #9
 800779e:	d83a      	bhi.n	8007816 <USBD_StdDevReq+0xb2>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <USBD_StdDevReq+0x44>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077f9 	.word	0x080077f9
 80077ac:	0800780d 	.word	0x0800780d
 80077b0:	08007817 	.word	0x08007817
 80077b4:	08007803 	.word	0x08007803
 80077b8:	08007817 	.word	0x08007817
 80077bc:	080077db 	.word	0x080077db
 80077c0:	080077d1 	.word	0x080077d1
 80077c4:	08007817 	.word	0x08007817
 80077c8:	080077ef 	.word	0x080077ef
 80077cc:	080077e5 	.word	0x080077e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f9d4 	bl	8007b80 <USBD_GetDescriptor>
          break;
 80077d8:	e022      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f000 fb37 	bl	8007e50 <USBD_SetAddress>
          break;
 80077e2:	e01d      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80077e4:	6839      	ldr	r1, [r7, #0]
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 fb74 	bl	8007ed4 <USBD_SetConfig>
          break;
 80077ec:	e018      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077ee:	6839      	ldr	r1, [r7, #0]
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f000 fbfd 	bl	8007ff0 <USBD_GetConfig>
          break;
 80077f6:	e013      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc2c 	bl	8008058 <USBD_GetStatus>
          break;
 8007800:	e00e      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 fc5a 	bl	80080be <USBD_SetFeature>
          break;
 800780a:	e009      	b.n	8007820 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800780c:	6839      	ldr	r1, [r7, #0]
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fc69 	bl	80080e6 <USBD_ClrFeature>
          break;
 8007814:	e004      	b.n	8007820 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007816:	6839      	ldr	r1, [r7, #0]
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fcc1 	bl	80081a0 <USBD_CtlError>
          break;
 800781e:	bf00      	nop
      }
      break;
 8007820:	e004      	b.n	800782c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fcbb 	bl	80081a0 <USBD_CtlError>
      break;
 800782a:	bf00      	nop
  }

  return ret;
 800782c:	7bfb      	ldrb	r3, [r7, #15]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop

08007838 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007842:	2300      	movs	r3, #0
 8007844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800784e:	2b20      	cmp	r3, #32
 8007850:	d003      	beq.n	800785a <USBD_StdItfReq+0x22>
 8007852:	2b40      	cmp	r3, #64	; 0x40
 8007854:	d001      	beq.n	800785a <USBD_StdItfReq+0x22>
 8007856:	2b00      	cmp	r3, #0
 8007858:	d12a      	bne.n	80078b0 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007860:	3b01      	subs	r3, #1
 8007862:	2b02      	cmp	r3, #2
 8007864:	d81d      	bhi.n	80078a2 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	889b      	ldrh	r3, [r3, #4]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d813      	bhi.n	8007898 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	4798      	blx	r3
 800787e:	4603      	mov	r3, r0
 8007880:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d110      	bne.n	80078ac <USBD_StdItfReq+0x74>
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10d      	bne.n	80078ac <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fd4d 	bl	8008330 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007896:	e009      	b.n	80078ac <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fc80 	bl	80081a0 <USBD_CtlError>
          break;
 80078a0:	e004      	b.n	80078ac <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fc7b 	bl	80081a0 <USBD_CtlError>
          break;
 80078aa:	e000      	b.n	80078ae <USBD_StdItfReq+0x76>
          break;
 80078ac:	bf00      	nop
      }
      break;
 80078ae:	e004      	b.n	80078ba <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fc74 	bl	80081a0 <USBD_CtlError>
      break;
 80078b8:	bf00      	nop
  }

  return USBD_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d004      	beq.n	80078ee <USBD_StdEPReq+0x2a>
 80078e4:	2b40      	cmp	r3, #64	; 0x40
 80078e6:	d002      	beq.n	80078ee <USBD_StdEPReq+0x2a>
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d008      	beq.n	80078fe <USBD_StdEPReq+0x3a>
 80078ec:	e13d      	b.n	8007b6a <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	6839      	ldr	r1, [r7, #0]
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	4798      	blx	r3
      break;
 80078fc:	e13a      	b.n	8007b74 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007906:	2b20      	cmp	r3, #32
 8007908:	d10a      	bne.n	8007920 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	4798      	blx	r3
 8007918:	4603      	mov	r3, r0
 800791a:	73fb      	strb	r3, [r7, #15]

        return ret;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	e12a      	b.n	8007b76 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	785b      	ldrb	r3, [r3, #1]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d03e      	beq.n	80079a6 <USBD_StdEPReq+0xe2>
 8007928:	2b03      	cmp	r3, #3
 800792a:	d002      	beq.n	8007932 <USBD_StdEPReq+0x6e>
 800792c:	2b00      	cmp	r3, #0
 800792e:	d070      	beq.n	8007a12 <USBD_StdEPReq+0x14e>
 8007930:	e115      	b.n	8007b5e <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007938:	2b02      	cmp	r3, #2
 800793a:	d002      	beq.n	8007942 <USBD_StdEPReq+0x7e>
 800793c:	2b03      	cmp	r3, #3
 800793e:	d015      	beq.n	800796c <USBD_StdEPReq+0xa8>
 8007940:	e02b      	b.n	800799a <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007942:	7bbb      	ldrb	r3, [r7, #14]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00c      	beq.n	8007962 <USBD_StdEPReq+0x9e>
 8007948:	7bbb      	ldrb	r3, [r7, #14]
 800794a:	2b80      	cmp	r3, #128	; 0x80
 800794c:	d009      	beq.n	8007962 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	4619      	mov	r1, r3
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f001 f898 	bl	8008a88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007958:	2180      	movs	r1, #128	; 0x80
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 f894 	bl	8008a88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007960:	e020      	b.n	80079a4 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc1b 	bl	80081a0 <USBD_CtlError>
              break;
 800796a:	e01b      	b.n	80079a4 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	885b      	ldrh	r3, [r3, #2]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10e      	bne.n	8007992 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007974:	7bbb      	ldrb	r3, [r7, #14]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00b      	beq.n	8007992 <USBD_StdEPReq+0xce>
 800797a:	7bbb      	ldrb	r3, [r7, #14]
 800797c:	2b80      	cmp	r3, #128	; 0x80
 800797e:	d008      	beq.n	8007992 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	88db      	ldrh	r3, [r3, #6]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 f87b 	bl	8008a88 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fccc 	bl	8008330 <USBD_CtlSendStatus>

              break;
 8007998:	e004      	b.n	80079a4 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800799a:	6839      	ldr	r1, [r7, #0]
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 fbff 	bl	80081a0 <USBD_CtlError>
              break;
 80079a2:	bf00      	nop
          }
          break;
 80079a4:	e0e0      	b.n	8007b68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d002      	beq.n	80079b6 <USBD_StdEPReq+0xf2>
 80079b0:	2b03      	cmp	r3, #3
 80079b2:	d015      	beq.n	80079e0 <USBD_StdEPReq+0x11c>
 80079b4:	e026      	b.n	8007a04 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00c      	beq.n	80079d6 <USBD_StdEPReq+0x112>
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	2b80      	cmp	r3, #128	; 0x80
 80079c0:	d009      	beq.n	80079d6 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f85e 	bl	8008a88 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80079cc:	2180      	movs	r1, #128	; 0x80
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 f85a 	bl	8008a88 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80079d4:	e01c      	b.n	8007a10 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80079d6:	6839      	ldr	r1, [r7, #0]
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fbe1 	bl	80081a0 <USBD_CtlError>
              break;
 80079de:	e017      	b.n	8007a10 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	885b      	ldrh	r3, [r3, #2]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d112      	bne.n	8007a0e <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d004      	beq.n	80079fc <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	4619      	mov	r1, r3
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 f865 	bl	8008ac6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fc97 	bl	8008330 <USBD_CtlSendStatus>
              }
              break;
 8007a02:	e004      	b.n	8007a0e <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8007a04:	6839      	ldr	r1, [r7, #0]
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fbca 	bl	80081a0 <USBD_CtlError>
              break;
 8007a0c:	e000      	b.n	8007a10 <USBD_StdEPReq+0x14c>
              break;
 8007a0e:	bf00      	nop
          }
          break;
 8007a10:	e0aa      	b.n	8007b68 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d002      	beq.n	8007a22 <USBD_StdEPReq+0x15e>
 8007a1c:	2b03      	cmp	r3, #3
 8007a1e:	d032      	beq.n	8007a86 <USBD_StdEPReq+0x1c2>
 8007a20:	e097      	b.n	8007b52 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a22:	7bbb      	ldrb	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d007      	beq.n	8007a38 <USBD_StdEPReq+0x174>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d004      	beq.n	8007a38 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fbb5 	bl	80081a0 <USBD_CtlError>
                break;
 8007a36:	e091      	b.n	8007b5c <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da0b      	bge.n	8007a58 <USBD_StdEPReq+0x194>
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	3310      	adds	r3, #16
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	4413      	add	r3, r2
 8007a54:	3304      	adds	r3, #4
 8007a56:	e00b      	b.n	8007a70 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
 8007a5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	4413      	add	r3, r2
 8007a6e:	3304      	adds	r3, #4
 8007a70:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	2200      	movs	r2, #0
 8007a76:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 fbf8 	bl	8008274 <USBD_CtlSendData>
              break;
 8007a84:	e06a      	b.n	8007b5c <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007a86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	da11      	bge.n	8007ab2 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007a8e:	7bbb      	ldrb	r3, [r7, #14]
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	6879      	ldr	r1, [r7, #4]
 8007a96:	4613      	mov	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	4413      	add	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	440b      	add	r3, r1
 8007aa0:	3318      	adds	r3, #24
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d117      	bne.n	8007ad8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fb78 	bl	80081a0 <USBD_CtlError>
                  break;
 8007ab0:	e054      	b.n	8007b5c <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ab2:	7bbb      	ldrb	r3, [r7, #14]
 8007ab4:	f003 020f 	and.w	r2, r3, #15
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d104      	bne.n	8007ad8 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8007ace:	6839      	ldr	r1, [r7, #0]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 fb65 	bl	80081a0 <USBD_CtlError>
                  break;
 8007ad6:	e041      	b.n	8007b5c <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	da0b      	bge.n	8007af8 <USBD_StdEPReq+0x234>
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	4413      	add	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	3310      	adds	r3, #16
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	4413      	add	r3, r2
 8007af4:	3304      	adds	r3, #4
 8007af6:	e00b      	b.n	8007b10 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007af8:	7bbb      	ldrb	r3, [r7, #14]
 8007afa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afe:	4613      	mov	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	4413      	add	r3, r2
 8007b04:	009b      	lsls	r3, r3, #2
 8007b06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3304      	adds	r3, #4
 8007b10:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b12:	7bbb      	ldrb	r3, [r7, #14]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <USBD_StdEPReq+0x25a>
 8007b18:	7bbb      	ldrb	r3, [r7, #14]
 8007b1a:	2b80      	cmp	r3, #128	; 0x80
 8007b1c:	d103      	bne.n	8007b26 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	e00e      	b.n	8007b44 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	4619      	mov	r1, r3
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 ffea 	bl	8008b04 <USBD_LL_IsStallEP>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	2201      	movs	r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	e002      	b.n	8007b44 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2200      	movs	r2, #0
 8007b42:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2202      	movs	r2, #2
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fb92 	bl	8008274 <USBD_CtlSendData>
              break;
 8007b50:	e004      	b.n	8007b5c <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007b52:	6839      	ldr	r1, [r7, #0]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 fb23 	bl	80081a0 <USBD_CtlError>
              break;
 8007b5a:	bf00      	nop
          }
          break;
 8007b5c:	e004      	b.n	8007b68 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007b5e:	6839      	ldr	r1, [r7, #0]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fb1d 	bl	80081a0 <USBD_CtlError>
          break;
 8007b66:	bf00      	nop
      }
      break;
 8007b68:	e004      	b.n	8007b74 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fb17 	bl	80081a0 <USBD_CtlError>
      break;
 8007b72:	bf00      	nop
  }

  return ret;
 8007b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
	...

08007b80 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007b92:	2300      	movs	r3, #0
 8007b94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	885b      	ldrh	r3, [r3, #2]
 8007b9a:	0a1b      	lsrs	r3, r3, #8
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	2b06      	cmp	r3, #6
 8007ba2:	f200 8128 	bhi.w	8007df6 <USBD_GetDescriptor+0x276>
 8007ba6:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <USBD_GetDescriptor+0x2c>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bc9 	.word	0x08007bc9
 8007bb0:	08007be1 	.word	0x08007be1
 8007bb4:	08007c21 	.word	0x08007c21
 8007bb8:	08007df7 	.word	0x08007df7
 8007bbc:	08007df7 	.word	0x08007df7
 8007bc0:	08007d97 	.word	0x08007d97
 8007bc4:	08007dc3 	.word	0x08007dc3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	687a      	ldr	r2, [r7, #4]
 8007bd2:	7c12      	ldrb	r2, [r2, #16]
 8007bd4:	f107 0108 	add.w	r1, r7, #8
 8007bd8:	4610      	mov	r0, r2
 8007bda:	4798      	blx	r3
 8007bdc:	60f8      	str	r0, [r7, #12]
      break;
 8007bde:	e112      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7c1b      	ldrb	r3, [r3, #16]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d10d      	bne.n	8007c04 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bf0:	f107 0208 	add.w	r2, r7, #8
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	4798      	blx	r3
 8007bf8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	3301      	adds	r3, #1
 8007bfe:	2202      	movs	r2, #2
 8007c00:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c02:	e100      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f107 0208 	add.w	r2, r7, #8
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	3301      	adds	r3, #1
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	701a      	strb	r2, [r3, #0]
      break;
 8007c1e:	e0f2      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	885b      	ldrh	r3, [r3, #2]
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b05      	cmp	r3, #5
 8007c28:	f200 80ac 	bhi.w	8007d84 <USBD_GetDescriptor+0x204>
 8007c2c:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <USBD_GetDescriptor+0xb4>)
 8007c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c32:	bf00      	nop
 8007c34:	08007c4d 	.word	0x08007c4d
 8007c38:	08007c81 	.word	0x08007c81
 8007c3c:	08007cb5 	.word	0x08007cb5
 8007c40:	08007ce9 	.word	0x08007ce9
 8007c44:	08007d1d 	.word	0x08007d1d
 8007c48:	08007d51 	.word	0x08007d51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e091      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa94 	bl	80081a0 <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e089      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e077      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa7a 	bl	80081a0 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e06f      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e05d      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa60 	bl	80081a0 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e055      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cee:	691b      	ldr	r3, [r3, #16]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d0a:	e043      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa46 	bl	80081a0 <USBD_CtlError>
            err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
          break;
 8007d1a:	e03b      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d3e:	e029      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa2c 	bl	80081a0 <USBD_CtlError>
            err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
          break;
 8007d4e:	e021      	b.n	8007d94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d72:	e00f      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa12 	bl	80081a0 <USBD_CtlError>
            err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
          break;
 8007d82:	e007      	b.n	8007d94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007d84:	6839      	ldr	r1, [r7, #0]
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 fa0a 	bl	80081a0 <USBD_CtlError>
          err++;
 8007d8c:	7afb      	ldrb	r3, [r7, #11]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007d92:	e038      	b.n	8007e06 <USBD_GetDescriptor+0x286>
 8007d94:	e037      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	7c1b      	ldrb	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d109      	bne.n	8007db2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007da6:	f107 0208 	add.w	r2, r7, #8
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
 8007dae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007db0:	e029      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f9f3 	bl	80081a0 <USBD_CtlError>
        err++;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	72fb      	strb	r3, [r7, #11]
      break;
 8007dc0:	e021      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	7c1b      	ldrb	r3, [r3, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	f107 0208 	add.w	r2, r7, #8
 8007dd6:	4610      	mov	r0, r2
 8007dd8:	4798      	blx	r3
 8007dda:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	3301      	adds	r3, #1
 8007de0:	2207      	movs	r2, #7
 8007de2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de4:	e00f      	b.n	8007e06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007de6:	6839      	ldr	r1, [r7, #0]
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 f9d9 	bl	80081a0 <USBD_CtlError>
        err++;
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	3301      	adds	r3, #1
 8007df2:	72fb      	strb	r3, [r7, #11]
      break;
 8007df4:	e007      	b.n	8007e06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007df6:	6839      	ldr	r1, [r7, #0]
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f9d1 	bl	80081a0 <USBD_CtlError>
      err++;
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	3301      	adds	r3, #1
 8007e02:	72fb      	strb	r3, [r7, #11]
      break;
 8007e04:	bf00      	nop
  }

  if (err != 0U)
 8007e06:	7afb      	ldrb	r3, [r7, #11]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d11c      	bne.n	8007e46 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007e0c:	893b      	ldrh	r3, [r7, #8]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d011      	beq.n	8007e36 <USBD_GetDescriptor+0x2b6>
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	88db      	ldrh	r3, [r3, #6]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00d      	beq.n	8007e36 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	88da      	ldrh	r2, [r3, #6]
 8007e1e:	893b      	ldrh	r3, [r7, #8]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	bf28      	it	cs
 8007e24:	4613      	movcs	r3, r2
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007e2a:	893b      	ldrh	r3, [r7, #8]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	68f9      	ldr	r1, [r7, #12]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 fa1f 	bl	8008274 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	88db      	ldrh	r3, [r3, #6]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d104      	bne.n	8007e48 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 fa76 	bl	8008330 <USBD_CtlSendStatus>
 8007e44:	e000      	b.n	8007e48 <USBD_GetDescriptor+0x2c8>
    return;
 8007e46:	bf00      	nop
    }
  }
}
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop

08007e50 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	889b      	ldrh	r3, [r3, #4]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d130      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	88db      	ldrh	r3, [r3, #6]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d12c      	bne.n	8007ec4 <USBD_SetAddress+0x74>
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	885b      	ldrh	r3, [r3, #2]
 8007e6e:	2b7f      	cmp	r3, #127	; 0x7f
 8007e70:	d828      	bhi.n	8007ec4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	885b      	ldrh	r3, [r3, #2]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e7c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d104      	bne.n	8007e92 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007e88:	6839      	ldr	r1, [r7, #0]
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f988 	bl	80081a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e90:	e01c      	b.n	8007ecc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	7bfa      	ldrb	r2, [r7, #15]
 8007e96:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fe55 	bl	8008b4e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fa43 	bl	8008330 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007eaa:	7bfb      	ldrb	r3, [r7, #15]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2202      	movs	r2, #2
 8007eb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007eb8:	e008      	b.n	8007ecc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ec2:	e003      	b.n	8007ecc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ec4:	6839      	ldr	r1, [r7, #0]
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 f96a 	bl	80081a0 <USBD_CtlError>
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	885b      	ldrh	r3, [r3, #2]
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	4b41      	ldr	r3, [pc, #260]	; (8007fec <USBD_SetConfig+0x118>)
 8007ee6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007ee8:	4b40      	ldr	r3, [pc, #256]	; (8007fec <USBD_SetConfig+0x118>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d904      	bls.n	8007efa <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ef0:	6839      	ldr	r1, [r7, #0]
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f954 	bl	80081a0 <USBD_CtlError>
 8007ef8:	e075      	b.n	8007fe6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d002      	beq.n	8007f0a <USBD_SetConfig+0x36>
 8007f04:	2b03      	cmp	r3, #3
 8007f06:	d023      	beq.n	8007f50 <USBD_SetConfig+0x7c>
 8007f08:	e062      	b.n	8007fd0 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007f0a:	4b38      	ldr	r3, [pc, #224]	; (8007fec <USBD_SetConfig+0x118>)
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01a      	beq.n	8007f48 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007f12:	4b36      	ldr	r3, [pc, #216]	; (8007fec <USBD_SetConfig+0x118>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2203      	movs	r2, #3
 8007f20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007f24:	4b31      	ldr	r3, [pc, #196]	; (8007fec <USBD_SetConfig+0x118>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff f9f3 	bl	8007316 <USBD_SetClassConfig>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b02      	cmp	r3, #2
 8007f34:	d104      	bne.n	8007f40 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007f36:	6839      	ldr	r1, [r7, #0]
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f931 	bl	80081a0 <USBD_CtlError>
            return;
 8007f3e:	e052      	b.n	8007fe6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 f9f5 	bl	8008330 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f46:	e04e      	b.n	8007fe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f9f1 	bl	8008330 <USBD_CtlSendStatus>
        break;
 8007f4e:	e04a      	b.n	8007fe6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007f50:	4b26      	ldr	r3, [pc, #152]	; (8007fec <USBD_SetConfig+0x118>)
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d112      	bne.n	8007f7e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007f60:	4b22      	ldr	r3, [pc, #136]	; (8007fec <USBD_SetConfig+0x118>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	461a      	mov	r2, r3
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007f6a:	4b20      	ldr	r3, [pc, #128]	; (8007fec <USBD_SetConfig+0x118>)
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	4619      	mov	r1, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff f9ef 	bl	8007354 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 f9da 	bl	8008330 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007f7c:	e033      	b.n	8007fe6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	; (8007fec <USBD_SetConfig+0x118>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	461a      	mov	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d01d      	beq.n	8007fc8 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7ff f9dd 	bl	8007354 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007f9a:	4b14      	ldr	r3, [pc, #80]	; (8007fec <USBD_SetConfig+0x118>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007fa4:	4b11      	ldr	r3, [pc, #68]	; (8007fec <USBD_SetConfig+0x118>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	4619      	mov	r1, r3
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f7ff f9b3 	bl	8007316 <USBD_SetClassConfig>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d104      	bne.n	8007fc0 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 f8f1 	bl	80081a0 <USBD_CtlError>
            return;
 8007fbe:	e012      	b.n	8007fe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f9b5 	bl	8008330 <USBD_CtlSendStatus>
        break;
 8007fc6:	e00e      	b.n	8007fe6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f9b1 	bl	8008330 <USBD_CtlSendStatus>
        break;
 8007fce:	e00a      	b.n	8007fe6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007fd0:	6839      	ldr	r1, [r7, #0]
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 f8e4 	bl	80081a0 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007fd8:	4b04      	ldr	r3, [pc, #16]	; (8007fec <USBD_SetConfig+0x118>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4619      	mov	r1, r3
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f7ff f9b8 	bl	8007354 <USBD_ClrClassConfig>
        break;
 8007fe4:	bf00      	nop
    }
  }
}
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000374 	.word	0x20000374

08007ff0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	88db      	ldrh	r3, [r3, #6]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d004      	beq.n	800800c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008002:	6839      	ldr	r1, [r7, #0]
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 f8cb 	bl	80081a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800800a:	e021      	b.n	8008050 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008012:	2b01      	cmp	r3, #1
 8008014:	db17      	blt.n	8008046 <USBD_GetConfig+0x56>
 8008016:	2b02      	cmp	r3, #2
 8008018:	dd02      	ble.n	8008020 <USBD_GetConfig+0x30>
 800801a:	2b03      	cmp	r3, #3
 800801c:	d00b      	beq.n	8008036 <USBD_GetConfig+0x46>
 800801e:	e012      	b.n	8008046 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	3308      	adds	r3, #8
 800802a:	2201      	movs	r2, #1
 800802c:	4619      	mov	r1, r3
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 f920 	bl	8008274 <USBD_CtlSendData>
        break;
 8008034:	e00c      	b.n	8008050 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	3304      	adds	r3, #4
 800803a:	2201      	movs	r2, #1
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f918 	bl	8008274 <USBD_CtlSendData>
        break;
 8008044:	e004      	b.n	8008050 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f8a9 	bl	80081a0 <USBD_CtlError>
        break;
 800804e:	bf00      	nop
}
 8008050:	bf00      	nop
 8008052:	3708      	adds	r7, #8
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008068:	3b01      	subs	r3, #1
 800806a:	2b02      	cmp	r3, #2
 800806c:	d81e      	bhi.n	80080ac <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	88db      	ldrh	r3, [r3, #6]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d004      	beq.n	8008080 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008076:	6839      	ldr	r1, [r7, #0]
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f891 	bl	80081a0 <USBD_CtlError>
        break;
 800807e:	e01a      	b.n	80080b6 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d005      	beq.n	800809c <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	68db      	ldr	r3, [r3, #12]
 8008094:	f043 0202 	orr.w	r2, r3, #2
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	330c      	adds	r3, #12
 80080a0:	2202      	movs	r2, #2
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8e5 	bl	8008274 <USBD_CtlSendData>
      break;
 80080aa:	e004      	b.n	80080b6 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80080ac:	6839      	ldr	r1, [r7, #0]
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f876 	bl	80081a0 <USBD_CtlError>
      break;
 80080b4:	bf00      	nop
  }
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	885b      	ldrh	r3, [r3, #2]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d106      	bne.n	80080de <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f929 	bl	8008330 <USBD_CtlSendStatus>
  }
}
 80080de:	bf00      	nop
 80080e0:	3708      	adds	r7, #8
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b082      	sub	sp, #8
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f6:	3b01      	subs	r3, #1
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d80b      	bhi.n	8008114 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d10c      	bne.n	800811e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2200      	movs	r2, #0
 8008108:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f90f 	bl	8008330 <USBD_CtlSendStatus>
      }
      break;
 8008112:	e004      	b.n	800811e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008114:	6839      	ldr	r1, [r7, #0]
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f842 	bl	80081a0 <USBD_CtlError>
      break;
 800811c:	e000      	b.n	8008120 <USBD_ClrFeature+0x3a>
      break;
 800811e:	bf00      	nop
  }
}
 8008120:	bf00      	nop
 8008122:	3708      	adds	r7, #8
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}

08008128 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	781a      	ldrb	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	785a      	ldrb	r2, [r3, #1]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	3302      	adds	r3, #2
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	b29a      	uxth	r2, r3
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	3303      	adds	r3, #3
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b29b      	uxth	r3, r3
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	b29b      	uxth	r3, r3
 8008156:	4413      	add	r3, r2
 8008158:	b29a      	uxth	r2, r3
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3304      	adds	r3, #4
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	b29a      	uxth	r2, r3
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	3305      	adds	r3, #5
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b29b      	uxth	r3, r3
 800816e:	021b      	lsls	r3, r3, #8
 8008170:	b29b      	uxth	r3, r3
 8008172:	4413      	add	r3, r2
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	3306      	adds	r3, #6
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	b29a      	uxth	r2, r3
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	3307      	adds	r3, #7
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b29b      	uxth	r3, r3
 800818a:	021b      	lsls	r3, r3, #8
 800818c:	b29b      	uxth	r3, r3
 800818e:	4413      	add	r3, r2
 8008190:	b29a      	uxth	r2, r3
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	80da      	strh	r2, [r3, #6]

}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	bc80      	pop	{r7}
 800819e:	4770      	bx	lr

080081a0 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80081aa:	2180      	movs	r1, #128	; 0x80
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc6b 	bl	8008a88 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80081b2:	2100      	movs	r1, #0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fc67 	bl	8008a88 <USBD_LL_StallEP>
}
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80081c2:	b580      	push	{r7, lr}
 80081c4:	b086      	sub	sp, #24
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	60f8      	str	r0, [r7, #12]
 80081ca:	60b9      	str	r1, [r7, #8]
 80081cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d032      	beq.n	800823e <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80081d8:	68f8      	ldr	r0, [r7, #12]
 80081da:	f000 f834 	bl	8008246 <USBD_GetLen>
 80081de:	4603      	mov	r3, r0
 80081e0:	3301      	adds	r3, #1
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	005b      	lsls	r3, r3, #1
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	75fa      	strb	r2, [r7, #23]
 80081f2:	461a      	mov	r2, r3
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	4413      	add	r3, r2
 80081f8:	687a      	ldr	r2, [r7, #4]
 80081fa:	7812      	ldrb	r2, [r2, #0]
 80081fc:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	1c5a      	adds	r2, r3, #1
 8008202:	75fa      	strb	r2, [r7, #23]
 8008204:	461a      	mov	r2, r3
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	4413      	add	r3, r2
 800820a:	2203      	movs	r2, #3
 800820c:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800820e:	e012      	b.n	8008236 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	1c5a      	adds	r2, r3, #1
 8008214:	60fa      	str	r2, [r7, #12]
 8008216:	7dfa      	ldrb	r2, [r7, #23]
 8008218:	1c51      	adds	r1, r2, #1
 800821a:	75f9      	strb	r1, [r7, #23]
 800821c:	4611      	mov	r1, r2
 800821e:	68ba      	ldr	r2, [r7, #8]
 8008220:	440a      	add	r2, r1
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008226:	7dfb      	ldrb	r3, [r7, #23]
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	75fa      	strb	r2, [r7, #23]
 800822c:	461a      	mov	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	2200      	movs	r2, #0
 8008234:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1e8      	bne.n	8008210 <USBD_GetString+0x4e>
    }
  }
}
 800823e:	bf00      	nop
 8008240:	3718      	adds	r7, #24
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800824e:	2300      	movs	r3, #0
 8008250:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8008252:	e005      	b.n	8008260 <USBD_GetLen+0x1a>
  {
    len++;
 8008254:	7bfb      	ldrb	r3, [r7, #15]
 8008256:	3301      	adds	r3, #1
 8008258:	73fb      	strb	r3, [r7, #15]
    buf++;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	3301      	adds	r3, #1
 800825e:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1f5      	bne.n	8008254 <USBD_GetLen+0xe>
  }

  return len;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	bc80      	pop	{r7}
 8008272:	4770      	bx	lr

08008274 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2202      	movs	r2, #2
 8008286:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800828a:	88fa      	ldrh	r2, [r7, #6]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008290:	88fa      	ldrh	r2, [r7, #6]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008296:	88fb      	ldrh	r3, [r7, #6]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	2100      	movs	r1, #0
 800829c:	68f8      	ldr	r0, [r7, #12]
 800829e:	f000 fc75 	bl	8008b8c <USBD_LL_Transmit>

  return USBD_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ba:	88fb      	ldrh	r3, [r7, #6]
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	2100      	movs	r1, #0
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f000 fc63 	bl	8008b8c <USBD_LL_Transmit>

  return USBD_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3710      	adds	r7, #16
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	4613      	mov	r3, r2
 80082dc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2203      	movs	r2, #3
 80082e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80082e6:	88fa      	ldrh	r2, [r7, #6]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80082ee:	88fa      	ldrh	r2, [r7, #6]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082f6:	88fb      	ldrh	r3, [r7, #6]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	2100      	movs	r1, #0
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f000 fc68 	bl	8008bd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008302:	2300      	movs	r3, #0
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	4613      	mov	r3, r2
 8008318:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800831a:	88fb      	ldrh	r3, [r7, #6]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	2100      	movs	r1, #0
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	f000 fc56 	bl	8008bd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2204      	movs	r2, #4
 800833c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008340:	2300      	movs	r3, #0
 8008342:	2200      	movs	r2, #0
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fc20 	bl	8008b8c <USBD_LL_Transmit>

  return USBD_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3708      	adds	r7, #8
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b082      	sub	sp, #8
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2205      	movs	r2, #5
 8008362:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008366:	2300      	movs	r3, #0
 8008368:	2200      	movs	r2, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f000 fc30 	bl	8008bd2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008380:	2200      	movs	r2, #0
 8008382:	4912      	ldr	r1, [pc, #72]	; (80083cc <MX_USB_DEVICE_Init+0x50>)
 8008384:	4812      	ldr	r0, [pc, #72]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008386:	f7fe ff6c 	bl	8007262 <USBD_Init>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008390:	f7fa fab0 	bl	80028f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008394:	490f      	ldr	r1, [pc, #60]	; (80083d4 <MX_USB_DEVICE_Init+0x58>)
 8008396:	480e      	ldr	r0, [pc, #56]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 8008398:	f7fe ff8e 	bl	80072b8 <USBD_RegisterClass>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80083a2:	f7fa faa7 	bl	80028f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80083a6:	490c      	ldr	r1, [pc, #48]	; (80083d8 <MX_USB_DEVICE_Init+0x5c>)
 80083a8:	4809      	ldr	r0, [pc, #36]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe febf 	bl	800712c <USBD_CDC_RegisterInterface>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083b4:	f7fa fa9e 	bl	80028f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083b8:	4805      	ldr	r0, [pc, #20]	; (80083d0 <MX_USB_DEVICE_Init+0x54>)
 80083ba:	f7fe ff96 	bl	80072ea <USBD_Start>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d001      	beq.n	80083c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083c4:	f7fa fa96 	bl	80028f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083c8:	bf00      	nop
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000130 	.word	0x20000130
 80083d0:	20000740 	.word	0x20000740
 80083d4:	2000001c 	.word	0x2000001c
 80083d8:	20000120 	.word	0x20000120

080083dc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083e0:	2200      	movs	r2, #0
 80083e2:	4905      	ldr	r1, [pc, #20]	; (80083f8 <CDC_Init_FS+0x1c>)
 80083e4:	4805      	ldr	r0, [pc, #20]	; (80083fc <CDC_Init_FS+0x20>)
 80083e6:	f7fe feb7 	bl	8007158 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083ea:	4905      	ldr	r1, [pc, #20]	; (8008400 <CDC_Init_FS+0x24>)
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <CDC_Init_FS+0x20>)
 80083ee:	f7fe fecc 	bl	800718a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083f2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20000dec 	.word	0x20000dec
 80083fc:	20000740 	.word	0x20000740
 8008400:	20000a04 	.word	0x20000a04

08008404 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008408:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800840a:	4618      	mov	r0, r3
 800840c:	46bd      	mov	sp, r7
 800840e:	bc80      	pop	{r7}
 8008410:	4770      	bx	lr
	...

08008414 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	4603      	mov	r3, r0
 800841c:	6039      	str	r1, [r7, #0]
 800841e:	71fb      	strb	r3, [r7, #7]
 8008420:	4613      	mov	r3, r2
 8008422:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008424:	79fb      	ldrb	r3, [r7, #7]
 8008426:	2b23      	cmp	r3, #35	; 0x23
 8008428:	d84a      	bhi.n	80084c0 <CDC_Control_FS+0xac>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <CDC_Control_FS+0x1c>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	080084c1 	.word	0x080084c1
 8008434:	080084c1 	.word	0x080084c1
 8008438:	080084c1 	.word	0x080084c1
 800843c:	080084c1 	.word	0x080084c1
 8008440:	080084c1 	.word	0x080084c1
 8008444:	080084c1 	.word	0x080084c1
 8008448:	080084c1 	.word	0x080084c1
 800844c:	080084c1 	.word	0x080084c1
 8008450:	080084c1 	.word	0x080084c1
 8008454:	080084c1 	.word	0x080084c1
 8008458:	080084c1 	.word	0x080084c1
 800845c:	080084c1 	.word	0x080084c1
 8008460:	080084c1 	.word	0x080084c1
 8008464:	080084c1 	.word	0x080084c1
 8008468:	080084c1 	.word	0x080084c1
 800846c:	080084c1 	.word	0x080084c1
 8008470:	080084c1 	.word	0x080084c1
 8008474:	080084c1 	.word	0x080084c1
 8008478:	080084c1 	.word	0x080084c1
 800847c:	080084c1 	.word	0x080084c1
 8008480:	080084c1 	.word	0x080084c1
 8008484:	080084c1 	.word	0x080084c1
 8008488:	080084c1 	.word	0x080084c1
 800848c:	080084c1 	.word	0x080084c1
 8008490:	080084c1 	.word	0x080084c1
 8008494:	080084c1 	.word	0x080084c1
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c1 	.word	0x080084c1
 80084a0:	080084c1 	.word	0x080084c1
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084c1 	.word	0x080084c1
 80084b0:	080084c1 	.word	0x080084c1
 80084b4:	080084c1 	.word	0x080084c1
 80084b8:	080084c1 	.word	0x080084c1
 80084bc:	080084c1 	.word	0x080084c1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084c0:	bf00      	nop
  }

  return (USBD_OK);
 80084c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bc80      	pop	{r7}
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4810      	ldr	r0, [pc, #64]	; (8008520 <CDC_Receive_FS+0x50>)
 80084de:	f7fe fe54 	bl	800718a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084e2:	480f      	ldr	r0, [pc, #60]	; (8008520 <CDC_Receive_FS+0x50>)
 80084e4:	f7fe fe93 	bl	800720e <USBD_CDC_ReceivePacket>
  memcpy(rxBuffer, Buf, (*Len) + 1);
 80084e8:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <CDC_Receive_FS+0x54>)
 80084ea:	6818      	ldr	r0, [r3, #0]
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	3301      	adds	r3, #1
 80084f2:	461a      	mov	r2, r3
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	f000 fc41 	bl	8008d7c <memcpy>
  incomingMessageFlag=1;
 80084fa:	4b0b      	ldr	r3, [pc, #44]	; (8008528 <CDC_Receive_FS+0x58>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8008500:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008504:	4809      	ldr	r0, [pc, #36]	; (800852c <CDC_Receive_FS+0x5c>)
 8008506:	f7fb fae0 	bl	8003aca <HAL_GPIO_TogglePin>
  sizeOfMessage=*Len;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	b2da      	uxtb	r2, r3
 8008510:	4b07      	ldr	r3, [pc, #28]	; (8008530 <CDC_Receive_FS+0x60>)
 8008512:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008514:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	20000740 	.word	0x20000740
 8008524:	200006a0 	.word	0x200006a0
 8008528:	20000375 	.word	0x20000375
 800852c:	40011000 	.word	0x40011000
 8008530:	20000698 	.word	0x20000698

08008534 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	460b      	mov	r3, r1
 800853e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008544:	4b0d      	ldr	r3, [pc, #52]	; (800857c <CDC_Transmit_FS+0x48>)
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8008556:	2301      	movs	r3, #1
 8008558:	e00b      	b.n	8008572 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800855a:	887b      	ldrh	r3, [r7, #2]
 800855c:	461a      	mov	r2, r3
 800855e:	6879      	ldr	r1, [r7, #4]
 8008560:	4806      	ldr	r0, [pc, #24]	; (800857c <CDC_Transmit_FS+0x48>)
 8008562:	f7fe fdf9 	bl	8007158 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8008566:	4805      	ldr	r0, [pc, #20]	; (800857c <CDC_Transmit_FS+0x48>)
 8008568:	f7fe fe22 	bl	80071b0 <USBD_CDC_TransmitPacket>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008570:	7bfb      	ldrb	r3, [r7, #15]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000740 	.word	0x20000740

08008580 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	2212      	movs	r2, #18
 8008590:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008592:	4b03      	ldr	r3, [pc, #12]	; (80085a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008594:	4618      	mov	r0, r3
 8008596:	370c      	adds	r7, #12
 8008598:	46bd      	mov	sp, r7
 800859a:	bc80      	pop	{r7}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	2000014c 	.word	0x2000014c

080085a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	2204      	movs	r2, #4
 80085b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80085b8:	4618      	mov	r0, r3
 80085ba:	370c      	adds	r7, #12
 80085bc:	46bd      	mov	sp, r7
 80085be:	bc80      	pop	{r7}
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop
 80085c4:	20000160 	.word	0x20000160

080085c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b082      	sub	sp, #8
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	4603      	mov	r3, r0
 80085d0:	6039      	str	r1, [r7, #0]
 80085d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80085d4:	79fb      	ldrb	r3, [r7, #7]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	4907      	ldr	r1, [pc, #28]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085de:	4808      	ldr	r0, [pc, #32]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085e0:	f7ff fdef 	bl	80081c2 <USBD_GetString>
 80085e4:	e004      	b.n	80085f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80085e6:	683a      	ldr	r2, [r7, #0]
 80085e8:	4904      	ldr	r1, [pc, #16]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
 80085ea:	4805      	ldr	r0, [pc, #20]	; (8008600 <USBD_FS_ProductStrDescriptor+0x38>)
 80085ec:	f7ff fde9 	bl	80081c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80085f0:	4b02      	ldr	r3, [pc, #8]	; (80085fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3708      	adds	r7, #8
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
 80085fa:	bf00      	nop
 80085fc:	200011d4 	.word	0x200011d4
 8008600:	080090c8 	.word	0x080090c8

08008604 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
 800860a:	4603      	mov	r3, r0
 800860c:	6039      	str	r1, [r7, #0]
 800860e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008610:	683a      	ldr	r2, [r7, #0]
 8008612:	4904      	ldr	r1, [pc, #16]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008614:	4804      	ldr	r0, [pc, #16]	; (8008628 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008616:	f7ff fdd4 	bl	80081c2 <USBD_GetString>
  return USBD_StrDesc;
 800861a:	4b02      	ldr	r3, [pc, #8]	; (8008624 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	3708      	adds	r7, #8
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200011d4 	.word	0x200011d4
 8008628:	080090c8 	.word	0x080090c8

0800862c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	221a      	movs	r2, #26
 800863c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800863e:	f000 f843 	bl	80086c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008642:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000164 	.word	0x20000164

08008650 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4907      	ldr	r1, [pc, #28]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008666:	4808      	ldr	r0, [pc, #32]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008668:	f7ff fdab 	bl	80081c2 <USBD_GetString>
 800866c:	e004      	b.n	8008678 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4904      	ldr	r1, [pc, #16]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008672:	4805      	ldr	r0, [pc, #20]	; (8008688 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008674:	f7ff fda5 	bl	80081c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	200011d4 	.word	0x200011d4
 8008688:	080090d4 	.word	0x080090d4

0800868c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008698:	79fb      	ldrb	r3, [r7, #7]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d105      	bne.n	80086aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	4907      	ldr	r1, [pc, #28]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086a2:	4808      	ldr	r0, [pc, #32]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086a4:	f7ff fd8d 	bl	80081c2 <USBD_GetString>
 80086a8:	e004      	b.n	80086b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	4904      	ldr	r1, [pc, #16]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80086ae:	4805      	ldr	r0, [pc, #20]	; (80086c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80086b0:	f7ff fd87 	bl	80081c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3708      	adds	r7, #8
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	200011d4 	.word	0x200011d4
 80086c4:	080090e0 	.word	0x080090e0

080086c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b084      	sub	sp, #16
 80086cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80086ce:	4b0f      	ldr	r3, [pc, #60]	; (800870c <Get_SerialNum+0x44>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <Get_SerialNum+0x48>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <Get_SerialNum+0x4c>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80086e0:	68fa      	ldr	r2, [r7, #12]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4413      	add	r3, r2
 80086e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d009      	beq.n	8008702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80086ee:	2208      	movs	r2, #8
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <Get_SerialNum+0x50>)
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 f814 	bl	8008720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80086f8:	2204      	movs	r2, #4
 80086fa:	4908      	ldr	r1, [pc, #32]	; (800871c <Get_SerialNum+0x54>)
 80086fc:	68b8      	ldr	r0, [r7, #8]
 80086fe:	f000 f80f 	bl	8008720 <IntToUnicode>
  }
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	1ffff7e8 	.word	0x1ffff7e8
 8008710:	1ffff7ec 	.word	0x1ffff7ec
 8008714:	1ffff7f0 	.word	0x1ffff7f0
 8008718:	20000166 	.word	0x20000166
 800871c:	20000176 	.word	0x20000176

08008720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008720:	b480      	push	{r7}
 8008722:	b087      	sub	sp, #28
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	4613      	mov	r3, r2
 800872c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800872e:	2300      	movs	r3, #0
 8008730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008732:	2300      	movs	r3, #0
 8008734:	75fb      	strb	r3, [r7, #23]
 8008736:	e027      	b.n	8008788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	0f1b      	lsrs	r3, r3, #28
 800873c:	2b09      	cmp	r3, #9
 800873e:	d80b      	bhi.n	8008758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	0f1b      	lsrs	r3, r3, #28
 8008744:	b2da      	uxtb	r2, r3
 8008746:	7dfb      	ldrb	r3, [r7, #23]
 8008748:	005b      	lsls	r3, r3, #1
 800874a:	4619      	mov	r1, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	440b      	add	r3, r1
 8008750:	3230      	adds	r2, #48	; 0x30
 8008752:	b2d2      	uxtb	r2, r2
 8008754:	701a      	strb	r2, [r3, #0]
 8008756:	e00a      	b.n	800876e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	0f1b      	lsrs	r3, r3, #28
 800875c:	b2da      	uxtb	r2, r3
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	005b      	lsls	r3, r3, #1
 8008762:	4619      	mov	r1, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	440b      	add	r3, r1
 8008768:	3237      	adds	r2, #55	; 0x37
 800876a:	b2d2      	uxtb	r2, r2
 800876c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	011b      	lsls	r3, r3, #4
 8008772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008774:	7dfb      	ldrb	r3, [r7, #23]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	3301      	adds	r3, #1
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	2200      	movs	r2, #0
 8008780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008782:	7dfb      	ldrb	r3, [r7, #23]
 8008784:	3301      	adds	r3, #1
 8008786:	75fb      	strb	r3, [r7, #23]
 8008788:	7dfa      	ldrb	r2, [r7, #23]
 800878a:	79fb      	ldrb	r3, [r7, #7]
 800878c:	429a      	cmp	r2, r3
 800878e:	d3d3      	bcc.n	8008738 <IntToUnicode+0x18>
  }
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	bc80      	pop	{r7}
 8008798:	4770      	bx	lr
	...

0800879c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a0d      	ldr	r2, [pc, #52]	; (80087e0 <HAL_PCD_MspInit+0x44>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d113      	bne.n	80087d6 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80087ae:	4b0d      	ldr	r3, [pc, #52]	; (80087e4 <HAL_PCD_MspInit+0x48>)
 80087b0:	69db      	ldr	r3, [r3, #28]
 80087b2:	4a0c      	ldr	r2, [pc, #48]	; (80087e4 <HAL_PCD_MspInit+0x48>)
 80087b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80087b8:	61d3      	str	r3, [r2, #28]
 80087ba:	4b0a      	ldr	r3, [pc, #40]	; (80087e4 <HAL_PCD_MspInit+0x48>)
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087c2:	60fb      	str	r3, [r7, #12]
 80087c4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80087c6:	2200      	movs	r2, #0
 80087c8:	2100      	movs	r1, #0
 80087ca:	2014      	movs	r0, #20
 80087cc:	f7fa ffa1 	bl	8003712 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80087d0:	2014      	movs	r0, #20
 80087d2:	f7fa ffba 	bl	800374a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	40005c00 	.word	0x40005c00
 80087e4:	40021000 	.word	0x40021000

080087e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe fdbb 	bl	800737a <USBD_LL_SetupStage>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800881e:	78fb      	ldrb	r3, [r7, #3]
 8008820:	687a      	ldr	r2, [r7, #4]
 8008822:	015b      	lsls	r3, r3, #5
 8008824:	4413      	add	r3, r2
 8008826:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	4619      	mov	r1, r3
 8008830:	f7fe fdee 	bl	8007410 <USBD_LL_DataOutStage>
}
 8008834:	bf00      	nop
 8008836:	3708      	adds	r7, #8
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	460b      	mov	r3, r1
 8008846:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 800884e:	78fb      	ldrb	r3, [r7, #3]
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	015b      	lsls	r3, r3, #5
 8008854:	4413      	add	r3, r2
 8008856:	333c      	adds	r3, #60	; 0x3c
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	78fb      	ldrb	r3, [r7, #3]
 800885c:	4619      	mov	r1, r3
 800885e:	f7fe fe48 	bl	80074f2 <USBD_LL_DataInStage>
}
 8008862:	bf00      	nop
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008878:	4618      	mov	r0, r3
 800887a:	f7fe ff58 	bl	800772e <USBD_LL_SOF>
}
 800887e:	bf00      	nop
 8008880:	3708      	adds	r7, #8
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800888e:	2301      	movs	r3, #1
 8008890:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	2b02      	cmp	r3, #2
 8008898:	d001      	beq.n	800889e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800889a:	f7fa f82b 	bl	80028f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088a4:	7bfa      	ldrb	r2, [r7, #15]
 80088a6:	4611      	mov	r1, r2
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fe ff08 	bl	80076be <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fec1 	bl	800763c <USBD_LL_Reset>
}
 80088ba:	bf00      	nop
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
	...

080088c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b082      	sub	sp, #8
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fe ff02 	bl	80076dc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	699b      	ldr	r3, [r3, #24]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d005      	beq.n	80088ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80088e0:	4b04      	ldr	r3, [pc, #16]	; (80088f4 <HAL_PCD_SuspendCallback+0x30>)
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	4a03      	ldr	r2, [pc, #12]	; (80088f4 <HAL_PCD_SuspendCallback+0x30>)
 80088e6:	f043 0306 	orr.w	r3, r3, #6
 80088ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed00 	.word	0xe000ed00

080088f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b082      	sub	sp, #8
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008906:	4618      	mov	r0, r3
 8008908:	f7fe fefc 	bl	8007704 <USBD_LL_Resume>
}
 800890c:	bf00      	nop
 800890e:	3708      	adds	r7, #8
 8008910:	46bd      	mov	sp, r7
 8008912:	bd80      	pop	{r7, pc}

08008914 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800891c:	4a28      	ldr	r2, [pc, #160]	; (80089c0 <USBD_LL_Init+0xac>)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a26      	ldr	r2, [pc, #152]	; (80089c0 <USBD_LL_Init+0xac>)
 8008928:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800892c:	4b24      	ldr	r3, [pc, #144]	; (80089c0 <USBD_LL_Init+0xac>)
 800892e:	4a25      	ldr	r2, [pc, #148]	; (80089c4 <USBD_LL_Init+0xb0>)
 8008930:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008932:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <USBD_LL_Init+0xac>)
 8008934:	2208      	movs	r2, #8
 8008936:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008938:	4b21      	ldr	r3, [pc, #132]	; (80089c0 <USBD_LL_Init+0xac>)
 800893a:	2202      	movs	r2, #2
 800893c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800893e:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <USBD_LL_Init+0xac>)
 8008940:	2200      	movs	r2, #0
 8008942:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008944:	4b1e      	ldr	r3, [pc, #120]	; (80089c0 <USBD_LL_Init+0xac>)
 8008946:	2200      	movs	r2, #0
 8008948:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800894a:	4b1d      	ldr	r3, [pc, #116]	; (80089c0 <USBD_LL_Init+0xac>)
 800894c:	2200      	movs	r2, #0
 800894e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008950:	481b      	ldr	r0, [pc, #108]	; (80089c0 <USBD_LL_Init+0xac>)
 8008952:	f7fb f8d2 	bl	8003afa <HAL_PCD_Init>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d001      	beq.n	8008960 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800895c:	f7f9 ffca 	bl	80028f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008966:	2318      	movs	r3, #24
 8008968:	2200      	movs	r2, #0
 800896a:	2100      	movs	r1, #0
 800896c:	f7fb ff6a 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008976:	2358      	movs	r3, #88	; 0x58
 8008978:	2200      	movs	r2, #0
 800897a:	2180      	movs	r1, #128	; 0x80
 800897c:	f7fb ff62 	bl	8004844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008986:	23c0      	movs	r3, #192	; 0xc0
 8008988:	2200      	movs	r2, #0
 800898a:	2181      	movs	r1, #129	; 0x81
 800898c:	f7fb ff5a 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008996:	f44f 7388 	mov.w	r3, #272	; 0x110
 800899a:	2200      	movs	r2, #0
 800899c:	2101      	movs	r1, #1
 800899e:	f7fb ff51 	bl	8004844 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80089a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80089ac:	2200      	movs	r2, #0
 80089ae:	2182      	movs	r1, #130	; 0x82
 80089b0:	f7fb ff48 	bl	8004844 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3708      	adds	r7, #8
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	200013d4 	.word	0x200013d4
 80089c4:	40005c00 	.word	0x40005c00

080089c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089d0:	2300      	movs	r3, #0
 80089d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80089de:	4618      	mov	r0, r3
 80089e0:	f7fb f96c 	bl	8003cbc <HAL_PCD_Start>
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e8:	7bfb      	ldrb	r3, [r7, #15]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 f948 	bl	8008c80 <USBD_Get_USB_Status>
 80089f0:	4603      	mov	r3, r0
 80089f2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80089f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	4608      	mov	r0, r1
 8008a08:	4611      	mov	r1, r2
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	70fb      	strb	r3, [r7, #3]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70bb      	strb	r3, [r7, #2]
 8008a14:	4613      	mov	r3, r2
 8008a16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008a26:	78bb      	ldrb	r3, [r7, #2]
 8008a28:	883a      	ldrh	r2, [r7, #0]
 8008a2a:	78f9      	ldrb	r1, [r7, #3]
 8008a2c:	f7fb fa9f 	bl	8003f6e <HAL_PCD_EP_Open>
 8008a30:	4603      	mov	r3, r0
 8008a32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f000 f922 	bl	8008c80 <USBD_Get_USB_Status>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008a40:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a64:	78fa      	ldrb	r2, [r7, #3]
 8008a66:	4611      	mov	r1, r2
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7fb fae0 	bl	800402e <HAL_PCD_EP_Close>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a72:	7bfb      	ldrb	r3, [r7, #15]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f903 	bl	8008c80 <USBD_Get_USB_Status>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008aa2:	78fa      	ldrb	r2, [r7, #3]
 8008aa4:	4611      	mov	r1, r2
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fb fb8a 	bl	80041c0 <HAL_PCD_EP_SetStall>
 8008aac:	4603      	mov	r3, r0
 8008aae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ab0:	7bfb      	ldrb	r3, [r7, #15]
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 f8e4 	bl	8008c80 <USBD_Get_USB_Status>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}

08008ac6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ac6:	b580      	push	{r7, lr}
 8008ac8:	b084      	sub	sp, #16
 8008aca:	af00      	add	r7, sp, #0
 8008acc:	6078      	str	r0, [r7, #4]
 8008ace:	460b      	mov	r3, r1
 8008ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ae0:	78fa      	ldrb	r2, [r7, #3]
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fb fbc5 	bl	8004274 <HAL_PCD_EP_ClrStall>
 8008aea:	4603      	mov	r3, r0
 8008aec:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f8c5 	bl	8008c80 <USBD_Get_USB_Status>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3710      	adds	r7, #16
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}

08008b04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b04:	b480      	push	{r7}
 8008b06:	b085      	sub	sp, #20
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b16:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8008b18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	da08      	bge.n	8008b32 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008b20:	78fb      	ldrb	r3, [r7, #3]
 8008b22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	015b      	lsls	r3, r3, #5
 8008b2a:	4413      	add	r3, r2
 8008b2c:	332a      	adds	r3, #42	; 0x2a
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	e008      	b.n	8008b44 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008b32:	78fb      	ldrb	r3, [r7, #3]
 8008b34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b38:	68fa      	ldr	r2, [r7, #12]
 8008b3a:	015b      	lsls	r3, r3, #5
 8008b3c:	4413      	add	r3, r2
 8008b3e:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008b42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3714      	adds	r7, #20
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bc80      	pop	{r7}
 8008b4c:	4770      	bx	lr

08008b4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb f9d9 	bl	8003f24 <HAL_PCD_SetAddress>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f881 	bl	8008c80 <USBD_Get_USB_Status>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b086      	sub	sp, #24
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	607a      	str	r2, [r7, #4]
 8008b96:	461a      	mov	r2, r3
 8008b98:	460b      	mov	r3, r1
 8008b9a:	72fb      	strb	r3, [r7, #11]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bae:	893b      	ldrh	r3, [r7, #8]
 8008bb0:	7af9      	ldrb	r1, [r7, #11]
 8008bb2:	687a      	ldr	r2, [r7, #4]
 8008bb4:	f7fb facb 	bl	800414e <HAL_PCD_EP_Transmit>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 f85e 	bl	8008c80 <USBD_Get_USB_Status>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008bc8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3718      	adds	r7, #24
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b086      	sub	sp, #24
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	460b      	mov	r3, r1
 8008be0:	72fb      	strb	r3, [r7, #11]
 8008be2:	4613      	mov	r3, r2
 8008be4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008bf4:	893b      	ldrh	r3, [r7, #8]
 8008bf6:	7af9      	ldrb	r1, [r7, #11]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	f7fb fa5a 	bl	80040b2 <HAL_PCD_EP_Receive>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 f83b 	bl	8008c80 <USBD_Get_USB_Status>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3718      	adds	r7, #24
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b082      	sub	sp, #8
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	460b      	mov	r3, r1
 8008c22:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c2a:	78fa      	ldrb	r2, [r7, #3]
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fb fa79 	bl	8004126 <HAL_PCD_EP_GetRxCount>
 8008c34:	4603      	mov	r3, r0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3708      	adds	r7, #8
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
	...

08008c40 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_static_malloc+0x14>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bc80      	pop	{r7}
 8008c52:	4770      	bx	lr
 8008c54:	20000378 	.word	0x20000378

08008c58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	b083      	sub	sp, #12
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bc80      	pop	{r7}
 8008c7e:	4770      	bx	lr

08008c80 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	4603      	mov	r3, r0
 8008c88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c8e:	79fb      	ldrb	r3, [r7, #7]
 8008c90:	2b03      	cmp	r3, #3
 8008c92:	d817      	bhi.n	8008cc4 <USBD_Get_USB_Status+0x44>
 8008c94:	a201      	add	r2, pc, #4	; (adr r2, 8008c9c <USBD_Get_USB_Status+0x1c>)
 8008c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9a:	bf00      	nop
 8008c9c:	08008cad 	.word	0x08008cad
 8008ca0:	08008cb3 	.word	0x08008cb3
 8008ca4:	08008cb9 	.word	0x08008cb9
 8008ca8:	08008cbf 	.word	0x08008cbf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb0:	e00b      	b.n	8008cca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb6:	e008      	b.n	8008cca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
    break;
 8008cbc:	e005      	b.n	8008cca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc2:	e002      	b.n	8008cca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cc8:	bf00      	nop
  }
  return usb_status;
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3714      	adds	r7, #20
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bc80      	pop	{r7}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <__errno>:
 8008cd8:	4b01      	ldr	r3, [pc, #4]	; (8008ce0 <__errno+0x8>)
 8008cda:	6818      	ldr	r0, [r3, #0]
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop
 8008ce0:	20000180 	.word	0x20000180

08008ce4 <__libc_init_array>:
 8008ce4:	b570      	push	{r4, r5, r6, lr}
 8008ce6:	2500      	movs	r5, #0
 8008ce8:	4e0c      	ldr	r6, [pc, #48]	; (8008d1c <__libc_init_array+0x38>)
 8008cea:	4c0d      	ldr	r4, [pc, #52]	; (8008d20 <__libc_init_array+0x3c>)
 8008cec:	1ba4      	subs	r4, r4, r6
 8008cee:	10a4      	asrs	r4, r4, #2
 8008cf0:	42a5      	cmp	r5, r4
 8008cf2:	d109      	bne.n	8008d08 <__libc_init_array+0x24>
 8008cf4:	f000 f9d2 	bl	800909c <_init>
 8008cf8:	2500      	movs	r5, #0
 8008cfa:	4e0a      	ldr	r6, [pc, #40]	; (8008d24 <__libc_init_array+0x40>)
 8008cfc:	4c0a      	ldr	r4, [pc, #40]	; (8008d28 <__libc_init_array+0x44>)
 8008cfe:	1ba4      	subs	r4, r4, r6
 8008d00:	10a4      	asrs	r4, r4, #2
 8008d02:	42a5      	cmp	r5, r4
 8008d04:	d105      	bne.n	8008d12 <__libc_init_array+0x2e>
 8008d06:	bd70      	pop	{r4, r5, r6, pc}
 8008d08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d0c:	4798      	blx	r3
 8008d0e:	3501      	adds	r5, #1
 8008d10:	e7ee      	b.n	8008cf0 <__libc_init_array+0xc>
 8008d12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d16:	4798      	blx	r3
 8008d18:	3501      	adds	r5, #1
 8008d1a:	e7f2      	b.n	8008d02 <__libc_init_array+0x1e>
 8008d1c:	08009210 	.word	0x08009210
 8008d20:	08009210 	.word	0x08009210
 8008d24:	08009210 	.word	0x08009210
 8008d28:	08009214 	.word	0x08009214

08008d2c <__locale_ctype_ptr>:
 8008d2c:	4b04      	ldr	r3, [pc, #16]	; (8008d40 <__locale_ctype_ptr+0x14>)
 8008d2e:	4a05      	ldr	r2, [pc, #20]	; (8008d44 <__locale_ctype_ptr+0x18>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6a1b      	ldr	r3, [r3, #32]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	bf08      	it	eq
 8008d38:	4613      	moveq	r3, r2
 8008d3a:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008d3e:	4770      	bx	lr
 8008d40:	20000180 	.word	0x20000180
 8008d44:	200001e4 	.word	0x200001e4

08008d48 <malloc>:
 8008d48:	4b02      	ldr	r3, [pc, #8]	; (8008d54 <malloc+0xc>)
 8008d4a:	4601      	mov	r1, r0
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	f000 b829 	b.w	8008da4 <_malloc_r>
 8008d52:	bf00      	nop
 8008d54:	20000180 	.word	0x20000180

08008d58 <__ascii_mbtowc>:
 8008d58:	b082      	sub	sp, #8
 8008d5a:	b901      	cbnz	r1, 8008d5e <__ascii_mbtowc+0x6>
 8008d5c:	a901      	add	r1, sp, #4
 8008d5e:	b142      	cbz	r2, 8008d72 <__ascii_mbtowc+0x1a>
 8008d60:	b14b      	cbz	r3, 8008d76 <__ascii_mbtowc+0x1e>
 8008d62:	7813      	ldrb	r3, [r2, #0]
 8008d64:	600b      	str	r3, [r1, #0]
 8008d66:	7812      	ldrb	r2, [r2, #0]
 8008d68:	1c10      	adds	r0, r2, #0
 8008d6a:	bf18      	it	ne
 8008d6c:	2001      	movne	r0, #1
 8008d6e:	b002      	add	sp, #8
 8008d70:	4770      	bx	lr
 8008d72:	4610      	mov	r0, r2
 8008d74:	e7fb      	b.n	8008d6e <__ascii_mbtowc+0x16>
 8008d76:	f06f 0001 	mvn.w	r0, #1
 8008d7a:	e7f8      	b.n	8008d6e <__ascii_mbtowc+0x16>

08008d7c <memcpy>:
 8008d7c:	b510      	push	{r4, lr}
 8008d7e:	1e43      	subs	r3, r0, #1
 8008d80:	440a      	add	r2, r1
 8008d82:	4291      	cmp	r1, r2
 8008d84:	d100      	bne.n	8008d88 <memcpy+0xc>
 8008d86:	bd10      	pop	{r4, pc}
 8008d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d90:	e7f7      	b.n	8008d82 <memcpy+0x6>

08008d92 <memset>:
 8008d92:	4603      	mov	r3, r0
 8008d94:	4402      	add	r2, r0
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d100      	bne.n	8008d9c <memset+0xa>
 8008d9a:	4770      	bx	lr
 8008d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8008da0:	e7f9      	b.n	8008d96 <memset+0x4>
	...

08008da4 <_malloc_r>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	1ccd      	adds	r5, r1, #3
 8008da8:	f025 0503 	bic.w	r5, r5, #3
 8008dac:	3508      	adds	r5, #8
 8008dae:	2d0c      	cmp	r5, #12
 8008db0:	bf38      	it	cc
 8008db2:	250c      	movcc	r5, #12
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	4606      	mov	r6, r0
 8008db8:	db01      	blt.n	8008dbe <_malloc_r+0x1a>
 8008dba:	42a9      	cmp	r1, r5
 8008dbc:	d903      	bls.n	8008dc6 <_malloc_r+0x22>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	f000 f864 	bl	8008e92 <__malloc_lock>
 8008dca:	4a21      	ldr	r2, [pc, #132]	; (8008e50 <_malloc_r+0xac>)
 8008dcc:	6814      	ldr	r4, [r2, #0]
 8008dce:	4621      	mov	r1, r4
 8008dd0:	b991      	cbnz	r1, 8008df8 <_malloc_r+0x54>
 8008dd2:	4c20      	ldr	r4, [pc, #128]	; (8008e54 <_malloc_r+0xb0>)
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	b91b      	cbnz	r3, 8008de0 <_malloc_r+0x3c>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f83d 	bl	8008e58 <_sbrk_r>
 8008dde:	6020      	str	r0, [r4, #0]
 8008de0:	4629      	mov	r1, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f838 	bl	8008e58 <_sbrk_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d124      	bne.n	8008e36 <_malloc_r+0x92>
 8008dec:	230c      	movs	r3, #12
 8008dee:	4630      	mov	r0, r6
 8008df0:	6033      	str	r3, [r6, #0]
 8008df2:	f000 f84f 	bl	8008e94 <__malloc_unlock>
 8008df6:	e7e4      	b.n	8008dc2 <_malloc_r+0x1e>
 8008df8:	680b      	ldr	r3, [r1, #0]
 8008dfa:	1b5b      	subs	r3, r3, r5
 8008dfc:	d418      	bmi.n	8008e30 <_malloc_r+0x8c>
 8008dfe:	2b0b      	cmp	r3, #11
 8008e00:	d90f      	bls.n	8008e22 <_malloc_r+0x7e>
 8008e02:	600b      	str	r3, [r1, #0]
 8008e04:	18cc      	adds	r4, r1, r3
 8008e06:	50cd      	str	r5, [r1, r3]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 f843 	bl	8008e94 <__malloc_unlock>
 8008e0e:	f104 000b 	add.w	r0, r4, #11
 8008e12:	1d23      	adds	r3, r4, #4
 8008e14:	f020 0007 	bic.w	r0, r0, #7
 8008e18:	1ac3      	subs	r3, r0, r3
 8008e1a:	d0d3      	beq.n	8008dc4 <_malloc_r+0x20>
 8008e1c:	425a      	negs	r2, r3
 8008e1e:	50e2      	str	r2, [r4, r3]
 8008e20:	e7d0      	b.n	8008dc4 <_malloc_r+0x20>
 8008e22:	684b      	ldr	r3, [r1, #4]
 8008e24:	428c      	cmp	r4, r1
 8008e26:	bf16      	itet	ne
 8008e28:	6063      	strne	r3, [r4, #4]
 8008e2a:	6013      	streq	r3, [r2, #0]
 8008e2c:	460c      	movne	r4, r1
 8008e2e:	e7eb      	b.n	8008e08 <_malloc_r+0x64>
 8008e30:	460c      	mov	r4, r1
 8008e32:	6849      	ldr	r1, [r1, #4]
 8008e34:	e7cc      	b.n	8008dd0 <_malloc_r+0x2c>
 8008e36:	1cc4      	adds	r4, r0, #3
 8008e38:	f024 0403 	bic.w	r4, r4, #3
 8008e3c:	42a0      	cmp	r0, r4
 8008e3e:	d005      	beq.n	8008e4c <_malloc_r+0xa8>
 8008e40:	1a21      	subs	r1, r4, r0
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 f808 	bl	8008e58 <_sbrk_r>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d0cf      	beq.n	8008dec <_malloc_r+0x48>
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	e7db      	b.n	8008e08 <_malloc_r+0x64>
 8008e50:	20000598 	.word	0x20000598
 8008e54:	2000059c 	.word	0x2000059c

08008e58 <_sbrk_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	4c05      	ldr	r4, [pc, #20]	; (8008e74 <_sbrk_r+0x1c>)
 8008e5e:	4605      	mov	r5, r0
 8008e60:	4608      	mov	r0, r1
 8008e62:	6023      	str	r3, [r4, #0]
 8008e64:	f7f9 fe94 	bl	8002b90 <_sbrk>
 8008e68:	1c43      	adds	r3, r0, #1
 8008e6a:	d102      	bne.n	8008e72 <_sbrk_r+0x1a>
 8008e6c:	6823      	ldr	r3, [r4, #0]
 8008e6e:	b103      	cbz	r3, 8008e72 <_sbrk_r+0x1a>
 8008e70:	602b      	str	r3, [r5, #0]
 8008e72:	bd38      	pop	{r3, r4, r5, pc}
 8008e74:	20001640 	.word	0x20001640

08008e78 <__ascii_wctomb>:
 8008e78:	b149      	cbz	r1, 8008e8e <__ascii_wctomb+0x16>
 8008e7a:	2aff      	cmp	r2, #255	; 0xff
 8008e7c:	bf8b      	itete	hi
 8008e7e:	238a      	movhi	r3, #138	; 0x8a
 8008e80:	700a      	strbls	r2, [r1, #0]
 8008e82:	6003      	strhi	r3, [r0, #0]
 8008e84:	2001      	movls	r0, #1
 8008e86:	bf88      	it	hi
 8008e88:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e8c:	4770      	bx	lr
 8008e8e:	4608      	mov	r0, r1
 8008e90:	4770      	bx	lr

08008e92 <__malloc_lock>:
 8008e92:	4770      	bx	lr

08008e94 <__malloc_unlock>:
 8008e94:	4770      	bx	lr
	...

08008e98 <sqrt>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	b08b      	sub	sp, #44	; 0x2c
 8008e9e:	4604      	mov	r4, r0
 8008ea0:	460d      	mov	r5, r1
 8008ea2:	f000 f84d 	bl	8008f40 <__ieee754_sqrt>
 8008ea6:	4b24      	ldr	r3, [pc, #144]	; (8008f38 <sqrt+0xa0>)
 8008ea8:	4680      	mov	r8, r0
 8008eaa:	f993 a000 	ldrsb.w	sl, [r3]
 8008eae:	4689      	mov	r9, r1
 8008eb0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008eb4:	d02b      	beq.n	8008f0e <sqrt+0x76>
 8008eb6:	4622      	mov	r2, r4
 8008eb8:	462b      	mov	r3, r5
 8008eba:	4620      	mov	r0, r4
 8008ebc:	4629      	mov	r1, r5
 8008ebe:	f7f7 fd9d 	bl	80009fc <__aeabi_dcmpun>
 8008ec2:	4683      	mov	fp, r0
 8008ec4:	bb18      	cbnz	r0, 8008f0e <sqrt+0x76>
 8008ec6:	2600      	movs	r6, #0
 8008ec8:	2700      	movs	r7, #0
 8008eca:	4632      	mov	r2, r6
 8008ecc:	463b      	mov	r3, r7
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4629      	mov	r1, r5
 8008ed2:	f7f7 fd6b 	bl	80009ac <__aeabi_dcmplt>
 8008ed6:	b1d0      	cbz	r0, 8008f0e <sqrt+0x76>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	4b17      	ldr	r3, [pc, #92]	; (8008f3c <sqrt+0xa4>)
 8008ede:	f8cd b020 	str.w	fp, [sp, #32]
 8008ee2:	9301      	str	r3, [sp, #4]
 8008ee4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008ee8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008eec:	f1ba 0f00 	cmp.w	sl, #0
 8008ef0:	d112      	bne.n	8008f18 <sqrt+0x80>
 8008ef2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ef6:	4668      	mov	r0, sp
 8008ef8:	f000 f8ce 	bl	8009098 <matherr>
 8008efc:	b1b8      	cbz	r0, 8008f2e <sqrt+0x96>
 8008efe:	9b08      	ldr	r3, [sp, #32]
 8008f00:	b11b      	cbz	r3, 8008f0a <sqrt+0x72>
 8008f02:	f7ff fee9 	bl	8008cd8 <__errno>
 8008f06:	9b08      	ldr	r3, [sp, #32]
 8008f08:	6003      	str	r3, [r0, #0]
 8008f0a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4649      	mov	r1, r9
 8008f12:	b00b      	add	sp, #44	; 0x2c
 8008f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f18:	4632      	mov	r2, r6
 8008f1a:	463b      	mov	r3, r7
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	4639      	mov	r1, r7
 8008f20:	f7f7 fbfc 	bl	800071c <__aeabi_ddiv>
 8008f24:	f1ba 0f02 	cmp.w	sl, #2
 8008f28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008f2c:	d1e3      	bne.n	8008ef6 <sqrt+0x5e>
 8008f2e:	f7ff fed3 	bl	8008cd8 <__errno>
 8008f32:	2321      	movs	r3, #33	; 0x21
 8008f34:	6003      	str	r3, [r0, #0]
 8008f36:	e7e2      	b.n	8008efe <sqrt+0x66>
 8008f38:	20000350 	.word	0x20000350
 8008f3c:	0800920b 	.word	0x0800920b

08008f40 <__ieee754_sqrt>:
 8008f40:	4b54      	ldr	r3, [pc, #336]	; (8009094 <__ieee754_sqrt+0x154>)
 8008f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f46:	438b      	bics	r3, r1
 8008f48:	4606      	mov	r6, r0
 8008f4a:	460d      	mov	r5, r1
 8008f4c:	460a      	mov	r2, r1
 8008f4e:	460c      	mov	r4, r1
 8008f50:	d10f      	bne.n	8008f72 <__ieee754_sqrt+0x32>
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	f7f7 fab7 	bl	80004c8 <__aeabi_dmul>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	4630      	mov	r0, r6
 8008f60:	4629      	mov	r1, r5
 8008f62:	f7f7 f8fb 	bl	800015c <__adddf3>
 8008f66:	4606      	mov	r6, r0
 8008f68:	460d      	mov	r5, r1
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	4629      	mov	r1, r5
 8008f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f72:	2900      	cmp	r1, #0
 8008f74:	4607      	mov	r7, r0
 8008f76:	4603      	mov	r3, r0
 8008f78:	dc0e      	bgt.n	8008f98 <__ieee754_sqrt+0x58>
 8008f7a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008f7e:	ea5c 0707 	orrs.w	r7, ip, r7
 8008f82:	d0f2      	beq.n	8008f6a <__ieee754_sqrt+0x2a>
 8008f84:	b141      	cbz	r1, 8008f98 <__ieee754_sqrt+0x58>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	f7f7 f8e5 	bl	8000158 <__aeabi_dsub>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	f7f7 fbc3 	bl	800071c <__aeabi_ddiv>
 8008f96:	e7e6      	b.n	8008f66 <__ieee754_sqrt+0x26>
 8008f98:	1512      	asrs	r2, r2, #20
 8008f9a:	d074      	beq.n	8009086 <__ieee754_sqrt+0x146>
 8008f9c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008fa0:	07d5      	lsls	r5, r2, #31
 8008fa2:	f04f 0500 	mov.w	r5, #0
 8008fa6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008faa:	bf48      	it	mi
 8008fac:	0fd9      	lsrmi	r1, r3, #31
 8008fae:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008fb2:	bf44      	itt	mi
 8008fb4:	005b      	lslmi	r3, r3, #1
 8008fb6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008fba:	1051      	asrs	r1, r2, #1
 8008fbc:	0fda      	lsrs	r2, r3, #31
 8008fbe:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	2216      	movs	r2, #22
 8008fc6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	1987      	adds	r7, r0, r6
 8008fce:	42a7      	cmp	r7, r4
 8008fd0:	bfde      	ittt	le
 8008fd2:	19b8      	addle	r0, r7, r6
 8008fd4:	1be4      	suble	r4, r4, r7
 8008fd6:	19ad      	addle	r5, r5, r6
 8008fd8:	0fdf      	lsrs	r7, r3, #31
 8008fda:	3a01      	subs	r2, #1
 8008fdc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008fe0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008fe4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008fe8:	d1f0      	bne.n	8008fcc <__ieee754_sqrt+0x8c>
 8008fea:	f04f 0c20 	mov.w	ip, #32
 8008fee:	4696      	mov	lr, r2
 8008ff0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008ff4:	4284      	cmp	r4, r0
 8008ff6:	eb06 070e 	add.w	r7, r6, lr
 8008ffa:	dc02      	bgt.n	8009002 <__ieee754_sqrt+0xc2>
 8008ffc:	d112      	bne.n	8009024 <__ieee754_sqrt+0xe4>
 8008ffe:	429f      	cmp	r7, r3
 8009000:	d810      	bhi.n	8009024 <__ieee754_sqrt+0xe4>
 8009002:	2f00      	cmp	r7, #0
 8009004:	eb07 0e06 	add.w	lr, r7, r6
 8009008:	da42      	bge.n	8009090 <__ieee754_sqrt+0x150>
 800900a:	f1be 0f00 	cmp.w	lr, #0
 800900e:	db3f      	blt.n	8009090 <__ieee754_sqrt+0x150>
 8009010:	f100 0801 	add.w	r8, r0, #1
 8009014:	1a24      	subs	r4, r4, r0
 8009016:	4640      	mov	r0, r8
 8009018:	429f      	cmp	r7, r3
 800901a:	bf88      	it	hi
 800901c:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8009020:	1bdb      	subs	r3, r3, r7
 8009022:	4432      	add	r2, r6
 8009024:	0064      	lsls	r4, r4, #1
 8009026:	f1bc 0c01 	subs.w	ip, ip, #1
 800902a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800902e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8009032:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009036:	d1dd      	bne.n	8008ff4 <__ieee754_sqrt+0xb4>
 8009038:	4323      	orrs	r3, r4
 800903a:	d006      	beq.n	800904a <__ieee754_sqrt+0x10a>
 800903c:	1c54      	adds	r4, r2, #1
 800903e:	bf0b      	itete	eq
 8009040:	4662      	moveq	r2, ip
 8009042:	3201      	addne	r2, #1
 8009044:	3501      	addeq	r5, #1
 8009046:	f022 0201 	bicne.w	r2, r2, #1
 800904a:	106b      	asrs	r3, r5, #1
 800904c:	0852      	lsrs	r2, r2, #1
 800904e:	07e8      	lsls	r0, r5, #31
 8009050:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009054:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009058:	bf48      	it	mi
 800905a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800905e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8009062:	4616      	mov	r6, r2
 8009064:	e781      	b.n	8008f6a <__ieee754_sqrt+0x2a>
 8009066:	0adc      	lsrs	r4, r3, #11
 8009068:	3915      	subs	r1, #21
 800906a:	055b      	lsls	r3, r3, #21
 800906c:	2c00      	cmp	r4, #0
 800906e:	d0fa      	beq.n	8009066 <__ieee754_sqrt+0x126>
 8009070:	02e6      	lsls	r6, r4, #11
 8009072:	d50a      	bpl.n	800908a <__ieee754_sqrt+0x14a>
 8009074:	f1c2 0020 	rsb	r0, r2, #32
 8009078:	fa23 f000 	lsr.w	r0, r3, r0
 800907c:	1e55      	subs	r5, r2, #1
 800907e:	4093      	lsls	r3, r2
 8009080:	4304      	orrs	r4, r0
 8009082:	1b4a      	subs	r2, r1, r5
 8009084:	e78a      	b.n	8008f9c <__ieee754_sqrt+0x5c>
 8009086:	4611      	mov	r1, r2
 8009088:	e7f0      	b.n	800906c <__ieee754_sqrt+0x12c>
 800908a:	0064      	lsls	r4, r4, #1
 800908c:	3201      	adds	r2, #1
 800908e:	e7ef      	b.n	8009070 <__ieee754_sqrt+0x130>
 8009090:	4680      	mov	r8, r0
 8009092:	e7bf      	b.n	8009014 <__ieee754_sqrt+0xd4>
 8009094:	7ff00000 	.word	0x7ff00000

08009098 <matherr>:
 8009098:	2000      	movs	r0, #0
 800909a:	4770      	bx	lr

0800909c <_init>:
 800909c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909e:	bf00      	nop
 80090a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090a2:	bc08      	pop	{r3}
 80090a4:	469e      	mov	lr, r3
 80090a6:	4770      	bx	lr

080090a8 <_fini>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	bf00      	nop
 80090ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ae:	bc08      	pop	{r3}
 80090b0:	469e      	mov	lr, r3
 80090b2:	4770      	bx	lr
