
stanok.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e04  08008e04  00020354  2**0
                  CONTENTS
  4 .ARM          00000000  08008e04  08008e04  00020354  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e04  08008e04  00020354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e04  08008e04  00018e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e08  08008e08  00018e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000354  20000000  08008e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012ec  20000354  08009160  00020354  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001640  08009160  00021640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9c7  00000000  00000000  0002037d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ddc  00000000  00000000  0003ad44  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003eb20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001140  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d27  00000000  00000000  00040f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011ff8  00000000  00000000  00059c9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007812c  00000000  00000000  0006bc97  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e3dc3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b8  00000000  00000000  000e3e40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000354 	.word	0x20000354
 800012c:	00000000 	.word	0x00000000
 8000130:	08008c90 	.word	0x08008c90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000358 	.word	0x20000358
 800014c:	08008c90 	.word	0x08008c90

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <__aeabi_f2uiz>:
 800110c:	0042      	lsls	r2, r0, #1
 800110e:	d20e      	bcs.n	800112e <__aeabi_f2uiz+0x22>
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001114:	d30b      	bcc.n	800112e <__aeabi_f2uiz+0x22>
 8001116:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d409      	bmi.n	8001134 <__aeabi_f2uiz+0x28>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	4770      	bx	lr
 800112e:	f04f 0000 	mov.w	r0, #0
 8001132:	4770      	bx	lr
 8001134:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001138:	d101      	bne.n	800113e <__aeabi_f2uiz+0x32>
 800113a:	0242      	lsls	r2, r0, #9
 800113c:	d102      	bne.n	8001144 <__aeabi_f2uiz+0x38>
 800113e:	f04f 30ff 	mov.w	r0, #4294967295
 8001142:	4770      	bx	lr
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop

0800114c <parseCodeString>:
 */

#include "GParser.h"


void parseCodeString(char *array, char len){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	70fb      	strb	r3, [r7, #3]
	switch(array[2]){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3302      	adds	r3, #2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b47      	cmp	r3, #71	; 0x47
 8001160:	d002      	beq.n	8001168 <parseCodeString+0x1c>
 8001162:	2b4d      	cmp	r3, #77	; 0x4d
 8001164:	d00a      	beq.n	800117c <parseCodeString+0x30>
			parseMCode(array+3,len-1);
			break;
		}
		default:{

			break;
 8001166:	e013      	b.n	8001190 <parseCodeString+0x44>
			parseGCode(array+3,len-1);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1cda      	adds	r2, r3, #3
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	4619      	mov	r1, r3
 8001174:	4610      	mov	r0, r2
 8001176:	f000 f80f 	bl	8001198 <parseGCode>
			break;
 800117a:	e009      	b.n	8001190 <parseCodeString+0x44>
			parseMCode(array+3,len-1);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	1cda      	adds	r2, r3, #3
 8001180:	78fb      	ldrb	r3, [r7, #3]
 8001182:	3b01      	subs	r3, #1
 8001184:	b2db      	uxtb	r3, r3
 8001186:	4619      	mov	r1, r3
 8001188:	4610      	mov	r0, r2
 800118a:	f000 f9eb 	bl	8001564 <parseMCode>
			break;
 800118e:	bf00      	nop
		}
	}
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <parseGCode>:
//////////////////////////////////////////////////////////////////////
void parseGCode(char *array, char len){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	b096      	sub	sp, #88	; 0x58
 800119c:	af06      	add	r7, sp, #24
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	//в массиве строка в коде ASCII. первые 2 байта команда G, далее аргументы через пробелы

	struct driversComand comand;
	comand.GCode=0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	743b      	strb	r3, [r7, #16]
	comand.posX=0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
	comand.posY=0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
	comand.posZ=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
	comand.F=0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
	comand.R=0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
	comand.valid=0;
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	comand.I=0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	62bb      	str	r3, [r7, #40]	; 0x28
	comand.J=0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	char ok=0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
	float result=0;
 80011ce:	f04f 0300 	mov.w	r3, #0
 80011d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	int pos=-1;
 80011d4:	f04f 33ff 	mov.w	r3, #4294967295
 80011d8:	63bb      	str	r3, [r7, #56]	; 0x38

	//читаем номер команды
	int tmp=(int)(array[0]);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	637b      	str	r3, [r7, #52]	; 0x34
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 80011e0:	f007 fb9e 	bl	8008920 <__locale_ctype_ptr>
 80011e4:	4602      	mov	r2, r0
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	3301      	adds	r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 81b0 	beq.w	8001558 <parseGCode+0x3c0>
		comand.GCode=(char)(stringToInt(array,2,&ok)/100);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	461a      	mov	r2, r3
 80011fe:	2102      	movs	r1, #2
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f000 f9dd 	bl	80015c0 <stringToInt>
 8001206:	4603      	mov	r3, r0
 8001208:	4a89      	ldr	r2, [pc, #548]	; (8001430 <parseGCode+0x298>)
 800120a:	fb82 1203 	smull	r1, r2, r2, r3
 800120e:	1152      	asrs	r2, r2, #5
 8001210:	17db      	asrs	r3, r3, #31
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	743b      	strb	r3, [r7, #16]
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}

	//читаем координату Х
	pos = findInString(array,'X',len);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	461a      	mov	r2, r3
 800121c:	2158      	movs	r1, #88	; 0x58
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 facd 	bl	80017be <findInString>
 8001224:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d027      	beq.n	800127e <parseGCode+0xe6>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 800122e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001230:	3301      	adds	r3, #1
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	18d0      	adds	r0, r2, r3
 8001236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001238:	b2db      	uxtb	r3, r3
 800123a:	78fa      	ldrb	r2, [r7, #3]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f107 020f 	add.w	r2, r7, #15
 8001244:	4619      	mov	r1, r3
 8001246:	f000 f9bb 	bl	80015c0 <stringToInt>
 800124a:	4603      	mov	r3, r0
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fd1d 	bl	8000c8c <__aeabi_i2f>
 8001252:	4603      	mov	r3, r0
 8001254:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d010      	beq.n	800127e <parseGCode+0xe6>
			comand.posX = result/10;
 800125c:	4975      	ldr	r1, [pc, #468]	; (8001434 <parseGCode+0x29c>)
 800125e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001260:	f7ff fe1c 	bl	8000e9c <__aeabi_fdiv>
 8001264:	4603      	mov	r3, r0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff2a 	bl	80010c0 <__aeabi_f2iz>
 800126c:	4603      	mov	r3, r0
 800126e:	617b      	str	r3, [r7, #20]
			comand.valid |= (1<<0);
 8001270:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Y
	pos = findInString(array,'Y',len);
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	461a      	mov	r2, r3
 8001282:	2159      	movs	r1, #89	; 0x59
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 fa9a 	bl	80017be <findInString>
 800128a:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 800128c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d027      	beq.n	80012e4 <parseGCode+0x14c>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001296:	3301      	adds	r3, #1
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	18d0      	adds	r0, r2, r3
 800129c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	78fa      	ldrb	r2, [r7, #3]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	f107 020f 	add.w	r2, r7, #15
 80012aa:	4619      	mov	r1, r3
 80012ac:	f000 f988 	bl	80015c0 <stringToInt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcea 	bl	8000c8c <__aeabi_i2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d010      	beq.n	80012e4 <parseGCode+0x14c>
			comand.posY = result/10;
 80012c2:	495c      	ldr	r1, [pc, #368]	; (8001434 <parseGCode+0x29c>)
 80012c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c6:	f7ff fde9 	bl	8000e9c <__aeabi_fdiv>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fef7 	bl	80010c0 <__aeabi_f2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	61bb      	str	r3, [r7, #24]
			comand.valid |= (1<<1);
 80012d6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80012da:	f043 0302 	orr.w	r3, r3, #2
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем координату Z
	pos = findInString(array,'Z',len);
 80012e4:	78fb      	ldrb	r3, [r7, #3]
 80012e6:	461a      	mov	r2, r3
 80012e8:	215a      	movs	r1, #90	; 0x5a
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f000 fa67 	bl	80017be <findInString>
 80012f0:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80012f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d027      	beq.n	800134a <parseGCode+0x1b2>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80012fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012fc:	3301      	adds	r3, #1
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	18d0      	adds	r0, r2, r3
 8001302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001304:	b2db      	uxtb	r3, r3
 8001306:	78fa      	ldrb	r2, [r7, #3]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	f107 020f 	add.w	r2, r7, #15
 8001310:	4619      	mov	r1, r3
 8001312:	f000 f955 	bl	80015c0 <stringToInt>
 8001316:	4603      	mov	r3, r0
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff fcb7 	bl	8000c8c <__aeabi_i2f>
 800131e:	4603      	mov	r3, r0
 8001320:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001322:	7bfb      	ldrb	r3, [r7, #15]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d010      	beq.n	800134a <parseGCode+0x1b2>
			comand.posZ = result/10;
 8001328:	4942      	ldr	r1, [pc, #264]	; (8001434 <parseGCode+0x29c>)
 800132a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800132c:	f7ff fdb6 	bl	8000e9c <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fec4 	bl	80010c0 <__aeabi_f2iz>
 8001338:	4603      	mov	r3, r0
 800133a:	61fb      	str	r3, [r7, #28]
			comand.valid |= (1<<2);
 800133c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем F
	pos = findInString(array,'F',len);
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	461a      	mov	r2, r3
 800134e:	2146      	movs	r1, #70	; 0x46
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f000 fa34 	bl	80017be <findInString>
 8001356:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 8001358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800135a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135e:	d022      	beq.n	80013a6 <parseGCode+0x20e>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 8001360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001362:	3301      	adds	r3, #1
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	18d0      	adds	r0, r2, r3
 8001368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800136a:	b2db      	uxtb	r3, r3
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f107 020f 	add.w	r2, r7, #15
 8001376:	4619      	mov	r1, r3
 8001378:	f000 f922 	bl	80015c0 <stringToInt>
 800137c:	4603      	mov	r3, r0
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff fc84 	bl	8000c8c <__aeabi_i2f>
 8001384:	4603      	mov	r3, r0
 8001386:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00b      	beq.n	80013a6 <parseGCode+0x20e>
			comand.F = result;
 800138e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001390:	f7ff fe96 	bl	80010c0 <__aeabi_f2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	623b      	str	r3, [r7, #32]
			comand.valid |= (1<<3);
 8001398:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800139c:	f043 0308 	orr.w	r3, r3, #8
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
		}
	}

	//читаем R
	pos = findInString(array,'R',len);
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	461a      	mov	r2, r3
 80013aa:	2152      	movs	r1, #82	; 0x52
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa06 	bl	80017be <findInString>
 80013b2:	63b8      	str	r0, [r7, #56]	; 0x38
	if(pos!=-1){
 80013b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ba:	d03d      	beq.n	8001438 <parseGCode+0x2a0>
		result = stringToInt(&array[pos]+1,len-pos,&ok);
 80013bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013be:	3301      	adds	r3, #1
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	18d0      	adds	r0, r2, r3
 80013c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	78fa      	ldrb	r2, [r7, #3]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f107 020f 	add.w	r2, r7, #15
 80013d2:	4619      	mov	r1, r3
 80013d4:	f000 f8f4 	bl	80015c0 <stringToInt>
 80013d8:	4603      	mov	r3, r0
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fc56 	bl	8000c8c <__aeabi_i2f>
 80013e0:	4603      	mov	r3, r0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
		if(ok!=0){
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 80a9 	beq.w	800153e <parseGCode+0x3a6>
			if(result < 0){//радиус не может быть отрицательным
 80013ec:	f04f 0100 	mov.w	r1, #0
 80013f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013f2:	f7ff fe3d 	bl	8001070 <__aeabi_fcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <parseGCode+0x272>
				result = 0 - result;
 80013fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80013fe:	f04f 0000 	mov.w	r0, #0
 8001402:	f7ff fb8d 	bl	8000b20 <__aeabi_fsub>
 8001406:	4603      	mov	r3, r0
 8001408:	63fb      	str	r3, [r7, #60]	; 0x3c
			}
			comand.R = result/10;
 800140a:	490a      	ldr	r1, [pc, #40]	; (8001434 <parseGCode+0x29c>)
 800140c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800140e:	f7ff fd45 	bl	8000e9c <__aeabi_fdiv>
 8001412:	4603      	mov	r3, r0
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fe53 	bl	80010c0 <__aeabi_f2iz>
 800141a:	4603      	mov	r3, r0
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
			comand.valid |= (1<<4);
 800141e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800142c:	e087      	b.n	800153e <parseGCode+0x3a6>
 800142e:	bf00      	nop
 8001430:	51eb851f 	.word	0x51eb851f
 8001434:	41200000 	.word	0x41200000
		}
	}
	else{
		//читаем I
		pos = findInString(array,'I',len);
 8001438:	78fb      	ldrb	r3, [r7, #3]
 800143a:	461a      	mov	r2, r3
 800143c:	2149      	movs	r1, #73	; 0x49
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f9bd 	bl	80017be <findInString>
 8001444:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 8001446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d027      	beq.n	800149e <parseGCode+0x306>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 800144e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001450:	3301      	adds	r3, #1
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	18d0      	adds	r0, r2, r3
 8001456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001458:	b2db      	uxtb	r3, r3
 800145a:	78fa      	ldrb	r2, [r7, #3]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f107 020f 	add.w	r2, r7, #15
 8001464:	4619      	mov	r1, r3
 8001466:	f000 f8ab 	bl	80015c0 <stringToInt>
 800146a:	4603      	mov	r3, r0
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff fc0d 	bl	8000c8c <__aeabi_i2f>
 8001472:	4603      	mov	r3, r0
 8001474:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 8001476:	7bfb      	ldrb	r3, [r7, #15]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d010      	beq.n	800149e <parseGCode+0x306>
				comand.I = result/10;
 800147c:	4938      	ldr	r1, [pc, #224]	; (8001560 <parseGCode+0x3c8>)
 800147e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001480:	f7ff fd0c 	bl	8000e9c <__aeabi_fdiv>
 8001484:	4603      	mov	r3, r0
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fe1a 	bl	80010c0 <__aeabi_f2iz>
 800148c:	4603      	mov	r3, r0
 800148e:	62bb      	str	r3, [r7, #40]	; 0x28
				comand.valid |= (1<<5);
 8001490:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	b2db      	uxtb	r3, r3
 800149a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}

		//читаем J
		pos = findInString(array,'J',len);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	461a      	mov	r2, r3
 80014a2:	214a      	movs	r1, #74	; 0x4a
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f000 f98a 	bl	80017be <findInString>
 80014aa:	63b8      	str	r0, [r7, #56]	; 0x38
		if(pos!=-1){
 80014ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b2:	d027      	beq.n	8001504 <parseGCode+0x36c>
			result = stringToInt(&array[pos]+1,len-pos,&ok);
 80014b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014b6:	3301      	adds	r3, #1
 80014b8:	687a      	ldr	r2, [r7, #4]
 80014ba:	18d0      	adds	r0, r2, r3
 80014bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	78fa      	ldrb	r2, [r7, #3]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	f107 020f 	add.w	r2, r7, #15
 80014ca:	4619      	mov	r1, r3
 80014cc:	f000 f878 	bl	80015c0 <stringToInt>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff fbda 	bl	8000c8c <__aeabi_i2f>
 80014d8:	4603      	mov	r3, r0
 80014da:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(ok!=0){
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d010      	beq.n	8001504 <parseGCode+0x36c>
				comand.J = result/10;
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <parseGCode+0x3c8>)
 80014e4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80014e6:	f7ff fcd9 	bl	8000e9c <__aeabi_fdiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fde7 	bl	80010c0 <__aeabi_f2iz>
 80014f2:	4603      	mov	r3, r0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
				comand.valid |= (1<<6);
 80014f6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80014fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			}
		}
		comand.R=abs(sqrt(comand.I*comand.I + comand.J*comand.J));
 8001504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001506:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001508:	fb02 f203 	mul.w	r2, r2, r3
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001510:	fb01 f303 	mul.w	r3, r1, r3
 8001514:	4413      	add	r3, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe ff6c 	bl	80003f4 <__aeabi_i2d>
 800151c:	4603      	mov	r3, r0
 800151e:	460c      	mov	r4, r1
 8001520:	4618      	mov	r0, r3
 8001522:	4621      	mov	r1, r4
 8001524:	f007 fab2 	bl	8008a8c <sqrt>
 8001528:	4603      	mov	r3, r0
 800152a:	460c      	mov	r4, r1
 800152c:	4618      	mov	r0, r3
 800152e:	4621      	mov	r1, r4
 8001530:	f7ff fa7a 	bl	8000a28 <__aeabi_d2iz>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	bfb8      	it	lt
 800153a:	425b      	neglt	r3, r3
 800153c:	627b      	str	r3, [r7, #36]	; 0x24





	executeGComand(comand);
 800153e:	466d      	mov	r5, sp
 8001540:	f107 0420 	add.w	r4, r7, #32
 8001544:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001546:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001548:	6823      	ldr	r3, [r4, #0]
 800154a:	602b      	str	r3, [r5, #0]
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001552:	f000 f98f 	bl	8001874 <executeGComand>
 8001556:	e000      	b.n	800155a <parseGCode+0x3c2>
		return;
 8001558:	bf00      	nop
}
 800155a:	3740      	adds	r7, #64	; 0x40
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	41200000 	.word	0x41200000

08001564 <parseMCode>:
////////////////////////////////////////////////////////////////////////
void parseMCode(char *array, char len){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	70fb      	strb	r3, [r7, #3]
	struct MComand comand;
	char ok=0;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

	//читаем номер команды
	int tmp=(int)(array[0]);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	617b      	str	r3, [r7, #20]
	if(isdigit(tmp)!=0){//первый символ в массиве должен быть числом. Символ G отстрелили в вызывающей функции
 800157a:	f007 f9d1 	bl	8008920 <__locale_ctype_ptr>
 800157e:	4602      	mov	r2, r0
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	f003 0304 	and.w	r3, r3, #4
 800158c:	2b00      	cmp	r3, #0
 800158e:	d012      	beq.n	80015b6 <parseMCode+0x52>
		comand.MCode=(char)(stringToInt(array,2,&ok)/100);
 8001590:	f107 030f 	add.w	r3, r7, #15
 8001594:	461a      	mov	r2, r3
 8001596:	2102      	movs	r1, #2
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f811 	bl	80015c0 <stringToInt>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a06      	ldr	r2, [pc, #24]	; (80015bc <parseMCode+0x58>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	1152      	asrs	r2, r2, #5
 80015a8:	17db      	asrs	r3, r3, #31
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	743b      	strb	r3, [r7, #16]
		executeMComand(comand);
 80015b0:	7c38      	ldrb	r0, [r7, #16]
 80015b2:	f000 fad5 	bl	8001b60 <executeMComand>
	}
	else{//иначе ошибка. todo потом добавить обработку ошибки
		return;
	}
}
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	51eb851f 	.word	0x51eb851f

080015c0 <stringToInt>:
//////////////////////////////////////////////////////////////////////////
int stringToInt(char *string, char len, char *ok){
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b08d      	sub	sp, #52	; 0x34
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	460b      	mov	r3, r1
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	72fb      	strb	r3, [r7, #11]
	int endPos=0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int pointPos=len;
 80015d2:	7afb      	ldrb	r3, [r7, #11]
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
	int result=0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
	char minus=0;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 80015e0:	e042      	b.n	8001668 <stringToInt+0xa8>
		if(isByteDigit(string[endPos]) == 0){
 80015e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8d4 	bl	8001798 <isByteDigit>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d135      	bne.n	8001662 <stringToInt+0xa2>
			if(string[endPos] == 46){//проверяем на десятичную точку (46 - ASCII код точки)
 80015f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4413      	add	r3, r2
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b2e      	cmp	r3, #46	; 0x2e
 8001600:	d10b      	bne.n	800161a <stringToInt+0x5a>
				if(pointPos == len){//если раньше точка не встречалась
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001606:	429a      	cmp	r2, r3
 8001608:	d102      	bne.n	8001610 <stringToInt+0x50>
					pointPos=endPos;//то запоминаем позицию
 800160a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
 800160e:	e028      	b.n	8001662 <stringToInt+0xa2>
				}
				else{//если на точку уже натыкались, то в строке ошибка
					*ok=0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	701a      	strb	r2, [r3, #0]
					return 0;
 8001616:	2300      	movs	r3, #0
 8001618:	e0b1      	b.n	800177e <stringToInt+0x1be>
				}
			}
			else if(string[endPos] == 45){//если минус (45 - ASCII код минуса)
 800161a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161c:	68fa      	ldr	r2, [r7, #12]
 800161e:	4413      	add	r3, r2
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b2d      	cmp	r3, #45	; 0x2d
 8001624:	d10c      	bne.n	8001640 <stringToInt+0x80>
				if(minus != 0){//если минус уже встречался, то в строке ошибка
 8001626:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162a:	2b00      	cmp	r3, #0
 800162c:	d004      	beq.n	8001638 <stringToInt+0x78>
					*ok=0;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
					return 0;
 8001634:	2300      	movs	r3, #0
 8001636:	e0a2      	b.n	800177e <stringToInt+0x1be>
				}
				minus=1;
 8001638:	2301      	movs	r3, #1
 800163a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800163e:	e010      	b.n	8001662 <stringToInt+0xa2>
			}
			else if(string[endPos] == 32){//если пробел (32 - ASCII код пробела)
 8001640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b20      	cmp	r3, #32
 800164a:	d012      	beq.n	8001672 <stringToInt+0xb2>
				break;//то прерываемся
			}
			else if(string[endPos] == 10){//если конец строки (10 - ASCII код конца строки)
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4413      	add	r3, r2
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b0a      	cmp	r3, #10
 8001656:	d00e      	beq.n	8001676 <stringToInt+0xb6>
				break;//то прерываемся
			}
			else{//если символ не цифра и не точка, то в строке ошибка
				*ok=0;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	701a      	strb	r2, [r3, #0]
				return 0;
 800165e:	2300      	movs	r3, #0
 8001660:	e08d      	b.n	800177e <stringToInt+0x1be>
	for(; endPos!=len; endPos++){//получаем индекс окончания первого числа в строке
 8001662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001664:	3301      	adds	r3, #1
 8001666:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001668:	7afb      	ldrb	r3, [r7, #11]
 800166a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800166c:	429a      	cmp	r2, r3
 800166e:	d1b8      	bne.n	80015e2 <stringToInt+0x22>
 8001670:	e002      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001672:	bf00      	nop
 8001674:	e000      	b.n	8001678 <stringToInt+0xb8>
				break;//то прерываемся
 8001676:	bf00      	nop
			}
		}
	}
	if(pointPos==len){//точка в строке так и не встретилась,
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167c:	429a      	cmp	r2, r3
 800167e:	d101      	bne.n	8001684 <stringToInt+0xc4>
		pointPos=endPos;//то её позиция в конце числа
 8001680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001682:	62bb      	str	r3, [r7, #40]	; 0x28
	}


	if(endPos!=0){
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d069      	beq.n	800175e <stringToInt+0x19e>
		float multiplier=100;
 800168a:	4b41      	ldr	r3, [pc, #260]	; (8001790 <stringToInt+0x1d0>)
 800168c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 800168e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001690:	61bb      	str	r3, [r7, #24]
 8001692:	e025      	b.n	80016e0 <stringToInt+0x120>
			result += (string[n-1]-48)*multiplier;
 8001694:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001696:	f7ff faf9 	bl	8000c8c <__aeabi_i2f>
 800169a:	4604      	mov	r4, r0
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	3b01      	subs	r3, #1
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3b30      	subs	r3, #48	; 0x30
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff faef 	bl	8000c8c <__aeabi_i2f>
 80016ae:	4603      	mov	r3, r0
 80016b0:	69f9      	ldr	r1, [r7, #28]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff fb3e 	bl	8000d34 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4620      	mov	r0, r4
 80016be:	f7ff fa31 	bl	8000b24 <__addsf3>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fcfb 	bl	80010c0 <__aeabi_f2iz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=10;
 80016ce:	4931      	ldr	r1, [pc, #196]	; (8001794 <stringToInt+0x1d4>)
 80016d0:	69f8      	ldr	r0, [r7, #28]
 80016d2:	f7ff fb2f 	bl	8000d34 <__aeabi_fmul>
 80016d6:	4603      	mov	r3, r0
 80016d8:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos; n!=minus; n--){//двигаемся влево от позиции точки
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	3b01      	subs	r3, #1
 80016de:	61bb      	str	r3, [r7, #24]
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d1d4      	bne.n	8001694 <stringToInt+0xd4>
		}

		multiplier=10;
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <stringToInt+0x1d4>)
 80016ec:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 80016ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f0:	3301      	adds	r3, #1
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e02e      	b.n	8001754 <stringToInt+0x194>
			result += (string[n]-48)*multiplier;
 80016f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016f8:	f7ff fac8 	bl	8000c8c <__aeabi_i2f>
 80016fc:	4604      	mov	r4, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	3b30      	subs	r3, #48	; 0x30
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fabf 	bl	8000c8c <__aeabi_i2f>
 800170e:	4603      	mov	r3, r0
 8001710:	69f9      	ldr	r1, [r7, #28]
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fb0e 	bl	8000d34 <__aeabi_fmul>
 8001718:	4603      	mov	r3, r0
 800171a:	4619      	mov	r1, r3
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff fa01 	bl	8000b24 <__addsf3>
 8001722:	4603      	mov	r3, r0
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fccb 	bl	80010c0 <__aeabi_f2iz>
 800172a:	4603      	mov	r3, r0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
			multiplier*=0.1;
 800172e:	69f8      	ldr	r0, [r7, #28]
 8001730:	f7fe fe72 	bl	8000418 <__aeabi_f2d>
 8001734:	a314      	add	r3, pc, #80	; (adr r3, 8001788 <stringToInt+0x1c8>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7fe fec5 	bl	80004c8 <__aeabi_dmul>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4618      	mov	r0, r3
 8001744:	4621      	mov	r1, r4
 8001746:	f7ff f997 	bl	8000a78 <__aeabi_d2f>
 800174a:	4603      	mov	r3, r0
 800174c:	61fb      	str	r3, [r7, #28]
		for(int n=pointPos+1; n<endPos; n++){//двигаемся в право от позиции точки на 2 знака
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001758:	429a      	cmp	r2, r3
 800175a:	dbcc      	blt.n	80016f6 <stringToInt+0x136>
 800175c:	e004      	b.n	8001768 <stringToInt+0x1a8>
		}
	}
	else{
		*ok=0;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		return 0;
 8001764:	2300      	movs	r3, #0
 8001766:	e00a      	b.n	800177e <stringToInt+0x1be>
	}
	if(minus != 0){
 8001768:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800176c:	2b00      	cmp	r3, #0
 800176e:	d002      	beq.n	8001776 <stringToInt+0x1b6>
		result = 0 - result;
 8001770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001772:	425b      	negs	r3, r3
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
	}
	*ok=1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
	return result;
 800177c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800177e:	4618      	mov	r0, r3
 8001780:	3734      	adds	r7, #52	; 0x34
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	9999999a 	.word	0x9999999a
 800178c:	3fb99999 	.word	0x3fb99999
 8001790:	42c80000 	.word	0x42c80000
 8001794:	41200000 	.word	0x41200000

08001798 <isByteDigit>:
//////////////////////////////////////////////////////////////////////////////////
char isByteDigit(char byte){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	71fb      	strb	r3, [r7, #7]
	if((byte >=48) && (byte<=57)){
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b2f      	cmp	r3, #47	; 0x2f
 80017a6:	d904      	bls.n	80017b2 <isByteDigit+0x1a>
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b39      	cmp	r3, #57	; 0x39
 80017ac:	d801      	bhi.n	80017b2 <isByteDigit+0x1a>
		return 1;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <isByteDigit+0x1c>
	}
	return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <findInString>:
////////////////////////////////////////////////////////////////////////////////////
int findInString(char *string, char symbol, char len){
 80017be:	b480      	push	{r7}
 80017c0:	b085      	sub	sp, #20
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
	for(int n=0; n!=len; n++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	e00b      	b.n	80017ec <findInString+0x2e>
		if(string[n] == symbol){
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	687a      	ldr	r2, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	78fa      	ldrb	r2, [r7, #3]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d101      	bne.n	80017e6 <findInString+0x28>
			return n;
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	e008      	b.n	80017f8 <findInString+0x3a>
	for(int n=0; n!=len; n++){
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	3301      	adds	r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	78bb      	ldrb	r3, [r7, #2]
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d1ef      	bne.n	80017d4 <findInString+0x16>
		}
	}
	return -1;
 80017f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <initDrives>:


#include "drive.h"


void initDrives(){
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	positionX=0;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <initDrives+0x48>)
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
	positionY=0;
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <initDrives+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
	positionZ=0;
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <initDrives+0x50>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	stepsCounterX=0;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <initDrives+0x54>)
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
	stepsCounterY=0;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <initDrives+0x58>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
	stepsCounterZ=0;
 8001826:	4b0e      	ldr	r3, [pc, #56]	; (8001860 <initDrives+0x5c>)
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
	timerDivider=0;
 800182c:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <initDrives+0x60>)
 800182e:	2200      	movs	r2, #0
 8001830:	601a      	str	r2, [r3, #0]

	zeroPointX=0;
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <initDrives+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
	zeroPointY=0;
 8001838:	4b0c      	ldr	r3, [pc, #48]	; (800186c <initDrives+0x68>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

	lastF=0;
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <initDrives+0x6c>)
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]

}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr
 800184c:	200005ac 	.word	0x200005ac
 8001850:	200005cc 	.word	0x200005cc
 8001854:	200005a8 	.word	0x200005a8
 8001858:	200005a4 	.word	0x200005a4
 800185c:	200005c4 	.word	0x200005c4
 8001860:	200005b8 	.word	0x200005b8
 8001864:	200005bc 	.word	0x200005bc
 8001868:	200005b4 	.word	0x200005b4
 800186c:	200005f4 	.word	0x200005f4
 8001870:	200005c0 	.word	0x200005c0

08001874 <executeGComand>:
//////////////////////////////////////////////////////////////////////////////////////
void executeGComand(struct driversComand comand){
 8001874:	b084      	sub	sp, #16
 8001876:	b5b0      	push	{r4, r5, r7, lr}
 8001878:	b084      	sub	sp, #16
 800187a:	af00      	add	r7, sp, #0
 800187c:	f107 0420 	add.w	r4, r7, #32
 8001880:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	currentComand = comand;
 8001884:	4b89      	ldr	r3, [pc, #548]	; (8001aac <executeGComand+0x238>)
 8001886:	461c      	mov	r4, r3
 8001888:	f107 0520 	add.w	r5, r7, #32
 800188c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800188e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001894:	682b      	ldr	r3, [r5, #0]
 8001896:	6023      	str	r3, [r4, #0]

	if(comand.valid & (1<<3)){//если подача валидна,
 8001898:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d002      	beq.n	80018aa <executeGComand+0x36>
		lastF = comand.F;//то запоминаем её. В следующей команде подачи может не быть
 80018a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018a6:	4a82      	ldr	r2, [pc, #520]	; (8001ab0 <executeGComand+0x23c>)
 80018a8:	6013      	str	r3, [r2, #0]
	}

	//заполняем невалидные параметры текущими значениями
	if(!(comand.valid & (1<<0))){
 80018aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d102      	bne.n	80018bc <executeGComand+0x48>
		comand.posX = positionX;
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <executeGComand+0x240>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(!(comand.valid & (1<<1))){
 80018bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d102      	bne.n	80018ce <executeGComand+0x5a>
		comand.posX = positionY;
 80018c8:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <executeGComand+0x244>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(!(comand.valid & (1<<2))){
 80018ce:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d102      	bne.n	80018e0 <executeGComand+0x6c>
		comand.posX = positionZ;
 80018da:	4b78      	ldr	r3, [pc, #480]	; (8001abc <executeGComand+0x248>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if(comand.valid & (1<<5)){//если I валидна, то преобразуем ее в абсолютные координаты
 80018e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d005      	beq.n	80018f8 <executeGComand+0x84>
		comand.I = positionX + comand.I;
 80018ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018ee:	4b71      	ldr	r3, [pc, #452]	; (8001ab4 <executeGComand+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f6:	e002      	b.n	80018fe <executeGComand+0x8a>
	}
	else{
		comand.I = positionX;//иначе просто присваиваем позицию Х
 80018f8:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <executeGComand+0x240>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
	}
	if(comand.valid & (1<<6)){//если J валидна, то преобразуем ее в абсолютные координаты
 80018fe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d005      	beq.n	8001916 <executeGComand+0xa2>
		comand.J = positionY + comand.J;
 800190a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800190c:	4b6a      	ldr	r3, [pc, #424]	; (8001ab8 <executeGComand+0x244>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4413      	add	r3, r2
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001914:	e002      	b.n	800191c <executeGComand+0xa8>
	}
	else{
		comand.J = positionY;//иначе просто присваиваем позицию Y
 8001916:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <executeGComand+0x244>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	//одно прерывание таймера = 0.000 025 С
	float F=(float)lastF/100;
 800191c:	4b64      	ldr	r3, [pc, #400]	; (8001ab0 <executeGComand+0x23c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff f9b3 	bl	8000c8c <__aeabi_i2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4965      	ldr	r1, [pc, #404]	; (8001ac0 <executeGComand+0x24c>)
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff fab6 	bl	8000e9c <__aeabi_fdiv>
 8001930:	4603      	mov	r3, r0
 8001932:	60fb      	str	r3, [r7, #12]
	float periodPerStep=1/(1/F/200);
 8001934:	68f9      	ldr	r1, [r7, #12]
 8001936:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800193a:	f7ff faaf 	bl	8000e9c <__aeabi_fdiv>
 800193e:	4603      	mov	r3, r0
 8001940:	4960      	ldr	r1, [pc, #384]	; (8001ac4 <executeGComand+0x250>)
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff faaa 	bl	8000e9c <__aeabi_fdiv>
 8001948:	4603      	mov	r3, r0
 800194a:	4619      	mov	r1, r3
 800194c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001950:	f7ff faa4 	bl	8000e9c <__aeabi_fdiv>
 8001954:	4603      	mov	r3, r0
 8001956:	60bb      	str	r3, [r7, #8]
	timerDivider=40000/periodPerStep;
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	485b      	ldr	r0, [pc, #364]	; (8001ac8 <executeGComand+0x254>)
 800195c:	f7ff fa9e 	bl	8000e9c <__aeabi_fdiv>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fbd2 	bl	800110c <__aeabi_f2uiz>
 8001968:	4602      	mov	r2, r0
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <executeGComand+0x258>)
 800196c:	601a      	str	r2, [r3, #0]

	switch(comand.GCode){
 800196e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d05d      	beq.n	8001a32 <executeGComand+0x1be>
 8001976:	2b02      	cmp	r3, #2
 8001978:	dc04      	bgt.n	8001984 <executeGComand+0x110>
 800197a:	2b00      	cmp	r3, #0
 800197c:	d007      	beq.n	800198e <executeGComand+0x11a>
 800197e:	2b01      	cmp	r3, #1
 8001980:	d02d      	beq.n	80019de <executeGComand+0x16a>
			positionY=0;
			positionZ=0;
			break;
		}
	}
}
 8001982:	e08b      	b.n	8001a9c <executeGComand+0x228>
	switch(comand.GCode){
 8001984:	2b03      	cmp	r3, #3
 8001986:	d069      	beq.n	8001a5c <executeGComand+0x1e8>
 8001988:	2b5c      	cmp	r3, #92	; 0x5c
 800198a:	d07c      	beq.n	8001a86 <executeGComand+0x212>
}
 800198c:	e086      	b.n	8001a9c <executeGComand+0x228>
			if(comand.valid & (1<<1)){
 800198e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d005      	beq.n	80019a6 <executeGComand+0x132>
				stepsCounterX = comand.posX - positionX;
 800199a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199c:	4b45      	ldr	r3, [pc, #276]	; (8001ab4 <executeGComand+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	4a4b      	ldr	r2, [pc, #300]	; (8001ad0 <executeGComand+0x25c>)
 80019a4:	6013      	str	r3, [r2, #0]
			if(comand.valid & (1<<2)){
 80019a6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d005      	beq.n	80019be <executeGComand+0x14a>
				stepsCounterY = comand.posY - positionY;
 80019b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b4:	4b40      	ldr	r3, [pc, #256]	; (8001ab8 <executeGComand+0x244>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <executeGComand+0x260>)
 80019bc:	6013      	str	r3, [r2, #0]
			if(comand.valid & (1<<3)){
 80019be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d005      	beq.n	80019d6 <executeGComand+0x162>
				stepsCounterZ = comand.posZ - positionZ;
 80019ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019cc:	4b3b      	ldr	r3, [pc, #236]	; (8001abc <executeGComand+0x248>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	4a41      	ldr	r2, [pc, #260]	; (8001ad8 <executeGComand+0x264>)
 80019d4:	6013      	str	r3, [r2, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 80019d6:	4841      	ldr	r0, [pc, #260]	; (8001adc <executeGComand+0x268>)
 80019d8:	f003 fa96 	bl	8004f08 <HAL_TIM_Base_Start_IT>
			break;
 80019dc:	e05e      	b.n	8001a9c <executeGComand+0x228>
			if(comand.valid & (1<<2)){//если Z валидна,
 80019de:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d00c      	beq.n	8001a04 <executeGComand+0x190>
				int difZ=positionZ-comand.posZ;//то задаем для нее количество шагов
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <executeGComand+0x248>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	607b      	str	r3, [r7, #4]
				stepsCounterZ=difZ*10;
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b35      	ldr	r3, [pc, #212]	; (8001ad8 <executeGComand+0x264>)
 8001a02:	601a      	str	r2, [r3, #0]
			if((comand.valid & (1<<0)) || (comand.valid & (1<<1))){//если х или у валидны
 8001a04:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d105      	bne.n	8001a1c <executeGComand+0x1a8>
 8001a10:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d03e      	beq.n	8001a9a <executeGComand+0x226>
					zeroPointX = positionX;
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <executeGComand+0x240>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2f      	ldr	r2, [pc, #188]	; (8001ae0 <executeGComand+0x26c>)
 8001a22:	6013      	str	r3, [r2, #0]
					zeroPointY = positionY;
 8001a24:	4b24      	ldr	r3, [pc, #144]	; (8001ab8 <executeGComand+0x244>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2e      	ldr	r2, [pc, #184]	; (8001ae4 <executeGComand+0x270>)
 8001a2a:	6013      	str	r3, [r2, #0]
					calcInterpolation();//считаем интерполяцию
 8001a2c:	f000 f860 	bl	8001af0 <calcInterpolation>
			break;
 8001a30:	e033      	b.n	8001a9a <executeGComand+0x226>
			if(comand.valid & (1<<4)){//если строим через радиус
 8001a32:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a36:	f003 0310 	and.w	r3, r3, #16
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10b      	bne.n	8001a56 <executeGComand+0x1e2>
				vPosX = positionX - comand.I;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <executeGComand+0x240>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <executeGComand+0x274>)
 8001a48:	6013      	str	r3, [r2, #0]
				vPosY = positionY - comand.J;
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <executeGComand+0x244>)
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	4a26      	ldr	r2, [pc, #152]	; (8001aec <executeGComand+0x278>)
 8001a54:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001a56:	f000 f84b 	bl	8001af0 <calcInterpolation>
			break;
 8001a5a:	e01f      	b.n	8001a9c <executeGComand+0x228>
			if(comand.valid & (1<<4)){//если строим через радиус
 8001a5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001a60:	f003 0310 	and.w	r3, r3, #16
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d10b      	bne.n	8001a80 <executeGComand+0x20c>
				vPosX = positionX - comand.I;
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <executeGComand+0x240>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <executeGComand+0x274>)
 8001a72:	6013      	str	r3, [r2, #0]
				vPosY = positionY - comand.J;
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <executeGComand+0x244>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	; (8001aec <executeGComand+0x278>)
 8001a7e:	6013      	str	r3, [r2, #0]
			calcInterpolation();
 8001a80:	f000 f836 	bl	8001af0 <calcInterpolation>
			break;
 8001a84:	e00a      	b.n	8001a9c <executeGComand+0x228>
			positionX=0;
 8001a86:	4b0b      	ldr	r3, [pc, #44]	; (8001ab4 <executeGComand+0x240>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	601a      	str	r2, [r3, #0]
			positionY=0;
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <executeGComand+0x244>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
			positionZ=0;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <executeGComand+0x248>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
			break;
 8001a98:	e000      	b.n	8001a9c <executeGComand+0x228>
			break;
 8001a9a:	bf00      	nop
}
 8001a9c:	bf00      	nop
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001aa6:	b004      	add	sp, #16
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	200005d0 	.word	0x200005d0
 8001ab0:	200005c0 	.word	0x200005c0
 8001ab4:	200005ac 	.word	0x200005ac
 8001ab8:	200005cc 	.word	0x200005cc
 8001abc:	200005a8 	.word	0x200005a8
 8001ac0:	42c80000 	.word	0x42c80000
 8001ac4:	43480000 	.word	0x43480000
 8001ac8:	471c4000 	.word	0x471c4000
 8001acc:	200005bc 	.word	0x200005bc
 8001ad0:	200005a4 	.word	0x200005a4
 8001ad4:	200005c4 	.word	0x200005c4
 8001ad8:	200005b8 	.word	0x200005b8
 8001adc:	200006f8 	.word	0x200006f8
 8001ae0:	200005b4 	.word	0x200005b4
 8001ae4:	200005f4 	.word	0x200005f4
 8001ae8:	200005b0 	.word	0x200005b0
 8001aec:	200005c8 	.word	0x200005c8

08001af0 <calcInterpolation>:
////////////////////////////////////////////////////////////////////////////////////////
void calcInterpolation(){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0

	if((positionX == currentComand.posX) && (positionY == currentComand.posY)){//если пришли в заданную позицию, то ничего не делаем
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <calcInterpolation+0x58>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <calcInterpolation+0x5c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10c      	bne.n	8001b1a <calcInterpolation+0x2a>
 8001b00:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <calcInterpolation+0x58>)
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <calcInterpolation+0x60>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d106      	bne.n	8001b1a <calcInterpolation+0x2a>
		vPosX=0;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <calcInterpolation+0x64>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
		vPosY=0;
 8001b12:	4b11      	ldr	r3, [pc, #68]	; (8001b58 <calcInterpolation+0x68>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
		return;
 8001b18:	e014      	b.n	8001b44 <calcInterpolation+0x54>
	}

	switch(currentComand.GCode){
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <calcInterpolation+0x58>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d007      	beq.n	8001b32 <calcInterpolation+0x42>
 8001b22:	2b03      	cmp	r3, #3
 8001b24:	d008      	beq.n	8001b38 <calcInterpolation+0x48>
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d000      	beq.n	8001b2c <calcInterpolation+0x3c>
		case(3):{//круговая интерполяция против часосвой стрелки
			ccwCicleInterpolation();
			break;
		}
		default:{
			return;//todo потом сделать обработку ошибки
 8001b2a:	e00b      	b.n	8001b44 <calcInterpolation+0x54>
			lineInterpolacion();
 8001b2c:	f000 f86e 	bl	8001c0c <lineInterpolacion>
			break;
 8001b30:	e005      	b.n	8001b3e <calcInterpolation+0x4e>
			cwCicleInterpolation();
 8001b32:	f000 f927 	bl	8001d84 <cwCicleInterpolation>
			break;
 8001b36:	e002      	b.n	8001b3e <calcInterpolation+0x4e>
			ccwCicleInterpolation();
 8001b38:	f000 fa06 	bl	8001f48 <ccwCicleInterpolation>
			break;
 8001b3c:	bf00      	nop
		}
	}
	HAL_TIM_Base_Start_IT(&htim2);//запускаем таймер
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <calcInterpolation+0x6c>)
 8001b40:	f003 f9e2 	bl	8004f08 <HAL_TIM_Base_Start_IT>
}
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200005d0 	.word	0x200005d0
 8001b4c:	200005ac 	.word	0x200005ac
 8001b50:	200005cc 	.word	0x200005cc
 8001b54:	200005b0 	.word	0x200005b0
 8001b58:	200005c8 	.word	0x200005c8
 8001b5c:	200006f8 	.word	0x200006f8

08001b60 <executeMComand>:
////////////////////////////////////////////////////////////////////////////////////
void executeMComand(struct MComand comand){
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	7138      	strb	r0, [r7, #4]
	switch(comand.MCode){
 8001b68:	793b      	ldrb	r3, [r7, #4]
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d000      	beq.n	8001b70 <executeMComand+0x10>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
			break;
		}
	}
}
 8001b6e:	e044      	b.n	8001bfa <executeMComand+0x9a>
			HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b76:	4823      	ldr	r0, [pc, #140]	; (8001c04 <executeMComand+0xa4>)
 8001b78:	f001 fd88 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b82:	4820      	ldr	r0, [pc, #128]	; (8001c04 <executeMComand+0xa4>)
 8001b84:	f001 fd82 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b8e:	481d      	ldr	r0, [pc, #116]	; (8001c04 <executeMComand+0xa4>)
 8001b90:	f001 fd7c 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b9a:	481a      	ldr	r0, [pc, #104]	; (8001c04 <executeMComand+0xa4>)
 8001b9c:	f001 fd76 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	2140      	movs	r1, #64	; 0x40
 8001ba4:	4817      	ldr	r0, [pc, #92]	; (8001c04 <executeMComand+0xa4>)
 8001ba6:	f001 fd71 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8001baa:	2200      	movs	r2, #0
 8001bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bb0:	4815      	ldr	r0, [pc, #84]	; (8001c08 <executeMComand+0xa8>)
 8001bb2:	f001 fd6b 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4812      	ldr	r0, [pc, #72]	; (8001c04 <executeMComand+0xa4>)
 8001bbc:	f001 fd66 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2108      	movs	r1, #8
 8001bc4:	480f      	ldr	r0, [pc, #60]	; (8001c04 <executeMComand+0xa4>)
 8001bc6:	f001 fd61 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bd0:	480d      	ldr	r0, [pc, #52]	; (8001c08 <executeMComand+0xa8>)
 8001bd2:	f001 fd5b 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bdc:	480a      	ldr	r0, [pc, #40]	; (8001c08 <executeMComand+0xa8>)
 8001bde:	f001 fd55 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2180      	movs	r1, #128	; 0x80
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <executeMComand+0xa4>)
 8001be8:	f001 fd50 	bl	800368c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8001bec:	2200      	movs	r2, #0
 8001bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf2:	4805      	ldr	r0, [pc, #20]	; (8001c08 <executeMComand+0xa8>)
 8001bf4:	f001 fd4a 	bl	800368c <HAL_GPIO_WritePin>
			break;
 8001bf8:	bf00      	nop
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40010c00 	.word	0x40010c00
 8001c08:	40010800 	.word	0x40010800

08001c0c <lineInterpolacion>:
////////////////////////////////////////////////////////////////////////////////////
void lineInterpolacion(){
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
	int offsetX = zeroPointX - positionX;
 8001c12:	4b55      	ldr	r3, [pc, #340]	; (8001d68 <lineInterpolacion+0x15c>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	4b55      	ldr	r3, [pc, #340]	; (8001d6c <lineInterpolacion+0x160>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
	int offsetY = zeroPointY - positionY;
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <lineInterpolacion+0x164>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b54      	ldr	r3, [pc, #336]	; (8001d74 <lineInterpolacion+0x168>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	613b      	str	r3, [r7, #16]
	int vectorX = currentComand.posX - positionX;
 8001c2a:	4b53      	ldr	r3, [pc, #332]	; (8001d78 <lineInterpolacion+0x16c>)
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4b4f      	ldr	r3, [pc, #316]	; (8001d6c <lineInterpolacion+0x160>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	60fb      	str	r3, [r7, #12]
	int vectorY = currentComand.posY - positionY;
 8001c36:	4b50      	ldr	r3, [pc, #320]	; (8001d78 <lineInterpolacion+0x16c>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	4b4e      	ldr	r3, [pc, #312]	; (8001d74 <lineInterpolacion+0x168>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	60bb      	str	r3, [r7, #8]

	int F = (abs(offsetY) * abs(vectorX) - (abs(offsetX) * abs(vectorY)));//оценочная функция
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bfb8      	it	lt
 8001c48:	425b      	neglt	r3, r3
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	2a00      	cmp	r2, #0
 8001c4e:	bfb8      	it	lt
 8001c50:	4252      	neglt	r2, r2
 8001c52:	fb02 f203 	mul.w	r2, r2, r3
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfb8      	it	lt
 8001c5c:	425b      	neglt	r3, r3
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	2900      	cmp	r1, #0
 8001c62:	bfb8      	it	lt
 8001c64:	4249      	neglt	r1, r1
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	607b      	str	r3, [r7, #4]
	if(F == 0){
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d124      	bne.n	8001cbe <lineInterpolacion+0xb2>
		if(vectorX > 0){
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	dd03      	ble.n	8001c82 <lineInterpolacion+0x76>
			stepsCounterX = 1;
 8001c7a:	4b40      	ldr	r3, [pc, #256]	; (8001d7c <lineInterpolacion+0x170>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	e00a      	b.n	8001c98 <lineInterpolacion+0x8c>
		}
		else if(vectorX < 0){
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	da04      	bge.n	8001c92 <lineInterpolacion+0x86>
			stepsCounterX = -1;
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <lineInterpolacion+0x170>)
 8001c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	e002      	b.n	8001c98 <lineInterpolacion+0x8c>
		}
		else{
			stepsCounterX = 0;
 8001c92:	4b3a      	ldr	r3, [pc, #232]	; (8001d7c <lineInterpolacion+0x170>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
		}
		if(vectorY > 0){
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	dd03      	ble.n	8001ca6 <lineInterpolacion+0x9a>
			stepsCounterY = 1;
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <lineInterpolacion+0x174>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]
			else{
				stepsCounterX = 0;
			}
		}
	}
}
 8001ca4:	e05a      	b.n	8001d5c <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	da04      	bge.n	8001cb6 <lineInterpolacion+0xaa>
			stepsCounterY = -1;
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <lineInterpolacion+0x174>)
 8001cae:	f04f 32ff 	mov.w	r2, #4294967295
 8001cb2:	601a      	str	r2, [r3, #0]
}
 8001cb4:	e052      	b.n	8001d5c <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001cb6:	4b32      	ldr	r3, [pc, #200]	; (8001d80 <lineInterpolacion+0x174>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
}
 8001cbc:	e04e      	b.n	8001d5c <lineInterpolacion+0x150>
	else if(F > 0){
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dd24      	ble.n	8001d0e <lineInterpolacion+0x102>
		if(vectorX > 0){
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	dd03      	ble.n	8001cd2 <lineInterpolacion+0xc6>
			stepsCounterX = 1;
 8001cca:	4b2c      	ldr	r3, [pc, #176]	; (8001d7c <lineInterpolacion+0x170>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	601a      	str	r2, [r3, #0]
}
 8001cd0:	e044      	b.n	8001d5c <lineInterpolacion+0x150>
		else if(vectorX < 0){
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	da04      	bge.n	8001ce2 <lineInterpolacion+0xd6>
			stepsCounterX = -1;
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <lineInterpolacion+0x170>)
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	601a      	str	r2, [r3, #0]
}
 8001ce0:	e03c      	b.n	8001d5c <lineInterpolacion+0x150>
			stepsCounterX = 0;
 8001ce2:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <lineInterpolacion+0x170>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
			if(vectorY > 0){
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	dd03      	ble.n	8001cf6 <lineInterpolacion+0xea>
				stepsCounterY = 1;
 8001cee:	4b24      	ldr	r3, [pc, #144]	; (8001d80 <lineInterpolacion+0x174>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
}
 8001cf4:	e032      	b.n	8001d5c <lineInterpolacion+0x150>
			else if(vectorY < 0){
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	da04      	bge.n	8001d06 <lineInterpolacion+0xfa>
				stepsCounterY = -1;
 8001cfc:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <lineInterpolacion+0x174>)
 8001cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8001d02:	601a      	str	r2, [r3, #0]
}
 8001d04:	e02a      	b.n	8001d5c <lineInterpolacion+0x150>
				stepsCounterY = 0;
 8001d06:	4b1e      	ldr	r3, [pc, #120]	; (8001d80 <lineInterpolacion+0x174>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
}
 8001d0c:	e026      	b.n	8001d5c <lineInterpolacion+0x150>
	else if(F < 0){
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da23      	bge.n	8001d5c <lineInterpolacion+0x150>
		if(vectorY > 0){
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dd03      	ble.n	8001d22 <lineInterpolacion+0x116>
			stepsCounterY = 1;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <lineInterpolacion+0x174>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
}
 8001d20:	e01c      	b.n	8001d5c <lineInterpolacion+0x150>
		else if(vectorY < 0){
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	da04      	bge.n	8001d32 <lineInterpolacion+0x126>
			stepsCounterY = -1;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <lineInterpolacion+0x174>)
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8001d2e:	601a      	str	r2, [r3, #0]
}
 8001d30:	e014      	b.n	8001d5c <lineInterpolacion+0x150>
			stepsCounterY = 0;
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <lineInterpolacion+0x174>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
			if(vectorX > 0){
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	dd03      	ble.n	8001d46 <lineInterpolacion+0x13a>
				stepsCounterX = 1;
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <lineInterpolacion+0x170>)
 8001d40:	2201      	movs	r2, #1
 8001d42:	601a      	str	r2, [r3, #0]
}
 8001d44:	e00a      	b.n	8001d5c <lineInterpolacion+0x150>
			else if(vectorX < 0){
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	da04      	bge.n	8001d56 <lineInterpolacion+0x14a>
				stepsCounterX = -1;
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <lineInterpolacion+0x170>)
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	601a      	str	r2, [r3, #0]
}
 8001d54:	e002      	b.n	8001d5c <lineInterpolacion+0x150>
				stepsCounterX = 0;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <lineInterpolacion+0x170>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
}
 8001d5c:	bf00      	nop
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200005b4 	.word	0x200005b4
 8001d6c:	200005ac 	.word	0x200005ac
 8001d70:	200005f4 	.word	0x200005f4
 8001d74:	200005cc 	.word	0x200005cc
 8001d78:	200005d0 	.word	0x200005d0
 8001d7c:	200005a4 	.word	0x200005a4
 8001d80:	200005c4 	.word	0x200005c4

08001d84 <cwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void cwCicleInterpolation(){
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0

	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001d8a:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a69      	ldr	r2, [pc, #420]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fb02 f203 	mul.w	r2, r2, r3
 8001d96:	4b68      	ldr	r3, [pc, #416]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4967      	ldr	r1, [pc, #412]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001d9c:	6809      	ldr	r1, [r1, #0]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	441a      	add	r2, r3
 8001da4:	4b65      	ldr	r3, [pc, #404]	; (8001f3c <cwCicleInterpolation+0x1b8>)
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	4964      	ldr	r1, [pc, #400]	; (8001f3c <cwCicleInterpolation+0x1b8>)
 8001daa:	6949      	ldr	r1, [r1, #20]
 8001dac:	fb01 f303 	mul.w	r3, r1, r3
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	607b      	str	r3, [r7, #4]
																		//контролируется на этапе парсинга
	if(F >= 0){//если на окружности или за ней
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db53      	blt.n	8001e62 <cwCicleInterpolation+0xde>

		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001dba:	4b5e      	ldr	r3, [pc, #376]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	dd08      	ble.n	8001dd4 <cwCicleInterpolation+0x50>
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	dd04      	ble.n	8001dd4 <cwCicleInterpolation+0x50>
			stepsCounterY = -1;
 8001dca:	4b5d      	ldr	r3, [pc, #372]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	e09c      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001dd4:	4b57      	ldr	r3, [pc, #348]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	dd08      	ble.n	8001dee <cwCicleInterpolation+0x6a>
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	da04      	bge.n	8001dee <cwCicleInterpolation+0x6a>
			stepsCounterX = -1;
 8001de4:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001de6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	e08f      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001dee:	4b51      	ldr	r3, [pc, #324]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	da07      	bge.n	8001e06 <cwCicleInterpolation+0x82>
 8001df6:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da03      	bge.n	8001e06 <cwCicleInterpolation+0x82>
			stepsCounterY = 1;
 8001dfe:	4b50      	ldr	r3, [pc, #320]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	e083      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001e06:	4b4b      	ldr	r3, [pc, #300]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	da07      	bge.n	8001e1e <cwCicleInterpolation+0x9a>
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	dd03      	ble.n	8001e1e <cwCicleInterpolation+0x9a>
			stepsCounterX = 1;
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e077      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001e1e:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	dd04      	ble.n	8001e30 <cwCicleInterpolation+0xac>
				stepsCounterY = -1;
 8001e26:	4b46      	ldr	r3, [pc, #280]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001e28:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	e06e      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 8001e30:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da03      	bge.n	8001e40 <cwCicleInterpolation+0xbc>
				stepsCounterY = 1;
 8001e38:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	e066      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 8001e40:	4b3c      	ldr	r3, [pc, #240]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	dd04      	ble.n	8001e52 <cwCicleInterpolation+0xce>
				stepsCounterX = -1;
 8001e48:	4b3e      	ldr	r3, [pc, #248]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	e05d      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8001e52:	4b38      	ldr	r3, [pc, #224]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	da59      	bge.n	8001f0e <cwCicleInterpolation+0x18a>
				stepsCounterX = 1;
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	e055      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
		}
	}
	else if(F < 0){//если внутри окружности
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	da52      	bge.n	8001f0e <cwCicleInterpolation+0x18a>
		if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001e68:	4b32      	ldr	r3, [pc, #200]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	dd07      	ble.n	8001e80 <cwCicleInterpolation+0xfc>
 8001e70:	4b31      	ldr	r3, [pc, #196]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	dd03      	ble.n	8001e80 <cwCicleInterpolation+0xfc>
			stepsCounterX = 1;
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	e046      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001e80:	4b2c      	ldr	r3, [pc, #176]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	dd08      	ble.n	8001e9a <cwCicleInterpolation+0x116>
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	da04      	bge.n	8001e9a <cwCicleInterpolation+0x116>
			stepsCounterY = -1;
 8001e90:	4b2b      	ldr	r3, [pc, #172]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001e92:	f04f 32ff 	mov.w	r2, #4294967295
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	e039      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	da08      	bge.n	8001eb4 <cwCicleInterpolation+0x130>
 8001ea2:	4b25      	ldr	r3, [pc, #148]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	da04      	bge.n	8001eb4 <cwCicleInterpolation+0x130>
			stepsCounterX = -1;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	e02c      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	da07      	bge.n	8001ecc <cwCicleInterpolation+0x148>
 8001ebc:	4b1e      	ldr	r3, [pc, #120]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd03      	ble.n	8001ecc <cwCicleInterpolation+0x148>
			stepsCounterY = 1;
 8001ec4:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	e020      	b.n	8001f0e <cwCicleInterpolation+0x18a>
		}
		else{
			if(vPosY > 0){
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dd03      	ble.n	8001edc <cwCicleInterpolation+0x158>
				stepsCounterX = 1;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	e018      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosY < 0){
 8001edc:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	da04      	bge.n	8001eee <cwCicleInterpolation+0x16a>
				stepsCounterX = -1;
 8001ee4:	4b17      	ldr	r3, [pc, #92]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e00f      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX > 0){
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	dd04      	ble.n	8001f00 <cwCicleInterpolation+0x17c>
				stepsCounterY = -1;
 8001ef6:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	601a      	str	r2, [r3, #0]
 8001efe:	e006      	b.n	8001f0e <cwCicleInterpolation+0x18a>
			}
			else if(vPosX < 0){
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	da02      	bge.n	8001f0e <cwCicleInterpolation+0x18a>
				stepsCounterY = 1;
 8001f08:	4b0d      	ldr	r3, [pc, #52]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
			}
		}
	}

	vPosX+=stepsCounterX;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <cwCicleInterpolation+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4413      	add	r3, r2
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <cwCicleInterpolation+0x1b0>)
 8001f1a:	6013      	str	r3, [r2, #0]
	vPosY+=stepsCounterY;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <cwCicleInterpolation+0x1bc>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <cwCicleInterpolation+0x1b4>)
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	200005b0 	.word	0x200005b0
 8001f38:	200005c8 	.word	0x200005c8
 8001f3c:	200005d0 	.word	0x200005d0
 8001f40:	200005c4 	.word	0x200005c4
 8001f44:	200005a4 	.word	0x200005a4

08001f48 <ccwCicleInterpolation>:
///////////////////////////////////////////////////////////////////////////////////////////////////
void ccwCicleInterpolation(){
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
	int F = ((vPosX * vPosX) + (vPosY * vPosY)) - (currentComand.R * currentComand.R);//оценочная функция (радиус всегда положительный)
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a69      	ldr	r2, [pc, #420]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001f54:	6812      	ldr	r2, [r2, #0]
 8001f56:	fb02 f203 	mul.w	r2, r2, r3
 8001f5a:	4b68      	ldr	r3, [pc, #416]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4967      	ldr	r1, [pc, #412]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001f60:	6809      	ldr	r1, [r1, #0]
 8001f62:	fb01 f303 	mul.w	r3, r1, r3
 8001f66:	441a      	add	r2, r3
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <ccwCicleInterpolation+0x1b8>)
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	4964      	ldr	r1, [pc, #400]	; (8002100 <ccwCicleInterpolation+0x1b8>)
 8001f6e:	6949      	ldr	r1, [r1, #20]
 8001f70:	fb01 f303 	mul.w	r3, r1, r3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	607b      	str	r3, [r7, #4]
																			//контролируется на этапе парсинга
		if(F >= 0){//если на окружности или за ней
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	db53      	blt.n	8002026 <ccwCicleInterpolation+0xde>

			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 8001f7e:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	dd08      	ble.n	8001f98 <ccwCicleInterpolation+0x50>
 8001f86:	4b5d      	ldr	r3, [pc, #372]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	dd04      	ble.n	8001f98 <ccwCicleInterpolation+0x50>
				stepsCounterX = -1;
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 8001f90:	f04f 32ff 	mov.w	r2, #4294967295
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e09c      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8001f98:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	dd07      	ble.n	8001fb0 <ccwCicleInterpolation+0x68>
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	da03      	bge.n	8001fb0 <ccwCicleInterpolation+0x68>
				stepsCounterY = 1;
 8001fa8:	4b57      	ldr	r3, [pc, #348]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	e090      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 8001fb0:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	da07      	bge.n	8001fc8 <ccwCicleInterpolation+0x80>
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da03      	bge.n	8001fc8 <ccwCicleInterpolation+0x80>
				stepsCounterX = 1;
 8001fc0:	4b50      	ldr	r3, [pc, #320]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	e084      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	da08      	bge.n	8001fe2 <ccwCicleInterpolation+0x9a>
 8001fd0:	4b4a      	ldr	r3, [pc, #296]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	dd04      	ble.n	8001fe2 <ccwCicleInterpolation+0x9a>
				stepsCounterY = -1;
 8001fd8:	4b4b      	ldr	r3, [pc, #300]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 8001fda:	f04f 32ff 	mov.w	r2, #4294967295
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e077      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else{
				if(vPosY > 0){
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	dd04      	ble.n	8001ff4 <ccwCicleInterpolation+0xac>
					stepsCounterY = -1;
 8001fea:	4b47      	ldr	r3, [pc, #284]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	e06e      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosY < 0){
 8001ff4:	4b41      	ldr	r3, [pc, #260]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	da03      	bge.n	8002004 <ccwCicleInterpolation+0xbc>
					stepsCounterY = 1;
 8001ffc:	4b42      	ldr	r3, [pc, #264]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e066      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX > 0){
 8002004:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	dd04      	ble.n	8002016 <ccwCicleInterpolation+0xce>
					stepsCounterX = -1;
 800200c:	4b3d      	ldr	r3, [pc, #244]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 800200e:	f04f 32ff 	mov.w	r2, #4294967295
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	e05d      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX < 0){
 8002016:	4b38      	ldr	r3, [pc, #224]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da59      	bge.n	80020d2 <ccwCicleInterpolation+0x18a>
					stepsCounterX = 1;
 800201e:	4b39      	ldr	r3, [pc, #228]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 8002020:	2201      	movs	r2, #1
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	e055      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
			}
		}
		else if(F < 0){//если внутри окружности
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da52      	bge.n	80020d2 <ccwCicleInterpolation+0x18a>
			if((vPosX > 0) && (vPosY > 0)){//1 квадрант
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	dd07      	ble.n	8002044 <ccwCicleInterpolation+0xfc>
 8002034:	4b31      	ldr	r3, [pc, #196]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	dd03      	ble.n	8002044 <ccwCicleInterpolation+0xfc>
				stepsCounterY = 1;
 800203c:	4b32      	ldr	r3, [pc, #200]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 800203e:	2201      	movs	r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e046      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX > 0) && (vPosY < 0)){//2 квадрант
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	dd07      	ble.n	800205c <ccwCicleInterpolation+0x114>
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b00      	cmp	r3, #0
 8002052:	da03      	bge.n	800205c <ccwCicleInterpolation+0x114>
				stepsCounterX = 1;
 8002054:	4b2b      	ldr	r3, [pc, #172]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 8002056:	2201      	movs	r2, #1
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e03a      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY < 0)){//3 квадрант
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	da08      	bge.n	8002076 <ccwCicleInterpolation+0x12e>
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	da04      	bge.n	8002076 <ccwCicleInterpolation+0x12e>
				stepsCounterY = -1;
 800206c:	4b26      	ldr	r3, [pc, #152]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 800206e:	f04f 32ff 	mov.w	r2, #4294967295
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	e02d      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else if((vPosX < 0) && (vPosY > 0)){//4 квадрант
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	da08      	bge.n	8002090 <ccwCicleInterpolation+0x148>
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2b00      	cmp	r3, #0
 8002084:	dd04      	ble.n	8002090 <ccwCicleInterpolation+0x148>
				stepsCounterX = -1;
 8002086:	4b1f      	ldr	r3, [pc, #124]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e020      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
			}
			else{
				if(vPosY > 0){
 8002090:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	dd04      	ble.n	80020a2 <ccwCicleInterpolation+0x15a>
					stepsCounterX = -1;
 8002098:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 800209a:	f04f 32ff 	mov.w	r2, #4294967295
 800209e:	601a      	str	r2, [r3, #0]
 80020a0:	e017      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosY < 0){
 80020a2:	4b16      	ldr	r3, [pc, #88]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	da03      	bge.n	80020b2 <ccwCicleInterpolation+0x16a>
					stepsCounterX = 1;
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	e00f      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX > 0){
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	dd03      	ble.n	80020c2 <ccwCicleInterpolation+0x17a>
					stepsCounterY = 1;
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 80020bc:	2201      	movs	r2, #1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e007      	b.n	80020d2 <ccwCicleInterpolation+0x18a>
				}
				else if(vPosX < 0){
 80020c2:	4b0d      	ldr	r3, [pc, #52]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da03      	bge.n	80020d2 <ccwCicleInterpolation+0x18a>
					stepsCounterY = -1;
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	601a      	str	r2, [r3, #0]
				}
			}
		}

		vPosX+=stepsCounterX;
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <ccwCicleInterpolation+0x1bc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <ccwCicleInterpolation+0x1b0>)
 80020de:	6013      	str	r3, [r2, #0]
		vPosY+=stepsCounterY;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <ccwCicleInterpolation+0x1c0>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <ccwCicleInterpolation+0x1b4>)
 80020ec:	6013      	str	r3, [r2, #0]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	200005b0 	.word	0x200005b0
 80020fc:	200005c8 	.word	0x200005c8
 8002100:	200005d0 	.word	0x200005d0
 8002104:	200005a4 	.word	0x200005a4
 8002108:	200005c4 	.word	0x200005c4

0800210c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002110:	f000 ffd6 	bl	80030c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002114:	f000 f81c 	bl	8002150 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002118:	f000 f9a4 	bl	8002464 <MX_GPIO_Init>
  MX_SPI1_Init();
 800211c:	f000 f888 	bl	8002230 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002120:	f000 f8bc 	bl	800229c <MX_TIM2_Init>
  MX_TIM3_Init();
 8002124:	f000 f906 	bl	8002334 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002128:	f000 f950 	bl	80023cc <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 800212c:	f005 ff20 	bl	8007f70 <MX_USB_DEVICE_Init>
  MX_CRC_Init();
 8002130:	f000 f86a 	bl	8002208 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  initDrives();
 8002134:	f7ff fb66 	bl	8001804 <initDrives>
  usbInit();
 8002138:	f000 fe3c 	bl	8002db4 <usbInit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(incomingMessageFlag==1){
 800213c:	4b03      	ldr	r3, [pc, #12]	; (800214c <main+0x40>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d1fb      	bne.n	800213c <main+0x30>
		  readMessage();
 8002144:	f000 fe4c 	bl	8002de0 <readMessage>
	  if(incomingMessageFlag==1){
 8002148:	e7f8      	b.n	800213c <main+0x30>
 800214a:	bf00      	nop
 800214c:	20000379 	.word	0x20000379

08002150 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b094      	sub	sp, #80	; 0x50
 8002154:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800215a:	2228      	movs	r2, #40	; 0x28
 800215c:	2100      	movs	r1, #0
 800215e:	4618      	mov	r0, r3
 8002160:	f006 fc11 	bl	8008986 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002174:	1d3b      	adds	r3, r7, #4
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002180:	2301      	movs	r3, #1
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800218e:	2301      	movs	r3, #1
 8002190:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002192:	2302      	movs	r3, #2
 8002194:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002196:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800219c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80021a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a6:	4618      	mov	r0, r3
 80021a8:	f002 f982 	bl	80044b0 <HAL_RCC_OscConfig>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80021b2:	f000 f9e9 	bl	8002588 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021b6:	230f      	movs	r3, #15
 80021b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021ba:	2302      	movs	r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021be:	2300      	movs	r3, #0
 80021c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fbec 	bl	80049b0 <HAL_RCC_ClockConfig>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80021de:	f000 f9d3 	bl	8002588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80021e2:	2310      	movs	r3, #16
 80021e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80021e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021ea:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fd48 	bl	8004c84 <HAL_RCCEx_PeriphCLKConfig>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80021fa:	f000 f9c5 	bl	8002588 <Error_Handler>
  }
}
 80021fe:	bf00      	nop
 8002200:	3750      	adds	r7, #80	; 0x50
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <MX_CRC_Init+0x20>)
 800220e:	4a07      	ldr	r2, [pc, #28]	; (800222c <MX_CRC_Init+0x24>)
 8002210:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002212:	4805      	ldr	r0, [pc, #20]	; (8002228 <MX_CRC_Init+0x20>)
 8002214:	f001 f8c3 	bl	800339e <HAL_CRC_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800221e:	f000 f9b3 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000638 	.word	0x20000638
 800222c:	40023000 	.word	0x40023000

08002230 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002234:	4b17      	ldr	r3, [pc, #92]	; (8002294 <MX_SPI1_Init+0x64>)
 8002236:	4a18      	ldr	r2, [pc, #96]	; (8002298 <MX_SPI1_Init+0x68>)
 8002238:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800223a:	4b16      	ldr	r3, [pc, #88]	; (8002294 <MX_SPI1_Init+0x64>)
 800223c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002240:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <MX_SPI1_Init+0x64>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002248:	4b12      	ldr	r3, [pc, #72]	; (8002294 <MX_SPI1_Init+0x64>)
 800224a:	2200      	movs	r2, #0
 800224c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <MX_SPI1_Init+0x64>)
 8002250:	2200      	movs	r2, #0
 8002252:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002254:	4b0f      	ldr	r3, [pc, #60]	; (8002294 <MX_SPI1_Init+0x64>)
 8002256:	2200      	movs	r2, #0
 8002258:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800225a:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <MX_SPI1_Init+0x64>)
 800225c:	2200      	movs	r2, #0
 800225e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002260:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <MX_SPI1_Init+0x64>)
 8002262:	2200      	movs	r2, #0
 8002264:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002266:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <MX_SPI1_Init+0x64>)
 8002268:	2200      	movs	r2, #0
 800226a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <MX_SPI1_Init+0x64>)
 800226e:	2200      	movs	r2, #0
 8002270:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002272:	4b08      	ldr	r3, [pc, #32]	; (8002294 <MX_SPI1_Init+0x64>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <MX_SPI1_Init+0x64>)
 800227a:	220a      	movs	r2, #10
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800227e:	4805      	ldr	r0, [pc, #20]	; (8002294 <MX_SPI1_Init+0x64>)
 8002280:	f002 fdb6 	bl	8004df0 <HAL_SPI_Init>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <MX_SPI1_Init+0x5e>
  {
    Error_Handler();
 800228a:	f000 f97d 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200006a0 	.word	0x200006a0
 8002298:	40013000 	.word	0x40013000

0800229c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	463b      	mov	r3, r7
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
 80022b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b8:	4b1d      	ldr	r3, [pc, #116]	; (8002330 <MX_TIM2_Init+0x94>)
 80022ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 80022c0:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM2_Init+0x94>)
 80022c2:	2277      	movs	r2, #119	; 0x77
 80022c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <MX_TIM2_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80022cc:	4b18      	ldr	r3, [pc, #96]	; (8002330 <MX_TIM2_Init+0x94>)
 80022ce:	2209      	movs	r2, #9
 80022d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d2:	4b17      	ldr	r3, [pc, #92]	; (8002330 <MX_TIM2_Init+0x94>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d8:	4b15      	ldr	r3, [pc, #84]	; (8002330 <MX_TIM2_Init+0x94>)
 80022da:	2280      	movs	r2, #128	; 0x80
 80022dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022de:	4814      	ldr	r0, [pc, #80]	; (8002330 <MX_TIM2_Init+0x94>)
 80022e0:	f002 fde7 	bl	8004eb2 <HAL_TIM_Base_Init>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80022ea:	f000 f94d 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	480d      	ldr	r0, [pc, #52]	; (8002330 <MX_TIM2_Init+0x94>)
 80022fc:	f002 ff59 	bl	80051b2 <HAL_TIM_ConfigClockSource>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8002306:	f000 f93f 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800230a:	2300      	movs	r3, #0
 800230c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002312:	463b      	mov	r3, r7
 8002314:	4619      	mov	r1, r3
 8002316:	4806      	ldr	r0, [pc, #24]	; (8002330 <MX_TIM2_Init+0x94>)
 8002318:	f003 f91e 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8002322:	f000 f931 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002326:	bf00      	nop
 8002328:	3718      	adds	r7, #24
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	200006f8 	.word	0x200006f8

08002334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800233a:	f107 0308 	add.w	r3, r7, #8
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002348:	463b      	mov	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002350:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002352:	4a1d      	ldr	r2, [pc, #116]	; (80023c8 <MX_TIM3_Init+0x94>)
 8002354:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002358:	2200      	movs	r2, #0
 800235a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_TIM3_Init+0x90>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8002362:	4b18      	ldr	r3, [pc, #96]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_TIM3_Init+0x90>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002374:	4813      	ldr	r0, [pc, #76]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002376:	f002 fd9c 	bl	8004eb2 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8002380:	f000 f902 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4619      	mov	r1, r3
 8002390:	480c      	ldr	r0, [pc, #48]	; (80023c4 <MX_TIM3_Init+0x90>)
 8002392:	f002 ff0e 	bl	80051b2 <HAL_TIM_ConfigClockSource>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 800239c:	f000 f8f4 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023a0:	2300      	movs	r3, #0
 80023a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <MX_TIM3_Init+0x90>)
 80023ae:	f003 f8d3 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023b8:	f000 f8e6 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000644 	.word	0x20000644
 80023c8:	40000400 	.word	0x40000400

080023cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023d2:	f107 0308 	add.w	r3, r7, #8
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023e0:	463b      	mov	r3, r7
 80023e2:	2200      	movs	r2, #0
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023e8:	4b1c      	ldr	r3, [pc, #112]	; (800245c <MX_TIM4_Init+0x90>)
 80023ea:	4a1d      	ldr	r2, [pc, #116]	; (8002460 <MX_TIM4_Init+0x94>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <MX_TIM4_Init+0x90>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f4:	4b19      	ldr	r3, [pc, #100]	; (800245c <MX_TIM4_Init+0x90>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80023fa:	4b18      	ldr	r3, [pc, #96]	; (800245c <MX_TIM4_Init+0x90>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <MX_TIM4_Init+0x90>)
 8002402:	2200      	movs	r2, #0
 8002404:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <MX_TIM4_Init+0x90>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800240c:	4813      	ldr	r0, [pc, #76]	; (800245c <MX_TIM4_Init+0x90>)
 800240e:	f002 fd50 	bl	8004eb2 <HAL_TIM_Base_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8002418:	f000 f8b6 	bl	8002588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800241c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002420:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002422:	f107 0308 	add.w	r3, r7, #8
 8002426:	4619      	mov	r1, r3
 8002428:	480c      	ldr	r0, [pc, #48]	; (800245c <MX_TIM4_Init+0x90>)
 800242a:	f002 fec2 	bl	80051b2 <HAL_TIM_ConfigClockSource>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8002434:	f000 f8a8 	bl	8002588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002438:	2300      	movs	r3, #0
 800243a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800243c:	2300      	movs	r3, #0
 800243e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002440:	463b      	mov	r3, r7
 8002442:	4619      	mov	r1, r3
 8002444:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_TIM4_Init+0x90>)
 8002446:	f003 f887 	bl	8005558 <HAL_TIMEx_MasterConfigSynchronization>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8002450:	f000 f89a 	bl	8002588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002454:	bf00      	nop
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	200005f8 	.word	0x200005f8
 8002460:	40000800 	.word	0x40000800

08002464 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800246a:	f107 0310 	add.w	r3, r7, #16
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]
 8002476:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002478:	4b3f      	ldr	r3, [pc, #252]	; (8002578 <MX_GPIO_Init+0x114>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <MX_GPIO_Init+0x114>)
 800247e:	f043 0310 	orr.w	r3, r3, #16
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b3c      	ldr	r3, [pc, #240]	; (8002578 <MX_GPIO_Init+0x114>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002490:	4b39      	ldr	r3, [pc, #228]	; (8002578 <MX_GPIO_Init+0x114>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a38      	ldr	r2, [pc, #224]	; (8002578 <MX_GPIO_Init+0x114>)
 8002496:	f043 0320 	orr.w	r3, r3, #32
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b36      	ldr	r3, [pc, #216]	; (8002578 <MX_GPIO_Init+0x114>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024a8:	4b33      	ldr	r3, [pc, #204]	; (8002578 <MX_GPIO_Init+0x114>)
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	4a32      	ldr	r2, [pc, #200]	; (8002578 <MX_GPIO_Init+0x114>)
 80024ae:	f043 0304 	orr.w	r3, r3, #4
 80024b2:	6193      	str	r3, [r2, #24]
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <MX_GPIO_Init+0x114>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	607b      	str	r3, [r7, #4]
 80024be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c0:	4b2d      	ldr	r3, [pc, #180]	; (8002578 <MX_GPIO_Init+0x114>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <MX_GPIO_Init+0x114>)
 80024c6:	f043 0308 	orr.w	r3, r3, #8
 80024ca:	6193      	str	r3, [r2, #24]
 80024cc:	4b2a      	ldr	r3, [pc, #168]	; (8002578 <MX_GPIO_Init+0x114>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	603b      	str	r3, [r7, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80024d8:	2201      	movs	r2, #1
 80024da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024de:	4827      	ldr	r0, [pc, #156]	; (800257c <MX_GPIO_Init+0x118>)
 80024e0:	f001 f8d4 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 80024e4:	2200      	movs	r2, #0
 80024e6:	f24f 01d8 	movw	r1, #61656	; 0xf0d8
 80024ea:	4825      	ldr	r0, [pc, #148]	; (8002580 <MX_GPIO_Init+0x11c>)
 80024ec:	f001 f8ce 	bl	800368c <HAL_GPIO_WritePin>
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin, GPIO_PIN_RESET);
 80024f0:	2200      	movs	r2, #0
 80024f2:	f44f 4107 	mov.w	r1, #34560	; 0x8700
 80024f6:	4823      	ldr	r0, [pc, #140]	; (8002584 <MX_GPIO_Init+0x120>)
 80024f8:	f001 f8c8 	bl	800368c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002502:	2301      	movs	r3, #1
 8002504:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2302      	movs	r3, #2
 800250c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800250e:	f107 0310 	add.w	r3, r7, #16
 8002512:	4619      	mov	r1, r3
 8002514:	4819      	ldr	r0, [pc, #100]	; (800257c <MX_GPIO_Init+0x118>)
 8002516:	f000 ff5f 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : X_A_Pin X_B_Pin X_C_Pin X_D_Pin 
                           Z_C_Pin Z_D_Pin Y_D_Pin Z_A_Pin */
  GPIO_InitStruct.Pin = X_A_Pin|X_B_Pin|X_C_Pin|X_D_Pin 
 800251a:	f24f 03d8 	movw	r3, #61656	; 0xf0d8
 800251e:	613b      	str	r3, [r7, #16]
                          |Z_C_Pin|Z_D_Pin|Y_D_Pin|Z_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002520:	2301      	movs	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002524:	2300      	movs	r3, #0
 8002526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002528:	2302      	movs	r3, #2
 800252a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4619      	mov	r1, r3
 8002532:	4813      	ldr	r0, [pc, #76]	; (8002580 <MX_GPIO_Init+0x11c>)
 8002534:	f000 ff50 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Y_A_Pin Y_B_Pin Y_C_Pin Z_B_Pin */
  GPIO_InitStruct.Pin = Y_A_Pin|Y_B_Pin|Y_C_Pin|Z_B_Pin;
 8002538:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 800253c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800253e:	2301      	movs	r3, #1
 8002540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002542:	2300      	movs	r3, #0
 8002544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002546:	2302      	movs	r3, #2
 8002548:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254a:	f107 0310 	add.w	r3, r7, #16
 800254e:	4619      	mov	r1, r3
 8002550:	480c      	ldr	r0, [pc, #48]	; (8002584 <MX_GPIO_Init+0x120>)
 8002552:	f000 ff41 	bl	80033d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STOP_BUTTON_Pin */
  GPIO_InitStruct.Pin = STOP_BUTTON_Pin;
 8002556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STOP_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002564:	f107 0310 	add.w	r3, r7, #16
 8002568:	4619      	mov	r1, r3
 800256a:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_GPIO_Init+0x11c>)
 800256c:	f000 ff34 	bl	80033d8 <HAL_GPIO_Init>

}
 8002570:	bf00      	nop
 8002572:	3720      	adds	r7, #32
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40021000 	.word	0x40021000
 800257c:	40011000 	.word	0x40011000
 8002580:	40010c00 	.word	0x40010c00
 8002584:	40010800 	.word	0x40010800

08002588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr

08002594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800259a:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <HAL_MspInit+0x5c>)
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	4a14      	ldr	r2, [pc, #80]	; (80025f0 <HAL_MspInit+0x5c>)
 80025a0:	f043 0301 	orr.w	r3, r3, #1
 80025a4:	6193      	str	r3, [r2, #24]
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_MspInit+0x5c>)
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
 80025b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025b2:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_MspInit+0x5c>)
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	4a0e      	ldr	r2, [pc, #56]	; (80025f0 <HAL_MspInit+0x5c>)
 80025b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025bc:	61d3      	str	r3, [r2, #28]
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_MspInit+0x5c>)
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	607b      	str	r3, [r7, #4]
 80025c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	; (80025f4 <HAL_MspInit+0x60>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	60fb      	str	r3, [r7, #12]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	4a04      	ldr	r2, [pc, #16]	; (80025f4 <HAL_MspInit+0x60>)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025e6:	bf00      	nop
 80025e8:	3714      	adds	r7, #20
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000

080025f8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a09      	ldr	r2, [pc, #36]	; (800262c <HAL_CRC_MspInit+0x34>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d10b      	bne.n	8002622 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800260a:	4b09      	ldr	r3, [pc, #36]	; (8002630 <HAL_CRC_MspInit+0x38>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4a08      	ldr	r2, [pc, #32]	; (8002630 <HAL_CRC_MspInit+0x38>)
 8002610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002614:	6153      	str	r3, [r2, #20]
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_CRC_MspInit+0x38>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	bc80      	pop	{r7}
 800262a:	4770      	bx	lr
 800262c:	40023000 	.word	0x40023000
 8002630:	40021000 	.word	0x40021000

08002634 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b088      	sub	sp, #32
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 0310 	add.w	r3, r7, #16
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <HAL_SPI_MspInit+0x88>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d12f      	bne.n	80026b4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002654:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 800265a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800265e:	6193      	str	r3, [r2, #24]
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 800266e:	699b      	ldr	r3, [r3, #24]
 8002670:	4a13      	ldr	r2, [pc, #76]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6193      	str	r3, [r2, #24]
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_SPI_MspInit+0x8c>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002684:	2350      	movs	r3, #80	; 0x50
 8002686:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002688:	2300      	movs	r3, #0
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002690:	f107 0310 	add.w	r3, r7, #16
 8002694:	4619      	mov	r1, r3
 8002696:	480b      	ldr	r0, [pc, #44]	; (80026c4 <HAL_SPI_MspInit+0x90>)
 8002698:	f000 fe9e 	bl	80033d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800269c:	23a0      	movs	r3, #160	; 0xa0
 800269e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a0:	2302      	movs	r3, #2
 80026a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	4619      	mov	r1, r3
 80026ae:	4805      	ldr	r0, [pc, #20]	; (80026c4 <HAL_SPI_MspInit+0x90>)
 80026b0:	f000 fe92 	bl	80033d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80026b4:	bf00      	nop
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40013000 	.word	0x40013000
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40010800 	.word	0x40010800

080026c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d8:	d114      	bne.n	8002704 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026da:	4b26      	ldr	r3, [pc, #152]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	4a25      	ldr	r2, [pc, #148]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	61d3      	str	r3, [r2, #28]
 80026e6:	4b23      	ldr	r3, [pc, #140]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	201c      	movs	r0, #28
 80026f8:	f000 fe1b 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80026fc:	201c      	movs	r0, #28
 80026fe:	f000 fe34 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002702:	e032      	b.n	800276a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <HAL_TIM_Base_MspInit+0xb0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d114      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	4a18      	ldr	r2, [pc, #96]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	61d3      	str	r3, [r2, #28]
 800271a:	4b16      	ldr	r3, [pc, #88]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002726:	2200      	movs	r2, #0
 8002728:	2100      	movs	r1, #0
 800272a:	201d      	movs	r0, #29
 800272c:	f000 fe01 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002730:	201d      	movs	r0, #29
 8002732:	f000 fe1a 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 8002736:	e018      	b.n	800276a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_TIM_Base_MspInit+0xb4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d113      	bne.n	800276a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 8002748:	f043 0304 	orr.w	r3, r3, #4
 800274c:	61d3      	str	r3, [r2, #28]
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_TIM_Base_MspInit+0xac>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	201e      	movs	r0, #30
 8002760:	f000 fde7 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002764:	201e      	movs	r0, #30
 8002766:	f000 fe00 	bl	800336a <HAL_NVIC_EnableIRQ>
}
 800276a:	bf00      	nop
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	bc80      	pop	{r7}
 800278a:	4770      	bx	lr

0800278c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <HardFault_Handler+0x4>

08002792 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <MemManage_Handler+0x4>

08002798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <BusFault_Handler+0x4>

0800279e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <UsageFault_Handler+0x4>

080027a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bc80      	pop	{r7}
 80027ae:	4770      	bx	lr

080027b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027cc:	f000 fcbe 	bl	800314c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80027d8:	4802      	ldr	r0, [pc, #8]	; (80027e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80027da:	f001 f88e 	bl	80038fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200013d0 	.word	0x200013d0

080027e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80027ec:	4802      	ldr	r0, [pc, #8]	; (80027f8 <TIM2_IRQHandler+0x10>)
 80027ee:	f002 fbd8 	bl	8004fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	200006f8 	.word	0x200006f8

080027fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM3_IRQHandler+0x10>)
 8002802:	f002 fbce 	bl	8004fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	20000644 	.word	0x20000644

08002810 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002814:	4802      	ldr	r0, [pc, #8]	; (8002820 <TIM4_IRQHandler+0x10>)
 8002816:	f002 fbc4 	bl	8004fa2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	200005f8 	.word	0x200005f8

08002824 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <_sbrk+0x50>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <_sbrk+0x16>
		heap_end = &end;
 8002834:	4b0f      	ldr	r3, [pc, #60]	; (8002874 <_sbrk+0x50>)
 8002836:	4a10      	ldr	r2, [pc, #64]	; (8002878 <_sbrk+0x54>)
 8002838:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800283a:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <_sbrk+0x50>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <_sbrk+0x50>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	466a      	mov	r2, sp
 800284a:	4293      	cmp	r3, r2
 800284c:	d907      	bls.n	800285e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800284e:	f006 f83d 	bl	80088cc <__errno>
 8002852:	4602      	mov	r2, r0
 8002854:	230c      	movs	r3, #12
 8002856:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002858:	f04f 33ff 	mov.w	r3, #4294967295
 800285c:	e006      	b.n	800286c <_sbrk+0x48>
	}

	heap_end += incr;
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <_sbrk+0x50>)
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	4a03      	ldr	r2, [pc, #12]	; (8002874 <_sbrk+0x50>)
 8002868:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800286a:	68fb      	ldr	r3, [r7, #12]
}
 800286c:	4618      	mov	r0, r3
 800286e:	3710      	adds	r7, #16
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000370 	.word	0x20000370
 8002878:	20001640 	.word	0x20001640

0800287c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002880:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <SystemInit+0x5c>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <SystemInit+0x5c>)
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <SystemInit+0x5c>)
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4911      	ldr	r1, [pc, #68]	; (80028d8 <SystemInit+0x5c>)
 8002892:	4b12      	ldr	r3, [pc, #72]	; (80028dc <SystemInit+0x60>)
 8002894:	4013      	ands	r3, r2
 8002896:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <SystemInit+0x5c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0e      	ldr	r2, [pc, #56]	; (80028d8 <SystemInit+0x5c>)
 800289e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80028a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <SystemInit+0x5c>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <SystemInit+0x5c>)
 80028ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <SystemInit+0x5c>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <SystemInit+0x5c>)
 80028ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80028be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80028c0:	4b05      	ldr	r3, [pc, #20]	; (80028d8 <SystemInit+0x5c>)
 80028c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80028c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SystemInit+0x64>)
 80028ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr
 80028d8:	40021000 	.word	0x40021000
 80028dc:	f8ff0000 	.word	0xf8ff0000
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <HAL_TIM_PeriodElapsedCallback>:
 *      Author: Игорь
 */
#include "timers.h"

////////////////////////////////////////////////////////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	static int counter=0;

	if(htim->Instance==TIM2){
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f4:	d126      	bne.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x60>

		counter++;
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	3301      	adds	r3, #1
 80028fc:	4a13      	ldr	r2, [pc, #76]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80028fe:	6013      	str	r3, [r2, #0]
		if(counter>=timerDivider){
 8002900:	4b12      	ldr	r3, [pc, #72]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d31a      	bcc.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x60>

			if((stepsCounterX==0) && (stepsCounterY==0) && (stepsCounterZ==0)){
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10d      	bne.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x4e>
 800291e:	4b0f      	ldr	r3, [pc, #60]	; (800295c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <HAL_TIM_PeriodElapsedCallback+0x4e>
				HAL_TIM_Base_Stop_IT(&htim2);
 8002926:	480e      	ldr	r0, [pc, #56]	; (8002960 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8002928:	f002 fb11 	bl	8004f4e <HAL_TIM_Base_Stop_IT>
				calcInterpolation();//пересчитываем следующий шаг интерполяции
 800292c:	f7ff f8e0 	bl	8001af0 <calcInterpolation>
				return;
 8002930:	e008      	b.n	8002944 <HAL_TIM_PeriodElapsedCallback+0x60>
			}

			moveDirX();
 8002932:	f000 f817 	bl	8002964 <moveDirX>
			moveDirY();
 8002936:	f000 f8d1 	bl	8002adc <moveDirY>
			moveDirZ();
 800293a:	f000 f981 	bl	8002c40 <moveDirZ>
			counter=0;
 800293e:	4b03      	ldr	r3, [pc, #12]	; (800294c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000374 	.word	0x20000374
 8002950:	200005bc 	.word	0x200005bc
 8002954:	200005a4 	.word	0x200005a4
 8002958:	200005c4 	.word	0x200005c4
 800295c:	200005b8 	.word	0x200005b8
 8002960:	200006f8 	.word	0x200006f8

08002964 <moveDirX>:
/////////////////////////////////////////////////////////////////////////////
void moveDirX(){
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
	static char stepX=1;

	if(stepsCounterX!=0){
 8002968:	4b58      	ldr	r3, [pc, #352]	; (8002acc <moveDirX+0x168>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	f000 80ab 	beq.w	8002ac8 <moveDirX+0x164>
		if(stepsCounterX>0){
 8002972:	4b56      	ldr	r3, [pc, #344]	; (8002acc <moveDirX+0x168>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	dd17      	ble.n	80029aa <moveDirX+0x46>
			stepX++;
 800297a:	4b55      	ldr	r3, [pc, #340]	; (8002ad0 <moveDirX+0x16c>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	3301      	adds	r3, #1
 8002980:	b2da      	uxtb	r2, r3
 8002982:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <moveDirX+0x16c>)
 8002984:	701a      	strb	r2, [r3, #0]
			if(stepX == 5)stepX = 1;
 8002986:	4b52      	ldr	r3, [pc, #328]	; (8002ad0 <moveDirX+0x16c>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b05      	cmp	r3, #5
 800298c:	d102      	bne.n	8002994 <moveDirX+0x30>
 800298e:	4b50      	ldr	r3, [pc, #320]	; (8002ad0 <moveDirX+0x16c>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
			positionX+=1;
 8002994:	4b4f      	ldr	r3, [pc, #316]	; (8002ad4 <moveDirX+0x170>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <moveDirX+0x170>)
 800299c:	6013      	str	r3, [r2, #0]
			stepsCounterX--;
 800299e:	4b4b      	ldr	r3, [pc, #300]	; (8002acc <moveDirX+0x168>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	4a49      	ldr	r2, [pc, #292]	; (8002acc <moveDirX+0x168>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	e01a      	b.n	80029e0 <moveDirX+0x7c>
		}
		else if(stepsCounterX<0){
 80029aa:	4b48      	ldr	r3, [pc, #288]	; (8002acc <moveDirX+0x168>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da16      	bge.n	80029e0 <moveDirX+0x7c>
			stepX--;
 80029b2:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <moveDirX+0x16c>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3b01      	subs	r3, #1
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <moveDirX+0x16c>)
 80029bc:	701a      	strb	r2, [r3, #0]
			if(stepX==0)stepX = 4;
 80029be:	4b44      	ldr	r3, [pc, #272]	; (8002ad0 <moveDirX+0x16c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d102      	bne.n	80029cc <moveDirX+0x68>
 80029c6:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <moveDirX+0x16c>)
 80029c8:	2204      	movs	r2, #4
 80029ca:	701a      	strb	r2, [r3, #0]
			positionX-=1;
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <moveDirX+0x170>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	4a40      	ldr	r2, [pc, #256]	; (8002ad4 <moveDirX+0x170>)
 80029d4:	6013      	str	r3, [r2, #0]
			stepsCounterX++;
 80029d6:	4b3d      	ldr	r3, [pc, #244]	; (8002acc <moveDirX+0x168>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	4a3b      	ldr	r2, [pc, #236]	; (8002acc <moveDirX+0x168>)
 80029de:	6013      	str	r3, [r2, #0]
		}
		switch(stepX){
 80029e0:	4b3b      	ldr	r3, [pc, #236]	; (8002ad0 <moveDirX+0x16c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	3b01      	subs	r3, #1
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d86e      	bhi.n	8002ac8 <moveDirX+0x164>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <moveDirX+0x8c>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a33 	.word	0x08002a33
 80029f8:	08002a65 	.word	0x08002a65
 80029fc:	08002a97 	.word	0x08002a97
			case(1):{
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a06:	4834      	ldr	r0, [pc, #208]	; (8002ad8 <moveDirX+0x174>)
 8002a08:	f000 fe40 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a12:	4831      	ldr	r0, [pc, #196]	; (8002ad8 <moveDirX+0x174>)
 8002a14:	f000 fe3a 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a1e:	482e      	ldr	r0, [pc, #184]	; (8002ad8 <moveDirX+0x174>)
 8002a20:	f000 fe34 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_A,GPIO_PIN_SET);
 8002a24:	2201      	movs	r2, #1
 8002a26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a2a:	482b      	ldr	r0, [pc, #172]	; (8002ad8 <moveDirX+0x174>)
 8002a2c:	f000 fe2e 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002a30:	e04a      	b.n	8002ac8 <moveDirX+0x164>
			}
			case(2):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002a32:	2200      	movs	r2, #0
 8002a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a38:	4827      	ldr	r0, [pc, #156]	; (8002ad8 <moveDirX+0x174>)
 8002a3a:	f000 fe27 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a44:	4824      	ldr	r0, [pc, #144]	; (8002ad8 <moveDirX+0x174>)
 8002a46:	f000 fe21 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a50:	4821      	ldr	r0, [pc, #132]	; (8002ad8 <moveDirX+0x174>)
 8002a52:	f000 fe1b 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a5c:	481e      	ldr	r0, [pc, #120]	; (8002ad8 <moveDirX+0x174>)
 8002a5e:	f000 fe15 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002a62:	e031      	b.n	8002ac8 <moveDirX+0x164>
			}
			case(3):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002a64:	2200      	movs	r2, #0
 8002a66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a6a:	481b      	ldr	r0, [pc, #108]	; (8002ad8 <moveDirX+0x174>)
 8002a6c:	f000 fe0e 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002a70:	2200      	movs	r2, #0
 8002a72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a76:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <moveDirX+0x174>)
 8002a78:	f000 fe08 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_RESET);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a82:	4815      	ldr	r0, [pc, #84]	; (8002ad8 <moveDirX+0x174>)
 8002a84:	f000 fe02 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_SET);
 8002a88:	2201      	movs	r2, #1
 8002a8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a8e:	4812      	ldr	r0, [pc, #72]	; (8002ad8 <moveDirX+0x174>)
 8002a90:	f000 fdfc 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002a94:	e018      	b.n	8002ac8 <moveDirX+0x164>
			}
			case(4):{
				HAL_GPIO_WritePin (X_A,GPIO_PIN_RESET);
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a9c:	480e      	ldr	r0, [pc, #56]	; (8002ad8 <moveDirX+0x174>)
 8002a9e:	f000 fdf5 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_B,GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002aa8:	480b      	ldr	r0, [pc, #44]	; (8002ad8 <moveDirX+0x174>)
 8002aaa:	f000 fdef 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_C,GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ab4:	4808      	ldr	r0, [pc, #32]	; (8002ad8 <moveDirX+0x174>)
 8002ab6:	f000 fde9 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (X_D,GPIO_PIN_SET);
 8002aba:	2201      	movs	r2, #1
 8002abc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <moveDirX+0x174>)
 8002ac2:	f000 fde3 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002ac6:	bf00      	nop
			}
		}
	}
}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200005a4 	.word	0x200005a4
 8002ad0:	20000004 	.word	0x20000004
 8002ad4:	200005ac 	.word	0x200005ac
 8002ad8:	40010c00 	.word	0x40010c00

08002adc <moveDirY>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirY(){
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
	static char stepY=1;

	if(stepsCounterY!=0){
 8002ae0:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <moveDirY+0x150>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f000 809f 	beq.w	8002c28 <moveDirY+0x14c>
		if(stepsCounterY>0){
 8002aea:	4b50      	ldr	r3, [pc, #320]	; (8002c2c <moveDirY+0x150>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	dd17      	ble.n	8002b22 <moveDirY+0x46>
			stepY++;
 8002af2:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <moveDirY+0x154>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b4d      	ldr	r3, [pc, #308]	; (8002c30 <moveDirY+0x154>)
 8002afc:	701a      	strb	r2, [r3, #0]
			if(stepY == 5)stepY = 1;
 8002afe:	4b4c      	ldr	r3, [pc, #304]	; (8002c30 <moveDirY+0x154>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d102      	bne.n	8002b0c <moveDirY+0x30>
 8002b06:	4b4a      	ldr	r3, [pc, #296]	; (8002c30 <moveDirY+0x154>)
 8002b08:	2201      	movs	r2, #1
 8002b0a:	701a      	strb	r2, [r3, #0]
			positionY+=1;
 8002b0c:	4b49      	ldr	r3, [pc, #292]	; (8002c34 <moveDirY+0x158>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a48      	ldr	r2, [pc, #288]	; (8002c34 <moveDirY+0x158>)
 8002b14:	6013      	str	r3, [r2, #0]
			stepsCounterY--;
 8002b16:	4b45      	ldr	r3, [pc, #276]	; (8002c2c <moveDirY+0x150>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	4a43      	ldr	r2, [pc, #268]	; (8002c2c <moveDirY+0x150>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	e01a      	b.n	8002b58 <moveDirY+0x7c>
		}
		else if(stepsCounterY<0){
 8002b22:	4b42      	ldr	r3, [pc, #264]	; (8002c2c <moveDirY+0x150>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	da16      	bge.n	8002b58 <moveDirY+0x7c>
			stepY--;
 8002b2a:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <moveDirY+0x154>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b2da      	uxtb	r2, r3
 8002b32:	4b3f      	ldr	r3, [pc, #252]	; (8002c30 <moveDirY+0x154>)
 8002b34:	701a      	strb	r2, [r3, #0]
			if(stepY == 0)stepY = 4;
 8002b36:	4b3e      	ldr	r3, [pc, #248]	; (8002c30 <moveDirY+0x154>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d102      	bne.n	8002b44 <moveDirY+0x68>
 8002b3e:	4b3c      	ldr	r3, [pc, #240]	; (8002c30 <moveDirY+0x154>)
 8002b40:	2204      	movs	r2, #4
 8002b42:	701a      	strb	r2, [r3, #0]
			positionY-=1;
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <moveDirY+0x158>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <moveDirY+0x158>)
 8002b4c:	6013      	str	r3, [r2, #0]
			stepsCounterY++;
 8002b4e:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <moveDirY+0x150>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3301      	adds	r3, #1
 8002b54:	4a35      	ldr	r2, [pc, #212]	; (8002c2c <moveDirY+0x150>)
 8002b56:	6013      	str	r3, [r2, #0]
		}
		switch(stepY){
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <moveDirY+0x154>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	2b03      	cmp	r3, #3
 8002b60:	d862      	bhi.n	8002c28 <moveDirY+0x14c>
 8002b62:	a201      	add	r2, pc, #4	; (adr r2, 8002b68 <moveDirY+0x8c>)
 8002b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002ba5 	.word	0x08002ba5
 8002b70:	08002bd1 	.word	0x08002bd1
 8002b74:	08002bfd 	.word	0x08002bfd
			case(1):{
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b7e:	482e      	ldr	r0, [pc, #184]	; (8002c38 <moveDirY+0x15c>)
 8002b80:	f000 fd84 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2108      	movs	r1, #8
 8002b88:	482c      	ldr	r0, [pc, #176]	; (8002c3c <moveDirY+0x160>)
 8002b8a:	f000 fd7f 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_SET);
 8002b8e:	2201      	movs	r2, #1
 8002b90:	2110      	movs	r1, #16
 8002b92:	482a      	ldr	r0, [pc, #168]	; (8002c3c <moveDirY+0x160>)
 8002b94:	f000 fd7a 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2140      	movs	r1, #64	; 0x40
 8002b9c:	4827      	ldr	r0, [pc, #156]	; (8002c3c <moveDirY+0x160>)
 8002b9e:	f000 fd75 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002ba2:	e041      	b.n	8002c28 <moveDirY+0x14c>
			}
			case(2):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2140      	movs	r1, #64	; 0x40
 8002ba8:	4824      	ldr	r0, [pc, #144]	; (8002c3c <moveDirY+0x160>)
 8002baa:	f000 fd6f 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	4822      	ldr	r0, [pc, #136]	; (8002c3c <moveDirY+0x160>)
 8002bb4:	f000 fd6a 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2110      	movs	r1, #16
 8002bbc:	481f      	ldr	r0, [pc, #124]	; (8002c3c <moveDirY+0x160>)
 8002bbe:	f000 fd65 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc8:	481b      	ldr	r0, [pc, #108]	; (8002c38 <moveDirY+0x15c>)
 8002bca:	f000 fd5f 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002bce:	e02b      	b.n	8002c28 <moveDirY+0x14c>
			}
			case(3):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2140      	movs	r1, #64	; 0x40
 8002bd4:	4819      	ldr	r0, [pc, #100]	; (8002c3c <moveDirY+0x160>)
 8002bd6:	f000 fd59 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_SET);
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be0:	4815      	ldr	r0, [pc, #84]	; (8002c38 <moveDirY+0x15c>)
 8002be2:	f000 fd53 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2110      	movs	r1, #16
 8002bea:	4814      	ldr	r0, [pc, #80]	; (8002c3c <moveDirY+0x160>)
 8002bec:	f000 fd4e 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2108      	movs	r1, #8
 8002bf4:	4811      	ldr	r0, [pc, #68]	; (8002c3c <moveDirY+0x160>)
 8002bf6:	f000 fd49 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002bfa:	e015      	b.n	8002c28 <moveDirY+0x14c>
			}
			case(4):{
				HAL_GPIO_WritePin (Y_A,GPIO_PIN_SET);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	2140      	movs	r1, #64	; 0x40
 8002c00:	480e      	ldr	r0, [pc, #56]	; (8002c3c <moveDirY+0x160>)
 8002c02:	f000 fd43 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_B,GPIO_PIN_RESET);
 8002c06:	2200      	movs	r2, #0
 8002c08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <moveDirY+0x15c>)
 8002c0e:	f000 fd3d 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_C,GPIO_PIN_RESET);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2108      	movs	r1, #8
 8002c16:	4809      	ldr	r0, [pc, #36]	; (8002c3c <moveDirY+0x160>)
 8002c18:	f000 fd38 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Y_D,GPIO_PIN_RESET);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2110      	movs	r1, #16
 8002c20:	4806      	ldr	r0, [pc, #24]	; (8002c3c <moveDirY+0x160>)
 8002c22:	f000 fd33 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002c26:	bf00      	nop
			}
		}
	}
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	200005c4 	.word	0x200005c4
 8002c30:	20000005 	.word	0x20000005
 8002c34:	200005cc 	.word	0x200005cc
 8002c38:	40010800 	.word	0x40010800
 8002c3c:	40010c00 	.word	0x40010c00

08002c40 <moveDirZ>:
///////////////////////////////////////////////////////////////////////////////////////
void moveDirZ(){
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	static char stepZ=1;

	if(stepsCounterZ!=0){
 8002c44:	4b56      	ldr	r3, [pc, #344]	; (8002da0 <moveDirZ+0x160>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 80a7 	beq.w	8002d9c <moveDirZ+0x15c>
			if(stepsCounterZ>0){
 8002c4e:	4b54      	ldr	r3, [pc, #336]	; (8002da0 <moveDirZ+0x160>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	dd17      	ble.n	8002c86 <moveDirZ+0x46>
				stepZ++;
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <moveDirZ+0x164>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b51      	ldr	r3, [pc, #324]	; (8002da4 <moveDirZ+0x164>)
 8002c60:	701a      	strb	r2, [r3, #0]
				if(stepZ == 5)stepZ = 1;
 8002c62:	4b50      	ldr	r3, [pc, #320]	; (8002da4 <moveDirZ+0x164>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b05      	cmp	r3, #5
 8002c68:	d102      	bne.n	8002c70 <moveDirZ+0x30>
 8002c6a:	4b4e      	ldr	r3, [pc, #312]	; (8002da4 <moveDirZ+0x164>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
				positionZ+=1;
 8002c70:	4b4d      	ldr	r3, [pc, #308]	; (8002da8 <moveDirZ+0x168>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3301      	adds	r3, #1
 8002c76:	4a4c      	ldr	r2, [pc, #304]	; (8002da8 <moveDirZ+0x168>)
 8002c78:	6013      	str	r3, [r2, #0]
				stepsCounterZ--;
 8002c7a:	4b49      	ldr	r3, [pc, #292]	; (8002da0 <moveDirZ+0x160>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	4a47      	ldr	r2, [pc, #284]	; (8002da0 <moveDirZ+0x160>)
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e01a      	b.n	8002cbc <moveDirZ+0x7c>
			}
			else if(stepsCounterZ<0){
 8002c86:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <moveDirZ+0x160>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da16      	bge.n	8002cbc <moveDirZ+0x7c>
				stepZ--;
 8002c8e:	4b45      	ldr	r3, [pc, #276]	; (8002da4 <moveDirZ+0x164>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <moveDirZ+0x164>)
 8002c98:	701a      	strb	r2, [r3, #0]
				if(stepZ == 0)stepZ = 4;
 8002c9a:	4b42      	ldr	r3, [pc, #264]	; (8002da4 <moveDirZ+0x164>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <moveDirZ+0x68>
 8002ca2:	4b40      	ldr	r3, [pc, #256]	; (8002da4 <moveDirZ+0x164>)
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	701a      	strb	r2, [r3, #0]
				positionZ-=1;
 8002ca8:	4b3f      	ldr	r3, [pc, #252]	; (8002da8 <moveDirZ+0x168>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3b01      	subs	r3, #1
 8002cae:	4a3e      	ldr	r2, [pc, #248]	; (8002da8 <moveDirZ+0x168>)
 8002cb0:	6013      	str	r3, [r2, #0]
				stepsCounterZ++;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	; (8002da0 <moveDirZ+0x160>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	4a39      	ldr	r2, [pc, #228]	; (8002da0 <moveDirZ+0x160>)
 8002cba:	6013      	str	r3, [r2, #0]
			}
		switch(stepZ){
 8002cbc:	4b39      	ldr	r3, [pc, #228]	; (8002da4 <moveDirZ+0x164>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	d86a      	bhi.n	8002d9c <moveDirZ+0x15c>
 8002cc6:	a201      	add	r2, pc, #4	; (adr r2, 8002ccc <moveDirZ+0x8c>)
 8002cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002d0d 	.word	0x08002d0d
 8002cd4:	08002d3d 	.word	0x08002d3d
 8002cd8:	08002d6d 	.word	0x08002d6d
			case(1):{
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002cdc:	2200      	movs	r2, #0
 8002cde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ce2:	4832      	ldr	r0, [pc, #200]	; (8002dac <moveDirZ+0x16c>)
 8002ce4:	f000 fcd2 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cee:	482f      	ldr	r0, [pc, #188]	; (8002dac <moveDirZ+0x16c>)
 8002cf0:	f000 fccc 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	482d      	ldr	r0, [pc, #180]	; (8002db0 <moveDirZ+0x170>)
 8002cfa:	f000 fcc7 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_SET);
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d04:	4829      	ldr	r0, [pc, #164]	; (8002dac <moveDirZ+0x16c>)
 8002d06:	f000 fcc1 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002d0a:	e047      	b.n	8002d9c <moveDirZ+0x15c>
			}
			case(2):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d12:	4826      	ldr	r0, [pc, #152]	; (8002dac <moveDirZ+0x16c>)
 8002d14:	f000 fcba 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d1e:	4823      	ldr	r0, [pc, #140]	; (8002dac <moveDirZ+0x16c>)
 8002d20:	f000 fcb4 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2180      	movs	r1, #128	; 0x80
 8002d28:	4821      	ldr	r0, [pc, #132]	; (8002db0 <moveDirZ+0x170>)
 8002d2a:	f000 fcaf 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_SET);
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	481d      	ldr	r0, [pc, #116]	; (8002dac <moveDirZ+0x16c>)
 8002d36:	f000 fca9 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002d3a:	e02f      	b.n	8002d9c <moveDirZ+0x15c>
			}
			case(3):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d42:	481a      	ldr	r0, [pc, #104]	; (8002dac <moveDirZ+0x16c>)
 8002d44:	f000 fca2 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d4e:	4817      	ldr	r0, [pc, #92]	; (8002dac <moveDirZ+0x16c>)
 8002d50:	f000 fc9c 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_RESET);
 8002d54:	2200      	movs	r2, #0
 8002d56:	2180      	movs	r1, #128	; 0x80
 8002d58:	4815      	ldr	r0, [pc, #84]	; (8002db0 <moveDirZ+0x170>)
 8002d5a:	f000 fc97 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_SET);
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d64:	4811      	ldr	r0, [pc, #68]	; (8002dac <moveDirZ+0x16c>)
 8002d66:	f000 fc91 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002d6a:	e017      	b.n	8002d9c <moveDirZ+0x15c>
			}
			case(4):{
				HAL_GPIO_WritePin (Z_A,GPIO_PIN_RESET);
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d72:	480e      	ldr	r0, [pc, #56]	; (8002dac <moveDirZ+0x16c>)
 8002d74:	f000 fc8a 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_B,GPIO_PIN_RESET);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d7e:	480b      	ldr	r0, [pc, #44]	; (8002dac <moveDirZ+0x16c>)
 8002d80:	f000 fc84 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_C,GPIO_PIN_RESET);
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d8a:	4808      	ldr	r0, [pc, #32]	; (8002dac <moveDirZ+0x16c>)
 8002d8c:	f000 fc7e 	bl	800368c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin (Z_D,GPIO_PIN_SET);
 8002d90:	2201      	movs	r2, #1
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	4806      	ldr	r0, [pc, #24]	; (8002db0 <moveDirZ+0x170>)
 8002d96:	f000 fc79 	bl	800368c <HAL_GPIO_WritePin>
				break;
 8002d9a:	bf00      	nop
			}
		}
	}
}
 8002d9c:	bf00      	nop
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	200005b8 	.word	0x200005b8
 8002da4:	20000006 	.word	0x20000006
 8002da8:	200005a8 	.word	0x200005a8
 8002dac:	40010800 	.word	0x40010800
 8002db0:	40010c00 	.word	0x40010c00

08002db4 <usbInit>:
 */


#include "usb.h"

void usbInit(){
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
	if(rxBuffer==NULL){
 8002db8:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <usbInit+0x24>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <usbInit+0x1a>
		rxBuffer=malloc(50);
 8002dc0:	2032      	movs	r0, #50	; 0x32
 8002dc2:	f005 fdbb 	bl	800893c <malloc>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	461a      	mov	r2, r3
 8002dca:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <usbInit+0x24>)
 8002dcc:	601a      	str	r2, [r3, #0]
	}
	sizeOfMessage=0;
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <usbInit+0x28>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
}
 8002dd4:	bf00      	nop
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	2000069c 	.word	0x2000069c
 8002ddc:	20000698 	.word	0x20000698

08002de0 <readMessage>:
///////////////////////////////////////////////////////////////
void readMessage(){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0

	incomingMessageFlag=0;
 8002de6:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <readMessage+0x98>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	701a      	strb	r2, [r3, #0]
	unsigned short crc=0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	80bb      	strh	r3, [r7, #4]
	unsigned short crc2=0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	80fb      	strh	r3, [r7, #6]
	memcpy(&crc,&rxBuffer[sizeOfMessage-2],2);
 8002df4:	4b21      	ldr	r3, [pc, #132]	; (8002e7c <readMessage+0x9c>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <readMessage+0xa0>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	3b02      	subs	r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	80bb      	strh	r3, [r7, #4]
	crc2=Crc16(rxBuffer,sizeOfMessage-2);
 8002e06:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <readMessage+0x9c>)
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4b1d      	ldr	r3, [pc, #116]	; (8002e80 <readMessage+0xa0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b02      	subs	r3, #2
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	4610      	mov	r0, r2
 8002e18:	f000 f834 	bl	8002e84 <Crc16>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	80fb      	strh	r3, [r7, #6]
	if(crc==crc2){
 8002e20:	88bb      	ldrh	r3, [r7, #4]
 8002e22:	88fa      	ldrh	r2, [r7, #6]
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d122      	bne.n	8002e6e <readMessage+0x8e>
		switch(rxBuffer[1]){
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <readMessage+0x9c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <readMessage+0x5a>
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d003      	beq.n	8002e40 <readMessage+0x60>
				break;
			}
		}
	}

}
 8002e38:	e019      	b.n	8002e6e <readMessage+0x8e>
				sendStatus();
 8002e3a:	f000 f85f 	bl	8002efc <sendStatus>
				break;
 8002e3e:	e016      	b.n	8002e6e <readMessage+0x8e>
				parseCodeString(rxBuffer+2,sizeOfMessage-4);
 8002e40:	4b0e      	ldr	r3, [pc, #56]	; (8002e7c <readMessage+0x9c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	1c9a      	adds	r2, r3, #2
 8002e46:	4b0e      	ldr	r3, [pc, #56]	; (8002e80 <readMessage+0xa0>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3b04      	subs	r3, #4
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4619      	mov	r1, r3
 8002e50:	4610      	mov	r0, r2
 8002e52:	f7fe f97b 	bl	800114c <parseCodeString>
				sendAcknolege(MESSAGE_G_CODE,rxBuffer+2,sizeOfMessage-4);
 8002e56:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <readMessage+0x9c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	1c99      	adds	r1, r3, #2
 8002e5c:	4b08      	ldr	r3, [pc, #32]	; (8002e80 <readMessage+0xa0>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	3b04      	subs	r3, #4
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	2001      	movs	r0, #1
 8002e68:	f000 f8aa 	bl	8002fc0 <sendAcknolege>
				break;
 8002e6c:	bf00      	nop
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000379 	.word	0x20000379
 8002e7c:	2000069c 	.word	0x2000069c
 8002e80:	20000698 	.word	0x20000698

08002e84 <Crc16>:
////////////////////////////////////////////////////////////////
unsigned short Crc16(char *pcBlock, unsigned short len){
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
    unsigned short crc = 0xFFFF;
 8002e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e94:	81fb      	strh	r3, [r7, #14]
    unsigned char i;

    while (len--){
 8002e96:	e025      	b.n	8002ee4 <Crc16+0x60>
        crc ^= *pcBlock++ << 8;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	1c5a      	adds	r2, r3, #1
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	021b      	lsls	r3, r3, #8
 8002ea2:	b21a      	sxth	r2, r3
 8002ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea8:	4053      	eors	r3, r2
 8002eaa:	b21b      	sxth	r3, r3
 8002eac:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8002eae:	2300      	movs	r3, #0
 8002eb0:	737b      	strb	r3, [r7, #13]
 8002eb2:	e014      	b.n	8002ede <Crc16+0x5a>
            crc = crc & 0x8000 ? (crc << 1) ^ 0x1021 : crc << 1;
 8002eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	da09      	bge.n	8002ed0 <Crc16+0x4c>
 8002ebc:	89fb      	ldrh	r3, [r7, #14]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	b21b      	sxth	r3, r3
 8002ec2:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002ec6:	f083 0301 	eor.w	r3, r3, #1
 8002eca:	b21b      	sxth	r3, r3
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	e002      	b.n	8002ed6 <Crc16+0x52>
 8002ed0:	89fb      	ldrh	r3, [r7, #14]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	81fb      	strh	r3, [r7, #14]
        for (i = 0; i < 8; i++){
 8002ed8:	7b7b      	ldrb	r3, [r7, #13]
 8002eda:	3301      	adds	r3, #1
 8002edc:	737b      	strb	r3, [r7, #13]
 8002ede:	7b7b      	ldrb	r3, [r7, #13]
 8002ee0:	2b07      	cmp	r3, #7
 8002ee2:	d9e7      	bls.n	8002eb4 <Crc16+0x30>
    while (len--){
 8002ee4:	887b      	ldrh	r3, [r7, #2]
 8002ee6:	1e5a      	subs	r2, r3, #1
 8002ee8:	807a      	strh	r2, [r7, #2]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1d4      	bne.n	8002e98 <Crc16+0x14>
        }
    }
    return crc;
 8002eee:	89fb      	ldrh	r3, [r7, #14]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3714      	adds	r7, #20
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr
	...

08002efc <sendStatus>:
////////////////////////////////////////////////////////////////////////
void sendStatus(){
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	466b      	mov	r3, sp
 8002f04:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2;//размер,тип,3 флоата,CRC
 8002f06:	2310      	movs	r3, #16
 8002f08:	73fb      	strb	r3, [r7, #15]
	unsigned char dataToSend[size];
 8002f0a:	7bf8      	ldrb	r0, [r7, #15]
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	60bb      	str	r3, [r7, #8]
 8002f12:	b2c1      	uxtb	r1, r0
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	f04f 0400 	mov.w	r4, #0
 8002f20:	00d4      	lsls	r4, r2, #3
 8002f22:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f26:	00cb      	lsls	r3, r1, #3
 8002f28:	b2c1      	uxtb	r1, r0
 8002f2a:	f04f 0200 	mov.w	r2, #0
 8002f2e:	f04f 0300 	mov.w	r3, #0
 8002f32:	f04f 0400 	mov.w	r4, #0
 8002f36:	00d4      	lsls	r4, r2, #3
 8002f38:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002f3c:	00cb      	lsls	r3, r1, #3
 8002f3e:	4603      	mov	r3, r0
 8002f40:	3307      	adds	r3, #7
 8002f42:	08db      	lsrs	r3, r3, #3
 8002f44:	00db      	lsls	r3, r3, #3
 8002f46:	ebad 0d03 	sub.w	sp, sp, r3
 8002f4a:	466b      	mov	r3, sp
 8002f4c:	3300      	adds	r3, #0
 8002f4e:	607b      	str	r3, [r7, #4]

	dataToSend[0]=size;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=MESSAGE_STATUS;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	705a      	strb	r2, [r3, #1]
	//отправляем позицию X. Разбираем float на char
	memcpy(dataToSend+2,&positionX,sizeof(int));
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3302      	adds	r3, #2
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <sendStatus+0xb8>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	601a      	str	r2, [r3, #0]
	//отправляем позицию Y. Разбираем float на char
	memcpy(dataToSend+2+sizeof(int),&positionY,sizeof(int));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	3306      	adds	r3, #6
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <sendStatus+0xbc>)
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	601a      	str	r2, [r3, #0]
	//отправляем позицию X. Разбираем float на char
	memcpy(dataToSend+2+sizeof(int)*2,&positionZ,sizeof(int));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	330a      	adds	r3, #10
 8002f74:	4a11      	ldr	r2, [pc, #68]	; (8002fbc <sendStatus+0xc0>)
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	601a      	str	r2, [r3, #0]

	unsigned short crc = Crc16(dataToSend,size-2);
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	7bfb      	ldrb	r3, [r7, #15]
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b02      	subs	r3, #2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	4619      	mov	r1, r3
 8002f86:	4610      	mov	r0, r2
 8002f88:	f7ff ff7c 	bl	8002e84 <Crc16>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	807b      	strh	r3, [r7, #2]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	3b02      	subs	r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	887a      	ldrh	r2, [r7, #2]
 8002f9a:	801a      	strh	r2, [r3, #0]

	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7bfa      	ldrb	r2, [r7, #15]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f005 f8c0 	bl	8008128 <CDC_Transmit_FS>
 8002fa8:	46ad      	mov	sp, r5

}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200005ac 	.word	0x200005ac
 8002fb8:	200005cc 	.word	0x200005cc
 8002fbc:	200005a8 	.word	0x200005a8

08002fc0 <sendAcknolege>:
/////////////////////////////////////////////////////////////////////////
void sendAcknolege(enum messageType mess, char *array, char arrSize){
 8002fc0:	b5b0      	push	{r4, r5, r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	6039      	str	r1, [r7, #0]
 8002fca:	71fb      	strb	r3, [r7, #7]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71bb      	strb	r3, [r7, #6]
 8002fd0:	466b      	mov	r3, sp
 8002fd2:	461d      	mov	r5, r3
	unsigned char size=2+sizeof(int)*3+2+arrSize;//размер,тип,3 флоата,CRC, размер массива
 8002fd4:	79bb      	ldrb	r3, [r7, #6]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	75fb      	strb	r3, [r7, #23]
	unsigned char dataToSend[size];
 8002fda:	7df8      	ldrb	r0, [r7, #23]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	b2c1      	uxtb	r1, r0
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	00d4      	lsls	r4, r2, #3
 8002ff2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002ff6:	00cb      	lsls	r3, r1, #3
 8002ff8:	b2c1      	uxtb	r1, r0
 8002ffa:	f04f 0200 	mov.w	r2, #0
 8002ffe:	f04f 0300 	mov.w	r3, #0
 8003002:	f04f 0400 	mov.w	r4, #0
 8003006:	00d4      	lsls	r4, r2, #3
 8003008:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800300c:	00cb      	lsls	r3, r1, #3
 800300e:	4603      	mov	r3, r0
 8003010:	3307      	adds	r3, #7
 8003012:	08db      	lsrs	r3, r3, #3
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	ebad 0d03 	sub.w	sp, sp, r3
 800301a:	466b      	mov	r3, sp
 800301c:	3300      	adds	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]

	dataToSend[0]=size;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	7dfa      	ldrb	r2, [r7, #23]
 8003024:	701a      	strb	r2, [r3, #0]
	dataToSend[1]=mess;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	79fa      	ldrb	r2, [r7, #7]
 800302a:	705a      	strb	r2, [r3, #1]
	memcpy(array,dataToSend+2,arrSize);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	3302      	adds	r3, #2
 8003030:	79ba      	ldrb	r2, [r7, #6]
 8003032:	4619      	mov	r1, r3
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f005 fc9b 	bl	8008970 <memcpy>
	unsigned short crc = Crc16(dataToSend,size-2);
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b02      	subs	r3, #2
 8003042:	b29b      	uxth	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	4610      	mov	r0, r2
 8003048:	f7ff ff1c 	bl	8002e84 <Crc16>
 800304c:	4603      	mov	r3, r0
 800304e:	817b      	strh	r3, [r7, #10]
	memcpy(dataToSend+size-2,&crc,sizeof(unsigned short));
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	7dfb      	ldrb	r3, [r7, #23]
 8003054:	3b02      	subs	r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	897a      	ldrh	r2, [r7, #10]
 800305a:	801a      	strh	r2, [r3, #0]
	CDC_Transmit_FS(dataToSend,size);//отправляем ответ
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	7dfa      	ldrb	r2, [r7, #23]
 8003060:	4611      	mov	r1, r2
 8003062:	4618      	mov	r0, r3
 8003064:	f005 f860 	bl	8008128 <CDC_Transmit_FS>
 8003068:	46ad      	mov	sp, r5
}
 800306a:	bf00      	nop
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003074:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003076:	e003      	b.n	8003080 <LoopCopyDataInit>

08003078 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003078:	4b0b      	ldr	r3, [pc, #44]	; (80030a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800307a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800307c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800307e:	3104      	adds	r1, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003080:	480a      	ldr	r0, [pc, #40]	; (80030ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003082:	4b0b      	ldr	r3, [pc, #44]	; (80030b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003084:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003086:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003088:	d3f6      	bcc.n	8003078 <CopyDataInit>
  ldr r2, =_sbss
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800308c:	e002      	b.n	8003094 <LoopFillZerobss>

0800308e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800308e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003090:	f842 3b04 	str.w	r3, [r2], #4

08003094 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003096:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003098:	d3f9      	bcc.n	800308e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800309a:	f7ff fbef 	bl	800287c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309e:	f005 fc1b 	bl	80088d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80030a2:	f7ff f833 	bl	800210c <main>
  bx lr
 80030a6:	4770      	bx	lr
  ldr r3, =_sidata
 80030a8:	08008e0c 	.word	0x08008e0c
  ldr r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80030b0:	20000354 	.word	0x20000354
  ldr r2, =_sbss
 80030b4:	20000354 	.word	0x20000354
  ldr r3, = _ebss
 80030b8:	20001640 	.word	0x20001640

080030bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC1_2_IRQHandler>
	...

080030c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c4:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <HAL_Init+0x28>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a07      	ldr	r2, [pc, #28]	; (80030e8 <HAL_Init+0x28>)
 80030ca:	f043 0310 	orr.w	r3, r3, #16
 80030ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030d0:	2003      	movs	r0, #3
 80030d2:	f000 f923 	bl	800331c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f000 f808 	bl	80030ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030dc:	f7ff fa5a 	bl	8002594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_InitTick+0x54>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b12      	ldr	r3, [pc, #72]	; (8003144 <HAL_InitTick+0x58>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	4619      	mov	r1, r3
 80030fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003102:	fbb3 f3f1 	udiv	r3, r3, r1
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4618      	mov	r0, r3
 800310c:	f000 f93b 	bl	8003386 <HAL_SYSTICK_Config>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e00e      	b.n	8003138 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b0f      	cmp	r3, #15
 800311e:	d80a      	bhi.n	8003136 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	2200      	movs	r2, #0
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 f903 	bl	8003332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4a06      	ldr	r2, [pc, #24]	; (8003148 <HAL_InitTick+0x5c>)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003132:	2300      	movs	r3, #0
 8003134:	e000      	b.n	8003138 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
}
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20000000 	.word	0x20000000
 8003144:	2000000c 	.word	0x2000000c
 8003148:	20000008 	.word	0x20000008

0800314c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <HAL_IncTick+0x1c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	461a      	mov	r2, r3
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_IncTick+0x20>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4413      	add	r3, r2
 800315c:	4a03      	ldr	r2, [pc, #12]	; (800316c <HAL_IncTick+0x20>)
 800315e:	6013      	str	r3, [r2, #0]
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	2000000c 	.word	0x2000000c
 800316c:	20000738 	.word	0x20000738

08003170 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b02      	ldr	r3, [pc, #8]	; (8003180 <HAL_GetTick+0x10>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	20000738 	.word	0x20000738

08003184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031a0:	4013      	ands	r3, r2
 80031a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031b6:	4a04      	ldr	r2, [pc, #16]	; (80031c8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60d3      	str	r3, [r2, #12]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d0:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <__NVIC_GetPriorityGrouping+0x18>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	0a1b      	lsrs	r3, r3, #8
 80031d6:	f003 0307 	and.w	r3, r3, #7
}
 80031da:	4618      	mov	r0, r3
 80031dc:	46bd      	mov	sp, r7
 80031de:	bc80      	pop	{r7}
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	4603      	mov	r3, r0
 80031f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	db0b      	blt.n	8003212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 021f 	and.w	r2, r3, #31
 8003200:	4906      	ldr	r1, [pc, #24]	; (800321c <__NVIC_EnableIRQ+0x34>)
 8003202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003206:	095b      	lsrs	r3, r3, #5
 8003208:	2001      	movs	r0, #1
 800320a:	fa00 f202 	lsl.w	r2, r0, r2
 800320e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003212:	bf00      	nop
 8003214:	370c      	adds	r7, #12
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	e000e100 	.word	0xe000e100

08003220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	6039      	str	r1, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	2b00      	cmp	r3, #0
 8003232:	db0a      	blt.n	800324a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b2da      	uxtb	r2, r3
 8003238:	490c      	ldr	r1, [pc, #48]	; (800326c <__NVIC_SetPriority+0x4c>)
 800323a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	440b      	add	r3, r1
 8003244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003248:	e00a      	b.n	8003260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	4908      	ldr	r1, [pc, #32]	; (8003270 <__NVIC_SetPriority+0x50>)
 8003250:	79fb      	ldrb	r3, [r7, #7]
 8003252:	f003 030f 	and.w	r3, r3, #15
 8003256:	3b04      	subs	r3, #4
 8003258:	0112      	lsls	r2, r2, #4
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	440b      	add	r3, r1
 800325e:	761a      	strb	r2, [r3, #24]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	bc80      	pop	{r7}
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100
 8003270:	e000ed00 	.word	0xe000ed00

08003274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f1c3 0307 	rsb	r3, r3, #7
 800328e:	2b04      	cmp	r3, #4
 8003290:	bf28      	it	cs
 8003292:	2304      	movcs	r3, #4
 8003294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	3304      	adds	r3, #4
 800329a:	2b06      	cmp	r3, #6
 800329c:	d902      	bls.n	80032a4 <NVIC_EncodePriority+0x30>
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3b03      	subs	r3, #3
 80032a2:	e000      	b.n	80032a6 <NVIC_EncodePriority+0x32>
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	fa02 f303 	lsl.w	r3, r2, r3
 80032b2:	43da      	mvns	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	401a      	ands	r2, r3
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032bc:	f04f 31ff 	mov.w	r1, #4294967295
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	43d9      	mvns	r1, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	4313      	orrs	r3, r2
         );
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032e8:	d301      	bcc.n	80032ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ea:	2301      	movs	r3, #1
 80032ec:	e00f      	b.n	800330e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032ee:	4a0a      	ldr	r2, [pc, #40]	; (8003318 <SysTick_Config+0x40>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032f6:	210f      	movs	r1, #15
 80032f8:	f04f 30ff 	mov.w	r0, #4294967295
 80032fc:	f7ff ff90 	bl	8003220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <SysTick_Config+0x40>)
 8003302:	2200      	movs	r2, #0
 8003304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003306:	4b04      	ldr	r3, [pc, #16]	; (8003318 <SysTick_Config+0x40>)
 8003308:	2207      	movs	r2, #7
 800330a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3708      	adds	r7, #8
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000e010 	.word	0xe000e010

0800331c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ff2d 	bl	8003184 <__NVIC_SetPriorityGrouping>
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003332:	b580      	push	{r7, lr}
 8003334:	b086      	sub	sp, #24
 8003336:	af00      	add	r7, sp, #0
 8003338:	4603      	mov	r3, r0
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
 800333e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003340:	2300      	movs	r3, #0
 8003342:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003344:	f7ff ff42 	bl	80031cc <__NVIC_GetPriorityGrouping>
 8003348:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68b9      	ldr	r1, [r7, #8]
 800334e:	6978      	ldr	r0, [r7, #20]
 8003350:	f7ff ff90 	bl	8003274 <NVIC_EncodePriority>
 8003354:	4602      	mov	r2, r0
 8003356:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800335a:	4611      	mov	r1, r2
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff5f 	bl	8003220 <__NVIC_SetPriority>
}
 8003362:	bf00      	nop
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b082      	sub	sp, #8
 800336e:	af00      	add	r7, sp, #0
 8003370:	4603      	mov	r3, r0
 8003372:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff ff35 	bl	80031e8 <__NVIC_EnableIRQ>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003386:	b580      	push	{r7, lr}
 8003388:	b082      	sub	sp, #8
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7ff ffa2 	bl	80032d8 <SysTick_Config>
 8003394:	4603      	mov	r3, r0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b082      	sub	sp, #8
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e00e      	b.n	80033ce <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	795b      	ldrb	r3, [r3, #5]
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d105      	bne.n	80033c6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff f919 	bl	80025f8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033d8:	b480      	push	{r7}
 80033da:	b08b      	sub	sp, #44	; 0x2c
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033e2:	2300      	movs	r3, #0
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033e6:	2300      	movs	r3, #0
 80033e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033ea:	e127      	b.n	800363c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033ec:	2201      	movs	r2, #1
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	429a      	cmp	r2, r3
 8003406:	f040 8116 	bne.w	8003636 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b12      	cmp	r3, #18
 8003410:	d034      	beq.n	800347c <HAL_GPIO_Init+0xa4>
 8003412:	2b12      	cmp	r3, #18
 8003414:	d80d      	bhi.n	8003432 <HAL_GPIO_Init+0x5a>
 8003416:	2b02      	cmp	r3, #2
 8003418:	d02b      	beq.n	8003472 <HAL_GPIO_Init+0x9a>
 800341a:	2b02      	cmp	r3, #2
 800341c:	d804      	bhi.n	8003428 <HAL_GPIO_Init+0x50>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d031      	beq.n	8003486 <HAL_GPIO_Init+0xae>
 8003422:	2b01      	cmp	r3, #1
 8003424:	d01c      	beq.n	8003460 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003426:	e048      	b.n	80034ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003428:	2b03      	cmp	r3, #3
 800342a:	d043      	beq.n	80034b4 <HAL_GPIO_Init+0xdc>
 800342c:	2b11      	cmp	r3, #17
 800342e:	d01b      	beq.n	8003468 <HAL_GPIO_Init+0x90>
          break;
 8003430:	e043      	b.n	80034ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003432:	4a89      	ldr	r2, [pc, #548]	; (8003658 <HAL_GPIO_Init+0x280>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d026      	beq.n	8003486 <HAL_GPIO_Init+0xae>
 8003438:	4a87      	ldr	r2, [pc, #540]	; (8003658 <HAL_GPIO_Init+0x280>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d806      	bhi.n	800344c <HAL_GPIO_Init+0x74>
 800343e:	4a87      	ldr	r2, [pc, #540]	; (800365c <HAL_GPIO_Init+0x284>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d020      	beq.n	8003486 <HAL_GPIO_Init+0xae>
 8003444:	4a86      	ldr	r2, [pc, #536]	; (8003660 <HAL_GPIO_Init+0x288>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d01d      	beq.n	8003486 <HAL_GPIO_Init+0xae>
          break;
 800344a:	e036      	b.n	80034ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800344c:	4a85      	ldr	r2, [pc, #532]	; (8003664 <HAL_GPIO_Init+0x28c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d019      	beq.n	8003486 <HAL_GPIO_Init+0xae>
 8003452:	4a85      	ldr	r2, [pc, #532]	; (8003668 <HAL_GPIO_Init+0x290>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d016      	beq.n	8003486 <HAL_GPIO_Init+0xae>
 8003458:	4a84      	ldr	r2, [pc, #528]	; (800366c <HAL_GPIO_Init+0x294>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d013      	beq.n	8003486 <HAL_GPIO_Init+0xae>
          break;
 800345e:	e02c      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	623b      	str	r3, [r7, #32]
          break;
 8003466:	e028      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	3304      	adds	r3, #4
 800346e:	623b      	str	r3, [r7, #32]
          break;
 8003470:	e023      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	3308      	adds	r3, #8
 8003478:	623b      	str	r3, [r7, #32]
          break;
 800347a:	e01e      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	330c      	adds	r3, #12
 8003482:	623b      	str	r3, [r7, #32]
          break;
 8003484:	e019      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d102      	bne.n	8003494 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800348e:	2304      	movs	r3, #4
 8003490:	623b      	str	r3, [r7, #32]
          break;
 8003492:	e012      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800349c:	2308      	movs	r3, #8
 800349e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	611a      	str	r2, [r3, #16]
          break;
 80034a6:	e008      	b.n	80034ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034a8:	2308      	movs	r3, #8
 80034aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	615a      	str	r2, [r3, #20]
          break;
 80034b2:	e002      	b.n	80034ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034b4:	2300      	movs	r3, #0
 80034b6:	623b      	str	r3, [r7, #32]
          break;
 80034b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	2bff      	cmp	r3, #255	; 0xff
 80034be:	d801      	bhi.n	80034c4 <HAL_GPIO_Init+0xec>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	e001      	b.n	80034c8 <HAL_GPIO_Init+0xf0>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3304      	adds	r3, #4
 80034c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2bff      	cmp	r3, #255	; 0xff
 80034ce:	d802      	bhi.n	80034d6 <HAL_GPIO_Init+0xfe>
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x104>
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	3b08      	subs	r3, #8
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	210f      	movs	r1, #15
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	401a      	ands	r2, r3
 80034ee:	6a39      	ldr	r1, [r7, #32]
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	431a      	orrs	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 8096 	beq.w	8003636 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800350a:	4b59      	ldr	r3, [pc, #356]	; (8003670 <HAL_GPIO_Init+0x298>)
 800350c:	699b      	ldr	r3, [r3, #24]
 800350e:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_GPIO_Init+0x298>)
 8003510:	f043 0301 	orr.w	r3, r3, #1
 8003514:	6193      	str	r3, [r2, #24]
 8003516:	4b56      	ldr	r3, [pc, #344]	; (8003670 <HAL_GPIO_Init+0x298>)
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003522:	4a54      	ldr	r2, [pc, #336]	; (8003674 <HAL_GPIO_Init+0x29c>)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4013      	ands	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a4b      	ldr	r2, [pc, #300]	; (8003678 <HAL_GPIO_Init+0x2a0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_GPIO_Init+0x19e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a4a      	ldr	r2, [pc, #296]	; (800367c <HAL_GPIO_Init+0x2a4>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00d      	beq.n	8003572 <HAL_GPIO_Init+0x19a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a49      	ldr	r2, [pc, #292]	; (8003680 <HAL_GPIO_Init+0x2a8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d007      	beq.n	800356e <HAL_GPIO_Init+0x196>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a48      	ldr	r2, [pc, #288]	; (8003684 <HAL_GPIO_Init+0x2ac>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d101      	bne.n	800356a <HAL_GPIO_Init+0x192>
 8003566:	2303      	movs	r3, #3
 8003568:	e006      	b.n	8003578 <HAL_GPIO_Init+0x1a0>
 800356a:	2304      	movs	r3, #4
 800356c:	e004      	b.n	8003578 <HAL_GPIO_Init+0x1a0>
 800356e:	2302      	movs	r3, #2
 8003570:	e002      	b.n	8003578 <HAL_GPIO_Init+0x1a0>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <HAL_GPIO_Init+0x1a0>
 8003576:	2300      	movs	r3, #0
 8003578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800357a:	f002 0203 	and.w	r2, r2, #3
 800357e:	0092      	lsls	r2, r2, #2
 8003580:	4093      	lsls	r3, r2
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	4313      	orrs	r3, r2
 8003586:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003588:	493a      	ldr	r1, [pc, #232]	; (8003674 <HAL_GPIO_Init+0x29c>)
 800358a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358c:	089b      	lsrs	r3, r3, #2
 800358e:	3302      	adds	r3, #2
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d006      	beq.n	80035b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035a2:	4b39      	ldr	r3, [pc, #228]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	4938      	ldr	r1, [pc, #224]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	600b      	str	r3, [r1, #0]
 80035ae:	e006      	b.n	80035be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035b0:	4b35      	ldr	r3, [pc, #212]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	43db      	mvns	r3, r3
 80035b8:	4933      	ldr	r1, [pc, #204]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d006      	beq.n	80035d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035ca:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	492e      	ldr	r1, [pc, #184]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	604b      	str	r3, [r1, #4]
 80035d6:	e006      	b.n	80035e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035d8:	4b2b      	ldr	r3, [pc, #172]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	43db      	mvns	r3, r3
 80035e0:	4929      	ldr	r1, [pc, #164]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	4924      	ldr	r1, [pc, #144]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	608b      	str	r3, [r1, #8]
 80035fe:	e006      	b.n	800360e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	43db      	mvns	r3, r3
 8003608:	491f      	ldr	r1, [pc, #124]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 800360a:	4013      	ands	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d006      	beq.n	8003628 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	491a      	ldr	r1, [pc, #104]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	4313      	orrs	r3, r2
 8003624:	60cb      	str	r3, [r1, #12]
 8003626:	e006      	b.n	8003636 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	43db      	mvns	r3, r3
 8003630:	4915      	ldr	r1, [pc, #84]	; (8003688 <HAL_GPIO_Init+0x2b0>)
 8003632:	4013      	ands	r3, r2
 8003634:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003638:	3301      	adds	r3, #1
 800363a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	fa22 f303 	lsr.w	r3, r2, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	f47f aed0 	bne.w	80033ec <HAL_GPIO_Init+0x14>
  }
}
 800364c:	bf00      	nop
 800364e:	372c      	adds	r7, #44	; 0x2c
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	10210000 	.word	0x10210000
 800365c:	10110000 	.word	0x10110000
 8003660:	10120000 	.word	0x10120000
 8003664:	10310000 	.word	0x10310000
 8003668:	10320000 	.word	0x10320000
 800366c:	10220000 	.word	0x10220000
 8003670:	40021000 	.word	0x40021000
 8003674:	40010000 	.word	0x40010000
 8003678:	40010800 	.word	0x40010800
 800367c:	40010c00 	.word	0x40010c00
 8003680:	40011000 	.word	0x40011000
 8003684:	40011400 	.word	0x40011400
 8003688:	40010400 	.word	0x40010400

0800368c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	460b      	mov	r3, r1
 8003696:	807b      	strh	r3, [r7, #2]
 8003698:	4613      	mov	r3, r2
 800369a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800369c:	787b      	ldrb	r3, [r7, #1]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036a2:	887a      	ldrh	r2, [r7, #2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036a8:	e003      	b.n	80036b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036aa:	887b      	ldrh	r3, [r7, #2]
 80036ac:	041a      	lsls	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	887b      	ldrh	r3, [r7, #2]
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d4:	887a      	ldrh	r2, [r7, #2]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036da:	e002      	b.n	80036e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036dc:	887a      	ldrh	r2, [r7, #2]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	611a      	str	r2, [r3, #16]
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80036ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036ee:	b08b      	sub	sp, #44	; 0x2c
 80036f0:	af06      	add	r7, sp, #24
 80036f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e0d3      	b.n	80038a6 <HAL_PCD_Init+0x1ba>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d106      	bne.n	8003718 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f004 fe3c 	bl	8008390 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2203      	movs	r2, #3
 800371c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f001 ff94 	bl	8005652 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	603b      	str	r3, [r7, #0]
 8003730:	687e      	ldr	r6, [r7, #4]
 8003732:	466d      	mov	r5, sp
 8003734:	f106 0410 	add.w	r4, r6, #16
 8003738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	602b      	str	r3, [r5, #0]
 8003740:	1d33      	adds	r3, r6, #4
 8003742:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003744:	6838      	ldr	r0, [r7, #0]
 8003746:	f001 ff5d 	bl	8005604 <USB_CoreInit>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2202      	movs	r2, #2
 8003754:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0a4      	b.n	80038a6 <HAL_PCD_Init+0x1ba>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2100      	movs	r1, #0
 8003762:	4618      	mov	r0, r3
 8003764:	f001 ff91 	bl	800568a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
 800376c:	e035      	b.n	80037da <HAL_PCD_Init+0xee>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	015b      	lsls	r3, r3, #5
 8003774:	4413      	add	r3, r2
 8003776:	3329      	adds	r3, #41	; 0x29
 8003778:	2201      	movs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800377c:	7bfb      	ldrb	r3, [r7, #15]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	015b      	lsls	r3, r3, #5
 8003782:	4413      	add	r3, r2
 8003784:	3328      	adds	r3, #40	; 0x28
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	b291      	uxth	r1, r2
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	015b      	lsls	r3, r3, #5
 8003794:	4413      	add	r3, r2
 8003796:	3336      	adds	r3, #54	; 0x36
 8003798:	460a      	mov	r2, r1
 800379a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800379c:	7bfb      	ldrb	r3, [r7, #15]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	015b      	lsls	r3, r3, #5
 80037a2:	4413      	add	r3, r2
 80037a4:	332b      	adds	r3, #43	; 0x2b
 80037a6:	2200      	movs	r2, #0
 80037a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	3338      	adds	r3, #56	; 0x38
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	015b      	lsls	r3, r3, #5
 80037be:	4413      	add	r3, r2
 80037c0:	333c      	adds	r3, #60	; 0x3c
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	3302      	adds	r3, #2
 80037cc:	015b      	lsls	r3, r3, #5
 80037ce:	4413      	add	r3, r2
 80037d0:	2200      	movs	r2, #0
 80037d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	3301      	adds	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d3c4      	bcc.n	800376e <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]
 80037e8:	e031      	b.n	800384e <HAL_PCD_Init+0x162>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	4413      	add	r3, r2
 80037f2:	f203 1329 	addw	r3, r3, #297	; 0x129
 80037f6:	2200      	movs	r2, #0
 80037f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	015b      	lsls	r3, r3, #5
 8003800:	4413      	add	r3, r2
 8003802:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	015b      	lsls	r3, r3, #5
 8003810:	4413      	add	r3, r2
 8003812:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8003816:	2200      	movs	r2, #0
 8003818:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800381a:	7bfb      	ldrb	r3, [r7, #15]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	015b      	lsls	r3, r3, #5
 8003820:	4413      	add	r3, r2
 8003822:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8003826:	2200      	movs	r2, #0
 8003828:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	4413      	add	r3, r2
 8003832:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	330a      	adds	r3, #10
 8003840:	015b      	lsls	r3, r3, #5
 8003842:	4413      	add	r3, r2
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003848:	7bfb      	ldrb	r3, [r7, #15]
 800384a:	3301      	adds	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	7bfa      	ldrb	r2, [r7, #15]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	429a      	cmp	r2, r3
 8003856:	d3c8      	bcc.n	80037ea <HAL_PCD_Init+0xfe>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	603b      	str	r3, [r7, #0]
 800385e:	687e      	ldr	r6, [r7, #4]
 8003860:	466d      	mov	r5, sp
 8003862:	f106 0410 	add.w	r4, r6, #16
 8003866:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003868:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	1d33      	adds	r3, r6, #4
 8003870:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003872:	6838      	ldr	r0, [r7, #0]
 8003874:	f001 ff15 	bl	80056a2 <USB_DevInit>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d005      	beq.n	800388a <HAL_PCD_Init+0x19e>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
    return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e00d      	b.n	80038a6 <HAL_PCD_Init+0x1ba>
  }

  hpcd->USB_Address = 0U;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  (void)USB_DevDisconnect(hpcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f002 ff53 	bl	800674a <USB_DevDisconnect>

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3714      	adds	r7, #20
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080038ae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_PCD_Start+0x16>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e016      	b.n	80038f2 <HAL_PCD_Start+0x44>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80038cc:	2101      	movs	r1, #1
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f004 ffc5 	bl	800885e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */
  (void)USB_DevConnect(hpcd->Instance);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4618      	mov	r0, r3
 80038da:	f002 ff2c 	bl	8006736 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 fe9e 	bl	8005624 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b082      	sub	sp, #8
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f002 ff29 	bl	800675e <USB_ReadInterrupts>
 800390c:	4603      	mov	r3, r0
 800390e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003912:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003916:	d102      	bne.n	800391e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 faf3 	bl	8003f04 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f002 ff1b 	bl	800675e <USB_ReadInterrupts>
 8003928:	4603      	mov	r3, r0
 800392a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003932:	d112      	bne.n	800395a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800393c:	b29a      	uxth	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003946:	b292      	uxth	r2, r2
 8003948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f004 fd94 	bl	800847a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f8de 	bl	8003b16 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f002 fefd 	bl	800675e <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800396a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800396e:	d10b      	bne.n	8003988 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003982:	b292      	uxth	r2, r2
 8003984:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f002 fee6 	bl	800675e <USB_ReadInterrupts>
 8003992:	4603      	mov	r3, r0
 8003994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d10b      	bne.n	80039b6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80039a6:	b29a      	uxth	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b0:	b292      	uxth	r2, r2
 80039b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f002 fecf 	bl	800675e <USB_ReadInterrupts>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ca:	d126      	bne.n	8003a1a <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0204 	bic.w	r2, r2, #4
 80039de:	b292      	uxth	r2, r2
 80039e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0208 	bic.w	r2, r2, #8
 80039f6:	b292      	uxth	r2, r2
 80039f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f004 fd75 	bl	80084ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a14:	b292      	uxth	r2, r2
 8003a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f002 fe9d 	bl	800675e <USB_ReadInterrupts>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2e:	d13d      	bne.n	8003aac <HAL_PCD_IRQHandler+0x1b2>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0208 	orr.w	r2, r2, #8
 8003a42:	b292      	uxth	r2, r2
 8003a44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5a:	b292      	uxth	r2, r2
 8003a5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0204 	orr.w	r2, r2, #4
 8003a72:	b292      	uxth	r2, r2
 8003a74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* WA: Clear Wakeup flag if raised with suspend signal */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f002 fe6e 	bl	800675e <USB_ReadInterrupts>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a8c:	d10b      	bne.n	8003aa6 <HAL_PCD_IRQHandler+0x1ac>
    {
       __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003aa0:	b292      	uxth	r2, r2
 8003aa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f004 fd06 	bl	80084b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f002 fe54 	bl	800675e <USB_ReadInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x1e6>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f004 fcbf 	bl	800845e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f002 fe3a 	bl	800675e <USB_ReadInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af4:	d10b      	bne.n	8003b0e <HAL_PCD_IRQHandler+0x214>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b08:	b292      	uxth	r2, r2
 8003b0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8003b0e:	bf00      	nop
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b082      	sub	sp, #8
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_PCD_SetAddress+0x1a>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e013      	b.n	8003b58 <HAL_PCD_SetAddress+0x42>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	78fa      	ldrb	r2, [r7, #3]
 8003b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	78fa      	ldrb	r2, [r7, #3]
 8003b46:	4611      	mov	r1, r2
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f002 fde1 	bl	8006710 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	70fb      	strb	r3, [r7, #3]
 8003b72:	460b      	mov	r3, r1
 8003b74:	803b      	strh	r3, [r7, #0]
 8003b76:	4613      	mov	r3, r2
 8003b78:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	da0b      	bge.n	8003b9e <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b86:	78fb      	ldrb	r3, [r7, #3]
 8003b88:	f003 0307 	and.w	r3, r3, #7
 8003b8c:	015b      	lsls	r3, r3, #5
 8003b8e:	3328      	adds	r3, #40	; 0x28
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	705a      	strb	r2, [r3, #1]
 8003b9c:	e00b      	b.n	8003bb6 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	015b      	lsls	r3, r3, #5
 8003ba6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4413      	add	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	b2da      	uxtb	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003bc2:	883a      	ldrh	r2, [r7, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	78ba      	ldrb	r2, [r7, #2]
 8003bcc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	785b      	ldrb	r3, [r3, #1]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003be0:	78bb      	ldrb	r3, [r7, #2]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d102      	bne.n	8003bec <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2200      	movs	r2, #0
 8003bea:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_PCD_EP_Open+0x9a>
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e00e      	b.n	8003c18 <HAL_PCD_EP_Open+0xb8>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	68f9      	ldr	r1, [r7, #12]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f001 fd6f 	bl	80056ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8003c16:	7afb      	ldrb	r3, [r7, #11]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	460b      	mov	r3, r1
 8003c2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	da0b      	bge.n	8003c4c <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	015b      	lsls	r3, r3, #5
 8003c3c:	3328      	adds	r3, #40	; 0x28
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	4413      	add	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	705a      	strb	r2, [r3, #1]
 8003c4a:	e00b      	b.n	8003c64 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c4c:	78fb      	ldrb	r3, [r7, #3]
 8003c4e:	f003 0307 	and.w	r3, r3, #7
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2200      	movs	r2, #0
 8003c62:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	b2da      	uxtb	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_EP_Close+0x5e>
 8003c7a:	2302      	movs	r3, #2
 8003c7c:	e00e      	b.n	8003c9c <HAL_PCD_EP_Close+0x7c>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 f81b 	bl	8005cc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b086      	sub	sp, #24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	607a      	str	r2, [r7, #4]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cb4:	7afb      	ldrb	r3, [r7, #11]
 8003cb6:	f003 0307 	and.w	r3, r3, #7
 8003cba:	015b      	lsls	r3, r3, #5
 8003cbc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cde:	7afb      	ldrb	r3, [r7, #11]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cea:	7afb      	ldrb	r3, [r7, #11]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d106      	bne.n	8003d02 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6979      	ldr	r1, [r7, #20]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f002 f97a 	bl	8005ff4 <USB_EPStartXfer>
 8003d00:	e005      	b.n	8003d0e <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6979      	ldr	r1, [r7, #20]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f002 f973 	bl	8005ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	330a      	adds	r3, #10
 8003d2e:	015b      	lsls	r3, r3, #5
 8003d30:	4413      	add	r3, r2
 8003d32:	3304      	adds	r3, #4
 8003d34:	681b      	ldr	r3, [r3, #0]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	015b      	lsls	r3, r3, #5
 8003d58:	3328      	adds	r3, #40	; 0x28
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	2201      	movs	r2, #1
 8003d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d78:	7afb      	ldrb	r3, [r7, #11]
 8003d7a:	f003 0307 	and.w	r3, r3, #7
 8003d7e:	b2da      	uxtb	r2, r3
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	f003 0307 	and.w	r3, r3, #7
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6979      	ldr	r1, [r7, #20]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f002 f92d 	bl	8005ff4 <USB_EPStartXfer>
 8003d9a:	e005      	b.n	8003da8 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6979      	ldr	r1, [r7, #20]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f002 f926 	bl	8005ff4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
 8003dba:	460b      	mov	r3, r1
 8003dbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 0207 	and.w	r2, r3, #7
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d901      	bls.n	8003dd0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e046      	b.n	8003e5e <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	da0b      	bge.n	8003df0 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dd8:	78fb      	ldrb	r3, [r7, #3]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	015b      	lsls	r3, r3, #5
 8003de0:	3328      	adds	r3, #40	; 0x28
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	4413      	add	r3, r2
 8003de6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	705a      	strb	r2, [r3, #1]
 8003dee:	e009      	b.n	8003e04 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003df0:	78fb      	ldrb	r3, [r7, #3]
 8003df2:	015b      	lsls	r3, r3, #5
 8003df4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_PCD_EP_SetStall+0x72>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e01c      	b.n	8003e5e <HAL_PCD_EP_SetStall+0xac>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68f9      	ldr	r1, [r7, #12]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 fb96 	bl	8006564 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e38:	78fb      	ldrb	r3, [r7, #3]
 8003e3a:	f003 0307 	and.w	r3, r3, #7
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d108      	bne.n	8003e54 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	4610      	mov	r0, r2
 8003e50:	f002 fc94 	bl	800677c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e66:	b580      	push	{r7, lr}
 8003e68:	b084      	sub	sp, #16
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	460b      	mov	r3, r1
 8003e70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 020f 	and.w	r2, r3, #15
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d901      	bls.n	8003e84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e03a      	b.n	8003efa <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	da0b      	bge.n	8003ea4 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	015b      	lsls	r3, r3, #5
 8003e94:	3328      	adds	r3, #40	; 0x28
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	4413      	add	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	705a      	strb	r2, [r3, #1]
 8003ea2:	e00b      	b.n	8003ebc <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	b2da      	uxtb	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_EP_ClrStall+0x76>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e00e      	b.n	8003efa <HAL_PCD_EP_ClrStall+0x94>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68f9      	ldr	r1, [r7, #12]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f002 fb7c 	bl	80065e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f04:	b590      	push	{r4, r7, lr}
 8003f06:	b089      	sub	sp, #36	; 0x24
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f0c:	e282      	b.n	8004414 <PCD_EP_ISR_Handler+0x510>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f16:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f18:	8afb      	ldrh	r3, [r7, #22]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	f003 030f 	and.w	r3, r3, #15
 8003f20:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8003f22:	7d7b      	ldrb	r3, [r7, #21]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f040 8142 	bne.w	80041ae <PCD_EP_ISR_Handler+0x2aa>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f2a:	8afb      	ldrh	r3, [r7, #22]
 8003f2c:	f003 0310 	and.w	r3, r3, #16
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d151      	bne.n	8003fd8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	881b      	ldrh	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	b29c      	uxth	r4, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8003f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3328      	adds	r3, #40	; 0x28
 8003f5a:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	00db      	lsls	r3, r3, #3
 8003f6e:	4413      	add	r3, r2
 8003f70:	3302      	adds	r3, #2
 8003f72:	005b      	lsls	r3, r3, #1
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	6812      	ldr	r2, [r2, #0]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	695a      	ldr	r2, [r3, #20]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	69db      	ldr	r3, [r3, #28]
 8003f90:	441a      	add	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003f96:	2100      	movs	r1, #0
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f004 fa49 	bl	8008430 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8234 	beq.w	8004414 <PCD_EP_ISR_Handler+0x510>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	699b      	ldr	r3, [r3, #24]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 822f 	bne.w	8004414 <PCD_EP_ISR_Handler+0x510>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	b292      	uxth	r2, r2
 8003fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8003fd6:	e21d      	b.n	8004414 <PCD_EP_ISR_Handler+0x510>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003fde:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	881b      	ldrh	r3, [r3, #0]
 8003fe6:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003fe8:	8a7b      	ldrh	r3, [r7, #18]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d033      	beq.n	800405a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4413      	add	r3, r2
 8004006:	3306      	adds	r3, #6
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	6812      	ldr	r2, [r2, #0]
 800400e:	4413      	add	r3, r2
 8004010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004014:	881b      	ldrh	r3, [r3, #0]
 8004016:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004030:	b29b      	uxth	r3, r3
 8004032:	f002 fbf2 	bl	800681a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1*/
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	881b      	ldrh	r3, [r3, #0]
 800403c:	b29a      	uxth	r2, r3
 800403e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004042:	4013      	ands	r3, r2
 8004044:	b29c      	uxth	r4, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800404e:	b292      	uxth	r2, r2
 8004050:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f004 f9c2 	bl	80083dc <HAL_PCD_SetupStageCallback>
 8004058:	e1dc      	b.n	8004414 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800405a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f280 81d8 	bge.w	8004414 <PCD_EP_ISR_Handler+0x510>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	881b      	ldrh	r3, [r3, #0]
 800406a:	b29a      	uxth	r2, r3
 800406c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004070:	4013      	ands	r3, r2
 8004072:	b29c      	uxth	r4, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 800407c:	b292      	uxth	r2, r2
 800407e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004088:	b29b      	uxth	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	3306      	adds	r3, #6
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6812      	ldr	r2, [r2, #0]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040a2:	881b      	ldrh	r3, [r3, #0]
 80040a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	69db      	ldr	r3, [r3, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d019      	beq.n	80040e8 <PCD_EP_ISR_Handler+0x1e4>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d015      	beq.n	80040e8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6959      	ldr	r1, [r3, #20]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f002 fba4 	bl	800681a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	695a      	ldr	r2, [r3, #20]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	441a      	add	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80040e0:	2100      	movs	r1, #0
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f004 f98c 	bl	8008400 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	461c      	mov	r4, r3
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	441c      	add	r4, r3
 80040fa:	f204 430c 	addw	r3, r4, #1036	; 0x40c
 80040fe:	461c      	mov	r4, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10e      	bne.n	8004126 <PCD_EP_ISR_Handler+0x222>
 8004108:	8823      	ldrh	r3, [r4, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004110:	b29b      	uxth	r3, r3
 8004112:	8023      	strh	r3, [r4, #0]
 8004114:	8823      	ldrh	r3, [r4, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800411c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004120:	b29b      	uxth	r3, r3
 8004122:	8023      	strh	r3, [r4, #0]
 8004124:	e02d      	b.n	8004182 <PCD_EP_ISR_Handler+0x27e>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b3e      	cmp	r3, #62	; 0x3e
 800412c:	d812      	bhi.n	8004154 <PCD_EP_ISR_Handler+0x250>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	085b      	lsrs	r3, r3, #1
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d002      	beq.n	8004148 <PCD_EP_ISR_Handler+0x244>
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	3301      	adds	r3, #1
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	b29b      	uxth	r3, r3
 800414c:	029b      	lsls	r3, r3, #10
 800414e:	b29b      	uxth	r3, r3
 8004150:	8023      	strh	r3, [r4, #0]
 8004152:	e016      	b.n	8004182 <PCD_EP_ISR_Handler+0x27e>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	095b      	lsrs	r3, r3, #5
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <PCD_EP_ISR_Handler+0x26a>
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	3b01      	subs	r3, #1
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	b29b      	uxth	r3, r3
 8004172:	029b      	lsls	r3, r3, #10
 8004174:	b29b      	uxth	r3, r3
 8004176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800417a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800417e:	b29b      	uxth	r3, r3
 8004180:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	b29c      	uxth	r4, r3
 8004194:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8004198:	b29c      	uxth	r4, r3
 800419a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800419e:	b29c      	uxth	r4, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	4ba2      	ldr	r3, [pc, #648]	; (8004430 <PCD_EP_ISR_Handler+0x52c>)
 80041a6:	4323      	orrs	r3, r4
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	8013      	strh	r3, [r2, #0]
 80041ac:	e132      	b.n	8004414 <PCD_EP_ISR_Handler+0x510>
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	7d7b      	ldrb	r3, [r7, #21]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	881b      	ldrh	r3, [r3, #0]
 80041bc:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80041be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f280 80d1 	bge.w	800436a <PCD_EP_ISR_Handler+0x466>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	461a      	mov	r2, r3
 80041ce:	7d7b      	ldrb	r3, [r7, #21]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80041dc:	4013      	ands	r3, r2
 80041de:	b29c      	uxth	r4, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	7d7b      	ldrb	r3, [r7, #21]
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80041f0:	b292      	uxth	r2, r2
 80041f2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80041f4:	7d7b      	ldrb	r3, [r7, #21]
 80041f6:	015b      	lsls	r3, r3, #5
 80041f8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	4413      	add	r3, r2
 8004200:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering*/
        if (ep->doublebuffer == 0U)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	7b1b      	ldrb	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d121      	bne.n	800424e <PCD_EP_ISR_Handler+0x34a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004212:	b29b      	uxth	r3, r3
 8004214:	461a      	mov	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	4413      	add	r3, r2
 800421e:	3306      	adds	r3, #6
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6812      	ldr	r2, [r2, #0]
 8004226:	4413      	add	r3, r2
 8004228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004232:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8004234:	8bfb      	ldrh	r3, [r7, #30]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d072      	beq.n	8004320 <PCD_EP_ISR_Handler+0x41c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6818      	ldr	r0, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6959      	ldr	r1, [r3, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	88da      	ldrh	r2, [r3, #6]
 8004246:	8bfb      	ldrh	r3, [r7, #30]
 8004248:	f002 fae7 	bl	800681a <USB_ReadPMA>
 800424c:	e068      	b.n	8004320 <PCD_EP_ISR_Handler+0x41c>
          }
        }
        else
        {
          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	461a      	mov	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	881b      	ldrh	r3, [r3, #0]
 800425e:	b29b      	uxth	r3, r3
 8004260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d021      	beq.n	80042ac <PCD_EP_ISR_Handler+0x3a8>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004270:	b29b      	uxth	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	4413      	add	r3, r2
 800427c:	3302      	adds	r3, #2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004290:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8004292:	8bfb      	ldrh	r3, [r7, #30]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d02a      	beq.n	80042ee <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6959      	ldr	r1, [r3, #20]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	891a      	ldrh	r2, [r3, #8]
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	f002 fab8 	bl	800681a <USB_ReadPMA>
 80042aa:	e020      	b.n	80042ee <PCD_EP_ISR_Handler+0x3ea>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	461a      	mov	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	4413      	add	r3, r2
 80042c0:	3306      	adds	r3, #6
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042d4:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80042d6:	8bfb      	ldrh	r3, [r7, #30]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <PCD_EP_ISR_Handler+0x3ea>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	895a      	ldrh	r2, [r3, #10]
 80042e8:	8bfb      	ldrh	r3, [r7, #30]
 80042ea:	f002 fa96 	bl	800681a <USB_ReadPMA>
            }
          }
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004308:	b29c      	uxth	r4, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	009b      	lsls	r3, r3, #2
 8004316:	441a      	add	r2, r3
 8004318:	4b46      	ldr	r3, [pc, #280]	; (8004434 <PCD_EP_ISR_Handler+0x530>)
 800431a:	4323      	orrs	r3, r4
 800431c:	b29b      	uxth	r3, r3
 800431e:	8013      	strh	r3, [r2, #0]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count += count;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	69da      	ldr	r2, [r3, #28]
 8004324:	8bfb      	ldrh	r3, [r7, #30]
 8004326:	441a      	add	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	695a      	ldr	r2, [r3, #20]
 8004330:	8bfb      	ldrh	r3, [r7, #30]
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <PCD_EP_ISR_Handler+0x446>
 8004340:	8bfa      	ldrh	r2, [r7, #30]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	429a      	cmp	r2, r3
 8004348:	d206      	bcs.n	8004358 <PCD_EP_ISR_Handler+0x454>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	4619      	mov	r1, r3
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f004 f855 	bl	8008400 <HAL_PCD_DataOutStageCallback>
 8004356:	e008      	b.n	800436a <PCD_EP_ISR_Handler+0x466>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	7819      	ldrb	r1, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7ff fc9d 	bl	8003ca4 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800436a:	8a7b      	ldrh	r3, [r7, #18]
 800436c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d04f      	beq.n	8004414 <PCD_EP_ISR_Handler+0x510>
      {
        ep = &hpcd->IN_ep[epindex];
 8004374:	7d7b      	ldrb	r3, [r7, #21]
 8004376:	015b      	lsls	r3, r3, #5
 8004378:	3328      	adds	r3, #40	; 0x28
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4413      	add	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	7d7b      	ldrb	r3, [r7, #21]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004398:	b29c      	uxth	r4, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	7d7b      	ldrb	r3, [r7, #21]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	441a      	add	r2, r3
 80043a6:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80043aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	8013      	strh	r3, [r2, #0]

        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	461a      	mov	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	4413      	add	r3, r2
 80043c6:	3302      	adds	r3, #2
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	441a      	add	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <PCD_EP_ISR_Handler+0x4fe>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f004 f818 	bl	8008430 <HAL_PCD_DataInStageCallback>
 8004400:	e008      	b.n	8004414 <PCD_EP_ISR_Handler+0x510>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	7819      	ldrb	r1, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff fc96 	bl	8003d40 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800441c:	b29b      	uxth	r3, r3
 800441e:	b21b      	sxth	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	f6ff ad74 	blt.w	8003f0e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8004426:	2300      	movs	r3, #0
}
 8004428:	4618      	mov	r0, r3
 800442a:	3724      	adds	r7, #36	; 0x24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd90      	pop	{r4, r7, pc}
 8004430:	ffff8080 	.word	0xffff8080
 8004434:	ffff80c0 	.word	0xffff80c0

08004438 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607b      	str	r3, [r7, #4]
 8004442:	460b      	mov	r3, r1
 8004444:	817b      	strh	r3, [r7, #10]
 8004446:	4613      	mov	r3, r2
 8004448:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004456:	897b      	ldrh	r3, [r7, #10]
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	015b      	lsls	r3, r3, #5
 800445e:	3328      	adds	r3, #40	; 0x28
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	617b      	str	r3, [r7, #20]
 8004466:	e006      	b.n	8004476 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004468:	897b      	ldrh	r3, [r7, #10]
 800446a:	015b      	lsls	r3, r3, #5
 800446c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004476:	893b      	ldrh	r3, [r7, #8]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2200      	movs	r2, #0
 8004480:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	b29a      	uxth	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	80da      	strh	r2, [r3, #6]
 800448a:	e00b      	b.n	80044a4 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2201      	movs	r2, #1
 8004490:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	b29a      	uxth	r2, r3
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	0c1b      	lsrs	r3, r3, #16
 800449e:	b29a      	uxth	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bc80      	pop	{r7}
 80044ae:	4770      	bx	lr

080044b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e26c      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f000 8087 	beq.w	80045de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044d0:	4b92      	ldr	r3, [pc, #584]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f003 030c 	and.w	r3, r3, #12
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80044dc:	4b8f      	ldr	r3, [pc, #572]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f003 030c 	and.w	r3, r3, #12
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d112      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
 80044e8:	4b8c      	ldr	r3, [pc, #560]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d10b      	bne.n	800450e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f6:	4b89      	ldr	r3, [pc, #548]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d06c      	beq.n	80045dc <HAL_RCC_OscConfig+0x12c>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d168      	bne.n	80045dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e246      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x76>
 8004518:	4b80      	ldr	r3, [pc, #512]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a7f      	ldr	r2, [pc, #508]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	e02e      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x98>
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a7a      	ldr	r2, [pc, #488]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b78      	ldr	r3, [pc, #480]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a77      	ldr	r2, [pc, #476]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e01d      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004550:	d10c      	bne.n	800456c <HAL_RCC_OscConfig+0xbc>
 8004552:	4b72      	ldr	r3, [pc, #456]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a71      	ldr	r2, [pc, #452]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800455c:	6013      	str	r3, [r2, #0]
 800455e:	4b6f      	ldr	r3, [pc, #444]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a6e      	ldr	r2, [pc, #440]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	e00b      	b.n	8004584 <HAL_RCC_OscConfig+0xd4>
 800456c:	4b6b      	ldr	r3, [pc, #428]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a6a      	ldr	r2, [pc, #424]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6013      	str	r3, [r2, #0]
 8004578:	4b68      	ldr	r3, [pc, #416]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a67      	ldr	r2, [pc, #412]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 800457e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004582:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d013      	beq.n	80045b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458c:	f7fe fdf0 	bl	8003170 <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004594:	f7fe fdec 	bl	8003170 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	; 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1fa      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a6:	4b5d      	ldr	r3, [pc, #372]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0xe4>
 80045b2:	e014      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b4:	f7fe fddc 	bl	8003170 <HAL_GetTick>
 80045b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ba:	e008      	b.n	80045ce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045bc:	f7fe fdd8 	bl	8003170 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	2b64      	cmp	r3, #100	; 0x64
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e1e6      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ce:	4b53      	ldr	r3, [pc, #332]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f0      	bne.n	80045bc <HAL_RCC_OscConfig+0x10c>
 80045da:	e000      	b.n	80045de <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d063      	beq.n	80046b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045ea:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f003 030c 	and.w	r3, r3, #12
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d00b      	beq.n	800460e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80045f6:	4b49      	ldr	r3, [pc, #292]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 030c 	and.w	r3, r3, #12
 80045fe:	2b08      	cmp	r3, #8
 8004600:	d11c      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
 8004602:	4b46      	ldr	r3, [pc, #280]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800460a:	2b00      	cmp	r3, #0
 800460c:	d116      	bne.n	800463c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800460e:	4b43      	ldr	r3, [pc, #268]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0302 	and.w	r3, r3, #2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e1ba      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004626:	4b3d      	ldr	r3, [pc, #244]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4939      	ldr	r1, [pc, #228]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004636:	4313      	orrs	r3, r2
 8004638:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	e03a      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d020      	beq.n	8004686 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004644:	4b36      	ldr	r3, [pc, #216]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004646:	2201      	movs	r2, #1
 8004648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464a:	f7fe fd91 	bl	8003170 <HAL_GetTick>
 800464e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004652:	f7fe fd8d 	bl	8003170 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e19b      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004664:	4b2d      	ldr	r3, [pc, #180]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0f0      	beq.n	8004652 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004670:	4b2a      	ldr	r3, [pc, #168]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4927      	ldr	r1, [pc, #156]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 8004680:	4313      	orrs	r3, r2
 8004682:	600b      	str	r3, [r1, #0]
 8004684:	e015      	b.n	80046b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004686:	4b26      	ldr	r3, [pc, #152]	; (8004720 <HAL_RCC_OscConfig+0x270>)
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe fd70 	bl	8003170 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004694:	f7fe fd6c 	bl	8003170 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e17a      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046a6:	4b1d      	ldr	r3, [pc, #116]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d03a      	beq.n	8004734 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d019      	beq.n	80046fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046c6:	4b17      	ldr	r3, [pc, #92]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046c8:	2201      	movs	r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046cc:	f7fe fd50 	bl	8003170 <HAL_GetTick>
 80046d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046d2:	e008      	b.n	80046e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d4:	f7fe fd4c 	bl	8003170 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d901      	bls.n	80046e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e15a      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e6:	4b0d      	ldr	r3, [pc, #52]	; (800471c <HAL_RCC_OscConfig+0x26c>)
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d0f0      	beq.n	80046d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80046f2:	2001      	movs	r0, #1
 80046f4:	f000 faa8 	bl	8004c48 <RCC_Delay>
 80046f8:	e01c      	b.n	8004734 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046fa:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <HAL_RCC_OscConfig+0x274>)
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004700:	f7fe fd36 	bl	8003170 <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004706:	e00f      	b.n	8004728 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004708:	f7fe fd32 	bl	8003170 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b02      	cmp	r3, #2
 8004714:	d908      	bls.n	8004728 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e140      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
 800471a:	bf00      	nop
 800471c:	40021000 	.word	0x40021000
 8004720:	42420000 	.word	0x42420000
 8004724:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004728:	4b9e      	ldr	r3, [pc, #632]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	f003 0302 	and.w	r3, r3, #2
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1e9      	bne.n	8004708 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a6 	beq.w	800488e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004746:	4b97      	ldr	r3, [pc, #604]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004748:	69db      	ldr	r3, [r3, #28]
 800474a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004752:	4b94      	ldr	r3, [pc, #592]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4a93      	ldr	r2, [pc, #588]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	61d3      	str	r3, [r2, #28]
 800475e:	4b91      	ldr	r3, [pc, #580]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004760:	69db      	ldr	r3, [r3, #28]
 8004762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004766:	60bb      	str	r3, [r7, #8]
 8004768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476a:	2301      	movs	r3, #1
 800476c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800476e:	4b8e      	ldr	r3, [pc, #568]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d118      	bne.n	80047ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800477a:	4b8b      	ldr	r3, [pc, #556]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a8a      	ldr	r2, [pc, #552]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 8004780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004786:	f7fe fcf3 	bl	8003170 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478e:	f7fe fcef 	bl	8003170 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b64      	cmp	r3, #100	; 0x64
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e0fd      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a0:	4b81      	ldr	r3, [pc, #516]	; (80049a8 <HAL_RCC_OscConfig+0x4f8>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0f0      	beq.n	800478e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d106      	bne.n	80047c2 <HAL_RCC_OscConfig+0x312>
 80047b4:	4b7b      	ldr	r3, [pc, #492]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	4a7a      	ldr	r2, [pc, #488]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	6213      	str	r3, [r2, #32]
 80047c0:	e02d      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10c      	bne.n	80047e4 <HAL_RCC_OscConfig+0x334>
 80047ca:	4b76      	ldr	r3, [pc, #472]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	4a75      	ldr	r2, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047d0:	f023 0301 	bic.w	r3, r3, #1
 80047d4:	6213      	str	r3, [r2, #32]
 80047d6:	4b73      	ldr	r3, [pc, #460]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	4a72      	ldr	r2, [pc, #456]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047dc:	f023 0304 	bic.w	r3, r3, #4
 80047e0:	6213      	str	r3, [r2, #32]
 80047e2:	e01c      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	2b05      	cmp	r3, #5
 80047ea:	d10c      	bne.n	8004806 <HAL_RCC_OscConfig+0x356>
 80047ec:	4b6d      	ldr	r3, [pc, #436]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	4a6c      	ldr	r2, [pc, #432]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047f2:	f043 0304 	orr.w	r3, r3, #4
 80047f6:	6213      	str	r3, [r2, #32]
 80047f8:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4a69      	ldr	r2, [pc, #420]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80047fe:	f043 0301 	orr.w	r3, r3, #1
 8004802:	6213      	str	r3, [r2, #32]
 8004804:	e00b      	b.n	800481e <HAL_RCC_OscConfig+0x36e>
 8004806:	4b67      	ldr	r3, [pc, #412]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4a66      	ldr	r2, [pc, #408]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 800480c:	f023 0301 	bic.w	r3, r3, #1
 8004810:	6213      	str	r3, [r2, #32]
 8004812:	4b64      	ldr	r3, [pc, #400]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	4a63      	ldr	r2, [pc, #396]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004818:	f023 0304 	bic.w	r3, r3, #4
 800481c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d015      	beq.n	8004852 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004826:	f7fe fca3 	bl	8003170 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482e:	f7fe fc9f 	bl	8003170 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	f241 3288 	movw	r2, #5000	; 0x1388
 800483c:	4293      	cmp	r3, r2
 800483e:	d901      	bls.n	8004844 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004840:	2303      	movs	r3, #3
 8004842:	e0ab      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d0ee      	beq.n	800482e <HAL_RCC_OscConfig+0x37e>
 8004850:	e014      	b.n	800487c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fe fc8d 	bl	8003170 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe fc89 	bl	8003170 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e095      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004870:	4b4c      	ldr	r3, [pc, #304]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ee      	bne.n	800485a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d105      	bne.n	800488e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004882:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	4a47      	ldr	r2, [pc, #284]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800488c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	2b00      	cmp	r3, #0
 8004894:	f000 8081 	beq.w	800499a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d061      	beq.n	8004968 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d146      	bne.n	800493a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ac:	4b3f      	ldr	r3, [pc, #252]	; (80049ac <HAL_RCC_OscConfig+0x4fc>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048b2:	f7fe fc5d 	bl	8003170 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ba:	f7fe fc59 	bl	8003170 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e067      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048cc:	4b35      	ldr	r3, [pc, #212]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1f0      	bne.n	80048ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d108      	bne.n	80048f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80048e2:	4b30      	ldr	r3, [pc, #192]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	492d      	ldr	r1, [pc, #180]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80048f0:	4313      	orrs	r3, r2
 80048f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048f4:	4b2b      	ldr	r3, [pc, #172]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a19      	ldr	r1, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004904:	430b      	orrs	r3, r1
 8004906:	4927      	ldr	r1, [pc, #156]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004908:	4313      	orrs	r3, r2
 800490a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_OscConfig+0x4fc>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004912:	f7fe fc2d 	bl	8003170 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491a:	f7fe fc29 	bl	8003170 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e037      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800492c:	4b1d      	ldr	r3, [pc, #116]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x46a>
 8004938:	e02f      	b.n	800499a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800493a:	4b1c      	ldr	r3, [pc, #112]	; (80049ac <HAL_RCC_OscConfig+0x4fc>)
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004940:	f7fe fc16 	bl	8003170 <HAL_GetTick>
 8004944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004948:	f7fe fc12 	bl	8003170 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b02      	cmp	r3, #2
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e020      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800495a:	4b12      	ldr	r3, [pc, #72]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x498>
 8004966:	e018      	b.n	800499a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	69db      	ldr	r3, [r3, #28]
 800496c:	2b01      	cmp	r3, #1
 800496e:	d101      	bne.n	8004974 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e013      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004974:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCC_OscConfig+0x4f4>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	429a      	cmp	r2, r3
 8004986:	d106      	bne.n	8004996 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d001      	beq.n	800499a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e000      	b.n	800499c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40007000 	.word	0x40007000
 80049ac:	42420060 	.word	0x42420060

080049b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0d0      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b6a      	ldr	r3, [pc, #424]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d910      	bls.n	80049f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b67      	ldr	r3, [pc, #412]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 0207 	bic.w	r2, r3, #7
 80049da:	4965      	ldr	r1, [pc, #404]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e2:	4b63      	ldr	r3, [pc, #396]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d001      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0b8      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d020      	beq.n	8004a42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d005      	beq.n	8004a18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a0c:	4b59      	ldr	r3, [pc, #356]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	4a58      	ldr	r2, [pc, #352]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0308 	and.w	r3, r3, #8
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	4a52      	ldr	r2, [pc, #328]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a30:	4b50      	ldr	r3, [pc, #320]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	494d      	ldr	r1, [pc, #308]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d040      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a56:	4b47      	ldr	r3, [pc, #284]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d115      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e07f      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a6e:	4b41      	ldr	r3, [pc, #260]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e073      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e06b      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b39      	ldr	r3, [pc, #228]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4936      	ldr	r1, [pc, #216]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004aa0:	f7fe fb66 	bl	8003170 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fe fb62 	bl	8003170 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e053      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ad0:	4b27      	ldr	r3, [pc, #156]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d210      	bcs.n	8004b00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ade:	4b24      	ldr	r3, [pc, #144]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f023 0207 	bic.w	r2, r3, #7
 8004ae6:	4922      	ldr	r1, [pc, #136]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aee:	4b20      	ldr	r3, [pc, #128]	; (8004b70 <HAL_RCC_ClockConfig+0x1c0>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	683a      	ldr	r2, [r7, #0]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e032      	b.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d008      	beq.n	8004b1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b0c:	4b19      	ldr	r3, [pc, #100]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	4916      	ldr	r1, [pc, #88]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0308 	and.w	r3, r3, #8
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d009      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b2a:	4b12      	ldr	r3, [pc, #72]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	00db      	lsls	r3, r3, #3
 8004b38:	490e      	ldr	r1, [pc, #56]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b3e:	f000 f821 	bl	8004b84 <HAL_RCC_GetSysClockFreq>
 8004b42:	4601      	mov	r1, r0
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <HAL_RCC_ClockConfig+0x1c4>)
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	091b      	lsrs	r3, r3, #4
 8004b4a:	f003 030f 	and.w	r3, r3, #15
 8004b4e:	4a0a      	ldr	r2, [pc, #40]	; (8004b78 <HAL_RCC_ClockConfig+0x1c8>)
 8004b50:	5cd3      	ldrb	r3, [r2, r3]
 8004b52:	fa21 f303 	lsr.w	r3, r1, r3
 8004b56:	4a09      	ldr	r2, [pc, #36]	; (8004b7c <HAL_RCC_ClockConfig+0x1cc>)
 8004b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b5a:	4b09      	ldr	r3, [pc, #36]	; (8004b80 <HAL_RCC_ClockConfig+0x1d0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7fe fac4 	bl	80030ec <HAL_InitTick>

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	40022000 	.word	0x40022000
 8004b74:	40021000 	.word	0x40021000
 8004b78:	08008ce4 	.word	0x08008ce4
 8004b7c:	20000000 	.word	0x20000000
 8004b80:	20000008 	.word	0x20000008

08004b84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b84:	b490      	push	{r4, r7}
 8004b86:	b08a      	sub	sp, #40	; 0x28
 8004b88:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004b8c:	1d3c      	adds	r4, r7, #4
 8004b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004b94:	4b28      	ldr	r3, [pc, #160]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004b96:	881b      	ldrh	r3, [r3, #0]
 8004b98:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bae:	4b23      	ldr	r3, [pc, #140]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d002      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004bbe:	2b08      	cmp	r3, #8
 8004bc0:	d003      	beq.n	8004bca <HAL_RCC_GetSysClockFreq+0x46>
 8004bc2:	e02d      	b.n	8004c20 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004bc6:	623b      	str	r3, [r7, #32]
      break;
 8004bc8:	e02d      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	0c9b      	lsrs	r3, r3, #18
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004bdc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d013      	beq.n	8004c10 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004be8:	4b14      	ldr	r3, [pc, #80]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	0c5b      	lsrs	r3, r3, #17
 8004bee:	f003 0301 	and.w	r3, r3, #1
 8004bf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004bfc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	4a0f      	ldr	r2, [pc, #60]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c02:	fb02 f203 	mul.w	r2, r2, r3
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c0c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c0e:	e004      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4a0c      	ldr	r2, [pc, #48]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004c14:	fb02 f303 	mul.w	r3, r2, r3
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1c:	623b      	str	r3, [r7, #32]
      break;
 8004c1e:	e002      	b.n	8004c26 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b07      	ldr	r3, [pc, #28]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004c22:	623b      	str	r3, [r7, #32]
      break;
 8004c24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c26:	6a3b      	ldr	r3, [r7, #32]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3728      	adds	r7, #40	; 0x28
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc90      	pop	{r4, r7}
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	08008ca8 	.word	0x08008ca8
 8004c38:	08008cb8 	.word	0x08008cb8
 8004c3c:	40021000 	.word	0x40021000
 8004c40:	007a1200 	.word	0x007a1200
 8004c44:	003d0900 	.word	0x003d0900

08004c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <RCC_Delay+0x34>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a0a      	ldr	r2, [pc, #40]	; (8004c80 <RCC_Delay+0x38>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	0a5b      	lsrs	r3, r3, #9
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	fb02 f303 	mul.w	r3, r2, r3
 8004c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004c64:	bf00      	nop
  }
  while (Delay --);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1e5a      	subs	r2, r3, #1
 8004c6a:	60fa      	str	r2, [r7, #12]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1f9      	bne.n	8004c64 <RCC_Delay+0x1c>
}
 8004c70:	bf00      	nop
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	20000000 	.word	0x20000000
 8004c80:	10624dd3 	.word	0x10624dd3

08004c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	613b      	str	r3, [r7, #16]
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d07d      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ca4:	4b4f      	ldr	r3, [pc, #316]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ca6:	69db      	ldr	r3, [r3, #28]
 8004ca8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10d      	bne.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb2:	69db      	ldr	r3, [r3, #28]
 8004cb4:	4a4b      	ldr	r2, [pc, #300]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cba:	61d3      	str	r3, [r2, #28]
 8004cbc:	4b49      	ldr	r3, [pc, #292]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cbe:	69db      	ldr	r3, [r3, #28]
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ccc:	4b46      	ldr	r3, [pc, #280]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d118      	bne.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd8:	4b43      	ldr	r3, [pc, #268]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a42      	ldr	r2, [pc, #264]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce4:	f7fe fa44 	bl	8003170 <HAL_GetTick>
 8004ce8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cea:	e008      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cec:	f7fe fa40 	bl	8003170 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b64      	cmp	r3, #100	; 0x64
 8004cf8:	d901      	bls.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e06d      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	4b3a      	ldr	r3, [pc, #232]	; (8004de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0f0      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0a:	4b36      	ldr	r3, [pc, #216]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02e      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d027      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d28:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d32:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d34:	2201      	movs	r2, #1
 8004d36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d38:	4b2c      	ldr	r3, [pc, #176]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004d3e:	4a29      	ldr	r2, [pc, #164]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d014      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d4e:	f7fe fa0f 	bl	8003170 <HAL_GetTick>
 8004d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d54:	e00a      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d56:	f7fe fa0b 	bl	8003170 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e036      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6c:	4b1d      	ldr	r3, [pc, #116]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	f003 0302 	and.w	r3, r3, #2
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0ee      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d78:	4b1a      	ldr	r3, [pc, #104]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d7a:	6a1b      	ldr	r3, [r3, #32]
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	4917      	ldr	r1, [pc, #92]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004d8a:	7dfb      	ldrb	r3, [r7, #23]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d105      	bne.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d92:	69db      	ldr	r3, [r3, #28]
 8004d94:	4a13      	ldr	r2, [pc, #76]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	490b      	ldr	r1, [pc, #44]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0310 	and.w	r3, r3, #16
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d008      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4904      	ldr	r1, [pc, #16]	; (8004de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40021000 	.word	0x40021000
 8004de8:	40007000 	.word	0x40007000
 8004dec:	42420440 	.word	0x42420440

08004df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e053      	b.n	8004eaa <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d106      	bne.n	8004e22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fd fc09 	bl	8002634 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2202      	movs	r2, #2
 8004e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	431a      	orrs	r2, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	431a      	orrs	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	431a      	orrs	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a1b      	ldr	r3, [r3, #32]
 8004e6a:	ea42 0103 	orr.w	r1, r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	699b      	ldr	r3, [r3, #24]
 8004e7e:	0c1a      	lsrs	r2, r3, #16
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f002 0204 	and.w	r2, r2, #4
 8004e88:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69da      	ldr	r2, [r3, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e98:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b082      	sub	sp, #8
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01d      	b.n	8004f00 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7fd fbf5 	bl	80026c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3304      	adds	r3, #4
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4610      	mov	r0, r2
 8004ef2:	f000 fa39 	bl	8005368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 0307 	and.w	r3, r3, #7
 8004f2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b06      	cmp	r3, #6
 8004f30:	d007      	beq.n	8004f42 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0201 	orr.w	r2, r2, #1
 8004f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bc80      	pop	{r7}
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1a      	ldr	r2, [r3, #32]
 8004f6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f70:	4013      	ands	r3, r2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10f      	bne.n	8004f96 <HAL_TIM_Base_Stop_IT+0x48>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	6a1a      	ldr	r2, [r3, #32]
 8004f7c:	f240 4344 	movw	r3, #1092	; 0x444
 8004f80:	4013      	ands	r3, r2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <HAL_TIM_Base_Stop_IT+0x48>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d122      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d11b      	bne.n	8004ffe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f06f 0202 	mvn.w	r2, #2
 8004fce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 f9a4 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8004fea:	e005      	b.n	8004ff8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f997 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f9a6 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0304 	and.w	r3, r3, #4
 8005008:	2b04      	cmp	r3, #4
 800500a:	d122      	bne.n	8005052 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f003 0304 	and.w	r3, r3, #4
 8005016:	2b04      	cmp	r3, #4
 8005018:	d11b      	bne.n	8005052 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f06f 0204 	mvn.w	r2, #4
 8005022:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2202      	movs	r2, #2
 8005028:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 f97a 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 800503e:	e005      	b.n	800504c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f96d 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f97c 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b08      	cmp	r3, #8
 800505e:	d122      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b08      	cmp	r3, #8
 800506c:	d11b      	bne.n	80050a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f06f 0208 	mvn.w	r2, #8
 8005076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2204      	movs	r2, #4
 800507c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f003 0303 	and.w	r3, r3, #3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f950 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 8005092:	e005      	b.n	80050a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f943 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 f952 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	f003 0310 	and.w	r3, r3, #16
 80050b0:	2b10      	cmp	r3, #16
 80050b2:	d122      	bne.n	80050fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b10      	cmp	r3, #16
 80050c0:	d11b      	bne.n	80050fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f06f 0210 	mvn.w	r2, #16
 80050ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2208      	movs	r2, #8
 80050d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f926 	bl	8005332 <HAL_TIM_IC_CaptureCallback>
 80050e6:	e005      	b.n	80050f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f919 	bl	8005320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f928 	bl	8005344 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	f003 0301 	and.w	r3, r3, #1
 8005104:	2b01      	cmp	r3, #1
 8005106:	d10e      	bne.n	8005126 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f003 0301 	and.w	r3, r3, #1
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f06f 0201 	mvn.w	r2, #1
 800511e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f7fd fbdf 	bl	80028e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d10e      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513e:	2b80      	cmp	r3, #128	; 0x80
 8005140:	d107      	bne.n	8005152 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800514a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 fa50 	bl	80055f2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800515c:	2b40      	cmp	r3, #64	; 0x40
 800515e:	d10e      	bne.n	800517e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516a:	2b40      	cmp	r3, #64	; 0x40
 800516c:	d107      	bne.n	800517e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f8ec 	bl	8005356 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691b      	ldr	r3, [r3, #16]
 8005184:	f003 0320 	and.w	r3, r3, #32
 8005188:	2b20      	cmp	r3, #32
 800518a:	d10e      	bne.n	80051aa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f003 0320 	and.w	r3, r3, #32
 8005196:	2b20      	cmp	r3, #32
 8005198:	d107      	bne.n	80051aa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f06f 0220 	mvn.w	r2, #32
 80051a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa1b 	bl	80055e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051aa:	bf00      	nop
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b084      	sub	sp, #16
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_ConfigClockSource+0x18>
 80051c6:	2302      	movs	r3, #2
 80051c8:	e0a6      	b.n	8005318 <HAL_TIM_ConfigClockSource+0x166>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2202      	movs	r2, #2
 80051d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b40      	cmp	r3, #64	; 0x40
 8005200:	d067      	beq.n	80052d2 <HAL_TIM_ConfigClockSource+0x120>
 8005202:	2b40      	cmp	r3, #64	; 0x40
 8005204:	d80b      	bhi.n	800521e <HAL_TIM_ConfigClockSource+0x6c>
 8005206:	2b10      	cmp	r3, #16
 8005208:	d073      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x140>
 800520a:	2b10      	cmp	r3, #16
 800520c:	d802      	bhi.n	8005214 <HAL_TIM_ConfigClockSource+0x62>
 800520e:	2b00      	cmp	r3, #0
 8005210:	d06f      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005212:	e078      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005214:	2b20      	cmp	r3, #32
 8005216:	d06c      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x140>
 8005218:	2b30      	cmp	r3, #48	; 0x30
 800521a:	d06a      	beq.n	80052f2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800521c:	e073      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800521e:	2b70      	cmp	r3, #112	; 0x70
 8005220:	d00d      	beq.n	800523e <HAL_TIM_ConfigClockSource+0x8c>
 8005222:	2b70      	cmp	r3, #112	; 0x70
 8005224:	d804      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x7e>
 8005226:	2b50      	cmp	r3, #80	; 0x50
 8005228:	d033      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xe0>
 800522a:	2b60      	cmp	r3, #96	; 0x60
 800522c:	d041      	beq.n	80052b2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800522e:	e06a      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005234:	d066      	beq.n	8005304 <HAL_TIM_ConfigClockSource+0x152>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	d017      	beq.n	800526c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800523c:	e063      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6818      	ldr	r0, [r3, #0]
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	6899      	ldr	r1, [r3, #8]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f000 f964 	bl	800551a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	609a      	str	r2, [r3, #8]
      break;
 800526a:	e04c      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6818      	ldr	r0, [r3, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	6899      	ldr	r1, [r3, #8]
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685a      	ldr	r2, [r3, #4]
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f000 f94d 	bl	800551a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800528e:	609a      	str	r2, [r3, #8]
      break;
 8005290:	e039      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6859      	ldr	r1, [r3, #4]
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	461a      	mov	r2, r3
 80052a0:	f000 f8c4 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2150      	movs	r1, #80	; 0x50
 80052aa:	4618      	mov	r0, r3
 80052ac:	f000 f91b 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 80052b0:	e029      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	6859      	ldr	r1, [r3, #4]
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	461a      	mov	r2, r3
 80052c0:	f000 f8e2 	bl	8005488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2160      	movs	r1, #96	; 0x60
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f90b 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 80052d0:	e019      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	461a      	mov	r2, r3
 80052e0:	f000 f8a4 	bl	800542c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2140      	movs	r1, #64	; 0x40
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f8fb 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 80052f0:	e009      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4619      	mov	r1, r3
 80052fc:	4610      	mov	r0, r2
 80052fe:	f000 f8f2 	bl	80054e6 <TIM_ITRx_SetConfig>
      break;
 8005302:	e000      	b.n	8005306 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005304:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	bc80      	pop	{r7}
 8005330:	4770      	bx	lr

08005332 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005332:	b480      	push	{r7}
 8005334:	b083      	sub	sp, #12
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800533a:	bf00      	nop
 800533c:	370c      	adds	r7, #12
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a29      	ldr	r2, [pc, #164]	; (8005420 <TIM_Base_SetConfig+0xb8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d00b      	beq.n	8005398 <TIM_Base_SetConfig+0x30>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005386:	d007      	beq.n	8005398 <TIM_Base_SetConfig+0x30>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <TIM_Base_SetConfig+0xbc>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d003      	beq.n	8005398 <TIM_Base_SetConfig+0x30>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a25      	ldr	r2, [pc, #148]	; (8005428 <TIM_Base_SetConfig+0xc0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d108      	bne.n	80053aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a1c      	ldr	r2, [pc, #112]	; (8005420 <TIM_Base_SetConfig+0xb8>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x62>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x62>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <TIM_Base_SetConfig+0xbc>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x62>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <TIM_Base_SetConfig+0xc0>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a07      	ldr	r2, [pc, #28]	; (8005420 <TIM_Base_SetConfig+0xb8>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d103      	bne.n	8005410 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	691a      	ldr	r2, [r3, #16]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	615a      	str	r2, [r3, #20]
}
 8005416:	bf00      	nop
 8005418:	3714      	adds	r7, #20
 800541a:	46bd      	mov	sp, r7
 800541c:	bc80      	pop	{r7}
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40000400 	.word	0x40000400
 8005428:	40000800 	.word	0x40000800

0800542c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	f023 0201 	bic.w	r2, r3, #1
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	693a      	ldr	r2, [r7, #16]
 800545e:	4313      	orrs	r3, r2
 8005460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 030a 	bic.w	r3, r3, #10
 8005468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	621a      	str	r2, [r3, #32]
}
 800547e:	bf00      	nop
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	bc80      	pop	{r7}
 8005486:	4770      	bx	lr

08005488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	f023 0210 	bic.w	r2, r3, #16
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	031b      	lsls	r3, r3, #12
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bc80      	pop	{r7}
 80054e4:	4770      	bx	lr

080054e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054e6:	b480      	push	{r7}
 80054e8:	b085      	sub	sp, #20
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
 80054ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4313      	orrs	r3, r2
 8005504:	f043 0307 	orr.w	r3, r3, #7
 8005508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	609a      	str	r2, [r3, #8]
}
 8005510:	bf00      	nop
 8005512:	3714      	adds	r7, #20
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800551a:	b480      	push	{r7}
 800551c:	b087      	sub	sp, #28
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	021a      	lsls	r2, r3, #8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	431a      	orrs	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	4313      	orrs	r3, r2
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	609a      	str	r2, [r3, #8]
}
 800554e:	bf00      	nop
 8005550:	371c      	adds	r7, #28
 8005552:	46bd      	mov	sp, r7
 8005554:	bc80      	pop	{r7}
 8005556:	4770      	bx	lr

08005558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005558:	b480      	push	{r7}
 800555a:	b085      	sub	sp, #20
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800556c:	2302      	movs	r3, #2
 800556e:	e032      	b.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2202      	movs	r2, #2
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005596:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b083      	sub	sp, #12
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bc80      	pop	{r7}
 80055f0:	4770      	bx	lr

080055f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055fa:	bf00      	nop
 80055fc:	370c      	adds	r7, #12
 80055fe:	46bd      	mov	sp, r7
 8005600:	bc80      	pop	{r7}
 8005602:	4770      	bx	lr

08005604 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005604:	b084      	sub	sp, #16
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	f107 0014 	add.w	r0, r7, #20
 8005612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005616:	2300      	movs	r3, #0
}
 8005618:	4618      	mov	r0, r3
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	b004      	add	sp, #16
 8005622:	4770      	bx	lr

08005624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800562c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8005630:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005638:	b29a      	uxth	r2, r3
 800563a:	89fb      	ldrh	r3, [r7, #14]
 800563c:	4313      	orrs	r3, r2
 800563e:	b29a      	uxth	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005652:	b480      	push	{r7}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  uint16_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800565a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800565e:	81fb      	strh	r3, [r7, #14]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005666:	b29b      	uxth	r3, r3
 8005668:	b21a      	sxth	r2, r3
 800566a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800566e:	43db      	mvns	r3, r3
 8005670:	b21b      	sxth	r3, r3
 8005672:	4013      	ands	r3, r2
 8005674:	b21b      	sxth	r3, r3
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	bc80      	pop	{r7}
 8005688:	4770      	bx	lr

0800568a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE: Peripheral mode mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	460b      	mov	r3, r1
 8005694:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr

080056a2 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80056a2:	b084      	sub	sp, #16
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	f107 0014 	add.w	r0, r7, #20
 80056b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = USB_CNTR_FRES;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2200      	movs	r2, #0
 80056d0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f7ff ffa5 	bl	8005624 <USB_EnableGlobalInt>

  return HAL_OK;
 80056da:	2300      	movs	r3, #0
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e6:	b004      	add	sp, #16
 80056e8:	4770      	bx	lr
	...

080056ec <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80056ec:	b490      	push	{r4, r7}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	881b      	ldrh	r3, [r3, #0]
 8005706:	b29b      	uxth	r3, r3
 8005708:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800570c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005710:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	78db      	ldrb	r3, [r3, #3]
 8005716:	2b03      	cmp	r3, #3
 8005718:	d819      	bhi.n	800574e <USB_ActivateEndpoint+0x62>
 800571a:	a201      	add	r2, pc, #4	; (adr r2, 8005720 <USB_ActivateEndpoint+0x34>)
 800571c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005720:	08005731 	.word	0x08005731
 8005724:	08005745 	.word	0x08005745
 8005728:	08005755 	.word	0x08005755
 800572c:	0800573b 	.word	0x0800573b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005730:	89bb      	ldrh	r3, [r7, #12]
 8005732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005736:	81bb      	strh	r3, [r7, #12]
      break;
 8005738:	e00d      	b.n	8005756 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800573a:	89bb      	ldrh	r3, [r7, #12]
 800573c:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005740:	81bb      	strh	r3, [r7, #12]
      break;
 8005742:	e008      	b.n	8005756 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005744:	89bb      	ldrh	r3, [r7, #12]
 8005746:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800574a:	81bb      	strh	r3, [r7, #12]
      break;
 800574c:	e003      	b.n	8005756 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	73fb      	strb	r3, [r7, #15]
      break;
 8005752:	e000      	b.n	8005756 <USB_ActivateEndpoint+0x6a>
      break;
 8005754:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX);
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	441a      	add	r2, r3
 8005760:	89bb      	ldrh	r3, [r7, #12]
 8005762:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005766:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800576a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800576e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005772:	b29b      	uxth	r3, r3
 8005774:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	781b      	ldrb	r3, [r3, #0]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005788:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578c:	b29a      	uxth	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	781b      	ldrb	r3, [r3, #0]
 8005792:	b29b      	uxth	r3, r3
 8005794:	4313      	orrs	r3, r2
 8005796:	b29c      	uxth	r4, r3
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	4b8a      	ldr	r3, [pc, #552]	; (80059cc <USB_ActivateEndpoint+0x2e0>)
 80057a4:	4323      	orrs	r3, r4
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	7b1b      	ldrb	r3, [r3, #12]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 8112 	bne.w	80059d8 <USB_ActivateEndpoint+0x2ec>
  {
    if (ep->is_in != 0U)
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	785b      	ldrb	r3, [r3, #1]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d067      	beq.n	800588c <USB_ActivateEndpoint+0x1a0>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80057bc:	687c      	ldr	r4, [r7, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	441c      	add	r4, r3
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	781b      	ldrb	r3, [r3, #0]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	4423      	add	r3, r4
 80057d0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d4:	461c      	mov	r4, r3
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	88db      	ldrh	r3, [r3, #6]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4413      	add	r3, r2
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29c      	uxth	r4, r3
 80057f2:	4623      	mov	r3, r4
 80057f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d014      	beq.n	8005826 <USB_ActivateEndpoint+0x13a>
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	781b      	ldrb	r3, [r3, #0]
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	881b      	ldrh	r3, [r3, #0]
 8005808:	b29b      	uxth	r3, r3
 800580a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800580e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005812:	b29c      	uxth	r4, r3
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	441a      	add	r2, r3
 800581e:	4b6c      	ldr	r3, [pc, #432]	; (80059d0 <USB_ActivateEndpoint+0x2e4>)
 8005820:	4323      	orrs	r3, r4
 8005822:	b29b      	uxth	r3, r3
 8005824:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d018      	beq.n	8005860 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	881b      	ldrh	r3, [r3, #0]
 800583a:	b29b      	uxth	r3, r3
 800583c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005844:	b29c      	uxth	r4, r3
 8005846:	f084 0320 	eor.w	r3, r4, #32
 800584a:	b29c      	uxth	r4, r3
 800584c:	687a      	ldr	r2, [r7, #4]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	441a      	add	r2, r3
 8005856:	4b5d      	ldr	r3, [pc, #372]	; (80059cc <USB_ActivateEndpoint+0x2e0>)
 8005858:	4323      	orrs	r3, r4
 800585a:	b29b      	uxth	r3, r3
 800585c:	8013      	strh	r3, [r2, #0]
 800585e:	e22b      	b.n	8005cb8 <USB_ActivateEndpoint+0x5cc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	b29b      	uxth	r3, r3
 800586e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005876:	b29c      	uxth	r4, r3
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	441a      	add	r2, r3
 8005882:	4b52      	ldr	r3, [pc, #328]	; (80059cc <USB_ActivateEndpoint+0x2e0>)
 8005884:	4323      	orrs	r3, r4
 8005886:	b29b      	uxth	r3, r3
 8005888:	8013      	strh	r3, [r2, #0]
 800588a:	e215      	b.n	8005cb8 <USB_ActivateEndpoint+0x5cc>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800588c:	687c      	ldr	r4, [r7, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005894:	b29b      	uxth	r3, r3
 8005896:	441c      	add	r4, r3
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	011b      	lsls	r3, r3, #4
 800589e:	4423      	add	r3, r4
 80058a0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80058a4:	461c      	mov	r4, r3
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	88db      	ldrh	r3, [r3, #6]
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80058b4:	687c      	ldr	r4, [r7, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058bc:	b29b      	uxth	r3, r3
 80058be:	441c      	add	r4, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	011b      	lsls	r3, r3, #4
 80058c6:	4423      	add	r3, r4
 80058c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058cc:	461c      	mov	r4, r3
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10e      	bne.n	80058f4 <USB_ActivateEndpoint+0x208>
 80058d6:	8823      	ldrh	r3, [r4, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058de:	b29b      	uxth	r3, r3
 80058e0:	8023      	strh	r3, [r4, #0]
 80058e2:	8823      	ldrh	r3, [r4, #0]
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	8023      	strh	r3, [r4, #0]
 80058f2:	e02d      	b.n	8005950 <USB_ActivateEndpoint+0x264>
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b3e      	cmp	r3, #62	; 0x3e
 80058fa:	d812      	bhi.n	8005922 <USB_ActivateEndpoint+0x236>
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	085b      	lsrs	r3, r3, #1
 8005902:	60bb      	str	r3, [r7, #8]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <USB_ActivateEndpoint+0x22a>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	3301      	adds	r3, #1
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	b29b      	uxth	r3, r3
 800591a:	029b      	lsls	r3, r3, #10
 800591c:	b29b      	uxth	r3, r3
 800591e:	8023      	strh	r3, [r4, #0]
 8005920:	e016      	b.n	8005950 <USB_ActivateEndpoint+0x264>
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	60bb      	str	r3, [r7, #8]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	2b00      	cmp	r3, #0
 8005934:	d102      	bne.n	800593c <USB_ActivateEndpoint+0x250>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	3b01      	subs	r3, #1
 800593a:	60bb      	str	r3, [r7, #8]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	b29b      	uxth	r3, r3
 8005940:	029b      	lsls	r3, r3, #10
 8005942:	b29b      	uxth	r3, r3
 8005944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800594c:	b29b      	uxth	r3, r3
 800594e:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	881b      	ldrh	r3, [r3, #0]
 800595c:	b29c      	uxth	r4, r3
 800595e:	4623      	mov	r3, r4
 8005960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d014      	beq.n	8005992 <USB_ActivateEndpoint+0x2a6>
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800597e:	b29c      	uxth	r4, r3
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	441a      	add	r2, r3
 800598a:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <USB_ActivateEndpoint+0x2e8>)
 800598c:	4323      	orrs	r3, r4
 800598e:	b29b      	uxth	r3, r3
 8005990:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	881b      	ldrh	r3, [r3, #0]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059a8:	b29c      	uxth	r4, r3
 80059aa:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80059ae:	b29c      	uxth	r4, r3
 80059b0:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80059b4:	b29c      	uxth	r4, r3
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	441a      	add	r2, r3
 80059c0:	4b02      	ldr	r3, [pc, #8]	; (80059cc <USB_ActivateEndpoint+0x2e0>)
 80059c2:	4323      	orrs	r3, r4
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	8013      	strh	r3, [r2, #0]
 80059c8:	e176      	b.n	8005cb8 <USB_ActivateEndpoint+0x5cc>
 80059ca:	bf00      	nop
 80059cc:	ffff8080 	.word	0xffff8080
 80059d0:	ffff80c0 	.word	0xffff80c0
 80059d4:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ee:	b29c      	uxth	r4, r3
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	4b96      	ldr	r3, [pc, #600]	; (8005c54 <USB_ActivateEndpoint+0x568>)
 80059fc:	4323      	orrs	r3, r4
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005a02:	687c      	ldr	r4, [r7, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	441c      	add	r4, r3
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	4423      	add	r3, r4
 8005a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a1a:	461c      	mov	r4, r3
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	891b      	ldrh	r3, [r3, #8]
 8005a20:	085b      	lsrs	r3, r3, #1
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	005b      	lsls	r3, r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	8023      	strh	r3, [r4, #0]
 8005a2a:	687c      	ldr	r4, [r7, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	441c      	add	r4, r3
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	4423      	add	r3, r4
 8005a3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8005a42:	461c      	mov	r4, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	085b      	lsrs	r3, r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	785b      	ldrb	r3, [r3, #1]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 8088 	bne.w	8005b6c <USB_ActivateEndpoint+0x480>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	881b      	ldrh	r3, [r3, #0]
 8005a68:	b29c      	uxth	r4, r3
 8005a6a:	4623      	mov	r3, r4
 8005a6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d014      	beq.n	8005a9e <USB_ActivateEndpoint+0x3b2>
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	4413      	add	r3, r2
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8a:	b29c      	uxth	r4, r3
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	441a      	add	r2, r3
 8005a96:	4b70      	ldr	r3, [pc, #448]	; (8005c58 <USB_ActivateEndpoint+0x56c>)
 8005a98:	4323      	orrs	r3, r4
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4413      	add	r3, r2
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	b29c      	uxth	r4, r3
 8005aac:	4623      	mov	r3, r4
 8005aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d014      	beq.n	8005ae0 <USB_ActivateEndpoint+0x3f4>
 8005ab6:	687a      	ldr	r2, [r7, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4413      	add	r3, r2
 8005ac0:	881b      	ldrh	r3, [r3, #0]
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	b29c      	uxth	r4, r3
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	781b      	ldrb	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	441a      	add	r2, r3
 8005ad8:	4b60      	ldr	r3, [pc, #384]	; (8005c5c <USB_ActivateEndpoint+0x570>)
 8005ada:	4323      	orrs	r3, r4
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	881b      	ldrh	r3, [r3, #0]
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005af2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005af6:	b29c      	uxth	r4, r3
 8005af8:	687a      	ldr	r2, [r7, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	441a      	add	r2, r3
 8005b02:	4b56      	ldr	r3, [pc, #344]	; (8005c5c <USB_ActivateEndpoint+0x570>)
 8005b04:	4323      	orrs	r3, r4
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b20:	b29c      	uxth	r4, r3
 8005b22:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8005b26:	b29c      	uxth	r4, r3
 8005b28:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8005b2c:	b29c      	uxth	r4, r3
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	441a      	add	r2, r3
 8005b38:	4b49      	ldr	r3, [pc, #292]	; (8005c60 <USB_ActivateEndpoint+0x574>)
 8005b3a:	4323      	orrs	r3, r4
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b56:	b29c      	uxth	r4, r3
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	441a      	add	r2, r3
 8005b62:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <USB_ActivateEndpoint+0x574>)
 8005b64:	4323      	orrs	r3, r4
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	8013      	strh	r3, [r2, #0]
 8005b6a:	e0a5      	b.n	8005cb8 <USB_ActivateEndpoint+0x5cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29c      	uxth	r4, r3
 8005b7a:	4623      	mov	r3, r4
 8005b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d014      	beq.n	8005bae <USB_ActivateEndpoint+0x4c2>
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	881b      	ldrh	r3, [r3, #0]
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9a:	b29c      	uxth	r4, r3
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	441a      	add	r2, r3
 8005ba6:	4b2c      	ldr	r3, [pc, #176]	; (8005c58 <USB_ActivateEndpoint+0x56c>)
 8005ba8:	4323      	orrs	r3, r4
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	4413      	add	r3, r2
 8005bb8:	881b      	ldrh	r3, [r3, #0]
 8005bba:	b29c      	uxth	r4, r3
 8005bbc:	4623      	mov	r3, r4
 8005bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d014      	beq.n	8005bf0 <USB_ActivateEndpoint+0x504>
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	b29c      	uxth	r4, r3
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	4b1c      	ldr	r3, [pc, #112]	; (8005c5c <USB_ActivateEndpoint+0x570>)
 8005bea:	4323      	orrs	r3, r4
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4413      	add	r3, r2
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c06:	b29c      	uxth	r4, r3
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	441a      	add	r2, r3
 8005c12:	4b11      	ldr	r3, [pc, #68]	; (8005c58 <USB_ActivateEndpoint+0x56c>)
 8005c14:	4323      	orrs	r3, r4
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d020      	beq.n	8005c64 <USB_ActivateEndpoint+0x578>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c38:	b29c      	uxth	r4, r3
 8005c3a:	f084 0320 	eor.w	r3, r4, #32
 8005c3e:	b29c      	uxth	r4, r3
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	4b05      	ldr	r3, [pc, #20]	; (8005c60 <USB_ActivateEndpoint+0x574>)
 8005c4c:	4323      	orrs	r3, r4
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	8013      	strh	r3, [r2, #0]
 8005c52:	e01c      	b.n	8005c8e <USB_ActivateEndpoint+0x5a2>
 8005c54:	ffff8180 	.word	0xffff8180
 8005c58:	ffffc080 	.word	0xffffc080
 8005c5c:	ffff80c0 	.word	0xffff80c0
 8005c60:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c7a:	b29c      	uxth	r4, r3
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	441a      	add	r2, r3
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <USB_ActivateEndpoint+0x5d8>)
 8005c88:	4323      	orrs	r3, r4
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca4:	b29c      	uxth	r4, r3
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	441a      	add	r2, r3
 8005cb0:	4b04      	ldr	r3, [pc, #16]	; (8005cc4 <USB_ActivateEndpoint+0x5d8>)
 8005cb2:	4323      	orrs	r3, r4
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bc90      	pop	{r4, r7}
 8005cc2:	4770      	bx	lr
 8005cc4:	ffff8080 	.word	0xffff8080

08005cc8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005cc8:	b490      	push	{r4, r7}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	7b1b      	ldrb	r3, [r3, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d171      	bne.n	8005dbe <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	785b      	ldrb	r3, [r3, #1]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d036      	beq.n	8005d50 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29c      	uxth	r4, r3
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d014      	beq.n	8005d24 <USB_DeactivateEndpoint+0x5c>
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d10:	b29c      	uxth	r4, r3
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	441a      	add	r2, r3
 8005d1c:	4b6b      	ldr	r3, [pc, #428]	; (8005ecc <USB_DeactivateEndpoint+0x204>)
 8005d1e:	4323      	orrs	r3, r4
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	b29c      	uxth	r4, r3
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	441a      	add	r2, r3
 8005d46:	4b62      	ldr	r3, [pc, #392]	; (8005ed0 <USB_DeactivateEndpoint+0x208>)
 8005d48:	4323      	orrs	r3, r4
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	8013      	strh	r3, [r2, #0]
 8005d4e:	e144      	b.n	8005fda <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	881b      	ldrh	r3, [r3, #0]
 8005d5c:	b29c      	uxth	r4, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d014      	beq.n	8005d92 <USB_DeactivateEndpoint+0xca>
 8005d68:	687a      	ldr	r2, [r7, #4]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	881b      	ldrh	r3, [r3, #0]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d7e:	b29c      	uxth	r4, r3
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	441a      	add	r2, r3
 8005d8a:	4b52      	ldr	r3, [pc, #328]	; (8005ed4 <USB_DeactivateEndpoint+0x20c>)
 8005d8c:	4323      	orrs	r3, r4
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	b29c      	uxth	r4, r3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	441a      	add	r2, r3
 8005db4:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <USB_DeactivateEndpoint+0x208>)
 8005db6:	4323      	orrs	r3, r4
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8013      	strh	r3, [r2, #0]
 8005dbc:	e10d      	b.n	8005fda <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f040 8088 	bne.w	8005ed8 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	781b      	ldrb	r3, [r3, #0]
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29c      	uxth	r4, r3
 8005dd6:	4623      	mov	r3, r4
 8005dd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d014      	beq.n	8005e0a <USB_DeactivateEndpoint+0x142>
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	4413      	add	r3, r2
 8005dea:	881b      	ldrh	r3, [r3, #0]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	b29c      	uxth	r4, r3
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	441a      	add	r2, r3
 8005e02:	4b34      	ldr	r3, [pc, #208]	; (8005ed4 <USB_DeactivateEndpoint+0x20c>)
 8005e04:	4323      	orrs	r3, r4
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29c      	uxth	r4, r3
 8005e18:	4623      	mov	r3, r4
 8005e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d014      	beq.n	8005e4c <USB_DeactivateEndpoint+0x184>
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	4413      	add	r3, r2
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e38:	b29c      	uxth	r4, r3
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	441a      	add	r2, r3
 8005e44:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <USB_DeactivateEndpoint+0x204>)
 8005e46:	4323      	orrs	r3, r4
 8005e48:	b29b      	uxth	r3, r3
 8005e4a:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	4413      	add	r3, r2
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e62:	b29c      	uxth	r4, r3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	441a      	add	r2, r3
 8005e6e:	4b17      	ldr	r3, [pc, #92]	; (8005ecc <USB_DeactivateEndpoint+0x204>)
 8005e70:	4323      	orrs	r3, r4
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e8c:	b29c      	uxth	r4, r3
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	441a      	add	r2, r3
 8005e98:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <USB_DeactivateEndpoint+0x208>)
 8005e9a:	4323      	orrs	r3, r4
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4413      	add	r3, r2
 8005eaa:	881b      	ldrh	r3, [r3, #0]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005eb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005eb6:	b29c      	uxth	r4, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	441a      	add	r2, r3
 8005ec2:	4b03      	ldr	r3, [pc, #12]	; (8005ed0 <USB_DeactivateEndpoint+0x208>)
 8005ec4:	4323      	orrs	r3, r4
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	8013      	strh	r3, [r2, #0]
 8005eca:	e086      	b.n	8005fda <USB_DeactivateEndpoint+0x312>
 8005ecc:	ffff80c0 	.word	0xffff80c0
 8005ed0:	ffff8080 	.word	0xffff8080
 8005ed4:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4413      	add	r3, r2
 8005ee2:	881b      	ldrh	r3, [r3, #0]
 8005ee4:	b29c      	uxth	r4, r3
 8005ee6:	4623      	mov	r3, r4
 8005ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d014      	beq.n	8005f1a <USB_DeactivateEndpoint+0x252>
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	881b      	ldrh	r3, [r3, #0]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f06:	b29c      	uxth	r4, r3
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	009b      	lsls	r3, r3, #2
 8005f10:	441a      	add	r2, r3
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <USB_DeactivateEndpoint+0x320>)
 8005f14:	4323      	orrs	r3, r4
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	881b      	ldrh	r3, [r3, #0]
 8005f26:	b29c      	uxth	r4, r3
 8005f28:	4623      	mov	r3, r4
 8005f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d014      	beq.n	8005f5c <USB_DeactivateEndpoint+0x294>
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	881b      	ldrh	r3, [r3, #0]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f48:	b29c      	uxth	r4, r3
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	441a      	add	r2, r3
 8005f54:	4b25      	ldr	r3, [pc, #148]	; (8005fec <USB_DeactivateEndpoint+0x324>)
 8005f56:	4323      	orrs	r3, r4
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	4413      	add	r3, r2
 8005f66:	881b      	ldrh	r3, [r3, #0]
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	b29c      	uxth	r4, r3
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <USB_DeactivateEndpoint+0x320>)
 8005f80:	4323      	orrs	r3, r4
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f86:	687a      	ldr	r2, [r7, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	4413      	add	r3, r2
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f9c:	b29c      	uxth	r4, r3
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	441a      	add	r2, r3
 8005fa8:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <USB_DeactivateEndpoint+0x328>)
 8005faa:	4323      	orrs	r3, r4
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc6:	b29c      	uxth	r4, r3
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	441a      	add	r2, r3
 8005fd2:	4b07      	ldr	r3, [pc, #28]	; (8005ff0 <USB_DeactivateEndpoint+0x328>)
 8005fd4:	4323      	orrs	r3, r4
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bc90      	pop	{r4, r7}
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	ffffc080 	.word	0xffffc080
 8005fec:	ffff80c0 	.word	0xffff80c0
 8005ff0:	ffff8080 	.word	0xffff8080

08005ff4 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08d      	sub	sp, #52	; 0x34
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b01      	cmp	r3, #1
 8006004:	f040 8160 	bne.w	80062c8 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	699a      	ldr	r2, [r3, #24]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d909      	bls.n	8006028 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	699a      	ldr	r2, [r3, #24]
 800601e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	619a      	str	r2, [r3, #24]
 8006026:	e005      	b.n	8006034 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2200      	movs	r2, #0
 8006032:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	7b1b      	ldrb	r3, [r3, #12]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d119      	bne.n	8006070 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	6959      	ldr	r1, [r3, #20]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	88da      	ldrh	r2, [r3, #6]
 8006044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006046:	b29b      	uxth	r3, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fba2 	bl	8006792 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800604e:	687c      	ldr	r4, [r7, #4]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006056:	b29b      	uxth	r3, r3
 8006058:	441c      	add	r4, r3
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4423      	add	r3, r4
 8006062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006066:	461c      	mov	r4, r3
 8006068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606a:	b29b      	uxth	r3, r3
 800606c:	8023      	strh	r3, [r4, #0]
 800606e:	e10f      	b.n	8006290 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d065      	beq.n	8006152 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006086:	687c      	ldr	r4, [r7, #4]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	785b      	ldrb	r3, [r3, #1]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d148      	bne.n	8006122 <USB_EPStartXfer+0x12e>
 8006090:	687c      	ldr	r4, [r7, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006098:	b29b      	uxth	r3, r3
 800609a:	441c      	add	r4, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	4423      	add	r3, r4
 80060a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80060a8:	461c      	mov	r4, r3
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10e      	bne.n	80060ce <USB_EPStartXfer+0xda>
 80060b0:	8823      	ldrh	r3, [r4, #0]
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	8023      	strh	r3, [r4, #0]
 80060bc:	8823      	ldrh	r3, [r4, #0]
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	8023      	strh	r3, [r4, #0]
 80060cc:	e03d      	b.n	800614a <USB_EPStartXfer+0x156>
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	2b3e      	cmp	r3, #62	; 0x3e
 80060d2:	d810      	bhi.n	80060f6 <USB_EPStartXfer+0x102>
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	085b      	lsrs	r3, r3, #1
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
 80060da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <USB_EPStartXfer+0xf6>
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	3301      	adds	r3, #1
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	029b      	lsls	r3, r3, #10
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	8023      	strh	r3, [r4, #0]
 80060f4:	e029      	b.n	800614a <USB_EPStartXfer+0x156>
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f003 031f 	and.w	r3, r3, #31
 8006102:	2b00      	cmp	r3, #0
 8006104:	d102      	bne.n	800610c <USB_EPStartXfer+0x118>
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	3b01      	subs	r3, #1
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	b29b      	uxth	r3, r3
 8006110:	029b      	lsls	r3, r3, #10
 8006112:	b29b      	uxth	r3, r3
 8006114:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006118:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800611c:	b29b      	uxth	r3, r3
 800611e:	8023      	strh	r3, [r4, #0]
 8006120:	e013      	b.n	800614a <USB_EPStartXfer+0x156>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	785b      	ldrb	r3, [r3, #1]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d10f      	bne.n	800614a <USB_EPStartXfer+0x156>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006130:	b29b      	uxth	r3, r3
 8006132:	441c      	add	r4, r3
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4423      	add	r3, r4
 800613c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	b29a      	uxth	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	895b      	ldrh	r3, [r3, #10]
 800614e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006150:	e063      	b.n	800621a <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	785b      	ldrb	r3, [r3, #1]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d148      	bne.n	80061ec <USB_EPStartXfer+0x1f8>
 800615a:	687c      	ldr	r4, [r7, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006162:	b29b      	uxth	r3, r3
 8006164:	441c      	add	r4, r3
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	4423      	add	r3, r4
 800616e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006172:	461c      	mov	r4, r3
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10e      	bne.n	8006198 <USB_EPStartXfer+0x1a4>
 800617a:	8823      	ldrh	r3, [r4, #0]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006182:	b29b      	uxth	r3, r3
 8006184:	8023      	strh	r3, [r4, #0]
 8006186:	8823      	ldrh	r3, [r4, #0]
 8006188:	b29b      	uxth	r3, r3
 800618a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800618e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006192:	b29b      	uxth	r3, r3
 8006194:	8023      	strh	r3, [r4, #0]
 8006196:	e03d      	b.n	8006214 <USB_EPStartXfer+0x220>
 8006198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800619a:	2b3e      	cmp	r3, #62	; 0x3e
 800619c:	d810      	bhi.n	80061c0 <USB_EPStartXfer+0x1cc>
 800619e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	623b      	str	r3, [r7, #32]
 80061a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <USB_EPStartXfer+0x1c0>
 80061ae:	6a3b      	ldr	r3, [r7, #32]
 80061b0:	3301      	adds	r3, #1
 80061b2:	623b      	str	r3, [r7, #32]
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	029b      	lsls	r3, r3, #10
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	8023      	strh	r3, [r4, #0]
 80061be:	e029      	b.n	8006214 <USB_EPStartXfer+0x220>
 80061c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c2:	095b      	lsrs	r3, r3, #5
 80061c4:	623b      	str	r3, [r7, #32]
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <USB_EPStartXfer+0x1e2>
 80061d0:	6a3b      	ldr	r3, [r7, #32]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	623b      	str	r3, [r7, #32]
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	029b      	lsls	r3, r3, #10
 80061dc:	b29b      	uxth	r3, r3
 80061de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	8023      	strh	r3, [r4, #0]
 80061ea:	e013      	b.n	8006214 <USB_EPStartXfer+0x220>
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	785b      	ldrb	r3, [r3, #1]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d10f      	bne.n	8006214 <USB_EPStartXfer+0x220>
 80061f4:	687c      	ldr	r4, [r7, #4]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	441c      	add	r4, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	4423      	add	r3, r4
 8006208:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800620c:	461c      	mov	r4, r3
 800620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006210:	b29b      	uxth	r3, r3
 8006212:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	891b      	ldrh	r3, [r3, #8]
 8006218:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6959      	ldr	r1, [r3, #20]
 800621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006220:	b29b      	uxth	r3, r3
 8006222:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fab4 	bl	8006792 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	785b      	ldrb	r3, [r3, #1]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d115      	bne.n	800625e <USB_EPStartXfer+0x26a>
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006248:	b29c      	uxth	r4, r3
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	009b      	lsls	r3, r3, #2
 8006252:	441a      	add	r2, r3
 8006254:	4b9a      	ldr	r3, [pc, #616]	; (80064c0 <USB_EPStartXfer+0x4cc>)
 8006256:	4323      	orrs	r3, r4
 8006258:	b29b      	uxth	r3, r3
 800625a:	8013      	strh	r3, [r2, #0]
 800625c:	e018      	b.n	8006290 <USB_EPStartXfer+0x29c>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	785b      	ldrb	r3, [r3, #1]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d114      	bne.n	8006290 <USB_EPStartXfer+0x29c>
 8006266:	687a      	ldr	r2, [r7, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	4413      	add	r3, r2
 8006270:	881b      	ldrh	r3, [r3, #0]
 8006272:	b29b      	uxth	r3, r3
 8006274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800627c:	b29c      	uxth	r4, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	441a      	add	r2, r3
 8006288:	4b8e      	ldr	r3, [pc, #568]	; (80064c4 <USB_EPStartXfer+0x4d0>)
 800628a:	4323      	orrs	r3, r4
 800628c:	b29b      	uxth	r3, r3
 800628e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	781b      	ldrb	r3, [r3, #0]
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	4413      	add	r3, r2
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	b29b      	uxth	r3, r3
 800629e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a6:	b29c      	uxth	r4, r3
 80062a8:	f084 0310 	eor.w	r3, r4, #16
 80062ac:	b29c      	uxth	r4, r3
 80062ae:	f084 0320 	eor.w	r3, r4, #32
 80062b2:	b29c      	uxth	r4, r3
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	441a      	add	r2, r3
 80062be:	4b82      	ldr	r3, [pc, #520]	; (80064c8 <USB_EPStartXfer+0x4d4>)
 80062c0:	4323      	orrs	r3, r4
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	8013      	strh	r3, [r2, #0]
 80062c6:	e146      	b.n	8006556 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d909      	bls.n	80062e8 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e0:	1ad2      	subs	r2, r2, r3
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	619a      	str	r2, [r3, #24]
 80062e6:	e005      	b.n	80062f4 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2200      	movs	r2, #0
 80062f2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	7b1b      	ldrb	r3, [r3, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d148      	bne.n	800638e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80062fc:	687c      	ldr	r4, [r7, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006304:	b29b      	uxth	r3, r3
 8006306:	441c      	add	r4, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	4423      	add	r3, r4
 8006310:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006314:	461c      	mov	r4, r3
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10e      	bne.n	800633a <USB_EPStartXfer+0x346>
 800631c:	8823      	ldrh	r3, [r4, #0]
 800631e:	b29b      	uxth	r3, r3
 8006320:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006324:	b29b      	uxth	r3, r3
 8006326:	8023      	strh	r3, [r4, #0]
 8006328:	8823      	ldrh	r3, [r4, #0]
 800632a:	b29b      	uxth	r3, r3
 800632c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006330:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006334:	b29b      	uxth	r3, r3
 8006336:	8023      	strh	r3, [r4, #0]
 8006338:	e0f2      	b.n	8006520 <USB_EPStartXfer+0x52c>
 800633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800633c:	2b3e      	cmp	r3, #62	; 0x3e
 800633e:	d810      	bhi.n	8006362 <USB_EPStartXfer+0x36e>
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	085b      	lsrs	r3, r3, #1
 8006344:	61fb      	str	r3, [r7, #28]
 8006346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006348:	f003 0301 	and.w	r3, r3, #1
 800634c:	2b00      	cmp	r3, #0
 800634e:	d002      	beq.n	8006356 <USB_EPStartXfer+0x362>
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	3301      	adds	r3, #1
 8006354:	61fb      	str	r3, [r7, #28]
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	b29b      	uxth	r3, r3
 800635a:	029b      	lsls	r3, r3, #10
 800635c:	b29b      	uxth	r3, r3
 800635e:	8023      	strh	r3, [r4, #0]
 8006360:	e0de      	b.n	8006520 <USB_EPStartXfer+0x52c>
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	61fb      	str	r3, [r7, #28]
 8006368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636a:	f003 031f 	and.w	r3, r3, #31
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <USB_EPStartXfer+0x384>
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3b01      	subs	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	b29b      	uxth	r3, r3
 800637c:	029b      	lsls	r3, r3, #10
 800637e:	b29b      	uxth	r3, r3
 8006380:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006384:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006388:	b29b      	uxth	r3, r3
 800638a:	8023      	strh	r3, [r4, #0]
 800638c:	e0c8      	b.n	8006520 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	785b      	ldrb	r3, [r3, #1]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d148      	bne.n	8006428 <USB_EPStartXfer+0x434>
 8006396:	687c      	ldr	r4, [r7, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800639e:	b29b      	uxth	r3, r3
 80063a0:	441c      	add	r4, r3
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	011b      	lsls	r3, r3, #4
 80063a8:	4423      	add	r3, r4
 80063aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80063ae:	461c      	mov	r4, r3
 80063b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10e      	bne.n	80063d4 <USB_EPStartXfer+0x3e0>
 80063b6:	8823      	ldrh	r3, [r4, #0]
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063be:	b29b      	uxth	r3, r3
 80063c0:	8023      	strh	r3, [r4, #0]
 80063c2:	8823      	ldrh	r3, [r4, #0]
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	8023      	strh	r3, [r4, #0]
 80063d2:	e03d      	b.n	8006450 <USB_EPStartXfer+0x45c>
 80063d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d6:	2b3e      	cmp	r3, #62	; 0x3e
 80063d8:	d810      	bhi.n	80063fc <USB_EPStartXfer+0x408>
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <USB_EPStartXfer+0x3fc>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	029b      	lsls	r3, r3, #10
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8023      	strh	r3, [r4, #0]
 80063fa:	e029      	b.n	8006450 <USB_EPStartXfer+0x45c>
 80063fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006404:	f003 031f 	and.w	r3, r3, #31
 8006408:	2b00      	cmp	r3, #0
 800640a:	d102      	bne.n	8006412 <USB_EPStartXfer+0x41e>
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	3b01      	subs	r3, #1
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	b29b      	uxth	r3, r3
 8006416:	029b      	lsls	r3, r3, #10
 8006418:	b29b      	uxth	r3, r3
 800641a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800641e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006422:	b29b      	uxth	r3, r3
 8006424:	8023      	strh	r3, [r4, #0]
 8006426:	e013      	b.n	8006450 <USB_EPStartXfer+0x45c>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b01      	cmp	r3, #1
 800642e:	d10f      	bne.n	8006450 <USB_EPStartXfer+0x45c>
 8006430:	687c      	ldr	r4, [r7, #4]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006438:	b29b      	uxth	r3, r3
 800643a:	441c      	add	r4, r3
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	011b      	lsls	r3, r3, #4
 8006442:	4423      	add	r3, r4
 8006444:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006448:	461c      	mov	r4, r3
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	b29b      	uxth	r3, r3
 800644e:	8023      	strh	r3, [r4, #0]
 8006450:	687c      	ldr	r4, [r7, #4]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	785b      	ldrb	r3, [r3, #1]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d14e      	bne.n	80064f8 <USB_EPStartXfer+0x504>
 800645a:	687c      	ldr	r4, [r7, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006462:	b29b      	uxth	r3, r3
 8006464:	441c      	add	r4, r3
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	011b      	lsls	r3, r3, #4
 800646c:	4423      	add	r3, r4
 800646e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006472:	461c      	mov	r4, r3
 8006474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10e      	bne.n	8006498 <USB_EPStartXfer+0x4a4>
 800647a:	8823      	ldrh	r3, [r4, #0]
 800647c:	b29b      	uxth	r3, r3
 800647e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006482:	b29b      	uxth	r3, r3
 8006484:	8023      	strh	r3, [r4, #0]
 8006486:	8823      	ldrh	r3, [r4, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800648e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006492:	b29b      	uxth	r3, r3
 8006494:	8023      	strh	r3, [r4, #0]
 8006496:	e043      	b.n	8006520 <USB_EPStartXfer+0x52c>
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	2b3e      	cmp	r3, #62	; 0x3e
 800649c:	d816      	bhi.n	80064cc <USB_EPStartXfer+0x4d8>
 800649e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a0:	085b      	lsrs	r3, r3, #1
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	f003 0301 	and.w	r3, r3, #1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <USB_EPStartXfer+0x4c0>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	3301      	adds	r3, #1
 80064b2:	617b      	str	r3, [r7, #20]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	029b      	lsls	r3, r3, #10
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	8023      	strh	r3, [r4, #0]
 80064be:	e02f      	b.n	8006520 <USB_EPStartXfer+0x52c>
 80064c0:	ffff80c0 	.word	0xffff80c0
 80064c4:	ffffc080 	.word	0xffffc080
 80064c8:	ffff8080 	.word	0xffff8080
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	095b      	lsrs	r3, r3, #5
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	f003 031f 	and.w	r3, r3, #31
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d102      	bne.n	80064e2 <USB_EPStartXfer+0x4ee>
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	3b01      	subs	r3, #1
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	029b      	lsls	r3, r3, #10
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	8023      	strh	r3, [r4, #0]
 80064f6:	e013      	b.n	8006520 <USB_EPStartXfer+0x52c>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	2b01      	cmp	r3, #1
 80064fe:	d10f      	bne.n	8006520 <USB_EPStartXfer+0x52c>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006506:	b29b      	uxth	r3, r3
 8006508:	441c      	add	r4, r3
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4423      	add	r3, r4
 8006512:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006516:	613b      	str	r3, [r7, #16]
 8006518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651a:	b29a      	uxth	r2, r3
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	b29c      	uxth	r4, r3
 8006538:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800653c:	b29c      	uxth	r4, r3
 800653e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8006542:	b29c      	uxth	r4, r3
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	4b04      	ldr	r3, [pc, #16]	; (8006560 <USB_EPStartXfer+0x56c>)
 8006550:	4323      	orrs	r3, r4
 8006552:	b29b      	uxth	r3, r3
 8006554:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3734      	adds	r7, #52	; 0x34
 800655c:	46bd      	mov	sp, r7
 800655e:	bd90      	pop	{r4, r7, pc}
 8006560:	ffff8080 	.word	0xffff8080

08006564 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006564:	b490      	push	{r4, r7}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d018      	beq.n	80065a8 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	881b      	ldrh	r3, [r3, #0]
 8006582:	b29b      	uxth	r3, r3
 8006584:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006588:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800658c:	b29c      	uxth	r4, r3
 800658e:	f084 0310 	eor.w	r3, r4, #16
 8006592:	b29c      	uxth	r4, r3
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <USB_EPSetStall+0x80>)
 80065a0:	4323      	orrs	r3, r4
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	8013      	strh	r3, [r2, #0]
 80065a6:	e017      	b.n	80065d8 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	b29c      	uxth	r4, r3
 80065c0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80065c4:	b29c      	uxth	r4, r3
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	441a      	add	r2, r3
 80065d0:	4b04      	ldr	r3, [pc, #16]	; (80065e4 <USB_EPSetStall+0x80>)
 80065d2:	4323      	orrs	r3, r4
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc90      	pop	{r4, r7}
 80065e2:	4770      	bx	lr
 80065e4:	ffff8080 	.word	0xffff8080

080065e8 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e8:	b490      	push	{r4, r7}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	7b1b      	ldrb	r3, [r3, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d17d      	bne.n	80066f6 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d03d      	beq.n	800667e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	b29c      	uxth	r4, r3
 8006610:	4623      	mov	r3, r4
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b00      	cmp	r3, #0
 8006618:	d014      	beq.n	8006644 <USB_EPClearStall+0x5c>
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	881b      	ldrh	r3, [r3, #0]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800662c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006630:	b29c      	uxth	r4, r3
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	441a      	add	r2, r3
 800663c:	4b31      	ldr	r3, [pc, #196]	; (8006704 <USB_EPClearStall+0x11c>)
 800663e:	4323      	orrs	r3, r4
 8006640:	b29b      	uxth	r3, r3
 8006642:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	78db      	ldrb	r3, [r3, #3]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d054      	beq.n	80066f6 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29b      	uxth	r3, r3
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006662:	b29c      	uxth	r4, r3
 8006664:	f084 0320 	eor.w	r3, r4, #32
 8006668:	b29c      	uxth	r4, r3
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	441a      	add	r2, r3
 8006674:	4b24      	ldr	r3, [pc, #144]	; (8006708 <USB_EPClearStall+0x120>)
 8006676:	4323      	orrs	r3, r4
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]
 800667c:	e03b      	b.n	80066f6 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	881b      	ldrh	r3, [r3, #0]
 800668a:	b29c      	uxth	r4, r3
 800668c:	4623      	mov	r3, r4
 800668e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d014      	beq.n	80066c0 <USB_EPClearStall+0xd8>
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ac:	b29c      	uxth	r4, r3
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	441a      	add	r2, r3
 80066b8:	4b14      	ldr	r3, [pc, #80]	; (800670c <USB_EPClearStall+0x124>)
 80066ba:	4323      	orrs	r3, r4
 80066bc:	b29b      	uxth	r3, r3
 80066be:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d6:	b29c      	uxth	r4, r3
 80066d8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80066dc:	b29c      	uxth	r4, r3
 80066de:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80066e2:	b29c      	uxth	r4, r3
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	4b06      	ldr	r3, [pc, #24]	; (8006708 <USB_EPClearStall+0x120>)
 80066f0:	4323      	orrs	r3, r4
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bc90      	pop	{r4, r7}
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	ffff80c0 	.word	0xffff80c0
 8006708:	ffff8080 	.word	0xffff8080
 800670c:	ffffc080 	.word	0xffffc080

08006710 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800672a:	2300      	movs	r3, #0
}
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	bc80      	pop	{r7}
 8006748:	4770      	bx	lr

0800674a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	370c      	adds	r7, #12
 8006758:	46bd      	mov	sp, r7
 800675a:	bc80      	pop	{r7}
 800675c:	4770      	bx	lr

0800675e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800675e:	b480      	push	{r7}
 8006760:	b085      	sub	sp, #20
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800676c:	b29b      	uxth	r3, r3
 800676e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006770:	68fb      	ldr	r3, [r7, #12]
}
 8006772:	4618      	mov	r0, r3
 8006774:	3714      	adds	r7, #20
 8006776:	46bd      	mov	sp, r7
 8006778:	bc80      	pop	{r7}
 800677a:	4770      	bx	lr

0800677c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	bc80      	pop	{r7}
 8006790:	4770      	bx	lr

08006792 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006792:	b480      	push	{r7}
 8006794:	b08d      	sub	sp, #52	; 0x34
 8006796:	af00      	add	r7, sp, #0
 8006798:	60f8      	str	r0, [r7, #12]
 800679a:	60b9      	str	r1, [r7, #8]
 800679c:	4611      	mov	r1, r2
 800679e:	461a      	mov	r2, r3
 80067a0:	460b      	mov	r3, r1
 80067a2:	80fb      	strh	r3, [r7, #6]
 80067a4:	4613      	mov	r3, r2
 80067a6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80067a8:	88bb      	ldrh	r3, [r7, #4]
 80067aa:	3301      	adds	r3, #1
 80067ac:	085b      	lsrs	r3, r3, #1
 80067ae:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80067b8:	88fb      	ldrh	r3, [r7, #6]
 80067ba:	005a      	lsls	r2, r3, #1
 80067bc:	69fb      	ldr	r3, [r7, #28]
 80067be:	4413      	add	r3, r2
 80067c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067ca:	e01e      	b.n	800680a <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	3301      	adds	r3, #1
 80067d6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	b29b      	uxth	r3, r3
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	461a      	mov	r2, r3
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f4:	3302      	adds	r3, #2
 80067f6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	3302      	adds	r3, #2
 80067fc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	3301      	adds	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006806:	3b01      	subs	r3, #1
 8006808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	2b00      	cmp	r3, #0
 800680e:	d1dd      	bne.n	80067cc <USB_WritePMA+0x3a>
  }
}
 8006810:	bf00      	nop
 8006812:	3734      	adds	r7, #52	; 0x34
 8006814:	46bd      	mov	sp, r7
 8006816:	bc80      	pop	{r7}
 8006818:	4770      	bx	lr

0800681a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800681a:	b480      	push	{r7}
 800681c:	b08b      	sub	sp, #44	; 0x2c
 800681e:	af00      	add	r7, sp, #0
 8006820:	60f8      	str	r0, [r7, #12]
 8006822:	60b9      	str	r1, [r7, #8]
 8006824:	4611      	mov	r1, r2
 8006826:	461a      	mov	r2, r3
 8006828:	460b      	mov	r3, r1
 800682a:	80fb      	strh	r3, [r7, #6]
 800682c:	4613      	mov	r3, r2
 800682e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006830:	88bb      	ldrh	r3, [r7, #4]
 8006832:	085b      	lsrs	r3, r3, #1
 8006834:	b29b      	uxth	r3, r3
 8006836:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006840:	88fb      	ldrh	r3, [r7, #6]
 8006842:	005a      	lsls	r2, r3, #1
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800684c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
 8006852:	e01b      	b.n	800688c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	881b      	ldrh	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800685c:	6a3b      	ldr	r3, [r7, #32]
 800685e:	3302      	adds	r3, #2
 8006860:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	3301      	adds	r3, #1
 800686e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	0a1b      	lsrs	r3, r3, #8
 8006874:	b2da      	uxtb	r2, r3
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	3301      	adds	r3, #1
 800687e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	3302      	adds	r3, #2
 8006884:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	3b01      	subs	r3, #1
 800688a:	627b      	str	r3, [r7, #36]	; 0x24
 800688c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e0      	bne.n	8006854 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006892:	88bb      	ldrh	r3, [r7, #4]
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d007      	beq.n	80068ae <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	881b      	ldrh	r3, [r3, #0]
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	701a      	strb	r2, [r3, #0]
  }
}
 80068ae:	bf00      	nop
 80068b0:	372c      	adds	r7, #44	; 0x2c
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	7c1b      	ldrb	r3, [r3, #16]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d115      	bne.n	80068fc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d4:	2202      	movs	r2, #2
 80068d6:	2181      	movs	r1, #129	; 0x81
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f001 fe8a 	bl	80085f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2201      	movs	r2, #1
 80068e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e8:	2202      	movs	r2, #2
 80068ea:	2101      	movs	r1, #1
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fe80 	bl	80085f2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80068fa:	e012      	b.n	8006922 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068fc:	2340      	movs	r3, #64	; 0x40
 80068fe:	2202      	movs	r2, #2
 8006900:	2181      	movs	r1, #129	; 0x81
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f001 fe75 	bl	80085f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	2202      	movs	r2, #2
 8006912:	2101      	movs	r1, #1
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f001 fe6c 	bl	80085f2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2201      	movs	r2, #1
 800691e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006922:	2308      	movs	r3, #8
 8006924:	2203      	movs	r2, #3
 8006926:	2182      	movs	r1, #130	; 0x82
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe62 	bl	80085f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006934:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006938:	f001 ff7c 	bl	8008834 <USBD_static_malloc>
 800693c:	4602      	mov	r2, r0
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800694e:	2301      	movs	r3, #1
 8006950:	73fb      	strb	r3, [r7, #15]
 8006952:	e026      	b.n	80069a2 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	2200      	movs	r2, #0
 800696a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2200      	movs	r2, #0
 8006972:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	7c1b      	ldrb	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d109      	bne.n	8006992 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006984:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006988:	2101      	movs	r1, #1
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f001 ff1b 	bl	80087c6 <USBD_LL_PrepareReceive>
 8006990:	e007      	b.n	80069a2 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006998:	2340      	movs	r3, #64	; 0x40
 800699a:	2101      	movs	r1, #1
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 ff12 	bl	80087c6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069bc:	2181      	movs	r1, #129	; 0x81
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f001 fe3d 	bl	800863e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069ca:	2101      	movs	r1, #1
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f001 fe36 	bl	800863e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069da:	2182      	movs	r1, #130	; 0x82
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f001 fe2e 	bl	800863e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00e      	beq.n	8006a10 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a02:	4618      	mov	r0, r3
 8006a04:	f001 ff22 	bl	800884c <USBD_static_free>
    pdev->pClassData = NULL;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b086      	sub	sp, #24
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
 8006a22:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a2a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d039      	beq.n	8006ab8 <USBD_CDC_Setup+0x9e>
 8006a44:	2b20      	cmp	r3, #32
 8006a46:	d17c      	bne.n	8006b42 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	88db      	ldrh	r3, [r3, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d029      	beq.n	8006aa4 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	da11      	bge.n	8006a7e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006a66:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	88d2      	ldrh	r2, [r2, #6]
 8006a6c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a6e:	6939      	ldr	r1, [r7, #16]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	88db      	ldrh	r3, [r3, #6]
 8006a74:	461a      	mov	r2, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f001 f9f6 	bl	8007e68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006a7c:	e068      	b.n	8006b50 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	785a      	ldrb	r2, [r3, #1]
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	88db      	ldrh	r3, [r3, #6]
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006a94:	6939      	ldr	r1, [r7, #16]
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	88db      	ldrh	r3, [r3, #6]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 fa11 	bl	8007ec4 <USBD_CtlPrepareRx>
      break;
 8006aa2:	e055      	b.n	8006b50 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	7850      	ldrb	r0, [r2, #1]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	6839      	ldr	r1, [r7, #0]
 8006ab4:	4798      	blx	r3
      break;
 8006ab6:	e04b      	b.n	8006b50 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b0a      	cmp	r3, #10
 8006abe:	d017      	beq.n	8006af0 <USBD_CDC_Setup+0xd6>
 8006ac0:	2b0b      	cmp	r3, #11
 8006ac2:	d029      	beq.n	8006b18 <USBD_CDC_Setup+0xfe>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d133      	bne.n	8006b30 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d107      	bne.n	8006ae2 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006ad2:	f107 030c 	add.w	r3, r7, #12
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 f9c4 	bl	8007e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ae0:	e02e      	b.n	8006b40 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006ae2:	6839      	ldr	r1, [r7, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f955 	bl	8007d94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006aea:	2302      	movs	r3, #2
 8006aec:	75fb      	strb	r3, [r7, #23]
          break;
 8006aee:	e027      	b.n	8006b40 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d107      	bne.n	8006b0a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006afa:	f107 030f 	add.w	r3, r7, #15
 8006afe:	2201      	movs	r2, #1
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 f9b0 	bl	8007e68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b08:	e01a      	b.n	8006b40 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 f941 	bl	8007d94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b12:	2302      	movs	r3, #2
 8006b14:	75fb      	strb	r3, [r7, #23]
          break;
 8006b16:	e013      	b.n	8006b40 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d00d      	beq.n	8006b3e <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 f935 	bl	8007d94 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b2e:	e006      	b.n	8006b3e <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 f92e 	bl	8007d94 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3c:	e000      	b.n	8006b40 <USBD_CDC_Setup+0x126>
          break;
 8006b3e:	bf00      	nop
      }
      break;
 8006b40:	e006      	b.n	8006b50 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f925 	bl	8007d94 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4e:	bf00      	nop
  }

  return ret;
 8006b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b084      	sub	sp, #16
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	6078      	str	r0, [r7, #4]
 8006b62:	460b      	mov	r3, r1
 8006b64:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b6c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006b74:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d037      	beq.n	8006bf0 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006b80:	78fa      	ldrb	r2, [r7, #3]
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	4613      	mov	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	440b      	add	r3, r1
 8006b8e:	331c      	adds	r3, #28
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d026      	beq.n	8006be4 <USBD_CDC_DataIn+0x8a>
 8006b96:	78fa      	ldrb	r2, [r7, #3]
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	440b      	add	r3, r1
 8006ba4:	331c      	adds	r3, #28
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	78fa      	ldrb	r2, [r7, #3]
 8006baa:	68b9      	ldr	r1, [r7, #8]
 8006bac:	0152      	lsls	r2, r2, #5
 8006bae:	440a      	add	r2, r1
 8006bb0:	3238      	adds	r2, #56	; 0x38
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bb8:	fb02 f201 	mul.w	r2, r2, r1
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d110      	bne.n	8006be4 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	331c      	adds	r3, #28
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006bd6:	78f9      	ldrb	r1, [r7, #3]
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2200      	movs	r2, #0
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 fdcf 	bl	8008780 <USBD_LL_Transmit>
 8006be2:	e003      	b.n	8006bec <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	e000      	b.n	8006bf2 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8006bf0:	2302      	movs	r3, #2
  }
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c0e:	78fb      	ldrb	r3, [r7, #3]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f001 fdfa 	bl	800880c <USBD_LL_GetRxDataSize>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4798      	blx	r3

    return USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e000      	b.n	8006c48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006c46:	2302      	movs	r3, #2
  }
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c5e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d015      	beq.n	8006c96 <USBD_CDC_EP0_RxReady+0x46>
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006c70:	2bff      	cmp	r3, #255	; 0xff
 8006c72:	d010      	beq.n	8006c96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006c82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006c8a:	b292      	uxth	r2, r2
 8006c8c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	22ff      	movs	r2, #255	; 0xff
 8006c92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2243      	movs	r2, #67	; 0x43
 8006cac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006cae:	4b03      	ldr	r3, [pc, #12]	; (8006cbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000098 	.word	0x20000098

08006cc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2243      	movs	r2, #67	; 0x43
 8006ccc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006cce:	4b03      	ldr	r3, [pc, #12]	; (8006cdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	370c      	adds	r7, #12
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bc80      	pop	{r7}
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	20000054 	.word	0x20000054

08006ce0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2243      	movs	r2, #67	; 0x43
 8006cec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006cee:	4b03      	ldr	r3, [pc, #12]	; (8006cfc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bc80      	pop	{r7}
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	200000dc 	.word	0x200000dc

08006d00 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	220a      	movs	r2, #10
 8006d0c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006d0e:	4b03      	ldr	r3, [pc, #12]	; (8006d1c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr
 8006d1a:	bf00      	nop
 8006d1c:	20000010 	.word	0x20000010

08006d20 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bc80      	pop	{r7}
 8006d4a:	4770      	bx	lr

08006d4c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b087      	sub	sp, #28
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	4613      	mov	r3, r2
 8006d58:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d60:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68ba      	ldr	r2, [r7, #8]
 8006d66:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006d6a:	88fa      	ldrh	r2, [r7, #6]
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bc80      	pop	{r7}
 8006d7c:	4770      	bx	lr

08006d7e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006d7e:	b480      	push	{r7}
 8006d80:	b085      	sub	sp, #20
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	6078      	str	r0, [r7, #4]
 8006d86:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d8e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bc80      	pop	{r7}
 8006da2:	4770      	bx	lr

08006da4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006db2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d01c      	beq.n	8006df8 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d115      	bne.n	8006df4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2181      	movs	r1, #129	; 0x81
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f001 fcc8 	bl	8008780 <USBD_LL_Transmit>

      return USBD_OK;
 8006df0:	2300      	movs	r3, #0
 8006df2:	e002      	b.n	8006dfa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e000      	b.n	8006dfa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3710      	adds	r7, #16
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e02:	b580      	push	{r7, lr}
 8006e04:	b084      	sub	sp, #16
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d017      	beq.n	8006e4c <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7c1b      	ldrb	r3, [r3, #16]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d109      	bne.n	8006e38 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e2e:	2101      	movs	r1, #1
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f001 fcc8 	bl	80087c6 <USBD_LL_PrepareReceive>
 8006e36:	e007      	b.n	8006e48 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e3e:	2340      	movs	r3, #64	; 0x40
 8006e40:	2101      	movs	r1, #1
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f001 fcbf 	bl	80087c6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	e000      	b.n	8006e4e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006e4c:	2302      	movs	r3, #2
  }
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3710      	adds	r7, #16
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}

08006e56 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	4613      	mov	r3, r2
 8006e62:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d101      	bne.n	8006e6e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006e6a:	2302      	movs	r3, #2
 8006e6c:	e01a      	b.n	8006ea4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d003      	beq.n	8006e8e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	79fa      	ldrb	r2, [r7, #7]
 8006e9a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e9c:	68f8      	ldr	r0, [r7, #12]
 8006e9e:	f001 fb33 	bl	8008508 <USBD_LL_Init>

  return USBD_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d006      	beq.n	8006ece <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	683a      	ldr	r2, [r7, #0]
 8006ec4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
 8006ecc:	e001      	b.n	8006ed2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006ece:	2302      	movs	r3, #2
 8006ed0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bc80      	pop	{r7}
 8006edc:	4770      	bx	lr

08006ede <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b082      	sub	sp, #8
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 fb68 	bl	80085bc <USBD_LL_Start>

  return USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3708      	adds	r7, #8
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b083      	sub	sp, #12
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bc80      	pop	{r7}
 8006f08:	4770      	bx	lr

08006f0a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006f16:	2302      	movs	r3, #2
 8006f18:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00c      	beq.n	8006f3e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	4611      	mov	r1, r2
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	4798      	blx	r3
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d101      	bne.n	8006f3e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	460b      	mov	r3, r1
 8006f52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	78fa      	ldrb	r2, [r7, #3]
 8006f5e:	4611      	mov	r1, r2
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	4798      	blx	r3

  return USBD_OK;
 8006f64:	2300      	movs	r3, #0
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3708      	adds	r7, #8
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
 8006f76:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f7e:	6839      	ldr	r1, [r7, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fecb 	bl	8007d1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fa2:	f003 031f 	and.w	r3, r3, #31
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d00c      	beq.n	8006fc4 <USBD_LL_SetupStage+0x56>
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d302      	bcc.n	8006fb4 <USBD_LL_SetupStage+0x46>
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d010      	beq.n	8006fd4 <USBD_LL_SetupStage+0x66>
 8006fb2:	e017      	b.n	8006fe4 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 f9cb 	bl	8007358 <USBD_StdDevReq>
      break;
 8006fc2:	e01a      	b.n	8006ffa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 fa2d 	bl	800742c <USBD_StdItfReq>
      break;
 8006fd2:	e012      	b.n	8006ffa <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006fda:	4619      	mov	r1, r3
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 fa6b 	bl	80074b8 <USBD_StdEPReq>
      break;
 8006fe2:	e00a      	b.n	8006ffa <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f001 fb42 	bl	800867c <USBD_LL_StallEP>
      break;
 8006ff8:	bf00      	nop
  }

  return USBD_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	460b      	mov	r3, r1
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007012:	7afb      	ldrb	r3, [r7, #11]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d14b      	bne.n	80070b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800701e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007026:	2b03      	cmp	r3, #3
 8007028:	d134      	bne.n	8007094 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	68da      	ldr	r2, [r3, #12]
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	429a      	cmp	r2, r3
 8007034:	d919      	bls.n	800706a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	68da      	ldr	r2, [r3, #12]
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	691b      	ldr	r3, [r3, #16]
 800703e:	1ad2      	subs	r2, r2, r3
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	68da      	ldr	r2, [r3, #12]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800704c:	429a      	cmp	r2, r3
 800704e:	d203      	bcs.n	8007058 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8007054:	b29b      	uxth	r3, r3
 8007056:	e002      	b.n	800705e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800705c:	b29b      	uxth	r3, r3
 800705e:	461a      	mov	r2, r3
 8007060:	6879      	ldr	r1, [r7, #4]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	f000 ff4c 	bl	8007f00 <USBD_CtlContinueRx>
 8007068:	e038      	b.n	80070dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007070:	691b      	ldr	r3, [r3, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800707c:	2b03      	cmp	r3, #3
 800707e:	d105      	bne.n	800708c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 ff49 	bl	8007f24 <USBD_CtlSendStatus>
 8007092:	e023      	b.n	80070dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800709a:	2b05      	cmp	r3, #5
 800709c:	d11e      	bne.n	80070dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80070a6:	2100      	movs	r1, #0
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f001 fae7 	bl	800867c <USBD_LL_StallEP>
 80070ae:	e015      	b.n	80070dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070b6:	699b      	ldr	r3, [r3, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00d      	beq.n	80070d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d108      	bne.n	80070d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	7afa      	ldrb	r2, [r7, #11]
 80070d0:	4611      	mov	r1, r2
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	4798      	blx	r3
 80070d6:	e001      	b.n	80070dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80070d8:	2302      	movs	r3, #2
 80070da:	e000      	b.n	80070de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3718      	adds	r7, #24
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	460b      	mov	r3, r1
 80070f0:	607a      	str	r2, [r7, #4]
 80070f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80070f4:	7afb      	ldrb	r3, [r7, #11]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d17f      	bne.n	80071fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3314      	adds	r3, #20
 80070fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007106:	2b02      	cmp	r3, #2
 8007108:	d15c      	bne.n	80071c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	429a      	cmp	r2, r3
 8007114:	d915      	bls.n	8007142 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	68da      	ldr	r2, [r3, #12]
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	1ad2      	subs	r2, r2, r3
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	6879      	ldr	r1, [r7, #4]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 feb6 	bl	8007ea0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007134:	2300      	movs	r3, #0
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	68f8      	ldr	r0, [r7, #12]
 800713c:	f001 fb43 	bl	80087c6 <USBD_LL_PrepareReceive>
 8007140:	e04e      	b.n	80071e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	6912      	ldr	r2, [r2, #16]
 800714a:	fbb3 f1f2 	udiv	r1, r3, r2
 800714e:	fb02 f201 	mul.w	r2, r2, r1
 8007152:	1a9b      	subs	r3, r3, r2
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11c      	bne.n	8007192 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8007160:	429a      	cmp	r2, r3
 8007162:	d316      	bcc.n	8007192 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800716e:	429a      	cmp	r2, r3
 8007170:	d20f      	bcs.n	8007192 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fe92 	bl	8007ea0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007184:	2300      	movs	r3, #0
 8007186:	2200      	movs	r2, #0
 8007188:	2100      	movs	r1, #0
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f001 fb1b 	bl	80087c6 <USBD_LL_PrepareReceive>
 8007190:	e026      	b.n	80071e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d105      	bne.n	80071b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80071b4:	2180      	movs	r1, #128	; 0x80
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f001 fa60 	bl	800867c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 fec4 	bl	8007f4a <USBD_CtlReceiveStatus>
 80071c2:	e00d      	b.n	80071e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d004      	beq.n	80071d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d103      	bne.n	80071e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80071d8:	2180      	movs	r1, #128	; 0x80
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f001 fa4e 	bl	800867c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d11d      	bne.n	8007226 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	f7ff fe83 	bl	8006ef6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80071f8:	e015      	b.n	8007226 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007200:	695b      	ldr	r3, [r3, #20]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00d      	beq.n	8007222 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800720c:	2b03      	cmp	r3, #3
 800720e:	d108      	bne.n	8007222 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	7afa      	ldrb	r2, [r7, #11]
 800721a:	4611      	mov	r1, r2
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	4798      	blx	r3
 8007220:	e001      	b.n	8007226 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007222:	2302      	movs	r3, #2
 8007224:	e000      	b.n	8007228 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3718      	adds	r7, #24
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	2200      	movs	r2, #0
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f001 f9d7 	bl	80085f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2201      	movs	r2, #1
 8007248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2240      	movs	r2, #64	; 0x40
 8007250:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007254:	2340      	movs	r3, #64	; 0x40
 8007256:	2200      	movs	r2, #0
 8007258:	2180      	movs	r1, #128	; 0x80
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f001 f9c9 	bl	80085f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2240      	movs	r2, #64	; 0x40
 800726a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d009      	beq.n	80072a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6852      	ldr	r2, [r2, #4]
 80072a0:	b2d2      	uxtb	r2, r2
 80072a2:	4611      	mov	r1, r2
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	4798      	blx	r3
  }

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b083      	sub	sp, #12
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	460b      	mov	r3, r1
 80072bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	78fa      	ldrb	r2, [r7, #3]
 80072c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bc80      	pop	{r7}
 80072ce:	4770      	bx	lr

080072d0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2204      	movs	r2, #4
 80072e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bc80      	pop	{r7}
 80072f6:	4770      	bx	lr

080072f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007306:	2b04      	cmp	r3, #4
 8007308:	d105      	bne.n	8007316 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	bc80      	pop	{r7}
 8007320:	4770      	bx	lr

08007322 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007330:	2b03      	cmp	r3, #3
 8007332:	d10b      	bne.n	800734c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800733a:	69db      	ldr	r3, [r3, #28]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d005      	beq.n	800734c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	69db      	ldr	r3, [r3, #28]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800736e:	2b20      	cmp	r3, #32
 8007370:	d004      	beq.n	800737c <USBD_StdDevReq+0x24>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d002      	beq.n	800737c <USBD_StdDevReq+0x24>
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <USBD_StdDevReq+0x34>
 800737a:	e04c      	b.n	8007416 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3
      break;
 800738a:	e049      	b.n	8007420 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	785b      	ldrb	r3, [r3, #1]
 8007390:	2b09      	cmp	r3, #9
 8007392:	d83a      	bhi.n	800740a <USBD_StdDevReq+0xb2>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <USBD_StdDevReq+0x44>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073ed 	.word	0x080073ed
 80073a0:	08007401 	.word	0x08007401
 80073a4:	0800740b 	.word	0x0800740b
 80073a8:	080073f7 	.word	0x080073f7
 80073ac:	0800740b 	.word	0x0800740b
 80073b0:	080073cf 	.word	0x080073cf
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	0800740b 	.word	0x0800740b
 80073bc:	080073e3 	.word	0x080073e3
 80073c0:	080073d9 	.word	0x080073d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80073c4:	6839      	ldr	r1, [r7, #0]
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f9d4 	bl	8007774 <USBD_GetDescriptor>
          break;
 80073cc:	e022      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb37 	bl	8007a44 <USBD_SetAddress>
          break;
 80073d6:	e01d      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80073d8:	6839      	ldr	r1, [r7, #0]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fb74 	bl	8007ac8 <USBD_SetConfig>
          break;
 80073e0:	e018      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80073e2:	6839      	ldr	r1, [r7, #0]
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 fbfd 	bl	8007be4 <USBD_GetConfig>
          break;
 80073ea:	e013      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80073ec:	6839      	ldr	r1, [r7, #0]
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fc2c 	bl	8007c4c <USBD_GetStatus>
          break;
 80073f4:	e00e      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80073f6:	6839      	ldr	r1, [r7, #0]
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 fc5a 	bl	8007cb2 <USBD_SetFeature>
          break;
 80073fe:	e009      	b.n	8007414 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fc69 	bl	8007cda <USBD_ClrFeature>
          break;
 8007408:	e004      	b.n	8007414 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fcc1 	bl	8007d94 <USBD_CtlError>
          break;
 8007412:	bf00      	nop
      }
      break;
 8007414:	e004      	b.n	8007420 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fcbb 	bl	8007d94 <USBD_CtlError>
      break;
 800741e:	bf00      	nop
  }

  return ret;
 8007420:	7bfb      	ldrb	r3, [r7, #15]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop

0800742c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007442:	2b20      	cmp	r3, #32
 8007444:	d003      	beq.n	800744e <USBD_StdItfReq+0x22>
 8007446:	2b40      	cmp	r3, #64	; 0x40
 8007448:	d001      	beq.n	800744e <USBD_StdItfReq+0x22>
 800744a:	2b00      	cmp	r3, #0
 800744c:	d12a      	bne.n	80074a4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007454:	3b01      	subs	r3, #1
 8007456:	2b02      	cmp	r3, #2
 8007458:	d81d      	bhi.n	8007496 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	889b      	ldrh	r3, [r3, #4]
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b01      	cmp	r3, #1
 8007462:	d813      	bhi.n	800748c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	6839      	ldr	r1, [r7, #0]
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	4798      	blx	r3
 8007472:	4603      	mov	r3, r0
 8007474:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	88db      	ldrh	r3, [r3, #6]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d110      	bne.n	80074a0 <USBD_StdItfReq+0x74>
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10d      	bne.n	80074a0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 fd4d 	bl	8007f24 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800748a:	e009      	b.n	80074a0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 fc80 	bl	8007d94 <USBD_CtlError>
          break;
 8007494:	e004      	b.n	80074a0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fc7b 	bl	8007d94 <USBD_CtlError>
          break;
 800749e:	e000      	b.n	80074a2 <USBD_StdItfReq+0x76>
          break;
 80074a0:	bf00      	nop
      }
      break;
 80074a2:	e004      	b.n	80074ae <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 fc74 	bl	8007d94 <USBD_CtlError>
      break;
 80074ac:	bf00      	nop
  }

  return USBD_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3710      	adds	r7, #16
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	889b      	ldrh	r3, [r3, #4]
 80074ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074d4:	2b20      	cmp	r3, #32
 80074d6:	d004      	beq.n	80074e2 <USBD_StdEPReq+0x2a>
 80074d8:	2b40      	cmp	r3, #64	; 0x40
 80074da:	d002      	beq.n	80074e2 <USBD_StdEPReq+0x2a>
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d008      	beq.n	80074f2 <USBD_StdEPReq+0x3a>
 80074e0:	e13d      	b.n	800775e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	4798      	blx	r3
      break;
 80074f0:	e13a      	b.n	8007768 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d10a      	bne.n	8007514 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	6839      	ldr	r1, [r7, #0]
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	4798      	blx	r3
 800750c:	4603      	mov	r3, r0
 800750e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	e12a      	b.n	800776a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	785b      	ldrb	r3, [r3, #1]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d03e      	beq.n	800759a <USBD_StdEPReq+0xe2>
 800751c:	2b03      	cmp	r3, #3
 800751e:	d002      	beq.n	8007526 <USBD_StdEPReq+0x6e>
 8007520:	2b00      	cmp	r3, #0
 8007522:	d070      	beq.n	8007606 <USBD_StdEPReq+0x14e>
 8007524:	e115      	b.n	8007752 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800752c:	2b02      	cmp	r3, #2
 800752e:	d002      	beq.n	8007536 <USBD_StdEPReq+0x7e>
 8007530:	2b03      	cmp	r3, #3
 8007532:	d015      	beq.n	8007560 <USBD_StdEPReq+0xa8>
 8007534:	e02b      	b.n	800758e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007536:	7bbb      	ldrb	r3, [r7, #14]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00c      	beq.n	8007556 <USBD_StdEPReq+0x9e>
 800753c:	7bbb      	ldrb	r3, [r7, #14]
 800753e:	2b80      	cmp	r3, #128	; 0x80
 8007540:	d009      	beq.n	8007556 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007542:	7bbb      	ldrb	r3, [r7, #14]
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f001 f898 	bl	800867c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800754c:	2180      	movs	r1, #128	; 0x80
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f001 f894 	bl	800867c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007554:	e020      	b.n	8007598 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8007556:	6839      	ldr	r1, [r7, #0]
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 fc1b 	bl	8007d94 <USBD_CtlError>
              break;
 800755e:	e01b      	b.n	8007598 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	885b      	ldrh	r3, [r3, #2]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10e      	bne.n	8007586 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8007568:	7bbb      	ldrb	r3, [r7, #14]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00b      	beq.n	8007586 <USBD_StdEPReq+0xce>
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	2b80      	cmp	r3, #128	; 0x80
 8007572:	d008      	beq.n	8007586 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d104      	bne.n	8007586 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800757c:	7bbb      	ldrb	r3, [r7, #14]
 800757e:	4619      	mov	r1, r3
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f001 f87b 	bl	800867c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 fccc 	bl	8007f24 <USBD_CtlSendStatus>

              break;
 800758c:	e004      	b.n	8007598 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800758e:	6839      	ldr	r1, [r7, #0]
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fbff 	bl	8007d94 <USBD_CtlError>
              break;
 8007596:	bf00      	nop
          }
          break;
 8007598:	e0e0      	b.n	800775c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d002      	beq.n	80075aa <USBD_StdEPReq+0xf2>
 80075a4:	2b03      	cmp	r3, #3
 80075a6:	d015      	beq.n	80075d4 <USBD_StdEPReq+0x11c>
 80075a8:	e026      	b.n	80075f8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80075aa:	7bbb      	ldrb	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00c      	beq.n	80075ca <USBD_StdEPReq+0x112>
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b80      	cmp	r3, #128	; 0x80
 80075b4:	d009      	beq.n	80075ca <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	4619      	mov	r1, r3
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f001 f85e 	bl	800867c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f001 f85a 	bl	800867c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80075c8:	e01c      	b.n	8007604 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80075ca:	6839      	ldr	r1, [r7, #0]
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 fbe1 	bl	8007d94 <USBD_CtlError>
              break;
 80075d2:	e017      	b.n	8007604 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	885b      	ldrh	r3, [r3, #2]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d112      	bne.n	8007602 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80075dc:	7bbb      	ldrb	r3, [r7, #14]
 80075de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d004      	beq.n	80075f0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80075e6:	7bbb      	ldrb	r3, [r7, #14]
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f865 	bl	80086ba <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fc97 	bl	8007f24 <USBD_CtlSendStatus>
              }
              break;
 80075f6:	e004      	b.n	8007602 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80075f8:	6839      	ldr	r1, [r7, #0]
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 fbca 	bl	8007d94 <USBD_CtlError>
              break;
 8007600:	e000      	b.n	8007604 <USBD_StdEPReq+0x14c>
              break;
 8007602:	bf00      	nop
          }
          break;
 8007604:	e0aa      	b.n	800775c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800760c:	2b02      	cmp	r3, #2
 800760e:	d002      	beq.n	8007616 <USBD_StdEPReq+0x15e>
 8007610:	2b03      	cmp	r3, #3
 8007612:	d032      	beq.n	800767a <USBD_StdEPReq+0x1c2>
 8007614:	e097      	b.n	8007746 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007616:	7bbb      	ldrb	r3, [r7, #14]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d007      	beq.n	800762c <USBD_StdEPReq+0x174>
 800761c:	7bbb      	ldrb	r3, [r7, #14]
 800761e:	2b80      	cmp	r3, #128	; 0x80
 8007620:	d004      	beq.n	800762c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fbb5 	bl	8007d94 <USBD_CtlError>
                break;
 800762a:	e091      	b.n	8007750 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800762c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007630:	2b00      	cmp	r3, #0
 8007632:	da0b      	bge.n	800764c <USBD_StdEPReq+0x194>
 8007634:	7bbb      	ldrb	r3, [r7, #14]
 8007636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	3310      	adds	r3, #16
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	3304      	adds	r3, #4
 800764a:	e00b      	b.n	8007664 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800764c:	7bbb      	ldrb	r3, [r7, #14]
 800764e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	4413      	add	r3, r2
 8007662:	3304      	adds	r3, #4
 8007664:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2202      	movs	r2, #2
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fbf8 	bl	8007e68 <USBD_CtlSendData>
              break;
 8007678:	e06a      	b.n	8007750 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800767a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800767e:	2b00      	cmp	r3, #0
 8007680:	da11      	bge.n	80076a6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	f003 020f 	and.w	r2, r3, #15
 8007688:	6879      	ldr	r1, [r7, #4]
 800768a:	4613      	mov	r3, r2
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	4413      	add	r3, r2
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	440b      	add	r3, r1
 8007694:	3318      	adds	r3, #24
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d117      	bne.n	80076cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800769c:	6839      	ldr	r1, [r7, #0]
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 fb78 	bl	8007d94 <USBD_CtlError>
                  break;
 80076a4:	e054      	b.n	8007750 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	f003 020f 	and.w	r2, r3, #15
 80076ac:	6879      	ldr	r1, [r7, #4]
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	440b      	add	r3, r1
 80076b8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d104      	bne.n	80076cc <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb65 	bl	8007d94 <USBD_CtlError>
                  break;
 80076ca:	e041      	b.n	8007750 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	da0b      	bge.n	80076ec <USBD_StdEPReq+0x234>
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
 80076d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	3310      	adds	r3, #16
 80076e4:	687a      	ldr	r2, [r7, #4]
 80076e6:	4413      	add	r3, r2
 80076e8:	3304      	adds	r3, #4
 80076ea:	e00b      	b.n	8007704 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	4413      	add	r3, r2
 8007702:	3304      	adds	r3, #4
 8007704:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007706:	7bbb      	ldrb	r3, [r7, #14]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d002      	beq.n	8007712 <USBD_StdEPReq+0x25a>
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	2b80      	cmp	r3, #128	; 0x80
 8007710:	d103      	bne.n	800771a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
 8007718:	e00e      	b.n	8007738 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	4619      	mov	r1, r3
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 ffea 	bl	80086f8 <USBD_LL_IsStallEP>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]
 8007730:	e002      	b.n	8007738 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2202      	movs	r2, #2
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fb92 	bl	8007e68 <USBD_CtlSendData>
              break;
 8007744:	e004      	b.n	8007750 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fb23 	bl	8007d94 <USBD_CtlError>
              break;
 800774e:	bf00      	nop
          }
          break;
 8007750:	e004      	b.n	800775c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8007752:	6839      	ldr	r1, [r7, #0]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fb1d 	bl	8007d94 <USBD_CtlError>
          break;
 800775a:	bf00      	nop
      }
      break;
 800775c:	e004      	b.n	8007768 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fb17 	bl	8007d94 <USBD_CtlError>
      break;
 8007766:	bf00      	nop
  }

  return ret;
 8007768:	7bfb      	ldrb	r3, [r7, #15]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
	...

08007774 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800777e:	2300      	movs	r3, #0
 8007780:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	0a1b      	lsrs	r3, r3, #8
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	2b06      	cmp	r3, #6
 8007796:	f200 8128 	bhi.w	80079ea <USBD_GetDescriptor+0x276>
 800779a:	a201      	add	r2, pc, #4	; (adr r2, 80077a0 <USBD_GetDescriptor+0x2c>)
 800779c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a0:	080077bd 	.word	0x080077bd
 80077a4:	080077d5 	.word	0x080077d5
 80077a8:	08007815 	.word	0x08007815
 80077ac:	080079eb 	.word	0x080079eb
 80077b0:	080079eb 	.word	0x080079eb
 80077b4:	0800798b 	.word	0x0800798b
 80077b8:	080079b7 	.word	0x080079b7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	7c12      	ldrb	r2, [r2, #16]
 80077c8:	f107 0108 	add.w	r1, r7, #8
 80077cc:	4610      	mov	r0, r2
 80077ce:	4798      	blx	r3
 80077d0:	60f8      	str	r0, [r7, #12]
      break;
 80077d2:	e112      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7c1b      	ldrb	r3, [r3, #16]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10d      	bne.n	80077f8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e4:	f107 0208 	add.w	r2, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	3301      	adds	r3, #1
 80077f2:	2202      	movs	r2, #2
 80077f4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80077f6:	e100      	b.n	80079fa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f107 0208 	add.w	r2, r7, #8
 8007804:	4610      	mov	r0, r2
 8007806:	4798      	blx	r3
 8007808:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	3301      	adds	r3, #1
 800780e:	2202      	movs	r2, #2
 8007810:	701a      	strb	r2, [r3, #0]
      break;
 8007812:	e0f2      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	885b      	ldrh	r3, [r3, #2]
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b05      	cmp	r3, #5
 800781c:	f200 80ac 	bhi.w	8007978 <USBD_GetDescriptor+0x204>
 8007820:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USBD_GetDescriptor+0xb4>)
 8007822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007826:	bf00      	nop
 8007828:	08007841 	.word	0x08007841
 800782c:	08007875 	.word	0x08007875
 8007830:	080078a9 	.word	0x080078a9
 8007834:	080078dd 	.word	0x080078dd
 8007838:	08007911 	.word	0x08007911
 800783c:	08007945 	.word	0x08007945
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d00b      	beq.n	8007864 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	7c12      	ldrb	r2, [r2, #16]
 8007858:	f107 0108 	add.w	r1, r7, #8
 800785c:	4610      	mov	r0, r2
 800785e:	4798      	blx	r3
 8007860:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007862:	e091      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa94 	bl	8007d94 <USBD_CtlError>
            err++;
 800786c:	7afb      	ldrb	r3, [r7, #11]
 800786e:	3301      	adds	r3, #1
 8007870:	72fb      	strb	r3, [r7, #11]
          break;
 8007872:	e089      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	7c12      	ldrb	r2, [r2, #16]
 800788c:	f107 0108 	add.w	r1, r7, #8
 8007890:	4610      	mov	r0, r2
 8007892:	4798      	blx	r3
 8007894:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007896:	e077      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fa7a 	bl	8007d94 <USBD_CtlError>
            err++;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
 80078a2:	3301      	adds	r3, #1
 80078a4:	72fb      	strb	r3, [r7, #11]
          break;
 80078a6:	e06f      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	7c12      	ldrb	r2, [r2, #16]
 80078c0:	f107 0108 	add.w	r1, r7, #8
 80078c4:	4610      	mov	r0, r2
 80078c6:	4798      	blx	r3
 80078c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ca:	e05d      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078cc:	6839      	ldr	r1, [r7, #0]
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa60 	bl	8007d94 <USBD_CtlError>
            err++;
 80078d4:	7afb      	ldrb	r3, [r7, #11]
 80078d6:	3301      	adds	r3, #1
 80078d8:	72fb      	strb	r3, [r7, #11]
          break;
 80078da:	e055      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d00b      	beq.n	8007900 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	7c12      	ldrb	r2, [r2, #16]
 80078f4:	f107 0108 	add.w	r1, r7, #8
 80078f8:	4610      	mov	r0, r2
 80078fa:	4798      	blx	r3
 80078fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078fe:	e043      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007900:	6839      	ldr	r1, [r7, #0]
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fa46 	bl	8007d94 <USBD_CtlError>
            err++;
 8007908:	7afb      	ldrb	r3, [r7, #11]
 800790a:	3301      	adds	r3, #1
 800790c:	72fb      	strb	r3, [r7, #11]
          break;
 800790e:	e03b      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007916:	695b      	ldr	r3, [r3, #20]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007922:	695b      	ldr	r3, [r3, #20]
 8007924:	687a      	ldr	r2, [r7, #4]
 8007926:	7c12      	ldrb	r2, [r2, #16]
 8007928:	f107 0108 	add.w	r1, r7, #8
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
 8007930:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007932:	e029      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fa2c 	bl	8007d94 <USBD_CtlError>
            err++;
 800793c:	7afb      	ldrb	r3, [r7, #11]
 800793e:	3301      	adds	r3, #1
 8007940:	72fb      	strb	r3, [r7, #11]
          break;
 8007942:	e021      	b.n	8007988 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00b      	beq.n	8007968 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007956:	699b      	ldr	r3, [r3, #24]
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	7c12      	ldrb	r2, [r2, #16]
 800795c:	f107 0108 	add.w	r1, r7, #8
 8007960:	4610      	mov	r0, r2
 8007962:	4798      	blx	r3
 8007964:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007966:	e00f      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007968:	6839      	ldr	r1, [r7, #0]
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa12 	bl	8007d94 <USBD_CtlError>
            err++;
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	3301      	adds	r3, #1
 8007974:	72fb      	strb	r3, [r7, #11]
          break;
 8007976:	e007      	b.n	8007988 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007978:	6839      	ldr	r1, [r7, #0]
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa0a 	bl	8007d94 <USBD_CtlError>
          err++;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	3301      	adds	r3, #1
 8007984:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007986:	e038      	b.n	80079fa <USBD_GetDescriptor+0x286>
 8007988:	e037      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	7c1b      	ldrb	r3, [r3, #16]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d109      	bne.n	80079a6 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f107 0208 	add.w	r2, r7, #8
 800799e:	4610      	mov	r0, r2
 80079a0:	4798      	blx	r3
 80079a2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079a4:	e029      	b.n	80079fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9f3 	bl	8007d94 <USBD_CtlError>
        err++;
 80079ae:	7afb      	ldrb	r3, [r7, #11]
 80079b0:	3301      	adds	r3, #1
 80079b2:	72fb      	strb	r3, [r7, #11]
      break;
 80079b4:	e021      	b.n	80079fa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	7c1b      	ldrb	r3, [r3, #16]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10d      	bne.n	80079da <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c6:	f107 0208 	add.w	r2, r7, #8
 80079ca:	4610      	mov	r0, r2
 80079cc:	4798      	blx	r3
 80079ce:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	2207      	movs	r2, #7
 80079d6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80079d8:	e00f      	b.n	80079fa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f9d9 	bl	8007d94 <USBD_CtlError>
        err++;
 80079e2:	7afb      	ldrb	r3, [r7, #11]
 80079e4:	3301      	adds	r3, #1
 80079e6:	72fb      	strb	r3, [r7, #11]
      break;
 80079e8:	e007      	b.n	80079fa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80079ea:	6839      	ldr	r1, [r7, #0]
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f9d1 	bl	8007d94 <USBD_CtlError>
      err++;
 80079f2:	7afb      	ldrb	r3, [r7, #11]
 80079f4:	3301      	adds	r3, #1
 80079f6:	72fb      	strb	r3, [r7, #11]
      break;
 80079f8:	bf00      	nop
  }

  if (err != 0U)
 80079fa:	7afb      	ldrb	r3, [r7, #11]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d11c      	bne.n	8007a3a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007a00:	893b      	ldrh	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d011      	beq.n	8007a2a <USBD_GetDescriptor+0x2b6>
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	88db      	ldrh	r3, [r3, #6]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00d      	beq.n	8007a2a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	88da      	ldrh	r2, [r3, #6]
 8007a12:	893b      	ldrh	r3, [r7, #8]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bf28      	it	cs
 8007a18:	4613      	movcs	r3, r2
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007a1e:	893b      	ldrh	r3, [r7, #8]
 8007a20:	461a      	mov	r2, r3
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f000 fa1f 	bl	8007e68 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	88db      	ldrh	r3, [r3, #6]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d104      	bne.n	8007a3c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fa76 	bl	8007f24 <USBD_CtlSendStatus>
 8007a38:	e000      	b.n	8007a3c <USBD_GetDescriptor+0x2c8>
    return;
 8007a3a:	bf00      	nop
    }
  }
}
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop

08007a44 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	889b      	ldrh	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d130      	bne.n	8007ab8 <USBD_SetAddress+0x74>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	88db      	ldrh	r3, [r3, #6]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d12c      	bne.n	8007ab8 <USBD_SetAddress+0x74>
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	885b      	ldrh	r3, [r3, #2]
 8007a62:	2b7f      	cmp	r3, #127	; 0x7f
 8007a64:	d828      	bhi.n	8007ab8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d104      	bne.n	8007a86 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f988 	bl	8007d94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a84:	e01c      	b.n	8007ac0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	7bfa      	ldrb	r2, [r7, #15]
 8007a8a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fe55 	bl	8008742 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fa43 	bl	8007f24 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aac:	e008      	b.n	8007ac0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab6:	e003      	b.n	8007ac0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f96a 	bl	8007d94 <USBD_CtlError>
  }
}
 8007ac0:	bf00      	nop
 8007ac2:	3710      	adds	r7, #16
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}

08007ac8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	4b41      	ldr	r3, [pc, #260]	; (8007be0 <USBD_SetConfig+0x118>)
 8007ada:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007adc:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <USBD_SetConfig+0x118>)
 8007ade:	781b      	ldrb	r3, [r3, #0]
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d904      	bls.n	8007aee <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f954 	bl	8007d94 <USBD_CtlError>
 8007aec:	e075      	b.n	8007bda <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d002      	beq.n	8007afe <USBD_SetConfig+0x36>
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d023      	beq.n	8007b44 <USBD_SetConfig+0x7c>
 8007afc:	e062      	b.n	8007bc4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007afe:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01a      	beq.n	8007b3c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007b06:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2203      	movs	r2, #3
 8007b14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b18:	4b31      	ldr	r3, [pc, #196]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f9f3 	bl	8006f0a <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d104      	bne.n	8007b34 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f931 	bl	8007d94 <USBD_CtlError>
            return;
 8007b32:	e052      	b.n	8007bda <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9f5 	bl	8007f24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b3a:	e04e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9f1 	bl	8007f24 <USBD_CtlSendStatus>
        break;
 8007b42:	e04a      	b.n	8007bda <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007b44:	4b26      	ldr	r3, [pc, #152]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d112      	bne.n	8007b72 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2202      	movs	r2, #2
 8007b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007b54:	4b22      	ldr	r3, [pc, #136]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	461a      	mov	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4619      	mov	r1, r3
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f9ef 	bl	8006f48 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f9da 	bl	8007f24 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007b70:	e033      	b.n	8007bda <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007b72:	4b1b      	ldr	r3, [pc, #108]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	461a      	mov	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d01d      	beq.n	8007bbc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff f9dd 	bl	8006f48 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	461a      	mov	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b98:	4b11      	ldr	r3, [pc, #68]	; (8007be0 <USBD_SetConfig+0x118>)
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f7ff f9b3 	bl	8006f0a <USBD_SetClassConfig>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d104      	bne.n	8007bb4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007baa:	6839      	ldr	r1, [r7, #0]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8f1 	bl	8007d94 <USBD_CtlError>
            return;
 8007bb2:	e012      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f9b5 	bl	8007f24 <USBD_CtlSendStatus>
        break;
 8007bba:	e00e      	b.n	8007bda <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f9b1 	bl	8007f24 <USBD_CtlSendStatus>
        break;
 8007bc2:	e00a      	b.n	8007bda <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007bc4:	6839      	ldr	r1, [r7, #0]
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8e4 	bl	8007d94 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007bcc:	4b04      	ldr	r3, [pc, #16]	; (8007be0 <USBD_SetConfig+0x118>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f9b8 	bl	8006f48 <USBD_ClrClassConfig>
        break;
 8007bd8:	bf00      	nop
    }
  }
}
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000378 	.word	0x20000378

08007be4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88db      	ldrh	r3, [r3, #6]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d004      	beq.n	8007c00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007bf6:	6839      	ldr	r1, [r7, #0]
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f000 f8cb 	bl	8007d94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007bfe:	e021      	b.n	8007c44 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	db17      	blt.n	8007c3a <USBD_GetConfig+0x56>
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	dd02      	ble.n	8007c14 <USBD_GetConfig+0x30>
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	d00b      	beq.n	8007c2a <USBD_GetConfig+0x46>
 8007c12:	e012      	b.n	8007c3a <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2200      	movs	r2, #0
 8007c18:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	2201      	movs	r2, #1
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f920 	bl	8007e68 <USBD_CtlSendData>
        break;
 8007c28:	e00c      	b.n	8007c44 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	2201      	movs	r2, #1
 8007c30:	4619      	mov	r1, r3
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f918 	bl	8007e68 <USBD_CtlSendData>
        break;
 8007c38:	e004      	b.n	8007c44 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f8a9 	bl	8007d94 <USBD_CtlError>
        break;
 8007c42:	bf00      	nop
}
 8007c44:	bf00      	nop
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d81e      	bhi.n	8007ca0 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	88db      	ldrh	r3, [r3, #6]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d004      	beq.n	8007c74 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007c6a:	6839      	ldr	r1, [r7, #0]
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 f891 	bl	8007d94 <USBD_CtlError>
        break;
 8007c72:	e01a      	b.n	8007caa <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d005      	beq.n	8007c90 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f043 0202 	orr.w	r2, r3, #2
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	330c      	adds	r3, #12
 8007c94:	2202      	movs	r2, #2
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 f8e5 	bl	8007e68 <USBD_CtlSendData>
      break;
 8007c9e:	e004      	b.n	8007caa <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007ca0:	6839      	ldr	r1, [r7, #0]
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f876 	bl	8007d94 <USBD_CtlError>
      break;
 8007ca8:	bf00      	nop
  }
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b082      	sub	sp, #8
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	885b      	ldrh	r3, [r3, #2]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d106      	bne.n	8007cd2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f929 	bl	8007f24 <USBD_CtlSendStatus>
  }
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cea:	3b01      	subs	r3, #1
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d80b      	bhi.n	8007d08 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	885b      	ldrh	r3, [r3, #2]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d10c      	bne.n	8007d12 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f90f 	bl	8007f24 <USBD_CtlSendStatus>
      }
      break;
 8007d06:	e004      	b.n	8007d12 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 f842 	bl	8007d94 <USBD_CtlError>
      break;
 8007d10:	e000      	b.n	8007d14 <USBD_ClrFeature+0x3a>
      break;
 8007d12:	bf00      	nop
  }
}
 8007d14:	bf00      	nop
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781a      	ldrb	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	785a      	ldrb	r2, [r3, #1]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	3302      	adds	r3, #2
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	3303      	adds	r3, #3
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	021b      	lsls	r3, r3, #8
 8007d48:	b29b      	uxth	r3, r3
 8007d4a:	4413      	add	r3, r2
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	3304      	adds	r3, #4
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	3305      	adds	r3, #5
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	021b      	lsls	r3, r3, #8
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	4413      	add	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	3306      	adds	r3, #6
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	3307      	adds	r3, #7
 8007d7a:	781b      	ldrb	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	021b      	lsls	r3, r3, #8
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4413      	add	r3, r2
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	80da      	strh	r2, [r3, #6]

}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bc80      	pop	{r7}
 8007d92:	4770      	bx	lr

08007d94 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d9e:	2180      	movs	r1, #128	; 0x80
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f000 fc6b 	bl	800867c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fc67 	bl	800867c <USBD_LL_StallEP>
}
 8007dae:	bf00      	nop
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b086      	sub	sp, #24
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	60f8      	str	r0, [r7, #12]
 8007dbe:	60b9      	str	r1, [r7, #8]
 8007dc0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d032      	beq.n	8007e32 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f834 	bl	8007e3a <USBD_GetLen>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	b29a      	uxth	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007de0:	7dfb      	ldrb	r3, [r7, #23]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	75fa      	strb	r2, [r7, #23]
 8007de6:	461a      	mov	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	4413      	add	r3, r2
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7812      	ldrb	r2, [r2, #0]
 8007df0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007df2:	7dfb      	ldrb	r3, [r7, #23]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	75fa      	strb	r2, [r7, #23]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	2203      	movs	r2, #3
 8007e00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007e02:	e012      	b.n	8007e2a <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	1c5a      	adds	r2, r3, #1
 8007e08:	60fa      	str	r2, [r7, #12]
 8007e0a:	7dfa      	ldrb	r2, [r7, #23]
 8007e0c:	1c51      	adds	r1, r2, #1
 8007e0e:	75f9      	strb	r1, [r7, #23]
 8007e10:	4611      	mov	r1, r2
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	440a      	add	r2, r1
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	1c5a      	adds	r2, r3, #1
 8007e1e:	75fa      	strb	r2, [r7, #23]
 8007e20:	461a      	mov	r2, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	4413      	add	r3, r2
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d1e8      	bne.n	8007e04 <USBD_GetString+0x4e>
    }
  }
}
 8007e32:	bf00      	nop
 8007e34:	3718      	adds	r7, #24
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007e3a:	b480      	push	{r7}
 8007e3c:	b085      	sub	sp, #20
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007e46:	e005      	b.n	8007e54 <USBD_GetLen+0x1a>
  {
    len++;
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3301      	adds	r3, #1
 8007e52:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1f5      	bne.n	8007e48 <USBD_GetLen+0xe>
  }

  return len;
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bc80      	pop	{r7}
 8007e66:	4770      	bx	lr

08007e68 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2202      	movs	r2, #2
 8007e7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e7e:	88fa      	ldrh	r2, [r7, #6]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e8a:	88fb      	ldrh	r3, [r7, #6]
 8007e8c:	68ba      	ldr	r2, [r7, #8]
 8007e8e:	2100      	movs	r1, #0
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 fc75 	bl	8008780 <USBD_LL_Transmit>

  return USBD_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	60f8      	str	r0, [r7, #12]
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	4613      	mov	r3, r2
 8007eac:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f000 fc63 	bl	8008780 <USBD_LL_Transmit>

  return USBD_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	68ba      	ldr	r2, [r7, #8]
 8007eee:	2100      	movs	r1, #0
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f000 fc68 	bl	80087c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ef6:	2300      	movs	r3, #0
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b084      	sub	sp, #16
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f0e:	88fb      	ldrh	r3, [r7, #6]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	2100      	movs	r1, #0
 8007f14:	68f8      	ldr	r0, [r7, #12]
 8007f16:	f000 fc56 	bl	80087c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2204      	movs	r2, #4
 8007f30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f34:	2300      	movs	r3, #0
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fc20 	bl	8008780 <USBD_LL_Transmit>

  return USBD_OK;
 8007f40:	2300      	movs	r3, #0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b082      	sub	sp, #8
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2205      	movs	r2, #5
 8007f56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc30 	bl	80087c6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f74:	2200      	movs	r2, #0
 8007f76:	4912      	ldr	r1, [pc, #72]	; (8007fc0 <MX_USB_DEVICE_Init+0x50>)
 8007f78:	4812      	ldr	r0, [pc, #72]	; (8007fc4 <MX_USB_DEVICE_Init+0x54>)
 8007f7a:	f7fe ff6c 	bl	8006e56 <USBD_Init>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d001      	beq.n	8007f88 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f84:	f7fa fb00 	bl	8002588 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f88:	490f      	ldr	r1, [pc, #60]	; (8007fc8 <MX_USB_DEVICE_Init+0x58>)
 8007f8a:	480e      	ldr	r0, [pc, #56]	; (8007fc4 <MX_USB_DEVICE_Init+0x54>)
 8007f8c:	f7fe ff8e 	bl	8006eac <USBD_RegisterClass>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d001      	beq.n	8007f9a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f96:	f7fa faf7 	bl	8002588 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f9a:	490c      	ldr	r1, [pc, #48]	; (8007fcc <MX_USB_DEVICE_Init+0x5c>)
 8007f9c:	4809      	ldr	r0, [pc, #36]	; (8007fc4 <MX_USB_DEVICE_Init+0x54>)
 8007f9e:	f7fe febf 	bl	8006d20 <USBD_CDC_RegisterInterface>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007fa8:	f7fa faee 	bl	8002588 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fac:	4805      	ldr	r0, [pc, #20]	; (8007fc4 <MX_USB_DEVICE_Init+0x54>)
 8007fae:	f7fe ff96 	bl	8006ede <USBD_Start>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007fb8:	f7fa fae6 	bl	8002588 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007fbc:	bf00      	nop
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	20000130 	.word	0x20000130
 8007fc4:	2000073c 	.word	0x2000073c
 8007fc8:	2000001c 	.word	0x2000001c
 8007fcc:	20000120 	.word	0x20000120

08007fd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4905      	ldr	r1, [pc, #20]	; (8007fec <CDC_Init_FS+0x1c>)
 8007fd8:	4805      	ldr	r0, [pc, #20]	; (8007ff0 <CDC_Init_FS+0x20>)
 8007fda:	f7fe feb7 	bl	8006d4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fde:	4905      	ldr	r1, [pc, #20]	; (8007ff4 <CDC_Init_FS+0x24>)
 8007fe0:	4803      	ldr	r0, [pc, #12]	; (8007ff0 <CDC_Init_FS+0x20>)
 8007fe2:	f7fe fecc 	bl	8006d7e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007fe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000de8 	.word	0x20000de8
 8007ff0:	2000073c 	.word	0x2000073c
 8007ff4:	20000a00 	.word	0x20000a00

08007ff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007ffc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	46bd      	mov	sp, r7
 8008002:	bc80      	pop	{r7}
 8008004:	4770      	bx	lr
	...

08008008 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	4603      	mov	r3, r0
 8008010:	6039      	str	r1, [r7, #0]
 8008012:	71fb      	strb	r3, [r7, #7]
 8008014:	4613      	mov	r3, r2
 8008016:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008018:	79fb      	ldrb	r3, [r7, #7]
 800801a:	2b23      	cmp	r3, #35	; 0x23
 800801c:	d84a      	bhi.n	80080b4 <CDC_Control_FS+0xac>
 800801e:	a201      	add	r2, pc, #4	; (adr r2, 8008024 <CDC_Control_FS+0x1c>)
 8008020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008024:	080080b5 	.word	0x080080b5
 8008028:	080080b5 	.word	0x080080b5
 800802c:	080080b5 	.word	0x080080b5
 8008030:	080080b5 	.word	0x080080b5
 8008034:	080080b5 	.word	0x080080b5
 8008038:	080080b5 	.word	0x080080b5
 800803c:	080080b5 	.word	0x080080b5
 8008040:	080080b5 	.word	0x080080b5
 8008044:	080080b5 	.word	0x080080b5
 8008048:	080080b5 	.word	0x080080b5
 800804c:	080080b5 	.word	0x080080b5
 8008050:	080080b5 	.word	0x080080b5
 8008054:	080080b5 	.word	0x080080b5
 8008058:	080080b5 	.word	0x080080b5
 800805c:	080080b5 	.word	0x080080b5
 8008060:	080080b5 	.word	0x080080b5
 8008064:	080080b5 	.word	0x080080b5
 8008068:	080080b5 	.word	0x080080b5
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080b5 	.word	0x080080b5
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080b5 	.word	0x080080b5
 800807c:	080080b5 	.word	0x080080b5
 8008080:	080080b5 	.word	0x080080b5
 8008084:	080080b5 	.word	0x080080b5
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080b5 	.word	0x080080b5
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080b5 	.word	0x080080b5
 800809c:	080080b5 	.word	0x080080b5
 80080a0:	080080b5 	.word	0x080080b5
 80080a4:	080080b5 	.word	0x080080b5
 80080a8:	080080b5 	.word	0x080080b5
 80080ac:	080080b5 	.word	0x080080b5
 80080b0:	080080b5 	.word	0x080080b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80080b4:	bf00      	nop
  }

  return (USBD_OK);
 80080b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	370c      	adds	r7, #12
 80080bc:	46bd      	mov	sp, r7
 80080be:	bc80      	pop	{r7}
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop

080080c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4810      	ldr	r0, [pc, #64]	; (8008114 <CDC_Receive_FS+0x50>)
 80080d2:	f7fe fe54 	bl	8006d7e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80080d6:	480f      	ldr	r0, [pc, #60]	; (8008114 <CDC_Receive_FS+0x50>)
 80080d8:	f7fe fe93 	bl	8006e02 <USBD_CDC_ReceivePacket>
  memcpy(rxBuffer, Buf, (*Len) + 1);
 80080dc:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <CDC_Receive_FS+0x54>)
 80080de:	6818      	ldr	r0, [r3, #0]
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	3301      	adds	r3, #1
 80080e6:	461a      	mov	r2, r3
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	f000 fc41 	bl	8008970 <memcpy>
  incomingMessageFlag=1;
 80080ee:	4b0b      	ldr	r3, [pc, #44]	; (800811c <CDC_Receive_FS+0x58>)
 80080f0:	2201      	movs	r2, #1
 80080f2:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80080f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80080f8:	4809      	ldr	r0, [pc, #36]	; (8008120 <CDC_Receive_FS+0x5c>)
 80080fa:	f7fb fadf 	bl	80036bc <HAL_GPIO_TogglePin>
  sizeOfMessage=*Len;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	b2da      	uxtb	r2, r3
 8008104:	4b07      	ldr	r3, [pc, #28]	; (8008124 <CDC_Receive_FS+0x60>)
 8008106:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8008108:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800810a:	4618      	mov	r0, r3
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	2000073c 	.word	0x2000073c
 8008118:	2000069c 	.word	0x2000069c
 800811c:	20000379 	.word	0x20000379
 8008120:	40011000 	.word	0x40011000
 8008124:	20000698 	.word	0x20000698

08008128 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008134:	2300      	movs	r3, #0
 8008136:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8008138:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <CDC_Transmit_FS+0x48>)
 800813a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800813e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008146:	2b00      	cmp	r3, #0
 8008148:	d001      	beq.n	800814e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800814a:	2301      	movs	r3, #1
 800814c:	e00b      	b.n	8008166 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800814e:	887b      	ldrh	r3, [r7, #2]
 8008150:	461a      	mov	r2, r3
 8008152:	6879      	ldr	r1, [r7, #4]
 8008154:	4806      	ldr	r0, [pc, #24]	; (8008170 <CDC_Transmit_FS+0x48>)
 8008156:	f7fe fdf9 	bl	8006d4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800815a:	4805      	ldr	r0, [pc, #20]	; (8008170 <CDC_Transmit_FS+0x48>)
 800815c:	f7fe fe22 	bl	8006da4 <USBD_CDC_TransmitPacket>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8008164:	7bfb      	ldrb	r3, [r7, #15]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}
 800816e:	bf00      	nop
 8008170:	2000073c 	.word	0x2000073c

08008174 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008174:	b480      	push	{r7}
 8008176:	b083      	sub	sp, #12
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2212      	movs	r2, #18
 8008184:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008186:	4b03      	ldr	r3, [pc, #12]	; (8008194 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008188:	4618      	mov	r0, r3
 800818a:	370c      	adds	r7, #12
 800818c:	46bd      	mov	sp, r7
 800818e:	bc80      	pop	{r7}
 8008190:	4770      	bx	lr
 8008192:	bf00      	nop
 8008194:	2000014c 	.word	0x2000014c

08008198 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	2204      	movs	r2, #4
 80081a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80081aa:	4b03      	ldr	r3, [pc, #12]	; (80081b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	370c      	adds	r7, #12
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bc80      	pop	{r7}
 80081b4:	4770      	bx	lr
 80081b6:	bf00      	nop
 80081b8:	20000160 	.word	0x20000160

080081bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	6039      	str	r1, [r7, #0]
 80081c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081c8:	79fb      	ldrb	r3, [r7, #7]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d105      	bne.n	80081da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	4907      	ldr	r1, [pc, #28]	; (80081f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80081d2:	4808      	ldr	r0, [pc, #32]	; (80081f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80081d4:	f7ff fdef 	bl	8007db6 <USBD_GetString>
 80081d8:	e004      	b.n	80081e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	4904      	ldr	r1, [pc, #16]	; (80081f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80081de:	4805      	ldr	r0, [pc, #20]	; (80081f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80081e0:	f7ff fde9 	bl	8007db6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081e4:	4b02      	ldr	r3, [pc, #8]	; (80081f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	200011d0 	.word	0x200011d0
 80081f4:	08008cbc 	.word	0x08008cbc

080081f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b082      	sub	sp, #8
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	4603      	mov	r3, r0
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	4904      	ldr	r1, [pc, #16]	; (8008218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008208:	4804      	ldr	r0, [pc, #16]	; (800821c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800820a:	f7ff fdd4 	bl	8007db6 <USBD_GetString>
  return USBD_StrDesc;
 800820e:	4b02      	ldr	r3, [pc, #8]	; (8008218 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008210:	4618      	mov	r0, r3
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}
 8008218:	200011d0 	.word	0x200011d0
 800821c:	08008cbc 	.word	0x08008cbc

08008220 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	6039      	str	r1, [r7, #0]
 800822a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	221a      	movs	r2, #26
 8008230:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008232:	f000 f843 	bl	80082bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008236:	4b02      	ldr	r3, [pc, #8]	; (8008240 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008238:	4618      	mov	r0, r3
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20000164 	.word	0x20000164

08008244 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	4603      	mov	r3, r0
 800824c:	6039      	str	r1, [r7, #0]
 800824e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d105      	bne.n	8008262 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4907      	ldr	r1, [pc, #28]	; (8008278 <USBD_FS_ConfigStrDescriptor+0x34>)
 800825a:	4808      	ldr	r0, [pc, #32]	; (800827c <USBD_FS_ConfigStrDescriptor+0x38>)
 800825c:	f7ff fdab 	bl	8007db6 <USBD_GetString>
 8008260:	e004      	b.n	800826c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	4904      	ldr	r1, [pc, #16]	; (8008278 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008268:	f7ff fda5 	bl	8007db6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800826c:	4b02      	ldr	r3, [pc, #8]	; (8008278 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200011d0 	.word	0x200011d0
 800827c:	08008cc8 	.word	0x08008cc8

08008280 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
 8008286:	4603      	mov	r3, r0
 8008288:	6039      	str	r1, [r7, #0]
 800828a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800828c:	79fb      	ldrb	r3, [r7, #7]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d105      	bne.n	800829e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008292:	683a      	ldr	r2, [r7, #0]
 8008294:	4907      	ldr	r1, [pc, #28]	; (80082b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008296:	4808      	ldr	r0, [pc, #32]	; (80082b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008298:	f7ff fd8d 	bl	8007db6 <USBD_GetString>
 800829c:	e004      	b.n	80082a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800829e:	683a      	ldr	r2, [r7, #0]
 80082a0:	4904      	ldr	r1, [pc, #16]	; (80082b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80082a2:	4805      	ldr	r0, [pc, #20]	; (80082b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80082a4:	f7ff fd87 	bl	8007db6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80082a8:	4b02      	ldr	r3, [pc, #8]	; (80082b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3708      	adds	r7, #8
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200011d0 	.word	0x200011d0
 80082b8:	08008cd4 	.word	0x08008cd4

080082bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80082c2:	4b0f      	ldr	r3, [pc, #60]	; (8008300 <Get_SerialNum+0x44>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80082c8:	4b0e      	ldr	r3, [pc, #56]	; (8008304 <Get_SerialNum+0x48>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80082ce:	4b0e      	ldr	r3, [pc, #56]	; (8008308 <Get_SerialNum+0x4c>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	4413      	add	r3, r2
 80082da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d009      	beq.n	80082f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80082e2:	2208      	movs	r2, #8
 80082e4:	4909      	ldr	r1, [pc, #36]	; (800830c <Get_SerialNum+0x50>)
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f814 	bl	8008314 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80082ec:	2204      	movs	r2, #4
 80082ee:	4908      	ldr	r1, [pc, #32]	; (8008310 <Get_SerialNum+0x54>)
 80082f0:	68b8      	ldr	r0, [r7, #8]
 80082f2:	f000 f80f 	bl	8008314 <IntToUnicode>
  }
}
 80082f6:	bf00      	nop
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	1ffff7e8 	.word	0x1ffff7e8
 8008304:	1ffff7ec 	.word	0x1ffff7ec
 8008308:	1ffff7f0 	.word	0x1ffff7f0
 800830c:	20000166 	.word	0x20000166
 8008310:	20000176 	.word	0x20000176

08008314 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	4613      	mov	r3, r2
 8008320:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
 800832a:	e027      	b.n	800837c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	0f1b      	lsrs	r3, r3, #28
 8008330:	2b09      	cmp	r3, #9
 8008332:	d80b      	bhi.n	800834c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	0f1b      	lsrs	r3, r3, #28
 8008338:	b2da      	uxtb	r2, r3
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	4619      	mov	r1, r3
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	440b      	add	r3, r1
 8008344:	3230      	adds	r2, #48	; 0x30
 8008346:	b2d2      	uxtb	r2, r2
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	e00a      	b.n	8008362 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	0f1b      	lsrs	r3, r3, #28
 8008350:	b2da      	uxtb	r2, r3
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	005b      	lsls	r3, r3, #1
 8008356:	4619      	mov	r1, r3
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	440b      	add	r3, r1
 800835c:	3237      	adds	r2, #55	; 0x37
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	011b      	lsls	r3, r3, #4
 8008366:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008368:	7dfb      	ldrb	r3, [r7, #23]
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	3301      	adds	r3, #1
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	4413      	add	r3, r2
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	3301      	adds	r3, #1
 800837a:	75fb      	strb	r3, [r7, #23]
 800837c:	7dfa      	ldrb	r2, [r7, #23]
 800837e:	79fb      	ldrb	r3, [r7, #7]
 8008380:	429a      	cmp	r2, r3
 8008382:	d3d3      	bcc.n	800832c <IntToUnicode+0x18>
  }
}
 8008384:	bf00      	nop
 8008386:	371c      	adds	r7, #28
 8008388:	46bd      	mov	sp, r7
 800838a:	bc80      	pop	{r7}
 800838c:	4770      	bx	lr
	...

08008390 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a0d      	ldr	r2, [pc, #52]	; (80083d4 <HAL_PCD_MspInit+0x44>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d113      	bne.n	80083ca <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80083a2:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <HAL_PCD_MspInit+0x48>)
 80083a4:	69db      	ldr	r3, [r3, #28]
 80083a6:	4a0c      	ldr	r2, [pc, #48]	; (80083d8 <HAL_PCD_MspInit+0x48>)
 80083a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80083ac:	61d3      	str	r3, [r2, #28]
 80083ae:	4b0a      	ldr	r3, [pc, #40]	; (80083d8 <HAL_PCD_MspInit+0x48>)
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083b6:	60fb      	str	r3, [r7, #12]
 80083b8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80083ba:	2200      	movs	r2, #0
 80083bc:	2100      	movs	r1, #0
 80083be:	2014      	movs	r0, #20
 80083c0:	f7fa ffb7 	bl	8003332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80083c4:	2014      	movs	r0, #20
 80083c6:	f7fa ffd0 	bl	800336a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	40005c00 	.word	0x40005c00
 80083d8:	40021000 	.word	0x40021000

080083dc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 2268 	ldr.w	r2, [r3, #616]	; 0x268
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	f7fe fdbb 	bl	8006f6e <USBD_LL_SetupStage>
}
 80083f8:	bf00      	nop
 80083fa:	3708      	adds	r7, #8
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
 8008408:	460b      	mov	r3, r1
 800840a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008412:	78fb      	ldrb	r3, [r7, #3]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	015b      	lsls	r3, r3, #5
 8008418:	4413      	add	r3, r2
 800841a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	78fb      	ldrb	r3, [r7, #3]
 8008422:	4619      	mov	r1, r3
 8008424:	f7fe fdee 	bl	8007004 <USBD_LL_DataOutStage>
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	460b      	mov	r3, r1
 800843a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 0268 	ldr.w	r0, [r3, #616]	; 0x268
 8008442:	78fb      	ldrb	r3, [r7, #3]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	015b      	lsls	r3, r3, #5
 8008448:	4413      	add	r3, r2
 800844a:	333c      	adds	r3, #60	; 0x3c
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	78fb      	ldrb	r3, [r7, #3]
 8008450:	4619      	mov	r1, r3
 8008452:	f7fe fe48 	bl	80070e6 <USBD_LL_DataInStage>
}
 8008456:	bf00      	nop
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b082      	sub	sp, #8
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe ff58 	bl	8007322 <USBD_LL_SOF>
}
 8008472:	bf00      	nop
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800847a:	b580      	push	{r7, lr}
 800847c:	b084      	sub	sp, #16
 800847e:	af00      	add	r7, sp, #0
 8008480:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008482:	2301      	movs	r3, #1
 8008484:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	2b02      	cmp	r3, #2
 800848c:	d001      	beq.n	8008492 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800848e:	f7fa f87b 	bl	8002588 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008498:	7bfa      	ldrb	r2, [r7, #15]
 800849a:	4611      	mov	r1, r2
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe ff08 	bl	80072b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084a8:	4618      	mov	r0, r3
 80084aa:	f7fe fec1 	bl	8007230 <USBD_LL_Reset>
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
	...

080084b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff02 	bl	80072d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d005      	beq.n	80084e0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <HAL_PCD_SuspendCallback+0x30>)
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	4a03      	ldr	r2, [pc, #12]	; (80084e8 <HAL_PCD_SuspendCallback+0x30>)
 80084da:	f043 0306 	orr.w	r3, r3, #6
 80084de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80084e0:	bf00      	nop
 80084e2:	3708      	adds	r7, #8
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	e000ed00 	.word	0xe000ed00

080084ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fefc 	bl	80072f8 <USBD_LL_Resume>
}
 8008500:	bf00      	nop
 8008502:	3708      	adds	r7, #8
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008510:	4a28      	ldr	r2, [pc, #160]	; (80085b4 <USBD_LL_Init+0xac>)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
  pdev->pData = &hpcd_USB_FS;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a26      	ldr	r2, [pc, #152]	; (80085b4 <USBD_LL_Init+0xac>)
 800851c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008520:	4b24      	ldr	r3, [pc, #144]	; (80085b4 <USBD_LL_Init+0xac>)
 8008522:	4a25      	ldr	r2, [pc, #148]	; (80085b8 <USBD_LL_Init+0xb0>)
 8008524:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008526:	4b23      	ldr	r3, [pc, #140]	; (80085b4 <USBD_LL_Init+0xac>)
 8008528:	2208      	movs	r2, #8
 800852a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800852c:	4b21      	ldr	r3, [pc, #132]	; (80085b4 <USBD_LL_Init+0xac>)
 800852e:	2202      	movs	r2, #2
 8008530:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008532:	4b20      	ldr	r3, [pc, #128]	; (80085b4 <USBD_LL_Init+0xac>)
 8008534:	2200      	movs	r2, #0
 8008536:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008538:	4b1e      	ldr	r3, [pc, #120]	; (80085b4 <USBD_LL_Init+0xac>)
 800853a:	2200      	movs	r2, #0
 800853c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800853e:	4b1d      	ldr	r3, [pc, #116]	; (80085b4 <USBD_LL_Init+0xac>)
 8008540:	2200      	movs	r2, #0
 8008542:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008544:	481b      	ldr	r0, [pc, #108]	; (80085b4 <USBD_LL_Init+0xac>)
 8008546:	f7fb f8d1 	bl	80036ec <HAL_PCD_Init>
 800854a:	4603      	mov	r3, r0
 800854c:	2b00      	cmp	r3, #0
 800854e:	d001      	beq.n	8008554 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008550:	f7fa f81a 	bl	8002588 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800855a:	2318      	movs	r3, #24
 800855c:	2200      	movs	r2, #0
 800855e:	2100      	movs	r1, #0
 8008560:	f7fb ff6a 	bl	8004438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800856a:	2358      	movs	r3, #88	; 0x58
 800856c:	2200      	movs	r2, #0
 800856e:	2180      	movs	r1, #128	; 0x80
 8008570:	f7fb ff62 	bl	8004438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800857a:	23c0      	movs	r3, #192	; 0xc0
 800857c:	2200      	movs	r2, #0
 800857e:	2181      	movs	r1, #129	; 0x81
 8008580:	f7fb ff5a 	bl	8004438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800858a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800858e:	2200      	movs	r2, #0
 8008590:	2101      	movs	r1, #1
 8008592:	f7fb ff51 	bl	8004438 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800859c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085a0:	2200      	movs	r2, #0
 80085a2:	2182      	movs	r1, #130	; 0x82
 80085a4:	f7fb ff48 	bl	8004438 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3708      	adds	r7, #8
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	200013d0 	.word	0x200013d0
 80085b8:	40005c00 	.word	0x40005c00

080085bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b084      	sub	sp, #16
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fb f96b 	bl	80038ae <HAL_PCD_Start>
 80085d8:	4603      	mov	r3, r0
 80085da:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	4618      	mov	r0, r3
 80085e0:	f000 f948 	bl	8008874 <USBD_Get_USB_Status>
 80085e4:	4603      	mov	r3, r0
 80085e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80085e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b084      	sub	sp, #16
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	4608      	mov	r0, r1
 80085fc:	4611      	mov	r1, r2
 80085fe:	461a      	mov	r2, r3
 8008600:	4603      	mov	r3, r0
 8008602:	70fb      	strb	r3, [r7, #3]
 8008604:	460b      	mov	r3, r1
 8008606:	70bb      	strb	r3, [r7, #2]
 8008608:	4613      	mov	r3, r2
 800860a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800861a:	78bb      	ldrb	r3, [r7, #2]
 800861c:	883a      	ldrh	r2, [r7, #0]
 800861e:	78f9      	ldrb	r1, [r7, #3]
 8008620:	f7fb fa9e 	bl	8003b60 <HAL_PCD_EP_Open>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f922 	bl	8008874 <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008634:	7bbb      	ldrb	r3, [r7, #14]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864a:	2300      	movs	r3, #0
 800864c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	4611      	mov	r1, r2
 800865c:	4618      	mov	r0, r3
 800865e:	f7fb fadf 	bl	8003c20 <HAL_PCD_EP_Close>
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	4618      	mov	r0, r3
 800866a:	f000 f903 	bl	8008874 <USBD_Get_USB_Status>
 800866e:	4603      	mov	r3, r0
 8008670:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8008672:	7bbb      	ldrb	r3, [r7, #14]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}

0800867c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
 8008684:	460b      	mov	r3, r1
 8008686:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008696:	78fa      	ldrb	r2, [r7, #3]
 8008698:	4611      	mov	r1, r2
 800869a:	4618      	mov	r0, r3
 800869c:	f7fb fb89 	bl	8003db2 <HAL_PCD_EP_SetStall>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
 80086a6:	4618      	mov	r0, r3
 80086a8:	f000 f8e4 	bl	8008874 <USBD_Get_USB_Status>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}

080086ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ba:	b580      	push	{r7, lr}
 80086bc:	b084      	sub	sp, #16
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086c6:	2300      	movs	r3, #0
 80086c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fb fbc4 	bl	8003e66 <HAL_PCD_EP_ClrStall>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f000 f8c5 	bl	8008874 <USBD_Get_USB_Status>
 80086ea:	4603      	mov	r3, r0
 80086ec:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3710      	adds	r7, #16
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800870a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800870c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008710:	2b00      	cmp	r3, #0
 8008712:	da08      	bge.n	8008726 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8008714:	78fb      	ldrb	r3, [r7, #3]
 8008716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871a:	68fa      	ldr	r2, [r7, #12]
 800871c:	015b      	lsls	r3, r3, #5
 800871e:	4413      	add	r3, r2
 8008720:	332a      	adds	r3, #42	; 0x2a
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	e008      	b.n	8008738 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800872c:	68fa      	ldr	r2, [r7, #12]
 800872e:	015b      	lsls	r3, r3, #5
 8008730:	4413      	add	r3, r2
 8008732:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8008736:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008738:	4618      	mov	r0, r3
 800873a:	3714      	adds	r7, #20
 800873c:	46bd      	mov	sp, r7
 800873e:	bc80      	pop	{r7}
 8008740:	4770      	bx	lr

08008742 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b084      	sub	sp, #16
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800875c:	78fa      	ldrb	r2, [r7, #3]
 800875e:	4611      	mov	r1, r2
 8008760:	4618      	mov	r0, r3
 8008762:	f7fb f9d8 	bl	8003b16 <HAL_PCD_SetAddress>
 8008766:	4603      	mov	r3, r0
 8008768:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f881 	bl	8008874 <USBD_Get_USB_Status>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8008776:	7bbb      	ldrb	r3, [r7, #14]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	607a      	str	r2, [r7, #4]
 800878a:	461a      	mov	r2, r3
 800878c:	460b      	mov	r3, r1
 800878e:	72fb      	strb	r3, [r7, #11]
 8008790:	4613      	mov	r3, r2
 8008792:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008798:	2300      	movs	r3, #0
 800879a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087a2:	893b      	ldrh	r3, [r7, #8]
 80087a4:	7af9      	ldrb	r1, [r7, #11]
 80087a6:	687a      	ldr	r2, [r7, #4]
 80087a8:	f7fb faca 	bl	8003d40 <HAL_PCD_EP_Transmit>
 80087ac:	4603      	mov	r3, r0
 80087ae:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f000 f85e 	bl	8008874 <USBD_Get_USB_Status>
 80087b8:	4603      	mov	r3, r0
 80087ba:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80087bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b086      	sub	sp, #24
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	60f8      	str	r0, [r7, #12]
 80087ce:	607a      	str	r2, [r7, #4]
 80087d0:	461a      	mov	r2, r3
 80087d2:	460b      	mov	r3, r1
 80087d4:	72fb      	strb	r3, [r7, #11]
 80087d6:	4613      	mov	r3, r2
 80087d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80087e8:	893b      	ldrh	r3, [r7, #8]
 80087ea:	7af9      	ldrb	r1, [r7, #11]
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	f7fb fa59 	bl	8003ca4 <HAL_PCD_EP_Receive>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
 80087f8:	4618      	mov	r0, r3
 80087fa:	f000 f83b 	bl	8008874 <USBD_Get_USB_Status>
 80087fe:	4603      	mov	r3, r0
 8008800:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8008802:	7dbb      	ldrb	r3, [r7, #22]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	4611      	mov	r1, r2
 8008822:	4618      	mov	r0, r3
 8008824:	f7fb fa78 	bl	8003d18 <HAL_PCD_EP_GetRxCount>
 8008828:	4603      	mov	r3, r0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
	...

08008834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800883c:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_static_malloc+0x14>)
}
 800883e:	4618      	mov	r0, r3
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	bc80      	pop	{r7}
 8008846:	4770      	bx	lr
 8008848:	2000037c 	.word	0x2000037c

0800884c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]

}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	bc80      	pop	{r7}
 800885c:	4770      	bx	lr

0800885e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	460b      	mov	r3, r1
 8008868:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	bc80      	pop	{r7}
 8008872:	4770      	bx	lr

08008874 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800887e:	2300      	movs	r3, #0
 8008880:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008882:	79fb      	ldrb	r3, [r7, #7]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d817      	bhi.n	80088b8 <USBD_Get_USB_Status+0x44>
 8008888:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <USBD_Get_USB_Status+0x1c>)
 800888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888e:	bf00      	nop
 8008890:	080088a1 	.word	0x080088a1
 8008894:	080088a7 	.word	0x080088a7
 8008898:	080088ad 	.word	0x080088ad
 800889c:	080088b3 	.word	0x080088b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	73fb      	strb	r3, [r7, #15]
    break;
 80088a4:	e00b      	b.n	80088be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80088a6:	2302      	movs	r3, #2
 80088a8:	73fb      	strb	r3, [r7, #15]
    break;
 80088aa:	e008      	b.n	80088be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80088ac:	2301      	movs	r3, #1
 80088ae:	73fb      	strb	r3, [r7, #15]
    break;
 80088b0:	e005      	b.n	80088be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80088b2:	2302      	movs	r3, #2
 80088b4:	73fb      	strb	r3, [r7, #15]
    break;
 80088b6:	e002      	b.n	80088be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80088b8:	2302      	movs	r3, #2
 80088ba:	73fb      	strb	r3, [r7, #15]
    break;
 80088bc:	bf00      	nop
  }
  return usb_status;
 80088be:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3714      	adds	r7, #20
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc80      	pop	{r7}
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <__errno>:
 80088cc:	4b01      	ldr	r3, [pc, #4]	; (80088d4 <__errno+0x8>)
 80088ce:	6818      	ldr	r0, [r3, #0]
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	20000180 	.word	0x20000180

080088d8 <__libc_init_array>:
 80088d8:	b570      	push	{r4, r5, r6, lr}
 80088da:	2500      	movs	r5, #0
 80088dc:	4e0c      	ldr	r6, [pc, #48]	; (8008910 <__libc_init_array+0x38>)
 80088de:	4c0d      	ldr	r4, [pc, #52]	; (8008914 <__libc_init_array+0x3c>)
 80088e0:	1ba4      	subs	r4, r4, r6
 80088e2:	10a4      	asrs	r4, r4, #2
 80088e4:	42a5      	cmp	r5, r4
 80088e6:	d109      	bne.n	80088fc <__libc_init_array+0x24>
 80088e8:	f000 f9d2 	bl	8008c90 <_init>
 80088ec:	2500      	movs	r5, #0
 80088ee:	4e0a      	ldr	r6, [pc, #40]	; (8008918 <__libc_init_array+0x40>)
 80088f0:	4c0a      	ldr	r4, [pc, #40]	; (800891c <__libc_init_array+0x44>)
 80088f2:	1ba4      	subs	r4, r4, r6
 80088f4:	10a4      	asrs	r4, r4, #2
 80088f6:	42a5      	cmp	r5, r4
 80088f8:	d105      	bne.n	8008906 <__libc_init_array+0x2e>
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008900:	4798      	blx	r3
 8008902:	3501      	adds	r5, #1
 8008904:	e7ee      	b.n	80088e4 <__libc_init_array+0xc>
 8008906:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800890a:	4798      	blx	r3
 800890c:	3501      	adds	r5, #1
 800890e:	e7f2      	b.n	80088f6 <__libc_init_array+0x1e>
 8008910:	08008e04 	.word	0x08008e04
 8008914:	08008e04 	.word	0x08008e04
 8008918:	08008e04 	.word	0x08008e04
 800891c:	08008e08 	.word	0x08008e08

08008920 <__locale_ctype_ptr>:
 8008920:	4b04      	ldr	r3, [pc, #16]	; (8008934 <__locale_ctype_ptr+0x14>)
 8008922:	4a05      	ldr	r2, [pc, #20]	; (8008938 <__locale_ctype_ptr+0x18>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	6a1b      	ldr	r3, [r3, #32]
 8008928:	2b00      	cmp	r3, #0
 800892a:	bf08      	it	eq
 800892c:	4613      	moveq	r3, r2
 800892e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008932:	4770      	bx	lr
 8008934:	20000180 	.word	0x20000180
 8008938:	200001e4 	.word	0x200001e4

0800893c <malloc>:
 800893c:	4b02      	ldr	r3, [pc, #8]	; (8008948 <malloc+0xc>)
 800893e:	4601      	mov	r1, r0
 8008940:	6818      	ldr	r0, [r3, #0]
 8008942:	f000 b829 	b.w	8008998 <_malloc_r>
 8008946:	bf00      	nop
 8008948:	20000180 	.word	0x20000180

0800894c <__ascii_mbtowc>:
 800894c:	b082      	sub	sp, #8
 800894e:	b901      	cbnz	r1, 8008952 <__ascii_mbtowc+0x6>
 8008950:	a901      	add	r1, sp, #4
 8008952:	b142      	cbz	r2, 8008966 <__ascii_mbtowc+0x1a>
 8008954:	b14b      	cbz	r3, 800896a <__ascii_mbtowc+0x1e>
 8008956:	7813      	ldrb	r3, [r2, #0]
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	7812      	ldrb	r2, [r2, #0]
 800895c:	1c10      	adds	r0, r2, #0
 800895e:	bf18      	it	ne
 8008960:	2001      	movne	r0, #1
 8008962:	b002      	add	sp, #8
 8008964:	4770      	bx	lr
 8008966:	4610      	mov	r0, r2
 8008968:	e7fb      	b.n	8008962 <__ascii_mbtowc+0x16>
 800896a:	f06f 0001 	mvn.w	r0, #1
 800896e:	e7f8      	b.n	8008962 <__ascii_mbtowc+0x16>

08008970 <memcpy>:
 8008970:	b510      	push	{r4, lr}
 8008972:	1e43      	subs	r3, r0, #1
 8008974:	440a      	add	r2, r1
 8008976:	4291      	cmp	r1, r2
 8008978:	d100      	bne.n	800897c <memcpy+0xc>
 800897a:	bd10      	pop	{r4, pc}
 800897c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008980:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008984:	e7f7      	b.n	8008976 <memcpy+0x6>

08008986 <memset>:
 8008986:	4603      	mov	r3, r0
 8008988:	4402      	add	r2, r0
 800898a:	4293      	cmp	r3, r2
 800898c:	d100      	bne.n	8008990 <memset+0xa>
 800898e:	4770      	bx	lr
 8008990:	f803 1b01 	strb.w	r1, [r3], #1
 8008994:	e7f9      	b.n	800898a <memset+0x4>
	...

08008998 <_malloc_r>:
 8008998:	b570      	push	{r4, r5, r6, lr}
 800899a:	1ccd      	adds	r5, r1, #3
 800899c:	f025 0503 	bic.w	r5, r5, #3
 80089a0:	3508      	adds	r5, #8
 80089a2:	2d0c      	cmp	r5, #12
 80089a4:	bf38      	it	cc
 80089a6:	250c      	movcc	r5, #12
 80089a8:	2d00      	cmp	r5, #0
 80089aa:	4606      	mov	r6, r0
 80089ac:	db01      	blt.n	80089b2 <_malloc_r+0x1a>
 80089ae:	42a9      	cmp	r1, r5
 80089b0:	d903      	bls.n	80089ba <_malloc_r+0x22>
 80089b2:	230c      	movs	r3, #12
 80089b4:	6033      	str	r3, [r6, #0]
 80089b6:	2000      	movs	r0, #0
 80089b8:	bd70      	pop	{r4, r5, r6, pc}
 80089ba:	f000 f864 	bl	8008a86 <__malloc_lock>
 80089be:	4a21      	ldr	r2, [pc, #132]	; (8008a44 <_malloc_r+0xac>)
 80089c0:	6814      	ldr	r4, [r2, #0]
 80089c2:	4621      	mov	r1, r4
 80089c4:	b991      	cbnz	r1, 80089ec <_malloc_r+0x54>
 80089c6:	4c20      	ldr	r4, [pc, #128]	; (8008a48 <_malloc_r+0xb0>)
 80089c8:	6823      	ldr	r3, [r4, #0]
 80089ca:	b91b      	cbnz	r3, 80089d4 <_malloc_r+0x3c>
 80089cc:	4630      	mov	r0, r6
 80089ce:	f000 f83d 	bl	8008a4c <_sbrk_r>
 80089d2:	6020      	str	r0, [r4, #0]
 80089d4:	4629      	mov	r1, r5
 80089d6:	4630      	mov	r0, r6
 80089d8:	f000 f838 	bl	8008a4c <_sbrk_r>
 80089dc:	1c43      	adds	r3, r0, #1
 80089de:	d124      	bne.n	8008a2a <_malloc_r+0x92>
 80089e0:	230c      	movs	r3, #12
 80089e2:	4630      	mov	r0, r6
 80089e4:	6033      	str	r3, [r6, #0]
 80089e6:	f000 f84f 	bl	8008a88 <__malloc_unlock>
 80089ea:	e7e4      	b.n	80089b6 <_malloc_r+0x1e>
 80089ec:	680b      	ldr	r3, [r1, #0]
 80089ee:	1b5b      	subs	r3, r3, r5
 80089f0:	d418      	bmi.n	8008a24 <_malloc_r+0x8c>
 80089f2:	2b0b      	cmp	r3, #11
 80089f4:	d90f      	bls.n	8008a16 <_malloc_r+0x7e>
 80089f6:	600b      	str	r3, [r1, #0]
 80089f8:	18cc      	adds	r4, r1, r3
 80089fa:	50cd      	str	r5, [r1, r3]
 80089fc:	4630      	mov	r0, r6
 80089fe:	f000 f843 	bl	8008a88 <__malloc_unlock>
 8008a02:	f104 000b 	add.w	r0, r4, #11
 8008a06:	1d23      	adds	r3, r4, #4
 8008a08:	f020 0007 	bic.w	r0, r0, #7
 8008a0c:	1ac3      	subs	r3, r0, r3
 8008a0e:	d0d3      	beq.n	80089b8 <_malloc_r+0x20>
 8008a10:	425a      	negs	r2, r3
 8008a12:	50e2      	str	r2, [r4, r3]
 8008a14:	e7d0      	b.n	80089b8 <_malloc_r+0x20>
 8008a16:	684b      	ldr	r3, [r1, #4]
 8008a18:	428c      	cmp	r4, r1
 8008a1a:	bf16      	itet	ne
 8008a1c:	6063      	strne	r3, [r4, #4]
 8008a1e:	6013      	streq	r3, [r2, #0]
 8008a20:	460c      	movne	r4, r1
 8008a22:	e7eb      	b.n	80089fc <_malloc_r+0x64>
 8008a24:	460c      	mov	r4, r1
 8008a26:	6849      	ldr	r1, [r1, #4]
 8008a28:	e7cc      	b.n	80089c4 <_malloc_r+0x2c>
 8008a2a:	1cc4      	adds	r4, r0, #3
 8008a2c:	f024 0403 	bic.w	r4, r4, #3
 8008a30:	42a0      	cmp	r0, r4
 8008a32:	d005      	beq.n	8008a40 <_malloc_r+0xa8>
 8008a34:	1a21      	subs	r1, r4, r0
 8008a36:	4630      	mov	r0, r6
 8008a38:	f000 f808 	bl	8008a4c <_sbrk_r>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d0cf      	beq.n	80089e0 <_malloc_r+0x48>
 8008a40:	6025      	str	r5, [r4, #0]
 8008a42:	e7db      	b.n	80089fc <_malloc_r+0x64>
 8008a44:	2000059c 	.word	0x2000059c
 8008a48:	200005a0 	.word	0x200005a0

08008a4c <_sbrk_r>:
 8008a4c:	b538      	push	{r3, r4, r5, lr}
 8008a4e:	2300      	movs	r3, #0
 8008a50:	4c05      	ldr	r4, [pc, #20]	; (8008a68 <_sbrk_r+0x1c>)
 8008a52:	4605      	mov	r5, r0
 8008a54:	4608      	mov	r0, r1
 8008a56:	6023      	str	r3, [r4, #0]
 8008a58:	f7f9 fee4 	bl	8002824 <_sbrk>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	d102      	bne.n	8008a66 <_sbrk_r+0x1a>
 8008a60:	6823      	ldr	r3, [r4, #0]
 8008a62:	b103      	cbz	r3, 8008a66 <_sbrk_r+0x1a>
 8008a64:	602b      	str	r3, [r5, #0]
 8008a66:	bd38      	pop	{r3, r4, r5, pc}
 8008a68:	2000163c 	.word	0x2000163c

08008a6c <__ascii_wctomb>:
 8008a6c:	b149      	cbz	r1, 8008a82 <__ascii_wctomb+0x16>
 8008a6e:	2aff      	cmp	r2, #255	; 0xff
 8008a70:	bf8b      	itete	hi
 8008a72:	238a      	movhi	r3, #138	; 0x8a
 8008a74:	700a      	strbls	r2, [r1, #0]
 8008a76:	6003      	strhi	r3, [r0, #0]
 8008a78:	2001      	movls	r0, #1
 8008a7a:	bf88      	it	hi
 8008a7c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008a80:	4770      	bx	lr
 8008a82:	4608      	mov	r0, r1
 8008a84:	4770      	bx	lr

08008a86 <__malloc_lock>:
 8008a86:	4770      	bx	lr

08008a88 <__malloc_unlock>:
 8008a88:	4770      	bx	lr
	...

08008a8c <sqrt>:
 8008a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a90:	b08b      	sub	sp, #44	; 0x2c
 8008a92:	4604      	mov	r4, r0
 8008a94:	460d      	mov	r5, r1
 8008a96:	f000 f84d 	bl	8008b34 <__ieee754_sqrt>
 8008a9a:	4b24      	ldr	r3, [pc, #144]	; (8008b2c <sqrt+0xa0>)
 8008a9c:	4680      	mov	r8, r0
 8008a9e:	f993 a000 	ldrsb.w	sl, [r3]
 8008aa2:	4689      	mov	r9, r1
 8008aa4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008aa8:	d02b      	beq.n	8008b02 <sqrt+0x76>
 8008aaa:	4622      	mov	r2, r4
 8008aac:	462b      	mov	r3, r5
 8008aae:	4620      	mov	r0, r4
 8008ab0:	4629      	mov	r1, r5
 8008ab2:	f7f7 ffa3 	bl	80009fc <__aeabi_dcmpun>
 8008ab6:	4683      	mov	fp, r0
 8008ab8:	bb18      	cbnz	r0, 8008b02 <sqrt+0x76>
 8008aba:	2600      	movs	r6, #0
 8008abc:	2700      	movs	r7, #0
 8008abe:	4632      	mov	r2, r6
 8008ac0:	463b      	mov	r3, r7
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7f7 ff71 	bl	80009ac <__aeabi_dcmplt>
 8008aca:	b1d0      	cbz	r0, 8008b02 <sqrt+0x76>
 8008acc:	2301      	movs	r3, #1
 8008ace:	9300      	str	r3, [sp, #0]
 8008ad0:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <sqrt+0xa4>)
 8008ad2:	f8cd b020 	str.w	fp, [sp, #32]
 8008ad6:	9301      	str	r3, [sp, #4]
 8008ad8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008adc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008ae0:	f1ba 0f00 	cmp.w	sl, #0
 8008ae4:	d112      	bne.n	8008b0c <sqrt+0x80>
 8008ae6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008aea:	4668      	mov	r0, sp
 8008aec:	f000 f8ce 	bl	8008c8c <matherr>
 8008af0:	b1b8      	cbz	r0, 8008b22 <sqrt+0x96>
 8008af2:	9b08      	ldr	r3, [sp, #32]
 8008af4:	b11b      	cbz	r3, 8008afe <sqrt+0x72>
 8008af6:	f7ff fee9 	bl	80088cc <__errno>
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008b02:	4640      	mov	r0, r8
 8008b04:	4649      	mov	r1, r9
 8008b06:	b00b      	add	sp, #44	; 0x2c
 8008b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f7 fe02 	bl	800071c <__aeabi_ddiv>
 8008b18:	f1ba 0f02 	cmp.w	sl, #2
 8008b1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008b20:	d1e3      	bne.n	8008aea <sqrt+0x5e>
 8008b22:	f7ff fed3 	bl	80088cc <__errno>
 8008b26:	2321      	movs	r3, #33	; 0x21
 8008b28:	6003      	str	r3, [r0, #0]
 8008b2a:	e7e2      	b.n	8008af2 <sqrt+0x66>
 8008b2c:	20000350 	.word	0x20000350
 8008b30:	08008dff 	.word	0x08008dff

08008b34 <__ieee754_sqrt>:
 8008b34:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <__ieee754_sqrt+0x154>)
 8008b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b3a:	438b      	bics	r3, r1
 8008b3c:	4606      	mov	r6, r0
 8008b3e:	460d      	mov	r5, r1
 8008b40:	460a      	mov	r2, r1
 8008b42:	460c      	mov	r4, r1
 8008b44:	d10f      	bne.n	8008b66 <__ieee754_sqrt+0x32>
 8008b46:	4602      	mov	r2, r0
 8008b48:	460b      	mov	r3, r1
 8008b4a:	f7f7 fcbd 	bl	80004c8 <__aeabi_dmul>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	460b      	mov	r3, r1
 8008b52:	4630      	mov	r0, r6
 8008b54:	4629      	mov	r1, r5
 8008b56:	f7f7 fb01 	bl	800015c <__adddf3>
 8008b5a:	4606      	mov	r6, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4629      	mov	r1, r5
 8008b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b66:	2900      	cmp	r1, #0
 8008b68:	4607      	mov	r7, r0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	dc0e      	bgt.n	8008b8c <__ieee754_sqrt+0x58>
 8008b6e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8008b72:	ea5c 0707 	orrs.w	r7, ip, r7
 8008b76:	d0f2      	beq.n	8008b5e <__ieee754_sqrt+0x2a>
 8008b78:	b141      	cbz	r1, 8008b8c <__ieee754_sqrt+0x58>
 8008b7a:	4602      	mov	r2, r0
 8008b7c:	460b      	mov	r3, r1
 8008b7e:	f7f7 faeb 	bl	8000158 <__aeabi_dsub>
 8008b82:	4602      	mov	r2, r0
 8008b84:	460b      	mov	r3, r1
 8008b86:	f7f7 fdc9 	bl	800071c <__aeabi_ddiv>
 8008b8a:	e7e6      	b.n	8008b5a <__ieee754_sqrt+0x26>
 8008b8c:	1512      	asrs	r2, r2, #20
 8008b8e:	d074      	beq.n	8008c7a <__ieee754_sqrt+0x146>
 8008b90:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008b94:	07d5      	lsls	r5, r2, #31
 8008b96:	f04f 0500 	mov.w	r5, #0
 8008b9a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008b9e:	bf48      	it	mi
 8008ba0:	0fd9      	lsrmi	r1, r3, #31
 8008ba2:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8008ba6:	bf44      	itt	mi
 8008ba8:	005b      	lslmi	r3, r3, #1
 8008baa:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 8008bae:	1051      	asrs	r1, r2, #1
 8008bb0:	0fda      	lsrs	r2, r3, #31
 8008bb2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8008bb6:	4628      	mov	r0, r5
 8008bb8:	2216      	movs	r2, #22
 8008bba:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008bbe:	005b      	lsls	r3, r3, #1
 8008bc0:	1987      	adds	r7, r0, r6
 8008bc2:	42a7      	cmp	r7, r4
 8008bc4:	bfde      	ittt	le
 8008bc6:	19b8      	addle	r0, r7, r6
 8008bc8:	1be4      	suble	r4, r4, r7
 8008bca:	19ad      	addle	r5, r5, r6
 8008bcc:	0fdf      	lsrs	r7, r3, #31
 8008bce:	3a01      	subs	r2, #1
 8008bd0:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 8008bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008bd8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008bdc:	d1f0      	bne.n	8008bc0 <__ieee754_sqrt+0x8c>
 8008bde:	f04f 0c20 	mov.w	ip, #32
 8008be2:	4696      	mov	lr, r2
 8008be4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008be8:	4284      	cmp	r4, r0
 8008bea:	eb06 070e 	add.w	r7, r6, lr
 8008bee:	dc02      	bgt.n	8008bf6 <__ieee754_sqrt+0xc2>
 8008bf0:	d112      	bne.n	8008c18 <__ieee754_sqrt+0xe4>
 8008bf2:	429f      	cmp	r7, r3
 8008bf4:	d810      	bhi.n	8008c18 <__ieee754_sqrt+0xe4>
 8008bf6:	2f00      	cmp	r7, #0
 8008bf8:	eb07 0e06 	add.w	lr, r7, r6
 8008bfc:	da42      	bge.n	8008c84 <__ieee754_sqrt+0x150>
 8008bfe:	f1be 0f00 	cmp.w	lr, #0
 8008c02:	db3f      	blt.n	8008c84 <__ieee754_sqrt+0x150>
 8008c04:	f100 0801 	add.w	r8, r0, #1
 8008c08:	1a24      	subs	r4, r4, r0
 8008c0a:	4640      	mov	r0, r8
 8008c0c:	429f      	cmp	r7, r3
 8008c0e:	bf88      	it	hi
 8008c10:	f104 34ff 	addhi.w	r4, r4, #4294967295
 8008c14:	1bdb      	subs	r3, r3, r7
 8008c16:	4432      	add	r2, r6
 8008c18:	0064      	lsls	r4, r4, #1
 8008c1a:	f1bc 0c01 	subs.w	ip, ip, #1
 8008c1e:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 8008c22:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008c26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008c2a:	d1dd      	bne.n	8008be8 <__ieee754_sqrt+0xb4>
 8008c2c:	4323      	orrs	r3, r4
 8008c2e:	d006      	beq.n	8008c3e <__ieee754_sqrt+0x10a>
 8008c30:	1c54      	adds	r4, r2, #1
 8008c32:	bf0b      	itete	eq
 8008c34:	4662      	moveq	r2, ip
 8008c36:	3201      	addne	r2, #1
 8008c38:	3501      	addeq	r5, #1
 8008c3a:	f022 0201 	bicne.w	r2, r2, #1
 8008c3e:	106b      	asrs	r3, r5, #1
 8008c40:	0852      	lsrs	r2, r2, #1
 8008c42:	07e8      	lsls	r0, r5, #31
 8008c44:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008c48:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008c4c:	bf48      	it	mi
 8008c4e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008c52:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 8008c56:	4616      	mov	r6, r2
 8008c58:	e781      	b.n	8008b5e <__ieee754_sqrt+0x2a>
 8008c5a:	0adc      	lsrs	r4, r3, #11
 8008c5c:	3915      	subs	r1, #21
 8008c5e:	055b      	lsls	r3, r3, #21
 8008c60:	2c00      	cmp	r4, #0
 8008c62:	d0fa      	beq.n	8008c5a <__ieee754_sqrt+0x126>
 8008c64:	02e6      	lsls	r6, r4, #11
 8008c66:	d50a      	bpl.n	8008c7e <__ieee754_sqrt+0x14a>
 8008c68:	f1c2 0020 	rsb	r0, r2, #32
 8008c6c:	fa23 f000 	lsr.w	r0, r3, r0
 8008c70:	1e55      	subs	r5, r2, #1
 8008c72:	4093      	lsls	r3, r2
 8008c74:	4304      	orrs	r4, r0
 8008c76:	1b4a      	subs	r2, r1, r5
 8008c78:	e78a      	b.n	8008b90 <__ieee754_sqrt+0x5c>
 8008c7a:	4611      	mov	r1, r2
 8008c7c:	e7f0      	b.n	8008c60 <__ieee754_sqrt+0x12c>
 8008c7e:	0064      	lsls	r4, r4, #1
 8008c80:	3201      	adds	r2, #1
 8008c82:	e7ef      	b.n	8008c64 <__ieee754_sqrt+0x130>
 8008c84:	4680      	mov	r8, r0
 8008c86:	e7bf      	b.n	8008c08 <__ieee754_sqrt+0xd4>
 8008c88:	7ff00000 	.word	0x7ff00000

08008c8c <matherr>:
 8008c8c:	2000      	movs	r0, #0
 8008c8e:	4770      	bx	lr

08008c90 <_init>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr

08008c9c <_fini>:
 8008c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c9e:	bf00      	nop
 8008ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ca2:	bc08      	pop	{r3}
 8008ca4:	469e      	mov	lr, r3
 8008ca6:	4770      	bx	lr
